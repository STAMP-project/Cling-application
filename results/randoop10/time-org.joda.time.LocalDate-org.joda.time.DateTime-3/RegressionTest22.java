import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645455278033L);
        mutablePeriod1.addSeconds(93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) mutablePeriod1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "P0Y");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = builder4.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationAfterStart(readableDuration23);
        boolean boolean25 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Chronology chronology26 = interval22.getChronology();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Interval interval28 = interval22.gap(readableInterval27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.lang.String str32 = locale29.getDisplayVariant(locale30);
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray34 = strSet33.toArray();
        boolean boolean35 = interval22.equals((java.lang.Object) objArray34);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645455724879,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=4,MILLISECOND=879,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod1.setMillis((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        mutablePeriod1.set(durationFieldType4, (int) (byte) 0);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) '4');
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod1.setSeconds(53710144);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod33, 1L, (long) 4);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType18, chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter15.withChronology(chronology27);
        org.joda.time.Period period41 = new org.joda.time.Period((-31449600001L), chronology27);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period44 = period41.withDays(53847221);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        int[] intArray22 = chronology11.get((org.joda.time.ReadablePeriod) mutablePeriod17, 1L, (long) 4);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType2, chronology11);
        org.joda.time.PeriodType periodType24 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100, chronology36);
        org.joda.time.Period period38 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType27, chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfHalfday();
        org.joda.time.DurationField durationField41 = chronology36.days();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology36);
        boolean boolean43 = periodType24.equals((java.lang.Object) chronology36);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(chronology36);
        org.joda.time.DateMidnight dateMidnight45 = localDate44.toDateMidnight();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusWeeks(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime65 = dateTime63.withDayOfYear((int) (byte) 1);
        int int66 = dateTime65.getDayOfMonth();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime65.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight61.minus((org.joda.time.ReadableDuration) duration68);
        int int71 = dateMidnight70.getDayOfYear();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType73 = periodType72.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateMidnight70, periodType72);
        org.joda.time.Duration duration75 = duration52.toDuration();
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime77 = dateMidnight76.toMutableDateTime();
        mutableDateTime77.add((long) 1);
        org.joda.time.Chronology chronology80 = mutableDateTime77.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.weekyears();
        org.joda.time.Period period82 = duration52.toPeriod(chronology80);
        org.joda.time.DateTimeField dateTimeField83 = chronology80.halfdayOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 365 + "'", int71 == 365);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 988);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis(150);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withTime((-292275054), 53910953, 1, 41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455724981,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=4,MILLISECOND=981,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("P0Y", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("24", (java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException9 = new java.io.IOException("secondOfMinute", (java.lang.Throwable) iOException4);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int3 = calendar1.getFirstDayOfWeek();
        int int4 = calendar1.getWeekYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455725012,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53713732);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.year();
        org.joda.time.DateMidnight dateMidnight6 = property5.roundCeilingCopy();
        java.lang.String str7 = property5.toString();
        org.joda.time.DateMidnight dateMidnight9 = property5.setCopy(301);
        org.joda.time.DateMidnight dateMidnight11 = property5.addToCopy((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight13 = property5.addToCopy(202);
        org.joda.time.DateMidnight dateMidnight14 = property5.roundCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay15.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean26 = timeOfDay22.isSupported(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfMonth();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        mutablePeriod35.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        java.lang.String str41 = mutablePeriod35.toString();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.setValue(0, 2022);
        mutablePeriod35.addDays(31);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay22.plus((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay48.plusSeconds(100);
        org.joda.time.Chronology chronology53 = timeOfDay48.getChronology();
        org.joda.time.TimeOfDay.Property property54 = timeOfDay48.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay55 = property54.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay56 = property54.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property54.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight59 = dateMidnight14.withField(dateTimeFieldType57, 289);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 289 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[year]" + "'", str7, "Property[year]");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.034S" + "'", str41, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusHours(0);
        int int11 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(130);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        org.joda.time.Weeks weeks23 = period22.toStandardWeeks();
        org.joda.time.Period period25 = period22.minusYears(12);
        int[] intArray26 = period25.getValues();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutablePeriod30.set(durationFieldType31, (int) 'a');
        mutablePeriod30.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        boolean boolean41 = mutablePeriod30.equals((java.lang.Object) int40);
        int int42 = mutablePeriod30.getYears();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        org.joda.time.Period period47 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period49 = period47.minusYears(8);
        org.joda.time.Period period51 = period47.withSeconds(11);
        org.joda.time.Period period53 = period47.minusMillis((int) (short) 100);
        org.joda.time.Period period55 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period57 = period55.minusYears(8);
        org.joda.time.Period period59 = period55.withSeconds(11);
        org.joda.time.Period period61 = period55.minusMillis((int) (short) 100);
        org.joda.time.Period period62 = period47.withFields((org.joda.time.ReadablePeriod) period55);
        int[] intArray65 = chronology44.get((org.joda.time.ReadablePeriod) period55, (-31449600001L), (long) 53633250);
        mutablePeriod30.add((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period69 = period55.withFieldAdded(durationFieldType67, 271);
        boolean boolean70 = period25.isSupported(durationFieldType67);
        int int71 = period25.getDays();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime14.plus((org.joda.time.ReadablePeriod) period25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period74 = period25.withSeconds(435);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455725101,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=101,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 101 + "'", int6 == 101);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-12]");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight3.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight3.withMillis((long) 5);
        org.joda.time.Period period11 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minusMonths((int) (short) -1);
        int int23 = yearMonthDay20.size();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay20.year();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale25);
        int int28 = property24.getMaximumShortTextLength(locale25);
        org.joda.time.YearMonthDay yearMonthDay30 = property24.setCopy(6);
        java.util.Locale locale34 = new java.util.Locale("2022-02-21T00:00:00.000Z", "2022-02-21T00:00:00.000Z", "PT0.034S");
        java.lang.String str35 = property24.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property24.getFieldType();
        org.joda.time.DateMidnight.Property property37 = dateMidnight3.property(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455725121,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=121,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455725121,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=121,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertEquals(locale34.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology15);
        mutableDateTime1.setChronology(chronology15);
        org.joda.time.DurationField durationField20 = chronology15.hours();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology15.getZone();
        int int24 = dateTimeZone22.getStandardOffset((long) 1);
        java.lang.String str25 = dateTimeZone22.toString();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        int int28 = mutableDateTime27.getWeekyear();
        boolean boolean29 = mutableDateTime27.isEqualNow();
        boolean boolean31 = mutableDateTime27.isAfter((long) (byte) 1);
        int int32 = mutableDateTime27.getYearOfEra();
        int int33 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.DateTimeField dateTimeField34 = mutableDateTime27.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(dateTimeField34);
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.addDays(4);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) (byte) 0);
        long long11 = duration10.getMillis();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        long long14 = duration13.getMillis();
        int int15 = duration10.compareTo((org.joda.time.ReadableDuration) duration13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration13);
        int int17 = mutablePeriod16.getYears();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(21);
        org.joda.time.LocalTime localTime8 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property5.addNoWrapToCopy(241);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePeriod) mutablePeriod14, 1L, (long) 4);
        org.joda.time.DurationField durationField20 = chronology8.eras();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology8);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        org.joda.time.DateTime dateTime30 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        boolean boolean32 = mutableDateTime27.isSupported(dateTimeFieldType31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime27.hourOfDay();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        long long44 = dateTimeField42.roundHalfFloor((long) 1);
        mutableDateTime27.setRounding(dateTimeField42, (int) (byte) 0);
        int int47 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) mutableDateTime27);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        java.lang.String str53 = dateTimeZone49.getShortName((long) 53700000);
        java.lang.String str54 = dateTimeZone49.getID();
        mutableDateTime27.setZone(dateTimeZone49);
        org.joda.time.DateTime dateTime56 = yearMonthDay22.toDateTimeAtMidnight(dateTimeZone49);
        boolean boolean58 = dateTimeZone49.equals((java.lang.Object) 53636377);
        org.joda.time.DateMidnight dateMidnight59 = org.joda.time.DateMidnight.now(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) 54065710, dateTimeZone49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withYearOfCentury(853);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 853 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutableDateTime11.add(durationFieldType14, (int) (byte) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime11, periodType17);
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime11.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar20);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay24 = property22.addWrapFieldToCopy(34);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.hourOfDay();
        int int26 = timeOfDay24.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay24.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay24.minusHours(168);
        int int31 = timeOfDay30.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.PeriodType periodType27 = periodType5.withMillisRemoved();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100, chronology39);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType30, chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology39.days();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology39);
        boolean boolean46 = periodType27.equals((java.lang.Object) chronology39);
        org.joda.time.Period period47 = new org.joda.time.Period(62135596800000L, 86399L, periodType2, chronology39);
        org.joda.time.Period period49 = period47.plusMillis(476);
        org.joda.time.Period period50 = period49.normalizedStandard();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMinutes(32769);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 983537258630400000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 365 + "'", int6 == 365);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        int int3 = dateTime1.getYear();
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        int int6 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withWeekyear(53639228);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1969 + "'", int3 == 1969);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        timeZone9.setID("Etc/UTC");
        java.lang.String str12 = timeZone9.getDisplayName();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u534f\u8c03\u4e16\u754c\u65f6\u95f4" + "'", str12, "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.secondOfMinute();
        java.lang.String str8 = property7.getAsString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455725286,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=286,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "5" + "'", str8, "5");
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.joda.time.Period period1 = org.joda.time.Period.millis(288);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        org.joda.time.Period period3 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period5 = period3.minusYears(8);
        org.joda.time.Period period7 = period3.withYears(8);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekyear();
        boolean boolean24 = period3.equals((java.lang.Object) chronology20);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(193320000000000L, chronology20);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.hourOfHalfday();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(194957989002396L, chronology20);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology20);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        mutablePeriod6.setPeriod(32L, (long) (short) -1, chronology26);
        org.joda.time.DurationField durationField28 = chronology26.seconds();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology26);
        mutableDateTime29.addYears((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str25, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        int int9 = mutableDateTime8.getYear();
        org.joda.time.DateTimeField dateTimeField10 = mutableDateTime8.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMinuteOfDay(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNull(dateTimeField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        java.lang.String str6 = property5.getAsString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8" + "'", str6, "8");
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.setSecondOfMinute(1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonthDay9.getFieldTypes();
        org.joda.time.Chronology chronology11 = yearMonthDay9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology11);
        mutableDateTime12.setYear((int) (short) 1);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 917, (long) 674, chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) 1, chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.minusHours(255);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        int int13 = timeZone10.getOffset((long) 'u');
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        int int21 = property18.getMaximumShortTextLength(locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone10, locale19);
        int int24 = timeZone10.getOffset((long) 995);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone10);
        calendar25.set(54065710, 0, (-53949415), 53774237, 34622);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455725396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455725396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455725396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54065710,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=-53949415,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=53774237,MINUTE=34622,SECOND=5,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.plusDays(12);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        int int28 = localDateTime27.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455725413,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=413,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        boolean boolean30 = dateTimeFormatter28.isParser();
        boolean boolean31 = dateTimeFormatter28.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.parse("2022-02-21T14:57:54.484Z/2022-02-21T14:57:54.518Z", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(476L);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours(792);
        java.lang.String str4 = timeOfDay1.toString();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "T00:00:00.476" + "'", str4, "T00:00:00.476");
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100, chronology15);
        boolean boolean17 = durationFieldType4.isSupported(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DurationField durationField19 = chronology15.millis();
        int int21 = durationField19.getValue((long) 54);
        java.lang.String str22 = durationField19.toString();
        long long25 = durationField19.add((long) 53784863, 175);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = localDate26.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate.Property property29 = localDate26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        long long34 = durationField31.add((long) 2, (int) (byte) 0);
        int int35 = durationField19.compareTo(durationField31);
        long long38 = durationField19.getMillis(108000000L, 1645455462785L);
        long long40 = durationField19.getValueAsLong((long) 17814872);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54 + "'", int21 == 54);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DurationField[millis]" + "'", str22, "DurationField[millis]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 53785038L + "'", long25 == 53785038L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 108000000L + "'", long38 == 108000000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 17814872L + "'", long40 == 17814872L);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.TimeOfDay.Property property38 = timeOfDay37.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.minusMinutes(53771358);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight41.toMutableDateTime();
        boolean boolean46 = dateMidnight41.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight41.minusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight41.plusMonths(54);
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight41.getZone();
        long long53 = dateTimeZone51.nextTransition((-1748517800000L));
        org.joda.time.DateTime dateTime54 = timeOfDay37.toDateTimeToday(dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.plus(readablePeriod55);
        org.joda.time.DateTime.Property property57 = dateTime54.monthOfYear();
        int int58 = property57.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1748517800000L) + "'", long53 == (-1748517800000L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(7836, 241);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7836 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455725618,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=618,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("P1D");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfYear();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) 7);
        org.joda.time.Duration duration7 = duration6.toDuration();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Hours hours9 = duration7.toStandardHours();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours9);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 43200000L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(462);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        int int11 = localDateTime10.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePeriod) mutablePeriod30, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField36 = chronology24.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 44, (long) 53710144, chronology24);
        org.joda.time.DurationField durationField38 = durationFieldType14.getField(chronology24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.addSeconds(575);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 575000 + "'", int4 == 575000);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        boolean boolean29 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology31 = dateTimeFormatter3.getChronolgy();
        boolean boolean32 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter3.withPivotYear(50);
        java.util.Locale locale35 = dateTimeFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.parse("millisOfDay", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(locale35);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        org.joda.time.Interval interval13 = yearMonthDay8.toInterval();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod15.setMillis((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 69);
        int int20 = yearMonthDay8.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay8.monthOfYear();
        java.lang.String str22 = property21.getName();
        org.joda.time.YearMonthDay yearMonthDay23 = property21.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = yearMonthDay23.getValue(927);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 927");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationAfterStart(readableDuration23);
        boolean boolean25 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration26 = interval22.toDuration();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.secondOfDay();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = localDate33.toDateMidnight();
        org.joda.time.Chronology chronology36 = localDate33.getChronology();
        org.joda.time.LocalDate localDate38 = localDate33.withYear(365);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        mutableDateTime40.add((long) 1);
        org.joda.time.DateTime dateTime43 = mutableDateTime40.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime40, readableDuration44, periodType45);
        org.joda.time.Chronology chronology47 = mutableDateTime40.getChronology();
        java.lang.Object obj48 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType52 = periodType51.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        int[] intArray71 = chronology60.get((org.joda.time.ReadablePeriod) mutablePeriod66, 1L, (long) 4);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType51, chronology60);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(obj48, chronology60);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone76);
        org.joda.time.DateTime dateTime78 = localDate73.toDateTimeAtMidnight(dateTimeZone76);
        long long81 = dateTimeZone76.convertLocalToUTC((long) 31, true);
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone76);
        mutableDateTime40.setZoneRetainFields(dateTimeZone76);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate(dateTimeZone76);
        org.joda.time.DateTime dateTime86 = localDate33.toDateTimeAtCurrentTime(dateTimeZone76);
        int int87 = dateTime86.getMinuteOfHour();
        org.joda.time.Interval interval88 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 31L + "'", long81 == 31L);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(interval88);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, readableDuration10, periodType11);
        org.joda.time.Chronology chronology13 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean26 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime2.plus((org.joda.time.ReadableDuration) duration21);
        int int28 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = property29.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond(43);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYear(53826860);
        int int36 = localDateTime35.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455725798,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=798,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 798 + "'", int28 == 798);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53826860 + "'", int36 == 53826860);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 0L);
        org.joda.time.LocalDate.Property property2 = localDate1.weekOfWeekyear();
        int int3 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.Period period8 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period10 = period8.minusYears(8);
        org.joda.time.Period period12 = period8.withSeconds(11);
        org.joda.time.Period period14 = period8.minusMillis((int) (short) 100);
        org.joda.time.Period period16 = period14.plusMinutes(0);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        java.lang.String str18 = periodType17.toString();
        org.joda.time.PeriodType periodType19 = periodType17.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(periodType19);
        org.joda.time.Period period21 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Period period23 = duration1.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        long long26 = duration25.getMillis();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        long long29 = duration28.getMillis();
        int int30 = duration25.compareTo((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, readableInstant31);
        boolean boolean33 = duration1.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay34.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean45 = timeOfDay41.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfMonth();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        mutablePeriod54.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        java.lang.String str60 = mutablePeriod54.toString();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadablePeriod) mutablePeriod54);
        mutablePeriod54.setValue(0, 2022);
        mutablePeriod54.addDays(31);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay41.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) (byte) 0);
        long long70 = duration69.getMillis();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        long long73 = duration72.getMillis();
        int int74 = duration69.compareTo((org.joda.time.ReadableDuration) duration72);
        mutablePeriod54.add((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration77 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration69, 300);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Years]" + "'", str18, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.034S" + "'", str60, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("P1D");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.addUnicodeLocaleAttribute("\u82f1\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        int int26 = localDate25.getDayOfMonth();
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromCalendarFields(calendar28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusHours((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        mutableDateTime33.add((long) 1);
        org.joda.time.DateTime dateTime36 = mutableDateTime33.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, readableDuration37, periodType38);
        org.joda.time.Chronology chronology40 = mutableDateTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        int int46 = dateTime45.getDayOfMonth();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime45.minus((org.joda.time.ReadableDuration) duration48);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean53 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime29.plus((org.joda.time.ReadableDuration) duration48);
        int int55 = localDateTime54.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = property56.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = localDate25.isBefore((org.joda.time.ReadablePartial) localDateTime57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455725907,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=907,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 907 + "'", int55 == 907);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod3.getHours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.String str35 = mutablePeriod29.toString();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(chronology37);
        mutablePeriod3.setPeriod((long) 70, chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.034S" + "'", str35, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        int int10 = dateTime9.getDayOfMonth();
        boolean boolean11 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval3.isBeforeNow();
        org.joda.time.Interval interval13 = interval3.toInterval();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.plusYears((int) (byte) 0);
        org.joda.time.Period period20 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period22 = period20.minusYears(8);
        org.joda.time.Period period24 = period20.withSeconds(11);
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight18.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutablePeriod30.set(durationFieldType31, (int) 'a');
        org.joda.time.Period period35 = period20.withField(durationFieldType31, 53700000);
        boolean boolean37 = period35.equals((java.lang.Object) 41);
        org.joda.time.Interval interval38 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfSecond(8);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(278);
        int int10 = dateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int6 = date5.getHours();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date5);
        int int8 = yearMonthDay7.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay7.withDayOfMonth(2118);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2118 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.Chronology chronology38 = timeOfDay33.getChronology();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay33.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay40 = property39.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay42 = property39.addToCopy(872);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = localDate48.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDate.Property property51 = localDate48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.joda.time.DurationField durationField53 = property51.getDurationField();
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate54.isSupported(dateTimeFieldType55);
        org.joda.time.LocalDate.Property property57 = localDate54.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.DurationField durationField59 = property57.getDurationField();
        boolean boolean60 = durationField59.isPrecise();
        long long63 = durationField59.subtract((long) ' ', 0L);
        int int64 = durationField53.compareTo(durationField59);
        long long67 = durationField53.getMillis(702, (long) 53734070);
        org.joda.time.DurationFieldType durationFieldType68 = durationField53.getType();
        boolean boolean69 = mutablePeriod46.isSupported(durationFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay71 = timeOfDay42.withFieldAdded(durationFieldType68, 54060000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 22152960000000L + "'", long67 == 22152960000000L);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.years();
        long long9 = durationField8.getUnitMillis();
        boolean boolean10 = durationField8.isPrecise();
        long long12 = durationField8.getMillis((long) 898);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31556952000L + "'", long9 == 31556952000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 28338142896000L + "'", long12 == 28338142896000L);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        boolean boolean24 = interval14.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        boolean boolean41 = interval31.contains((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval14.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval43 = interval7.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.DateTime dateTime45 = interval43.getEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.addMonths(301);
        mutableDateTime3.setMillisOfDay(48);
        int int9 = mutableDateTime3.getHourOfDay();
        int int10 = mutableDateTime3.getYear();
        int int11 = mutableDateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1995 + "'", int10 == 1995);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        java.lang.String str2 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str2, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(7, 4475149, 0, (int) '#', 54073);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        calendar2.set(5, 53700000, (int) (short) 1, (int) (short) -1, (int) ' ', 828);
        calendar2.setLenient(false);
        calendar2.setFirstDayOfWeek((int) (short) 10);
        java.lang.String str14 = calendar2.getCalendarType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455726212,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=212,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=53700000,WEEK_OF_YEAR=47,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=-1,MINUTE=32,SECOND=828,MILLISECOND=212,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        java.util.Date date1 = new java.util.Date(1645455552985L);
        date1.setMonth(54093893);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Sun Jun 21 14:59:12 GMT 4509846");
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(35417L);
        int int38 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        int int43 = localTime41.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        int int46 = mutableDateTime45.getYearOfEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        mutablePeriod50.set(durationFieldType51, (int) 'a');
        mutablePeriod50.addHours((int) (byte) -1);
        mutablePeriod50.addYears(2022);
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime59 = localTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime61 = localTime59.plusSeconds(100);
        boolean boolean62 = localTime37.isEqual((org.joda.time.ReadablePartial) localTime59);
        int int63 = property5.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.LocalTime localTime65 = localTime59.withMillisOfDay(0);
        org.joda.time.LocalTime localTime67 = localTime65.minusMinutes((int) (short) 100);
        org.joda.time.LocalTime.Property property68 = localTime65.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider71);
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale77 = new java.util.Locale("months", "14:55:24.989", "T09:54:56.975");
        java.util.Locale.setDefault(category73, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str82 = nameProvider71.getName(locale77, "57", "PT0.019S");
        java.lang.String str83 = dateTimeField69.getAsShortText(1645455468689L, locale77);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertTrue("'" + category73 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category73.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale77.toString(), "months_14:55:24.989_T09:54:56.975");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "57" + "'", str83, "57");
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(1, 53633250, 53633250, 517, 50473355, 1);
        java.lang.String str8 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=53633250,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53633250,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=517,MINUTE=50473355,SECOND=1,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=53633250,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53633250,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=517,MINUTE=50473355,SECOND=1,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str8, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=53633250,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53633250,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=517,MINUTE=50473355,SECOND=1,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 34);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 517);
        int int2 = period1.getMonths();
        org.joda.time.Period period4 = period1.withMillis(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval30.withDurationAfterStart(readableDuration31);
        boolean boolean33 = interval14.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration34 = interval30.toDuration();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        java.lang.String str36 = periodType35.toString();
        org.joda.time.PeriodType periodType37 = periodType35.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.months();
        mutablePeriod45.set(durationFieldType46, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.months();
        boolean boolean50 = mutablePeriod45.isSupported(durationFieldType49);
        int int51 = mutablePeriod41.indexOf(durationFieldType49);
        java.lang.String str52 = durationFieldType49.getName();
        int int53 = mutablePeriod39.get(durationFieldType49);
        boolean boolean54 = periodType37.isSupported(durationFieldType49);
        org.joda.time.PeriodType periodType55 = periodType37.withSecondsRemoved();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration34, periodType55);
        org.joda.time.PeriodType periodType57 = periodType55.withMonthsRemoved();
        org.joda.time.PeriodType periodType58 = periodType57.withMonthsRemoved();
        org.joda.time.PeriodType periodType59 = periodType57.withMinutesRemoved();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[Years]" + "'", str36, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "months" + "'", str52, "months");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(2022);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.PeriodType periodType27 = mutablePeriod21.getPeriodType();
        mutablePeriod21.setMinutes(134);
        org.joda.time.DateTime dateTime30 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths(950);
        boolean boolean33 = dateTime30.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) boolean33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        boolean boolean3 = localTime0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getVariant();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.setFirstDayOfWeek(53637206);
        // The following exception was thrown during execution in test generation
        try {
            calendar13.clear(53859908);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53859908");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455726375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53637206,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        org.joda.time.Period period2 = new org.joda.time.Period(1669040701000L, (long) 9);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.addCopy(53710144);
        org.joda.time.LocalTime localTime13 = property5.addCopy(476);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra(134);
        boolean boolean30 = interval15.contains((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.withCenturyOfEra(66);
        int int33 = dateTime32.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime15 = property14.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = property14.withMaximumValue();
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        int int19 = dateTime18.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455726424,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=424,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15, filteringMode16);
        boolean boolean19 = strSet15.remove((java.lang.Object) 53);
        boolean boolean21 = strSet15.remove((java.lang.Object) (-363858660L));
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode16.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.addWrapField(4);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.getMutableDateTime();
        mutableDateTime10.addHours(899);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        int int3 = dateMidnight1.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean10 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutableDateTime12.add(durationFieldType15, (int) (byte) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) mutableDateTime12, periodType18);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100, chronology32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType23, chronology32);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 31, periodType18, chronology32);
        org.joda.time.DurationField durationField36 = chronology32.months();
        long long40 = chronology32.add((long) 50473355, (long) 995, 208);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology32);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 50680315L + "'", long40 == 50680315L);
        org.junit.Assert.assertNotNull(dateMidnight41);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay17 = property12.withMaximumValue();
        int int18 = property12.get();
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addToCopy(134);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay20.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay23 = property21.addWrapFieldToCopy(476);
        org.joda.time.DurationField durationField24 = property21.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455726576,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=576,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455726576,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=576,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutableDateTime1.addHours(8);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.withDayOfWeek(7);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight17.withCenturyOfEra(21);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        org.joda.time.DateTime dateTime30 = mutableDateTime27.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime27, readableDuration31, periodType32);
        org.joda.time.Chronology chronology34 = mutableDateTime27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        int int40 = dateTime39.getDayOfMonth();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean47 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 10, chronology56);
        org.joda.time.Period period59 = duration42.toPeriod(chronology56);
        org.joda.time.Duration duration60 = duration42.toDuration();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType63 = periodType62.withMonthsRemoved();
        int int64 = periodType63.size();
        org.joda.time.PeriodType periodType65 = periodType63.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration42, periodType65);
        org.joda.time.MutablePeriod mutablePeriod67 = mutablePeriod66.toMutablePeriod();
        int int68 = mutablePeriod66.getYears();
        int int69 = mutablePeriod66.getDays();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.secondOfMinute();
        int int8 = localDateTime5.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        int int12 = localDateTime5.indexOf(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType9.getDurationType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455726623,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=623,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.minusMinutes(301);
        org.joda.time.Chronology chronology9 = timeOfDay1.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 53713891, chronology9);
        org.joda.time.DurationField durationField12 = chronology9.years();
        long long13 = durationField12.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 31556952000L + "'", long13 == 31556952000L);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withCenturyOfEra(134);
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(12);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((int) (byte) 100, 12, (int) '#', 10, (int) (byte) 10, 4, 2, (int) (short) -1);
        mutablePeriod23.setSeconds((int) '4');
        mutablePeriod23.setHours(440);
        org.joda.time.DateTime dateTime28 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property34 = localTime33.minuteOfHour();
        org.joda.time.LocalTime localTime35 = property34.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime36 = property34.withMinimumValue();
        org.joda.time.LocalTime localTime37 = property34.withMaximumValue();
        org.joda.time.LocalTime localTime39 = property34.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime41 = property34.addWrapFieldToCopy(53760000);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromCalendarFields(calendar44);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now();
        int int47 = localTime46.size();
        org.joda.time.LocalTime.Property property48 = localTime46.minuteOfHour();
        org.joda.time.LocalTime localTime50 = property48.addCopy((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean52 = localTime50.isSupported(dateTimeFieldType51);
        org.joda.time.LocalTime localTime54 = localTime45.withField(dateTimeFieldType51, 12);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime42.property(dateTimeFieldType51);
        boolean boolean56 = localTime41.isSupported(dateTimeFieldType51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = dateTime8.withField(dateTimeFieldType51, 53912309);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53912309 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645455726649,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=649,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.String str9 = mutablePeriod3.toString();
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod12.setMillis((int) (short) 100);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.String str25 = mutablePeriod19.toString();
        java.lang.String str26 = mutablePeriod19.toString();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod28.setMillis((int) (short) 100);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        int[] intArray32 = mutablePeriod28.getValues();
        mutablePeriod12.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        int int34 = mutablePeriod28.getYears();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean36 = mutablePeriod28.isSupported(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.034S" + "'", str9, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.034S" + "'", str10, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.034S" + "'", str25, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(36119663);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        calendar1.set((int) '4', 53700000, 1970);
        int int15 = calendar1.getWeekYear();
        int int16 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=141159903846152709,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4475149,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=103,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=709,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4475149 + "'", int15 == 4475149);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.Chronology chronology3 = timeOfDay1.getChronology();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(1645455239728L, chronology3);
        org.joda.time.DurationField durationField5 = chronology3.years();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = durationField5.add(1645455533138L, 1645455701886L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455701886");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property12.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property12.getFieldType();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withField(dateTimeFieldType14, 31);
        java.util.Date date17 = localDateTime8.toDate();
        int int18 = localDateTime8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455726761,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=761,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 761 + "'", int6 == 761);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 21 15:02:06 GMT 36522");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 365 + "'", int18 == 365);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withSeconds(11);
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period(4482732, 53860446, 90, 19, 858, 500, 54070776, 53955516, periodType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        boolean boolean9 = mutableDateTime4.isSupported(dateTimeFieldType8);
        int int10 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plus(readableDuration13);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateMidnight11);
        int int16 = dateMidnight11.getHourOfDay();
        org.joda.time.DateTime dateTime17 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateMidnight.Property property18 = dateMidnight11.dayOfYear();
        org.joda.time.DateMidnight.Property property19 = dateMidnight11.weekyear();
        int int20 = dateMidnight11.getDayOfMonth();
        java.lang.Object obj21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(obj21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) ' ', chronology24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod29.setDays(0);
        mutablePeriod29.clear();
        int int37 = mutablePeriod29.size();
        org.joda.time.Chronology chronology39 = null;
        mutablePeriod29.setPeriod((-50399969L), chronology39);
        org.joda.time.LocalTime localTime42 = localTime22.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod29, 69);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.yearOfCentury();
        int int47 = dateMidnight45.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = dateMidnight45.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight45.withCenturyOfEra(0);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusWeeks(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfYear((int) (byte) 1);
        int int67 = dateTime66.getDayOfMonth();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime70 = dateTime66.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight62.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Period period72 = duration69.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight56, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration75 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) (byte) 100);
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology79 = dateMidnight78.getChronology();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight78.withDayOfMonth(8);
        boolean boolean82 = dateMidnight77.isBefore((org.joda.time.ReadableInstant) dateMidnight81);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        mutableDateTime6.setMonthOfYear(1);
        mutableDateTime6.addWeekyears(4);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime6.toMutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutablePeriod21.set(durationFieldType22, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        boolean boolean26 = mutablePeriod21.isSupported(durationFieldType25);
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.hours();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.era();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.monthOfYear();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial55 = null;
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("Property[year]");
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.String str60 = dateTimeField54.getAsText(readablePartial55, 1, locale58);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(locale63);
        java.lang.String str65 = locale62.getDisplayVariant(locale63);
        java.lang.String str67 = locale62.getExtension('u');
        java.lang.String str68 = dateTimeField54.getAsText((long) 'x', locale62);
        java.lang.String str69 = dateTimeZone43.getShortName(32L, locale62);
        int int70 = dateTimeField41.getMaximumShortTextLength(locale62);
        java.lang.String str71 = locale62.getDisplayName();
        java.lang.String str72 = dateTime27.toString("\u671d\u9c9c\u6587", locale62);
        java.lang.String str73 = locale62.getISO3Country();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str7, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645455726861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "70" + "'", str68, "70");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (China)" + "'", str71, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u671d\u9c9c\u6587" + "'", str72, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CHN" + "'", str73, "CHN");
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.withCenturyOfEra(40);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour(247);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 247 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455726885,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=885,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(chronology0);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType8, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.Period period31 = new org.joda.time.Period((-31449600001L), chronology17);
        org.joda.time.Period period32 = period31.negated();
        org.joda.time.Hours hours33 = period31.toStandardHours();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period36 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period38 = period36.minusYears(8);
        int int39 = period38.getDays();
        int int40 = period38.size();
        org.joda.time.Period period41 = period31.plus((org.joda.time.ReadablePeriod) period38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((java.lang.Object) period41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusHours(0);
        int int11 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(130);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        org.joda.time.Weeks weeks23 = period22.toStandardWeeks();
        org.joda.time.Period period25 = period22.minusYears(12);
        int[] intArray26 = period25.getValues();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutablePeriod30.set(durationFieldType31, (int) 'a');
        mutablePeriod30.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        boolean boolean41 = mutablePeriod30.equals((java.lang.Object) int40);
        int int42 = mutablePeriod30.getYears();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        org.joda.time.Period period47 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period49 = period47.minusYears(8);
        org.joda.time.Period period51 = period47.withSeconds(11);
        org.joda.time.Period period53 = period47.minusMillis((int) (short) 100);
        org.joda.time.Period period55 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period57 = period55.minusYears(8);
        org.joda.time.Period period59 = period55.withSeconds(11);
        org.joda.time.Period period61 = period55.minusMillis((int) (short) 100);
        org.joda.time.Period period62 = period47.withFields((org.joda.time.ReadablePeriod) period55);
        int[] intArray65 = chronology44.get((org.joda.time.ReadablePeriod) period55, (-31449600001L), (long) 53633250);
        mutablePeriod30.add((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period69 = period55.withFieldAdded(durationFieldType67, 271);
        boolean boolean70 = period25.isSupported(durationFieldType67);
        int int71 = period25.getDays();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime14.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withMonthOfYear(363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 363 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455726954,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=6,MILLISECOND=954,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 954 + "'", int6 == 954);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-12]");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology15);
        mutableDateTime1.setChronology(chronology15);
        org.joda.time.DurationField durationField20 = chronology15.hours();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology15);
        int int23 = dateTime22.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight8 = property5.addToCopy(18);
        int int9 = property5.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight10 = property5.withMaximumValue();
        boolean boolean11 = dateMidnight10.isBeforeNow();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundCeilingCopy();
        int int4 = localDate3.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate6 = localDate3.plusWeeks(53823772);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter9.withOffsetParsed();
        boolean boolean36 = dateTimeFormatter35.isParser();
        boolean boolean37 = localDate3.equals((java.lang.Object) dateTimeFormatter35);
        java.io.Writer writer38 = null;
        java.util.Date date44 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int45 = date44.getYear();
        date44.setMinutes(53636377);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        mutableDateTime49.add((long) 1);
        org.joda.time.DateTime dateTime52 = mutableDateTime49.toDateTimeISO();
        java.util.Date date53 = mutableDateTime49.toDate();
        boolean boolean54 = date44.after(date53);
        java.lang.String str55 = date53.toGMTString();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.fromDateFields(date53);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter35.printTo(writer38, (org.joda.time.ReadablePartial) localDateTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Wed Aug 26 14:37:00 GMT 2009");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "21 Feb 2022 00:00:00 GMT" + "'", str55, "21 Feb 2022 00:00:00 GMT");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 8);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.DateTime.Property property3 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(988);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight4 = property1.roundCeilingCopy();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plusYears(49);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfCentury();
        int int8 = dateMidnight6.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight14 = property11.addToCopy(18);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfEra();
        org.joda.time.LocalDate localDate16 = dateMidnight14.toLocalDate();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100, chronology28);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType19, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.weekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight14.toMutableDateTime(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(674, 53730966, 296, 697, 481000, 417, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 697 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        boolean boolean30 = dateTimeFormatter29.isParser();
        org.joda.time.Chronology chronology31 = dateTimeFormatter29.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter29.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = dateTimeFormatter32.getPrinter();
        java.lang.Integer int34 = dateTimeFormatter32.getPivotYear();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimePrinter33);
        org.junit.Assert.assertNull(int34);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.yearOfCentury();
        int int4 = dateMidnight2.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        boolean boolean11 = dateMidnight2.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight2.withCenturyOfEra(0);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusWeeks(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime23.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight19.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period29 = duration26.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration32 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (byte) 100);
        java.lang.String str33 = duration32.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0S" + "'", str33, "PT0S");
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        java.util.Date date9 = localDateTime5.toDate();
        date9.setSeconds((int) 'x');
        int int12 = date9.getDate();
        date9.setSeconds(0);
        date9.setSeconds(41);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455727146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=7,MILLISECOND=146,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 146 + "'", int6 == 146);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Feb 21 15:04:41 GMT 36522");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay1 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        boolean boolean29 = dateTimeFormatter3.isOffsetParsed();
        java.lang.Integer int30 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter3.withDefaultYear(134);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.parse("Property[yearOfCentury]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeParser33);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(122);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury(167);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 167 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((-1));
        int int12 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime16.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime11.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property24 = dateTime11.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfMonth(8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        int int28 = dateMidnight13.get(dateTimeFieldType26);
        int int29 = localDateTime10.indexOf(dateTimeFieldType26);
        int int30 = localDateTime6.get(dateTimeFieldType26);
        org.joda.time.LocalDateTime.Property property31 = localDateTime6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(1L, dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate34.monthOfYear();
        org.joda.time.LocalDate localDate36 = property35.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate38 = localDate36.minusWeeks(40);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDate38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455727235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=7,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455727236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=7,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(941, 899, 27, 479);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 941 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration8, (org.joda.time.ReadableInstant) dateTime10, periodType13);
        org.joda.time.DateTime dateTime16 = dateTime10.withMonthOfYear((int) (short) 1);
        boolean boolean17 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight0.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.minusDays(1439);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.hourOfDay();
        mutableDateTime24.setMillisOfDay(239);
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime24.getZone();
        org.joda.time.DateTime dateTime29 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645801078862L);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, readableDuration6, periodType7);
        org.joda.time.Chronology chronology9 = mutableDateTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime14.minus((org.joda.time.ReadableDuration) duration17);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean22 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Days days23 = duration21.toStandardDays();
        mutableDateTime0.add((org.joda.time.ReadablePeriod) days23, 1);
        mutableDateTime0.addMinutes(0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime0.weekOfWeekyear();
        int int30 = mutableDateTime0.getEra();
        mutableDateTime0.add((long) 53878243);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.yearOfCentury();
        int int42 = dateMidnight40.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = dateMidnight40.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight40.yearOfCentury();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.months();
        mutablePeriod54.set(durationFieldType55, (int) 'a');
        mutablePeriod54.addHours((int) (byte) -1);
        mutablePeriod54.addYears(2022);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadablePeriod) mutablePeriod54);
        boolean boolean63 = interval39.isBefore((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTime dateTime64 = interval39.getStart();
        org.joda.time.Period period68 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period70 = period68.minusYears(8);
        org.joda.time.Period period72 = period68.withSeconds(11);
        org.joda.time.PeriodType periodType73 = period68.getPeriodType();
        org.joda.time.Period period74 = new org.joda.time.Period(53637206L, (long) 53783103, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime64, periodType75);
        mutablePeriod76.setPeriod(62135596800059L);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        int int29 = mutableDateTime23.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.plus(readableDuration32);
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime36, readableDuration40, periodType41);
        org.joda.time.Chronology chronology43 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear((int) (byte) 1);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime52 = dateTime48.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean56 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Days days57 = duration55.toStandardDays();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration55);
        boolean boolean59 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight60.toMutableDateTime();
        int int62 = mutableDateTime61.getYearOfEra();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.months();
        mutablePeriod66.set(durationFieldType67, (int) 'a');
        mutablePeriod66.addHours((int) (byte) -1);
        mutablePeriod66.addYears(2022);
        mutableDateTime61.add((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime61.year();
        mutableDateTime61.add((long) 301);
        boolean boolean78 = duration55.equals((java.lang.Object) mutableDateTime61);
        int int79 = mutableDateTime61.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime61.millisOfSecond();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime61.weekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 21 + "'", int29 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 82800 + "'", int79 == 82800);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        date5.setMinutes((int) (short) -1);
        int int11 = date5.getHours();
        java.time.Instant instant12 = date5.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        date13.setDate(950);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue May 04 02:59:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Dec 05 02:59:00 GMT 1917");
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName((long) 100);
        org.joda.time.Interval interval6 = localDate0.toInterval(dateTimeZone3);
        org.joda.time.Chronology chronology7 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfMonth();
        long long11 = dateTimeField8.add((long) 14, (long) 54010168);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4666478515200014L + "'", long11 == 4666478515200014L);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        date5.setMinutes((int) (short) -1);
        int int11 = date5.getHours();
        int int12 = date5.getTimezoneOffset();
        int int13 = date5.getMonth();
        date5.setHours(42);
        date5.setYear(53740405);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri May 05 18:59:00 GMT 53742305");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        java.lang.String str29 = locale26.getDisplayVariant(locale27);
        int int30 = property25.getMaximumTextLength(locale26);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        java.lang.String str34 = locale31.getDisplayVariant(locale32);
        java.lang.String str35 = locale26.getDisplayCountry(locale32);
        java.lang.String str36 = dateTimeZone21.getShortName((long) 72, locale32);
        long long38 = dateTimeZone21.convertUTCToLocal((long) 53806543);
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(dateTimeZone21);
        boolean boolean41 = dateMidnight39.equals((java.lang.Object) (-719161L));
        org.joda.time.Duration duration42 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.withDayOfWeek(339);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 339 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455727437,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=7,MILLISECOND=437,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455727437,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=7,MILLISECOND=437,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str35, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 53806543L + "'", long38 == 53806543L);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate0.withYear(319);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks(122);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        mutableDateTime3.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime3.dayOfYear();
        int int10 = property9.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundFloor();
        boolean boolean12 = dateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.setMillis((long) 12);
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.Interval interval24 = localDate20.toInterval(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime19.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight15.withZoneRetainFields(dateTimeZone23);
        boolean boolean28 = dateTimeZone23.isStandardOffset((-1748517800000L));
        mutableDateTime11.setZone(dateTimeZone23);
        java.lang.String str30 = dateTimeZone23.toString();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 0L);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(54);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears(53740405);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.dayOfYear();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate localDate17 = localDate13.withWeekyear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean19 = localDate17.isSupported(durationFieldType18);
        java.lang.String str20 = durationFieldType18.toString();
        mutableDateTime9.add(durationFieldType18, 517);
        boolean boolean23 = localDate5.isSupported(durationFieldType18);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DateTime dateTime29 = mutableDateTime26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime26, readableDuration30, periodType31);
        java.lang.String str33 = mutableDateTime26.toString();
        org.joda.time.Chronology chronology34 = mutableDateTime26.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(chronology42);
        org.joda.time.DurationField durationField44 = chronology42.weeks();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology42);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str49 = dateTimeZone47.getName((long) 100);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = mutableDateTime45.toDateTime(dateTimeZone47);
        mutableDateTime26.setZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 666, dateTimeZone47);
        long long55 = dateTimeZone47.previousTransition((long) 440);
        boolean boolean57 = dateTimeZone47.isStandardOffset(1645455407699L);
        org.joda.time.DateTime dateTime58 = localDate5.toDateTimeAtMidnight(dateTimeZone47);
        boolean boolean60 = dateTimeZone47.isStandardOffset((long) 16840340);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyears" + "'", str20, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str33, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 440L + "'", long55 == 440L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.DateTime dateTime8 = mutableDateTime5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        boolean boolean10 = mutableDateTime5.isSupported(dateTimeFieldType9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.hourOfDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyearOfCentury();
        long long22 = dateTimeField20.roundHalfFloor((long) 1);
        mutableDateTime5.setRounding(dateTimeField20, (int) (byte) 0);
        int int25 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((-2316956400000000L), dateTimeZone2);
        long long28 = dateTimeZone2.nextTransition(2L);
        long long31 = dateTimeZone2.adjustOffset((long) 53955715, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 53955715L + "'", long31 == 53955715L);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, readableDuration13, periodType14);
        org.joda.time.Chronology chronology16 = mutableDateTime9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean29 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration28);
        long long30 = duration24.getMillis();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration24);
        java.lang.Object obj33 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod51, 1L, (long) 4);
        org.joda.time.Period period57 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType36, chronology45);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(obj33, chronology45);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate58.toDateTimeAtMidnight(dateTimeZone61);
        int int65 = dateTimeZone61.getStandardOffset((long) 23);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(1645455245049L, dateTimeZone61);
        long long70 = dateTimeZone61.convertLocalToUTC((long) 17, false, 292278993L);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone61);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.weekOfWeekyear();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours(1645455239530L);
        mutableDateTime71.add((org.joda.time.ReadableDuration) duration74);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType79 = periodType78.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 5, 292278993L, periodType78);
        org.joda.time.PeriodType periodType81 = periodType78.withWeeksRemoved();
        org.joda.time.Period period82 = duration74.toPeriod(periodType78);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period82);
        int int84 = mutableDateTime1.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 17L + "'", long70 == 17L);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455727574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=7,MILLISECOND=574,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        java.util.Date date3 = dateTime1.toDate();
        date3.setSeconds(18);
        java.lang.String str6 = date3.toGMTString();
        java.util.Date date13 = new java.util.Date(53715795, 53670933, 53670257, 53676724, (int) '#', 96);
        boolean boolean14 = date3.after(date13);
        java.lang.Object obj15 = date3.clone();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 23:59:18 GMT 1969");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "31 Dec 1969 23:59:18 GMT" + "'", str6, "31 Dec 1969 23:59:18 GMT");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sun May 01 04:36:36 GMT 58343340");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "Wed Dec 31 23:59:18 GMT 1969");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "Wed Dec 31 23:59:18 GMT 1969");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "Wed Dec 31 23:59:18 GMT 1969");
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfWeek(7);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withCenturyOfEra(21);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDayOfMonth(8);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfMonth();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.String str25 = mutablePeriod19.toString();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.setValue(0, 2022);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        long long35 = duration34.getMillis();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        long long38 = duration37.getMillis();
        int int39 = duration34.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration41 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 2);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight10.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        mutableDateTime44.add((long) 1);
        org.joda.time.DateTime dateTime47 = mutableDateTime44.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime44, readableDuration48, periodType49);
        org.joda.time.Chronology chronology51 = mutableDateTime44.getChronology();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear((int) (byte) 1);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime56.minus((org.joda.time.ReadableDuration) duration59);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration41.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = localDate63.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDate.Property property66 = localDate63.yearOfEra();
        org.joda.time.Interval interval67 = localDate63.toInterval();
        org.joda.time.DateTime dateTime68 = localDate63.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(2022);
        org.joda.time.Period period71 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) dateMidnight0);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight0.withYearOfEra(134);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.034S" + "'", str25, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateMidnight75);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration8, (org.joda.time.ReadableInstant) dateTime10, periodType13);
        org.joda.time.DateTime dateTime16 = dateTime10.withMonthOfYear((int) (short) 1);
        boolean boolean17 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfDay(4);
        org.joda.time.DateTime dateTime21 = dateTime16.withMillisOfDay(32770);
        int int22 = dateTime21.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69 + "'", int22 == 69);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime19.toMutableDateTime();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        boolean boolean36 = dateMidnight33.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property38 = dateMidnight33.property(dateTimeFieldType37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        java.lang.String str41 = mutableDateTime40.toString();
        mutableDateTime40.setMonthOfYear(1);
        mutableDateTime40.addWeekyears(4);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime40.toMutableDateTime(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight33.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = localDate32.toDateTimeAtStartOfDay(dateTimeZone47);
        mutableDateTime29.setZone(dateTimeZone47);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime29.weekyear();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.months();
        mutablePeriod57.set(durationFieldType58, (int) 'a');
        org.joda.time.ReadableDuration readableDuration61 = null;
        mutablePeriod57.add(readableDuration61);
        mutablePeriod57.setPeriod(62135596799930L, 52L);
        mutablePeriod57.setWeeks(856);
        mutablePeriod57.addMonths(53769898);
        mutableDateTime29.add((org.joda.time.ReadablePeriod) mutablePeriod57, 15);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime29.millisOfSecond();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime29.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str26, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str41, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        mutableDateTime1.addYears(53633250);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.hourOfDay();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology28);
        mutableDateTime14.setChronology(chronology28);
        org.joda.time.DurationField durationField33 = chronology28.hours();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology28);
        int int35 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime1.add(0L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        mutableDateTime1.setTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime1.setZone(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = period31.negated();
        org.joda.time.Period period34 = period32.minusMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.joda.time.Period period37 = period34.minusYears(885);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(53875479);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        java.util.GregorianCalendar gregorianCalendar13 = dateMidnight12.toGregorianCalendar();
        int int14 = gregorianCalendar13.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.withDayOfMonth((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyearOfCentury();
        org.joda.time.Period period22 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period24 = period22.minusYears(8);
        org.joda.time.Period period26 = period22.withSeconds(11);
        org.joda.time.Period period28 = period22.minusMillis((int) (short) 100);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period32 = period30.minusYears(8);
        org.joda.time.Period period34 = period30.withSeconds(11);
        org.joda.time.Period period36 = period30.minusMillis((int) (short) 100);
        org.joda.time.Period period37 = period22.withFields((org.joda.time.ReadablePeriod) period30);
        int[] intArray40 = chronology19.get((org.joda.time.ReadablePeriod) period30, (-31449600001L), (long) 53633250);
        org.joda.time.Period period42 = period30.withHours(11);
        org.joda.time.Period period44 = period42.minusDays(971);
        org.joda.time.Period period46 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period48 = period46.minusYears(8);
        org.joda.time.Period period50 = period46.withSeconds(11);
        org.joda.time.Period period52 = period46.minusMillis((int) (short) 100);
        org.joda.time.Period period54 = period52.plusMinutes(0);
        org.joda.time.Period period55 = period44.withFields((org.joda.time.ReadablePeriod) period54);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay17.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.withYear(32);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight7 = property5.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property5.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight9 = property5.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight10 = property5.withMaximumValue();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(57, (int) (byte) 100, 936, 539);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        java.lang.String str18 = dateMidnight10.toString("\u516d\u6708");
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u516d\u6708" + "'", str18, "\u516d\u6708");
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = localTime8.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime8.minus(readablePeriod10);
        org.joda.time.LocalTime localTime13 = localTime8.minusHours(52);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime17.plusSeconds(10);
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) (short) -1);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusWeeks(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        int int33 = dateTime32.getDayOfMonth();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime36 = dateTime32.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight28.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period38 = duration35.toPeriod();
        org.joda.time.DateTime dateTime40 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) 'a');
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now();
        int int42 = localTime41.size();
        org.joda.time.LocalTime.Property property43 = localTime41.minuteOfHour();
        org.joda.time.LocalTime localTime45 = property43.addCopy((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean47 = localTime45.isSupported(dateTimeFieldType46);
        org.joda.time.DateTime dateTime49 = dateTime17.withField(dateTimeFieldType46, (int) (byte) 1);
        org.joda.time.LocalTime.Property property50 = localTime8.property(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration51 = new org.joda.time.Duration((java.lang.Object) localTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration17 = interval14.toDuration();
        java.lang.String str18 = duration17.toString();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDayOfMonth(8);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        mutablePeriod31.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.String str37 = mutablePeriod31.toString();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.setValue(0, 2022);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getMillis();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) 0);
        long long50 = duration49.getMillis();
        int int51 = duration46.compareTo((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration53 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration49, 2);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight22.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight55.toMutableDateTime();
        mutableDateTime56.add((long) 1);
        org.joda.time.DateTime dateTime59 = mutableDateTime56.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime56, readableDuration60, periodType61);
        org.joda.time.Chronology chronology63 = mutableDateTime56.getChronology();
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(chronology63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfYear((int) (byte) 1);
        int int69 = dateTime68.getDayOfMonth();
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime72 = dateTime68.minus((org.joda.time.ReadableDuration) duration71);
        mutableDateTime64.add((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration53.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime80 = dateTime78.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime82 = dateTime80.plusMinutes(20);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType84 = periodType83.withMillisRemoved();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime76, (org.joda.time.ReadableInstant) dateTime82, periodType83);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration88 = duration74.minus(34196642806L);
        org.joda.time.Duration duration89 = duration17.minus((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Duration duration91 = duration88.plus((long) 32766750);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.034S" + "'", str37, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration91);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(100);
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        int int24 = localTime22.getSecondOfMinute();
        int int25 = localTime22.getSecondOfMinute();
        int int26 = localTime22.getSecondOfMinute();
        org.joda.time.LocalTime.Property property27 = localTime22.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 47 + "'", int24 == 47);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 47 + "'", int25 == 47);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 47 + "'", int26 == 47);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.DateTime dateTime8 = mutableDateTime5.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, readableDuration9, periodType10);
        org.joda.time.Chronology chronology12 = mutableDateTime5.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight3.toMutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundFloor();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks(0);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        mutablePeriod25.set(durationFieldType26, (int) 'a');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100, chronology37);
        boolean boolean39 = durationFieldType26.isSupported(chronology37);
        org.joda.time.DateTime dateTime41 = dateTime18.withFieldAdded(durationFieldType26, 32772);
        boolean boolean42 = period15.isSupported(durationFieldType26);
        int int43 = period15.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period45 = period15.withWeeks(53697926);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Interval interval27 = interval26.toInterval();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        boolean boolean44 = interval34.contains((org.joda.time.ReadableInterval) interval42);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        boolean boolean61 = interval51.contains((org.joda.time.ReadableInterval) interval59);
        boolean boolean62 = interval34.overlaps((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Interval interval63 = interval27.overlap((org.joda.time.ReadableInterval) interval51);
        boolean boolean64 = localDate18.equals((java.lang.Object) interval63);
        org.joda.time.DateMidnight dateMidnight66 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate71 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property72 = localDate71.dayOfYear();
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Interval interval75 = localDate71.toInterval(dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime70.toMutableDateTime(dateTimeZone74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight66.withZoneRetainFields(dateTimeZone74);
        java.lang.String str79 = dateTimeZone74.getNameKey(10L);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 11, dateTimeZone74);
        org.joda.time.DateTime dateTime81 = localDate18.toDateTimeAtMidnight(dateTimeZone74);
        int int83 = dateTimeZone74.getOffsetFromLocal(3599999L);
        org.joda.time.Interval interval84 = yearMonthDay16.toInterval(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(interval84);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property4.setCopy((int) (short) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        boolean boolean16 = localDateTime12.equals((java.lang.Object) dateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withDayOfYear(16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.plusMinutes(541);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.plusMillis(301);
        org.joda.time.Chronology chronology23 = localDateTime12.getChronology();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455728085,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=85,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        mutableDateTime1.setChronology(chronology18);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology23 = mutableDateTime1.getChronology();
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromCalendarFields(calendar25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.withDayOfMonth(8);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime36.plusSeconds(10);
        org.joda.time.DateTime dateTime41 = dateTime36.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property43 = dateTime41.property(dateTimeFieldType42);
        int int44 = dateMidnight29.get(dateTimeFieldType42);
        int int45 = localDateTime26.indexOf(dateTimeFieldType42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withDayOfWeek(5);
        long long49 = chronology23.set((org.joda.time.ReadablePartial) localDateTime47, 0L);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property50.setCopy(52569588);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455728100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645801328100L + "'", long49 == 1645801328100L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        int int5 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekOfWeekyear();
        int int9 = property8.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.addWrapField(365);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 2059);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(32772);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        int int8 = property7.getLeapAmount();
        java.lang.String str9 = property7.getAsString();
        org.joda.time.DateTime dateTime10 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "23" + "'", str9, "23");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfWeek(7);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withCenturyOfEra(21);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths(6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateMidnight6.toString("2022-11-09T15:02:04.681");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = localDate8.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        java.lang.String str14 = periodType13.toString();
        org.joda.time.PeriodType periodType15 = periodType13.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutablePeriod23.set(durationFieldType24, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        boolean boolean28 = mutablePeriod23.isSupported(durationFieldType27);
        int int29 = mutablePeriod19.indexOf(durationFieldType27);
        java.lang.String str30 = durationFieldType27.getName();
        int int31 = mutablePeriod17.get(durationFieldType27);
        boolean boolean32 = periodType15.isSupported(durationFieldType27);
        org.joda.time.PeriodType periodType33 = periodType15.withSecondsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.Period period35 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight11, periodType33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology37 = dateMidnight36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        mutablePeriod41.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        java.lang.String str47 = mutablePeriod41.toString();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight36.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        java.util.GregorianCalendar gregorianCalendar49 = dateMidnight48.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minus(1645455273724L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval54 = interval52.withStart(readableInstant53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Years]" + "'", str14, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "months" + "'", str30, "months");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.034S" + "'", str47, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        int int8 = dateMidnight0.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight0.withWeekyear(899);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.setDefault(locale11);
        boolean boolean13 = dateMidnight10.equals((java.lang.Object) locale11);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("T02:59:00.000", (double) 1645455697079L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645455697079E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        long long6 = java.util.Date.UTC(680, 50486009, 55, 54115265, 8, (-27410393));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 132979422078487000L + "'", long6 == 132979422078487000L);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 364);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        org.joda.time.Weeks weeks10 = period9.toStandardWeeks();
        org.joda.time.Period period12 = period9.minusYears(12);
        org.joda.time.Duration duration13 = period9.toStandardDuration();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone16);
        mutableDateTime17.add((long) 21);
        org.joda.time.Period period20 = duration13.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        int int23 = dateMidnight21.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withYearOfEra(72);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        java.lang.String str30 = periodType29.toString();
        org.joda.time.PeriodType periodType31 = periodType29.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.months();
        mutablePeriod39.set(durationFieldType40, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        boolean boolean44 = mutablePeriod39.isSupported(durationFieldType43);
        int int45 = mutablePeriod35.indexOf(durationFieldType43);
        java.lang.String str46 = durationFieldType43.getName();
        int int47 = mutablePeriod33.get(durationFieldType43);
        boolean boolean48 = periodType31.isSupported(durationFieldType43);
        org.joda.time.PeriodType periodType49 = periodType31.withSecondsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withMinutesRemoved();
        java.lang.String str51 = periodType50.getName();
        org.joda.time.Period period52 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight25, periodType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period54 = period52.minusWeeks(857);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[Years]" + "'", str30, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "months" + "'", str46, "months");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Years" + "'", str51, "Years");
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        mutablePeriod3.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        boolean boolean14 = mutablePeriod3.equals((java.lang.Object) int13);
        int int15 = mutablePeriod3.getYears();
        mutablePeriod3.addYears(54073);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.DurationField durationField28 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology14.secondOfMinute();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("P97MT0.120S");
        int int2 = timeZone1.getRawOffset();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setScript("eras");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("eras");
        java.util.Locale locale9 = builder6.build();
        java.lang.String str10 = timeZone1.getDisplayName(locale9);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "eras");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Greenwich Mean Time" + "'", str10, "Greenwich Mean Time");
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setWeekDate(50473355, 517, 301);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutablePeriod16.add(readableDuration17);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutablePeriod23.set(durationFieldType24, (int) 'a');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100, chronology35);
        boolean boolean37 = durationFieldType24.isSupported(chronology35);
        mutablePeriod16.setPeriod((long) '4', chronology35);
        int[] intArray39 = mutablePeriod16.getValues();
        java.util.Calendar.Builder builder40 = builder14.setFields(intArray39);
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromCalendarFields(calendar42);
        calendar42.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        boolean boolean52 = timeZone51.observesDaylightTime();
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        java.time.ZoneId zoneId55 = timeZone51.toZoneId();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.Calendar.Builder builder58 = builder14.setTimeZone(timeZone57);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property63 = dateTime62.dayOfMonth();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType66);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        mutablePeriod67.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        java.lang.String str73 = mutablePeriod67.toString();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadablePeriod) mutablePeriod67);
        int int75 = mutablePeriod67.getMonths();
        int[] intArray76 = mutablePeriod67.getValues();
        java.util.Calendar.Builder builder77 = builder14.setFields(intArray76);
        java.util.Calendar.Builder builder79 = builder77.setLenient(true);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645455728366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT0.034S" + "'", str73, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 34]");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        java.lang.String str8 = dateTime3.toString("21");
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded(3786912000000L, 898);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime3.withField(dateTimeFieldType14, 734);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType14.getDurationType();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "21" + "'", str8, "21");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        org.joda.time.Period period1 = org.joda.time.Period.years(54071245);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, readableDuration5);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) (byte) 0);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 0);
        long long12 = duration11.getMillis();
        int int13 = duration8.compareTo((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 120, 0L, periodType17);
        boolean boolean19 = duration11.equals((java.lang.Object) periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withMinutesRemoved();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withYear(53);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfEra();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.lang.String str20 = locale17.getDisplayVariant(locale18);
        int int21 = property16.getMaximumTextLength(locale17);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        java.lang.String str25 = locale22.getDisplayVariant(locale23);
        java.lang.String str26 = locale17.getDisplayCountry(locale23);
        java.lang.String str27 = dateTimeZone12.getShortName((long) 72, locale23);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        java.lang.String str34 = dateTimeZone30.getShortName((long) 944);
        long long36 = dateTimeZone12.getMillisKeepLocal(dateTimeZone30, 18934171253726113L);
        long long38 = dateTimeZone12.nextTransition(1998522236522L);
        org.joda.time.Interval interval39 = yearMonthDay11.toInterval(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455728457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=457,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455728457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=457,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str26, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 18934171253726113L + "'", long36 == 18934171253726113L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1998522236522L + "'", long38 == 1998522236522L);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (-18599L));
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, (long) 4);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType14, chronology23);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology23);
        org.joda.time.DateTime dateTime37 = dateTime9.toDateTime(chronology23);
        java.lang.Object obj38 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType42 = periodType41.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int int48 = mutablePeriod47.getMonths();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        int int57 = mutablePeriod56.getMonths();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableInstant52, (org.joda.time.ReadablePeriod) mutablePeriod56);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePeriod) mutablePeriod56, 1L, (long) 4);
        org.joda.time.Period period62 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType41, chronology50);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(obj38, chronology50);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate63.toDateTimeAtMidnight(dateTimeZone66);
        long long71 = dateTimeZone66.convertLocalToUTC((long) 31, true);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime37.toMutableDateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime75 = dateTime37.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod2, (org.joda.time.ReadableInstant) dateTime75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 31L + "'", long71 == 31L);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 10, chronology30);
        org.joda.time.Period period33 = duration16.toPeriod(chronology30);
        org.joda.time.Duration duration34 = duration16.toDuration();
        org.joda.time.Duration duration36 = duration16.withMillis((long) 53769898);
        org.joda.time.Duration duration38 = duration36.plus((long) 19);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        java.lang.String str56 = duration34.toString();
        org.joda.time.Duration duration57 = duration34.toDuration();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.years();
        java.lang.String str59 = periodType58.toString();
        org.joda.time.PeriodType periodType60 = periodType58.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType67);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.months();
        mutablePeriod68.set(durationFieldType69, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.months();
        boolean boolean73 = mutablePeriod68.isSupported(durationFieldType72);
        int int74 = mutablePeriod64.indexOf(durationFieldType72);
        java.lang.String str75 = durationFieldType72.getName();
        int int76 = mutablePeriod62.get(durationFieldType72);
        boolean boolean77 = periodType60.isSupported(durationFieldType72);
        org.joda.time.PeriodType periodType78 = periodType60.withHoursRemoved();
        org.joda.time.PeriodType periodType79 = periodType60.withMinutesRemoved();
        int int80 = periodType79.size();
        org.joda.time.Period period81 = duration57.toPeriod(periodType79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period83 = period81.withMonths(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PeriodType[Years]" + "'", str59, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "months" + "'", str75, "months");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.plusYears(202);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay16.toDateMidnight(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minus((long) 944);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 517);
        int int28 = period27.getMonths();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        boolean boolean37 = mutableDateTime32.isSupported(dateTimeFieldType36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime32.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        int int45 = mutablePeriod44.getMonths();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableInstant40, (org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        int[] intArray58 = chronology47.get((org.joda.time.ReadablePeriod) mutablePeriod53, 1L, (long) 4);
        org.joda.time.PeriodType periodType59 = mutablePeriod53.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.millis();
        int int61 = periodType59.indexOf(durationFieldType60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) mutableDateTime39, periodType59);
        mutableDateTime39.addYears(37);
        int int65 = mutableDateTime39.getYear();
        org.joda.time.ReadableInstant readableInstant66 = null;
        mutableDateTime39.setMillis(readableInstant66);
        mutableDateTime39.setDate((long) 53743428);
        org.joda.time.Duration duration70 = period27.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53639228 + "'", int25 == 53639228);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2059 + "'", int65 == 2059);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 0, 1645455232453L, chronology13);
        org.joda.time.Period period27 = interval26.toPeriod();
        boolean boolean29 = interval26.isBefore((long) 365);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.Interval interval38 = interval36.toInterval();
        boolean boolean40 = interval38.equals((java.lang.Object) 9);
        org.joda.time.Interval interval41 = interval38.toInterval();
        boolean boolean42 = interval26.isAfter((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Interval interval43 = interval41.toInterval();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime8 = property6.setCopy((int) 'x');
        int int9 = dateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1969 + "'", int9 == 1969);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.minus(readablePeriod8);
        org.joda.time.LocalTime.Property property10 = localTime7.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        int int5 = dateTime3.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        int int18 = mutableDateTime17.getCenturyOfEra();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime17);
        java.lang.String str20 = mutableDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-21T15:02:08.831Z" + "'", str20, "2022-02-21T15:02:08.831Z");
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = dateTime4.minus((-31449600001L));
        org.joda.time.DateTime dateTime8 = dateTime4.plus(1645455415224L);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths(39662522);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        java.lang.String[] strArray22 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean25 = strSet23.isEmpty();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusWeeks(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        int int36 = dateTime35.getDayOfMonth();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime35.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight31.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean41 = strSet23.remove((java.lang.Object) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withDurationAdded((-102387L), 5);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plusWeeks(8);
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight44.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight49 = dateMidnight44.withYearOfCentury(54070776);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54070776 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 59);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds(10);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = locale16.getDisplayVariant(locale17);
        int int20 = property14.getMaximumTextLength(locale17);
        java.lang.String str21 = locale17.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = property5.setCopy("", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455728884,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=884,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        date5.setMinutes((int) (short) -1);
        int int11 = date5.getHours();
        java.time.Instant instant12 = date5.toInstant();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withPeriodAdded(readablePeriod14, 16);
        org.joda.time.Period period18 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period20 = period18.minusYears(8);
        org.joda.time.Period period22 = period18.withSeconds(11);
        org.joda.time.Period period24 = period18.minusMillis((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay13.plusMinutes(53897149);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = timeOfDay13.getValue(367);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 367");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue May 04 02:59:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-31449600001L));
        org.joda.time.ReadablePartial readablePartial2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.withFields(readablePartial2);
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property5 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = property5.getLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(21);
        org.joda.time.LocalTime localTime8 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(53927295);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis(53861358);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours(914);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears(872);
        org.joda.time.Period period8 = org.joda.time.Period.years(53710144);
        int int9 = period8.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod10 = period8.toMutablePeriod();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekyear(40);
        int int14 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMonths(7);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDateTime13.getValue(514);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 514");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455728992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.Interval interval10 = localDate6.toInterval(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime5.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight1.withZoneRetainFields(dateTimeZone9);
        java.lang.String str14 = dateTimeZone9.getNameKey(10L);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 11, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        org.joda.time.Chronology chronology24 = mutableDateTime17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime29.minus((org.joda.time.ReadableDuration) duration32);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean37 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = duration32.toPeriod();
        org.joda.time.Period period39 = duration32.toPeriod();
        org.joda.time.Hours hours40 = period39.toStandardHours();
        org.joda.time.Period period42 = period39.withMonths(53637206);
        org.joda.time.LocalDate localDate43 = localDate15.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime45 = localDate44.toDateTimeAtCurrentTime();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(chronology53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.minusMonths((int) (short) -1);
        org.joda.time.Interval interval57 = yearMonthDay54.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = yearMonthDay54.getFieldType((int) (short) 0);
        int int60 = localDate44.get(dateTimeFieldType59);
        org.joda.time.LocalDate localDate62 = localDate15.withField(dateTimeFieldType59, 53669316);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate62.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate67 = localDate62.minusMonths(390);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate67);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("months");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        calendar5.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale25);
        java.lang.String str27 = locale24.getDisplayVariant(locale25);
        int int28 = property22.getMaximumTextLength(locale25);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone14, locale25);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone1, locale25);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale25);
        boolean boolean32 = calendar31.isWeekDateSupported();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455729057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455729058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645455729058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645455729058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645455729058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis(718L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7);
        int int9 = mutableDateTime5.getYear();
        int int10 = mutableDateTime5.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusHours(0);
        int int11 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.plusHours(53862697);
        int int15 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime5.minusMinutes(48);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime5.minusSeconds(54011631);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455729091,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=91,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 91 + "'", int6 == 91);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36522 + "'", int15 == 36522);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        java.util.Date date5 = new java.util.Date(2023, (-57), 53873457, 1, (int) (short) 1);
        int int6 = date5.getTimezoneOffset();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Oct 05 01:01:00 GMT 151418");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        mutableDateTime1.setChronology(chronology18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekOfWeekyear();
        mutableDateTime1.setRounding(dateTimeField31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(1L, dateTimeZone34);
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, readableDuration42, periodType43);
        int[] intArray45 = period44.getValues();
        int int46 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDate35, intArray45);
        org.joda.time.Interval interval47 = localDate35.toInterval();
        long long48 = interval47.getStartMillis();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = interval47.toPeriod(periodType49);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withZoneUTC();
        boolean boolean31 = dateTimeFormatter30.isPrinter();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        mutableDateTime1.setChronology(chronology18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekOfWeekyear();
        mutableDateTime1.setRounding(dateTimeField31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(1L, dateTimeZone34);
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, readableDuration42, periodType43);
        int[] intArray45 = period44.getValues();
        int int46 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDate35, intArray45);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localDate47.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDate.Property property50 = localDate47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        org.joda.time.DurationField durationField52 = property50.getDurationField();
        org.joda.time.LocalDate localDate54 = property50.setCopy(2022);
        org.joda.time.LocalDate localDate55 = property50.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate57 = property50.addToCopy(517);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDate57, locale58);
        java.lang.String str60 = localDate57.toString();
        org.joda.time.LocalDate localDate62 = localDate57.withCenturyOfEra(620);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "8" + "'", str59, "8");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2539-02-21" + "'", str60, "2539-02-21");
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra(53);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths(677);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = mutableDateTime13.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime13.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate22.yearOfEra();
        int int26 = localDate22.getCenturyOfEra();
        org.joda.time.LocalDate localDate28 = localDate22.plusMonths(1);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        java.lang.String str34 = dateTimeZone30.getShortName((long) 53700000);
        org.joda.time.DateMidnight dateMidnight35 = localDate28.toDateMidnight(dateTimeZone30);
        long long38 = dateTimeZone30.adjustOffset((long) 50463283, false);
        mutableDateTime20.setZone(dateTimeZone30);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.DateTime dateTime41 = localDate11.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType48 = periodType47.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        int[] intArray67 = chronology56.get((org.joda.time.ReadablePeriod) mutablePeriod62, 1L, (long) 4);
        org.joda.time.Period period68 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType47, chronology56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter44.withChronology(chronology56);
        org.joda.time.format.DateTimeParser dateTimeParser70 = dateTimeFormatter69.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter69.withPivotYear(312);
        org.joda.time.Chronology chronology73 = dateTimeFormatter69.getChronolgy();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.dayOfYear();
        org.joda.time.DateTime dateTime77 = dateTime41.toDateTime(chronology73);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 50463283L + "'", long38 == 50463283L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNull(dateTimeParser70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.years();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(52L, chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localTime12);
        int int14 = dateMidnight0.getSecondOfDay();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        int int17 = dateMidnight15.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateMidnight15.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight15.yearOfCentury();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        mutablePeriod29.addHours((int) (byte) -1);
        mutablePeriod29.addYears(2022);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight15.plusYears(528);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property43 = dateTime42.secondOfDay();
        org.joda.time.DateTime dateTime45 = dateTime42.withEra(1);
        org.joda.time.DateTime dateTime47 = dateTime42.plusMillis(32772);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.yearOfCentury();
        boolean boolean51 = dateMidnight48.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property53 = dateMidnight48.property(dateTimeFieldType52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight.Property property56 = dateMidnight48.property(dateTimeFieldType55);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType55.getRangeDurationType();
        mutableDateTime40.set(dateTimeFieldType55, 606);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight0.withField(dateTimeFieldType55, 598);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateMidnight61);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay17 = property12.withMaximumValue();
        int int18 = property12.get();
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addToCopy(134);
        int int21 = property12.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay22 = property12.withMinimumValue();
        java.lang.String str23 = property12.toString();
        java.lang.Object obj24 = null;
        boolean boolean25 = property12.equals(obj24);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455729298,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=298,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455729298,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=298,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-292275054) + "'", int21 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[year]" + "'", str23, "Property[year]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDayOfMonth(8);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.lang.String str22 = mutablePeriod16.toString();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.setValue(0, 2022);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        long long35 = duration34.getMillis();
        int int36 = duration31.compareTo((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration38 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, 2);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight7.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.DateTime dateTime44 = mutableDateTime41.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime41, readableDuration45, periodType46);
        org.joda.time.Chronology chronology48 = mutableDateTime41.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfYear((int) (byte) 1);
        int int54 = dateTime53.getDayOfMonth();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime53.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = duration38.plus((org.joda.time.ReadableDuration) duration56);
        java.lang.String str60 = duration38.toString();
        java.lang.Object obj61 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType65 = periodType64.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        int[] intArray84 = chronology73.get((org.joda.time.ReadablePeriod) mutablePeriod79, 1L, (long) 4);
        org.joda.time.Period period85 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType64, chronology73);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(obj61, chronology73);
        org.joda.time.DateTimeField dateTimeField87 = chronology73.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay(chronology73);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration38, chronology73);
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod3, periodType90);
        mutablePeriod91.addMinutes(53713891);
        mutablePeriod91.addMillis(32772);
        mutablePeriod91.addWeeks(54120000);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.034S" + "'", str22, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0S" + "'", str60, "PT0S");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(62000L);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime dateTime16 = dateTime11.minus((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime11.plusMinutes(9);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.months();
        mutableDateTime20.add(durationFieldType23, (int) (byte) 1);
        int int26 = mutableDateTime20.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withDayOfMonth(8);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        mutablePeriod39.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        java.lang.String str45 = mutablePeriod39.toString();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.setValue(0, 2022);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        long long55 = duration54.getMillis();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) (byte) 0);
        long long58 = duration57.getMillis();
        int int59 = duration54.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration61 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration57, 2);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight30.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        mutableDateTime64.add((long) 1);
        org.joda.time.DateTime dateTime67 = mutableDateTime64.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime64, readableDuration68, periodType69);
        org.joda.time.Chronology chronology71 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfYear((int) (byte) 1);
        int int77 = dateTime76.getDayOfMonth();
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime80 = dateTime76.minus((org.joda.time.ReadableDuration) duration79);
        mutableDateTime72.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration82 = duration61.plus((org.joda.time.ReadableDuration) duration79);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTime dateTime84 = dateTime18.plus((org.joda.time.ReadableDuration) duration79);
        boolean boolean85 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate86 = dateTime5.toLocalDate();
        long long87 = dateTime5.getMillis();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.034S" + "'", str45, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645401600000L + "'", long87 == 1645401600000L);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.yearOfEra();
        org.joda.time.DurationField durationField27 = dateTimeField26.getDurationField();
        java.lang.String str28 = dateTimeField26.getName();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearOfEra" + "'", str28, "yearOfEra");
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 468, 76, 0, 711);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 711 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime3.minusHours(10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(31);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(726);
        org.joda.time.DateTime dateTime13 = dateTime9.minusHours(53774237);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Interval interval22 = interval21.toInterval();
        java.lang.Object obj23 = null;
        boolean boolean24 = interval22.equals(obj23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        int int29 = dateTime28.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Interval interval41 = interval32.gap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        java.lang.String str56 = mutablePeriod50.toString();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) mutablePeriod50);
        boolean boolean58 = interval40.isBefore((org.joda.time.ReadableInterval) interval57);
        long long59 = interval40.getStartMillis();
        boolean boolean60 = interval22.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Chronology chronology61 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfDay();
        int int63 = dateTime13.get(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNull(interval41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.034S" + "'", str56, "PT0.034S");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-31449600001L) + "'", long59 == (-31449600001L));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 32400 + "'", int63 == 32400);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar2);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withCenturyOfEra(365);
        int int7 = localDateTime6.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(21);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(1969);
        boolean boolean14 = calendar0.equals((java.lang.Object) localDateTime11);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455729565,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=565,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455729565,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=565,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 565 + "'", int7 == 565);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T15:01:17.290");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t15:01:17.290");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(obj1, chronology13);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtMidnight(dateTimeZone29);
        int int33 = dateTimeZone29.getStandardOffset((long) 23);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(1645455245049L, dateTimeZone29);
        long long37 = dateTimeZone29.convertLocalToUTC((long) 66, false);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 66L + "'", long37 == 66L);
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.Interval interval9 = localDate5.toInterval(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime4.toMutableDateTime(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(1645455579287L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(50473355);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekyear(20);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMonths(208);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays(693);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455729634,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=634,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) 301, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight2.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusYears(452);
        int[] intArray7 = yearMonthDay4.getValues();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1]");
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(53833012);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusWeeks(189);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear((-27410393));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27410393 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455729675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=675,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 675 + "'", int6 == 675);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear(312);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear(40);
        java.lang.StringBuffer stringBuffer33 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.weekOfWeekyear();
        mutableDateTime37.setSecondOfMinute(1);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now();
        int int42 = localTime41.size();
        org.joda.time.LocalTime localTime44 = localTime41.plusMillis(11);
        int int45 = localTime41.size();
        org.joda.time.LocalTime.Property property46 = localTime41.millisOfDay();
        org.joda.time.LocalTime localTime47 = property46.roundCeilingCopy();
        org.joda.time.LocalTime localTime48 = property46.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalTime localTime50 = localTime48.minus(readablePeriod49);
        org.joda.time.LocalTime.Property property51 = localTime48.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        mutableDateTime53.add((long) 1);
        org.joda.time.DateTime dateTime56 = mutableDateTime53.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.years();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime53, readableDuration57, periodType58);
        org.joda.time.Chronology chronology60 = mutableDateTime53.getChronology();
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(chronology60);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime65 = dateTime63.withDayOfYear((int) (byte) 1);
        int int66 = dateTime65.getDayOfMonth();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime65.minus((org.joda.time.ReadableDuration) duration68);
        mutableDateTime61.add((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean73 = duration68.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period74 = duration72.toPeriod();
        org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime79 = dateTime77.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime80 = timeOfDay75.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime82 = dateTime77.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration72, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime.Property property84 = dateTime82.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property84.getFieldType();
        int int86 = localTime48.get(dateTimeFieldType85);
        mutableDateTime37.set(dateTimeFieldType85, 0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter30.printTo(stringBuffer33, (org.joda.time.ReadableInstant) mutableDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 86399 + "'", int86 == 86399);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 2000);
        org.joda.time.Period period4 = new org.joda.time.Period(1645455330384L, (long) 944);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period4, 301);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        calendar8.setFirstDayOfWeek(17);
        long long12 = calendar8.getTimeInMillis();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight17 = property16.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight18 = property16.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.centuryOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.DateMidnight dateMidnight22 = property19.addWrapFieldToCopy(70);
        org.joda.time.DateMidnight dateMidnight24 = property19.addWrapFieldToCopy(343);
        org.joda.time.DateMidnight dateMidnight26 = property19.setCopy(86);
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.fromCalendarFields(calendar29);
        calendar29.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime45 = dateTime42.plusSeconds(10);
        org.joda.time.DateTime.Property property46 = dateTime45.year();
        org.joda.time.DateTime dateTime47 = property46.roundHalfCeilingCopy();
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        java.lang.String str51 = locale48.getDisplayVariant(locale49);
        int int52 = property46.getMaximumTextLength(locale49);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone38, locale49);
        java.util.Locale locale54 = locale49.stripExtensions();
        java.lang.String str55 = dateMidnight26.toString("26", locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap56 = calendar8.getDisplayNames((-27424261), 914, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=17,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645401600001L + "'", long12 == 1645401600001L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645455729726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645455729726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "26" + "'", str55, "26");
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet15, filteringMode16);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList26);
        boolean boolean29 = strSet19.containsAll((java.util.Collection<java.lang.String>) strList28);
        boolean boolean30 = strSet15.addAll((java.util.Collection<java.lang.String>) strList28);
        java.util.stream.Stream<java.lang.String> strStream31 = strSet15.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode16.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strStream31);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight3 = property2.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight4 = property2.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getMillisOfSecond();
        int int8 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.property(dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(583);
        org.joda.time.MutableDateTime mutableDateTime14 = property10.addWrapField(271);
        org.joda.time.MutableDateTime mutableDateTime15 = property10.roundFloor();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        java.util.Date date3 = dateTime1.toDate();
        date3.setYear(445);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Dec 31 23:59:59 GMT 2345");
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime9.toYearMonthDay();
        int int12 = yearMonthDay11.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = yearMonthDay11.getFields();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear(573);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate0.minus(readablePeriod4);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime4 = property2.addCopy((int) (short) 100);
        org.joda.time.LocalTime localTime6 = localTime4.plusHours(40);
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(35);
        org.joda.time.DateTime dateTime9 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime11 = localTime6.plusMinutes(416);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.String str19 = mutablePeriod13.toString();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight3.toMutableDateTime(chronology21);
        org.joda.time.Instant instant23 = mutableDateTime22.toInstant();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.034S" + "'", str19, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(instant23);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = property6.addNoWrapToCopy(39652171);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455729867,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=9,MILLISECOND=867,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        java.lang.String str6 = localDate0.toString();
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21" + "'", str6, "2022-02-21");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy(86400000L);
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(208);
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property5.addNoWrapToCopy(536);
        java.util.Locale locale16 = new java.util.Locale("-1970-03-07T00:07:00.000Z", "ISOChronology[Etc/UTC]");
        java.lang.String str17 = localTime12.toString("541", locale16);
        org.joda.time.LocalTime localTime19 = localTime12.minusHours(86399);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals(locale16.toString(), "-1970-03-07t00:07:00.000z_ISOCHRONOLOGY[ETC/UTC]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "541" + "'", str17, "541");
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5, (int) (byte) 10);
        int int4 = dateTimeZone2.getStandardOffset((long) 1970);
        boolean boolean6 = dateTimeZone2.isStandardOffset((-345599248L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18600000 + "'", int4 == 18600000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        date5.setDate(53637206);
        int int11 = date5.getTimezoneOffset();
        java.time.Instant instant12 = date5.toInstant();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 03 03:59:00 GMT 148769");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("AD");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime17.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDayOfMonth(8);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        mutablePeriod34.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        java.lang.String str40 = mutablePeriod34.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setValue(0, 2022);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod34.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) 0);
        long long50 = duration49.getMillis();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        long long53 = duration52.getMillis();
        int int54 = duration49.compareTo((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration52, 2);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight25.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime59 = dateMidnight58.toMutableDateTime();
        mutableDateTime59.add((long) 1);
        org.joda.time.DateTime dateTime62 = mutableDateTime59.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime59, readableDuration63, periodType64);
        org.joda.time.Chronology chronology66 = mutableDateTime59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology66);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime71 = dateTime69.withDayOfYear((int) (byte) 1);
        int int72 = dateTime71.getDayOfMonth();
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime75 = dateTime71.minus((org.joda.time.ReadableDuration) duration74);
        mutableDateTime67.add((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration77 = duration56.plus((org.joda.time.ReadableDuration) duration74);
        java.lang.String str78 = duration56.toString();
        org.joda.time.Duration duration80 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration56, 16);
        org.joda.time.Duration duration81 = duration80.toDuration();
        java.lang.String str82 = duration81.toString();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight13.withDurationAdded((org.joda.time.ReadableDuration) duration81, 594);
        boolean boolean85 = languageRange1.equals((java.lang.Object) duration81);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ad" + "'", str2, "ad");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ad" + "'", str6, "ad");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.034S" + "'", str40, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0S" + "'", str78, "PT0S");
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT0S" + "'", str82, "PT0S");
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.setMillis(315532800000L);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime9.yearOfEra();
        long long22 = property21.remainder();
        java.lang.String str23 = property21.getName();
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "yearOfEra" + "'", str23, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.plusDays(12);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.String str35 = mutablePeriod29.toString();
        java.lang.String str36 = mutablePeriod29.toString();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod38.setMillis((int) (short) 100);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        int[] intArray42 = mutablePeriod38.getValues();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMinutes(22);
        int int46 = localDateTime45.getEra();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight47.toMutableDateTime();
        java.lang.String str49 = mutableDateTime48.toString();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology51 = dateMidnight50.getChronology();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withDayOfMonth(8);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfMonth();
        org.joda.time.DateTime dateTime60 = dateTime57.plusSeconds(10);
        org.joda.time.DateTime dateTime62 = dateTime57.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        int int65 = dateMidnight50.get(dateTimeFieldType63);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime48.property(dateTimeFieldType63);
        int int67 = localDateTime45.get(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455730054,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=10,MILLISECOND=54,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.034S" + "'", str35, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0.034S" + "'", str36, "PT0.034S");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str49, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.weeks();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        long long15 = chronology7.set((org.joda.time.ReadablePartial) localDate11, (long) 96);
        org.joda.time.DurationField durationField16 = chronology7.seconds();
        org.joda.time.DurationField durationField17 = chronology7.millis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645401600096L + "'", long15 == 1645401600096L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(7836, 4475149, 53844742, 6);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = mutablePeriod4.getValue(53910953);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53910953");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        java.util.Date date5 = mutableDateTime1.toDate();
        java.lang.String str6 = date5.toGMTString();
        java.time.Instant instant7 = date5.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "21 Feb 2022 00:00:00 GMT" + "'", str6, "21 Feb 2022 00:00:00 GMT");
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.secondOfMinute();
        org.joda.time.DurationField durationField14 = chronology7.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology7.getDateTimeMillis(0, 336, 940, 521);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 336 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) 0, 1645455232453L, chronology13);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 0L);
        long long32 = chronology13.add((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, 1969);
        org.joda.time.DateTimeField dateTimeField33 = chronology13.hourOfDay();
        org.joda.time.DurationField durationField34 = chronology13.years();
        org.joda.time.DurationField durationField35 = chronology13.hours();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-102387L) + "'", long32 == (-102387L));
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        org.joda.time.Period period3 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period5 = period3.minusYears(8);
        org.joda.time.Period period7 = period3.withYears(8);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekyear();
        boolean boolean24 = period3.equals((java.lang.Object) chronology20);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(193320000000000L, chronology20);
        org.joda.time.Period period26 = new org.joda.time.Period((long) 32772, chronology20);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = period26.getValue(2059);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2059");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DurationField durationField19 = chronology7.eras();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(40);
        org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
        org.joda.time.DateTime.Property property24 = dateTime20.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.add((long) 239);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(53742, 120, 304, 53914980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53742 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plus(readableDuration10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusYears(157);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(292278993);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra((int) 'a');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = dateMidnight25.toDateTime();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime31 = dateTime28.withFieldAdded(durationFieldType29, 21);
        org.joda.time.DateTime dateTime32 = localDate19.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime34 = dateTime28.withYear(552);
        org.joda.time.DateTime dateTime36 = dateTime28.minusMonths(50500010);
        int int37 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter2.getParser();
        boolean boolean30 = dateTimeFormatter2.isPrinter();
        int int31 = dateTimeFormatter2.getDefaultYear();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        int int7 = date5.getDay();
        int int8 = date5.getDate();
        int int9 = date5.getMonth();
        int int10 = date5.getMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        int int5 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str15 = property14.toString();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property14.add((long) 791);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.era();
        java.lang.String str22 = property21.getAsText();
        org.joda.time.DateMidnight dateMidnight23 = property21.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        java.lang.String str25 = dateTimeField24.getName();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setRounding(dateTimeField24, 147027);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 147027");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+14:00");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[weekOfWeekyear]" + "'", str15, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u897f\u5143" + "'", str22, "\u897f\u5143");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "era" + "'", str25, "era");
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        long long43 = interval41.toDurationMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType45 = periodType44.withYearsRemoved();
        org.joda.time.Period period46 = interval41.toPeriod(periodType45);
        boolean boolean47 = interval6.contains((org.joda.time.ReadableInterval) interval41);
        long long48 = interval41.getStartMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType55 = periodType54.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType68);
        int int70 = mutablePeriod69.getMonths();
        org.joda.time.Interval interval71 = new org.joda.time.Interval(readableInstant65, (org.joda.time.ReadablePeriod) mutablePeriod69);
        int[] intArray74 = chronology63.get((org.joda.time.ReadablePeriod) mutablePeriod69, 1L, (long) 4);
        org.joda.time.Period period75 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType54, chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter51.withChronology(chronology63);
        org.joda.time.Chronology chronology77 = dateTimeFormatter76.getChronology();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(chronology77);
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((java.lang.Object) long48, chronology77);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay79.withYear(337);
        org.joda.time.Interval interval82 = yearMonthDay81.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 34L + "'", long43 == 34L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645455730343L + "'", long48 == 1645455730343L);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(interval82);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        calendar9.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        int int19 = timeZone18.getRawOffset();
        int int20 = timeZone18.getRawOffset();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18, locale21);
        java.util.Calendar.Builder builder23 = builder7.setTimeZone(timeZone18);
        java.util.Calendar calendar24 = builder23.build();
        java.util.Calendar calendar25 = builder23.build();
        java.util.Calendar.Builder builder29 = builder23.setWeekDate(2122, 744, 53713891);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str33 = locale31.toLanguageTag();
        java.util.Calendar.Builder builder34 = builder29.setLocale(locale31);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455730367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=10,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-GB" + "'", str33, "en-GB");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusHours(0);
        int int11 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.minuteOfHour();
        org.joda.time.Period period14 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period16 = period14.minusYears(8);
        org.joda.time.Period period18 = period14.withSeconds(11);
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod21.set(durationFieldType22, 53637206);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime5.withFieldAdded(durationFieldType22, (int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(53896067);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455730417,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=10,MILLISECOND=417,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 417 + "'", int6 == 417);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("14:59:19.246");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"14:59:19.246\" is malformed at \":59:19.246\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        mutablePeriod5.set(durationFieldType6, (int) 'a');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 100, chronology17);
        boolean boolean19 = durationFieldType6.isSupported(chronology17);
        boolean boolean20 = durationFieldType1.isSupported(chronology17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 822, chronology17);
        int int22 = localDateTime21.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(522);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDateTime24.getValue(773);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 773");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 100, chronology10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(86409999L, (-864000001L), chronology10);
        int int13 = mutablePeriod12.getHours();
        mutablePeriod12.setYears(991);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withPivotYear(312);
        org.joda.time.Chronology chronology32 = dateTimeFormatter28.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter28.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.parse("18", dateTimeFormatter33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        mutableDateTime1.setChronology(chronology18);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology23 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        int int26 = dateTimeField24.get(292278993L);
        java.lang.Object obj27 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType31 = periodType30.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        int int46 = mutablePeriod45.getMonths();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant41, (org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1L, (long) 4);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType30, chronology39);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(obj27, chronology39);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate52.toDateTimeAtMidnight(dateTimeZone55);
        int int58 = localDate52.getWeekyear();
        org.joda.time.DateTime dateTime59 = localDate52.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate61 = localDate52.withYear(692);
        org.joda.time.LocalDate localDate63 = localDate61.plusWeeks(529);
        int int64 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDate63);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 30 + "'", int64 == 30);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(1, 53633250, 53633250, 517, 50473355, 1);
        calendar0.set(20, 5, 16, 23, 96, 9);
        calendar0.setMinimalDaysInFirstWeek(13);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar0.getMinimum(36119663);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36119663");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=13,ERA=1,YEAR=20,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=23,MINUTE=96,SECOND=9,MILLISECOND=533,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutableDateTime1.add(durationFieldType4, (int) (byte) 1);
        int int7 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.yearOfEra();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfCentury();
        boolean boolean12 = dateMidnight9.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.property(dateTimeFieldType13);
        java.lang.String str15 = dateTimeFieldType13.toString();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.property(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundFloor();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfHalfday" + "'", str15, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutableDateTime11.add(durationFieldType14, (int) (byte) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime11, periodType17);
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime11.toGregorianCalendar();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str26 = gregorianCalendar20.getDisplayName(0, (int) (short) 1, locale23);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("1");
        gregorianCalendar20.setTimeZone(timeZone28);
        int int30 = gregorianCalendar20.getFirstDayOfWeek();
        gregorianCalendar20.set(843, 53861358, 598, 472, 123);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AD" + "'", str26, "AD");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundCeilingCopy();
        int int4 = localDate3.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate6 = localDate3.plusWeeks(53823772);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter9.withOffsetParsed();
        boolean boolean36 = dateTimeFormatter35.isParser();
        boolean boolean37 = localDate3.equals((java.lang.Object) dateTimeFormatter35);
        org.joda.time.LocalDate.Property property38 = localDate3.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        java.util.Date date1 = new java.util.Date((-192508671817343L));
        java.util.Date date5 = new java.util.Date(9, 208, (int) 'a');
        java.time.Instant instant6 = date5.toInstant();
        java.util.Date date7 = java.util.Date.from(instant6);
        date7.setTime(1645455411812L);
        boolean boolean10 = date1.before(date7);
        date7.setSeconds((int) (byte) 0);
        date7.setYear(33);
        java.lang.String str15 = date7.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Mon Sep 25 08:56:22 GMT 4132");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Aug 05 00:00:00 GMT 1926");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 21 14:56:00 GMT 1933");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "21 Feb 1933 14:56:00 GMT" + "'", str15, "21 Feb 1933 14:56:00 GMT");
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getWeekyear();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) (byte) 0);
        java.lang.String str5 = duration4.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration9 = duration4.withDurationAdded((long) (-1), 0);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Duration duration11 = duration4.plus(readableDuration10);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        java.lang.String str5 = localTime4.toString();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.100" + "'", str5, "00:00:00.100");
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.Chronology chronology38 = timeOfDay33.getChronology();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay33.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = property39.addNoWrapToCopy(521);
        int int42 = property39.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay44 = property39.addToCopy(585);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(timeOfDay44);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDayOfMonth(8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        mutablePeriod18.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.String str24 = mutablePeriod18.toString();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setValue(0, 2022);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((long) (byte) 0);
        long long34 = duration33.getMillis();
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) (byte) 0);
        long long37 = duration36.getMillis();
        int int38 = duration33.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration40 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration36, 2);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight9.minus((org.joda.time.ReadableDuration) duration40);
        java.lang.String str42 = duration40.toString();
        org.joda.time.Duration duration43 = duration40.toDuration();
        org.joda.time.DateTime dateTime44 = dateTime4.minus((org.joda.time.ReadableDuration) duration43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime44.withDate(54093893, 70, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.034S" + "'", str24, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear(312);
        boolean boolean31 = dateTimeFormatter30.isPrinter();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setExtension('a', "P0Y");
        java.util.Locale.Builder builder41 = builder37.clear();
        java.util.Locale locale42 = builder41.build();
        java.lang.String str43 = locale42.getDisplayScript();
        boolean boolean44 = locale42.hasExtensions();
        int int45 = property36.getMaximumShortTextLength(locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter30.withLocale(locale42);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        mutableDateTime49.add((long) 1);
        org.joda.time.DateTime dateTime52 = mutableDateTime49.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime49, readableDuration53, periodType54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.weeks();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology63);
        mutableDateTime49.setChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((-1L), chronology63);
        org.joda.time.DateTimeField dateTimeField70 = chronology63.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight71 = org.joda.time.DateMidnight.now(chronology63);
        org.joda.time.DateTimeField dateTimeField72 = chronology63.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter46.withChronology(chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter46.withDefaultYear(53704400);
        java.lang.Appendable appendable76 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter46.printTo(appendable76, 1645383651866L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1970", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1970");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) (byte) 0);
        long long5 = duration4.getMillis();
        int int6 = duration1.compareTo((org.joda.time.ReadableDuration) duration4);
        long long7 = duration1.getMillis();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, readableDuration13, periodType14);
        org.joda.time.Chronology chronology16 = mutableDateTime9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean29 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration24.toPeriod();
        org.joda.time.Period period31 = duration24.toPeriod();
        boolean boolean32 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Hours hours33 = duration24.toStandardHours();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.lang.String str43 = dateTimeZone41.getName((long) 100);
        org.joda.time.DateTime dateTime44 = dateTime39.withZoneRetainFields(dateTimeZone41);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) 7);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration46, periodType47);
        org.joda.time.Duration duration50 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration46, 690);
        org.joda.time.Duration duration52 = duration46.withMillis((-417599969L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMillisOfDay(5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455731260,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54131260 + "'", int6 == 54131260);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval18 = interval15.withEndMillis((long) 301);
        java.lang.String str19 = interval18.toString();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.dayOfMonth();
        mutableDateTime26.addYears(365);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        mutablePeriod34.set(durationFieldType35, (int) 'a');
        mutableDateTime26.add((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        boolean boolean55 = interval45.contains((org.joda.time.ReadableInterval) interval53);
        long long56 = interval53.getEndMillis();
        boolean boolean57 = interval53.containsNow();
        mutablePeriod34.add((org.joda.time.ReadableInterval) interval53);
        boolean boolean59 = interval18.abuts((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Interval interval60 = interval53.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-01-01T23:59:59.999Z/1970-01-01T00:00:00.301Z" + "'", str19, "1969-01-01T23:59:59.999Z/1970-01-01T00:00:00.301Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645455731305L + "'", long56 == 1645455731305L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        java.util.Date date1 = new java.util.Date((long) 53844742);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 14:57:24 GMT 1970");
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(35417L);
        int int38 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        int int43 = localTime41.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        int int46 = mutableDateTime45.getYearOfEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        mutablePeriod50.set(durationFieldType51, (int) 'a');
        mutablePeriod50.addHours((int) (byte) -1);
        mutablePeriod50.addYears(2022);
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime59 = localTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime61 = localTime59.plusSeconds(100);
        boolean boolean62 = localTime37.isEqual((org.joda.time.ReadablePartial) localTime59);
        int int63 = property5.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.DateTimeField dateTimeField64 = property5.getField();
        org.joda.time.DateTimeField dateTimeField65 = property5.getField();
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeField65.getAsText(0, locale67);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType73);
        int int75 = mutablePeriod74.getMonths();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableInstant70, (org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.secondOfMinute();
        org.joda.time.DurationField durationField81 = dateTimeField80.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial82 = null;
        java.util.Locale locale86 = new java.util.Locale("Sun Aug 08 22:00:30 UTC 2004", "days");
        java.lang.String str87 = dateTimeField80.getAsShortText(readablePartial82, 167, locale86);
        java.lang.String str88 = locale86.getVariant();
        java.lang.String str89 = dateTimeField65.getAsShortText(53955715L, locale86);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNull(durationField81);
        org.junit.Assert.assertEquals(locale86.toString(), "sun aug 08 22:00:30 utc 2004_DAYS");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "167" + "'", str87, "167");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "59" + "'", str89, "59");
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.Chronology chronology36 = timeOfDay35.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.plusMillis(53726113);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        boolean boolean7 = mutableDateTime2.isSupported(dateTimeFieldType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.PeriodType periodType29 = mutablePeriod23.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        int int31 = periodType29.indexOf(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) mutableDateTime9, periodType29);
        org.joda.time.DateTime dateTime34 = dateTime0.withCenturyOfEra(517);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        int int37 = gregorianCalendar35.getMaximum(0);
        gregorianCalendar35.set(50473355, 209, 53713891, 53982966, 54087753);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("months");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(true, 618);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 618");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        boolean boolean15 = dateTimeZone12.equals((java.lang.Object) 1645488000000L);
        long long17 = dateTimeZone12.convertUTCToLocal((long) 15);
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4\uc911\uad6d)", "");
        java.lang.String str22 = dateTimeZone12.getName((long) 292278922, locale21);
        java.lang.String str23 = localDateTime6.toString("96", locale21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455731429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 135L + "'", long17 == 135L);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.120" + "'", str22, "+00:00:00.120");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "96" + "'", str23, "96");
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(301);
        long long15 = chronology7.set((org.joda.time.ReadablePartial) localDate13, (long) 1);
        org.joda.time.LocalDate.Property property16 = localDate13.weekyear();
        java.lang.String str17 = property16.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = property16.setCopy("4 May 1915 03:59:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"4 May 1915 03:59:00 GMT\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 889906089600001L + "'", long15 == 889906089600001L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "30170" + "'", str17, "30170");
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime9 = dateMidnight7.toDateTimeISO();
        org.joda.time.DateMidnight.Property property10 = dateMidnight7.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.plusHours(301);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property4.getTimeOfDay();
        org.joda.time.DurationField durationField6 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(5);
        org.joda.time.LocalTime localTime9 = property5.addCopy((-50399969L));
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1");
        int int2 = timeZone1.getRawOffset();
        int int3 = timeZone1.getRawOffset();
        timeZone1.setRawOffset(147);
        int int6 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.dayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str8, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay5 = dateTime1.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 10, chronology30);
        org.joda.time.Period period33 = duration16.toPeriod(chronology30);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Period period36 = period33.withYears(53715795);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        int int39 = dateMidnight37.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime45 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateMidnight37.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight37.yearOfCentury();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.months();
        mutablePeriod51.set(durationFieldType52, (int) 'a');
        mutablePeriod51.addHours((int) (byte) -1);
        mutablePeriod51.addYears(2022);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadablePeriod) mutablePeriod51);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusWeeks(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear((int) (byte) 1);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight65.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight65.minusMonths(53636377);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusYears(86399);
        boolean boolean79 = interval59.contains((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.Duration duration80 = period36.toDurationTo((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.DateMidnight.Property property81 = dateMidnight76.dayOfMonth();
        org.joda.time.DurationField durationField82 = property81.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period83 = new org.joda.time.Period((java.lang.Object) property81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay21 = property12.withMinimumValue();
        org.joda.time.Period period23 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.withPeriodAdded((org.joda.time.ReadablePeriod) period23, (int) (byte) -1);
        int int26 = yearMonthDay21.getDayOfMonth();
        org.joda.time.DateTime dateTime27 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime.Property property30 = dateTime27.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455731579,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=579,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455731579,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=579,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645455723364L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        calendar1.set((int) '4', 53700000, 1970);
        int int15 = calendar1.getWeeksInWeekYear();
        boolean boolean16 = calendar1.isWeekDateSupported();
        java.lang.String str17 = calendar1.getCalendarType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=53700000,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1970,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=607,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.addWrapField(775);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths((int) (short) -1);
        int int17 = yearMonthDay14.size();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.year();
        int int19 = property18.getMinimumValueOverall();
        java.lang.String str20 = property18.getAsString();
        org.joda.time.YearMonthDay yearMonthDay22 = property18.addWrapFieldToCopy(53637206);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.yearOfEra();
        org.joda.time.Interval interval27 = localDate23.toInterval();
        org.joda.time.DateTime dateTime28 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime28.plusMonths(5);
        int int32 = property18.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property18.getFieldType();
        int int34 = mutableDateTime5.get(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(9);
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears((int) '#');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMinutes(7);
        org.joda.time.DateTime.Property property17 = dateTime12.yearOfCentury();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "P0Y");
        java.util.Locale.Builder builder22 = builder18.clear();
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = locale23.getDisplayScript();
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str26 = property17.getAsText(locale23);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale27);
        java.lang.String str30 = locale27.getDisplayScript();
        java.lang.String str31 = locale23.getDisplayScript(locale27);
        java.lang.String str32 = locale27.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.fromCalendarFields(calendar34);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property37.getMaximumShortTextLength(locale38);
        java.lang.String str41 = locale27.getDisplayLanguage(locale38);
        java.lang.String str42 = locale38.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "69" + "'", str26, "69");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455731638,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=638,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645455731638,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=638,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645455731638,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=638,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455731638,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=638,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u6587" + "'", str41, "\u65e5\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "China" + "'", str42, "China");
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        calendar9.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        int int19 = timeZone18.getRawOffset();
        int int20 = timeZone18.getRawOffset();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18, locale21);
        java.util.Calendar.Builder builder23 = builder7.setTimeZone(timeZone18);
        timeZone18.setID("PT-1S");
        int int27 = timeZone18.getOffset((long) 53942912);
        java.lang.String str28 = timeZone18.getDisplayName();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"PT-1S\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455731666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"PT-1S\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GMT+00:00" + "'", str28, "GMT+00:00");
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime12 = property5.addNoWrapToCopy(55);
        org.joda.time.LocalTime localTime13 = property5.roundFloorCopy();
        int int14 = property5.getLeapAmount();
        boolean boolean15 = property5.isLeap();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        java.lang.String str12 = timeZone10.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=716,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Greenwich Mean Time" + "'", str12, "Greenwich Mean Time");
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.monthOfYear();
        java.lang.String str20 = dateTimeField19.getName();
        boolean boolean21 = dateTimeField19.isLenient();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "monthOfYear" + "'", str20, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = dateTime4.minus((-31449600001L));
        org.joda.time.DateTime dateTime8 = dateTime4.plus(1645455415224L);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths(39662522);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        mutablePeriod28.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        java.lang.String str34 = mutablePeriod28.toString();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval35.withDurationAfterStart(readableDuration36);
        boolean boolean38 = interval19.isBefore((org.joda.time.ReadableInterval) interval35);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusWeeks(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear((int) (byte) 1);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime52 = dateTime48.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight44.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period54 = duration51.toPeriod();
        org.joda.time.Duration duration56 = duration51.plus((long) 1);
        org.joda.time.Duration duration58 = duration56.withMillis(0L);
        org.joda.time.Interval interval59 = interval35.withDurationAfterStart((org.joda.time.ReadableDuration) duration58);
        long long60 = interval59.getStartMillis();
        java.lang.String str61 = interval59.toString();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 100, chronology73);
        org.joda.time.Period period75 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType64, chronology73);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.minuteOfDay();
        org.joda.time.Interval interval77 = interval59.withChronology(chronology73);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        java.util.TimeZone timeZone81 = dateTimeZone80.toTimeZone();
        org.joda.time.Chronology chronology82 = chronology73.withZone(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime10.withZone(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.034S" + "'", str34, "PT0.034S");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31449600001L) + "'", long60 == (-31449600001L));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1969-01-01T23:59:59.999Z/1969-01-01T23:59:59.999Z" + "'", str61, "1969-01-01T23:59:59.999Z/1969-01-01T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT+14:00");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Interval interval8 = interval6.toInterval();
        boolean boolean10 = interval8.equals((java.lang.Object) 9);
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.Interval interval12 = interval8.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int3 = calendar1.getFirstDayOfWeek();
        calendar1.add(5, 14);
        int int7 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.set(365, 53, (int) 'u');
        java.util.Date date12 = calendar1.getTime();
        int int13 = date12.getDate();
        int int14 = date12.getDate();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-50499449868204,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=369,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=268,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Sep 25 15:02:11 GMT 369");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25 + "'", int13 == 25);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25 + "'", int14 == 25);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        int int6 = calendar1.getWeeksInWeekYear();
        boolean boolean7 = calendar1.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(53829956, 21, 885);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 885");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455731809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.toString();
        org.joda.time.PeriodType periodType4 = periodType2.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        boolean boolean17 = mutablePeriod12.isSupported(durationFieldType16);
        int int18 = mutablePeriod8.indexOf(durationFieldType16);
        java.lang.String str19 = durationFieldType16.getName();
        int int20 = mutablePeriod6.get(durationFieldType16);
        boolean boolean21 = periodType4.isSupported(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 292278993, (long) (short) 10, periodType4);
        org.joda.time.Period period23 = mutablePeriod22.toPeriod();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        int int26 = mutableDateTime25.getYearOfEra();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutablePeriod30.set(durationFieldType31, (int) 'a');
        mutablePeriod30.addHours((int) (byte) -1);
        mutablePeriod30.addYears(2022);
        mutableDateTime25.add((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        org.joda.time.DateTime dateTime45 = mutableDateTime42.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime42, readableDuration46, periodType47);
        java.lang.String str49 = mutableDateTime42.toString();
        org.joda.time.Chronology chronology50 = mutableDateTime42.getChronology();
        mutablePeriod30.setPeriod(32L, (long) (short) -1, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) mutablePeriod22, chronology50);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Years]" + "'", str3, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "months" + "'", str19, "months");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str49, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Period period6 = org.joda.time.Period.days(53637206);
        org.joda.time.DateTime dateTime7 = dateTime3.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.DateTime.Property property9 = dateTime7.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder12 = builder0.setDate(792, 54070776, 773);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        boolean boolean7 = mutableDateTime2.isSupported(dateTimeFieldType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.PeriodType periodType29 = mutablePeriod23.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        int int31 = periodType29.indexOf(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) mutableDateTime9, periodType29);
        java.lang.String str33 = mutableDateTime9.toString();
        mutableDateTime9.setDate((long) 4052);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str33, "2022-02-21T00:00:00.001Z");
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        java.util.Date date3 = new java.util.Date(675, (int) (byte) 100, 75110001);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jul 12 00:00:00 GMT 208227");
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale9.getDisplayVariant(locale10);
        int int13 = property7.getMaximumTextLength(locale10);
        java.lang.String str14 = locale10.getCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455731890,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455731890,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period19);
        int int21 = yearMonthDay20.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusYears((int) (short) 1);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.getShortName((long) 53700000);
        java.lang.String str30 = dateTimeZone25.getID();
        int int32 = dateTimeZone25.getOffsetFromLocal(2L);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay23.toDateMidnight(dateTimeZone25);
        org.joda.time.DateTime dateTime34 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.YearMonthDay yearMonthDay38 = property35.addToCopy(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property35.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay40 = property35.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale9.getDisplayVariant(locale10);
        int int13 = property7.getMaximumTextLength(locale10);
        int int14 = property7.getLeapAmount();
        java.lang.String str15 = property7.toString();
        org.joda.time.DateTime dateTime16 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(936);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455731951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=11,MILLISECOND=951,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[year]" + "'", str15, "Property[year]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.minus(readablePeriod30);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay29.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5, (int) (byte) 10);
        int int37 = dateTimeZone35.getStandardOffset((long) 1970);
        org.joda.time.DateTime dateTime38 = yearMonthDay29.toDateTimeAtCurrentTime(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.getNameKey(345600000L);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 18600000 + "'", int37 == 18600000);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) ' ', chronology33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.months();
        mutablePeriod38.set(durationFieldType39, (int) 'a');
        mutablePeriod34.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.PeriodType periodType43 = mutablePeriod34.getPeriodType();
        org.joda.time.PeriodType periodType44 = periodType43.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration29, periodType43);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property49 = dateTime48.secondOfDay();
        org.joda.time.DateTime dateTime51 = dateTime48.withEra(1);
        org.joda.time.DateTime dateTime53 = dateTime48.plusMillis(32772);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.yearOfCentury();
        boolean boolean57 = dateMidnight54.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property59 = dateMidnight54.property(dateTimeFieldType58);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        java.lang.String str62 = periodType61.toString();
        org.joda.time.PeriodType periodType63 = periodType61.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.months();
        mutablePeriod71.set(durationFieldType72, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.months();
        boolean boolean76 = mutablePeriod71.isSupported(durationFieldType75);
        int int77 = mutablePeriod67.indexOf(durationFieldType75);
        java.lang.String str78 = durationFieldType75.getName();
        int int79 = mutablePeriod65.get(durationFieldType75);
        boolean boolean80 = periodType63.isSupported(durationFieldType75);
        org.joda.time.PeriodType periodType81 = periodType63.withSecondsRemoved();
        org.joda.time.PeriodType periodType82 = periodType81.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(readableDuration46, (org.joda.time.ReadableInstant) dateTime48, periodType81);
        org.joda.time.DateTime dateTime84 = dateTime48.withTimeAtStartOfDay();
        int int85 = dateTime84.getMonthOfYear();
        org.joda.time.Duration duration86 = org.joda.time.Duration.ZERO;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration88 = duration29.minus((org.joda.time.ReadableDuration) duration86);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PeriodType[Years]" + "'", str62, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "months" + "'", str78, "months");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((-31449599991L), 0L, periodType2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = periodType2.getFieldType(831);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 831");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("eras");
        java.util.Locale.Builder builder7 = builder3.addUnicodeLocaleAttribute("months");
        java.util.Locale.Builder builder8 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder3.setScript("2022-02-21T14:56:54.103");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-21T14:56:54.103 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(53704400, 8, 271, 0);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withSeconds(11);
        org.joda.time.Period period15 = period9.minusMillis((int) (short) 100);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        org.joda.time.Period period23 = period17.minusMillis((int) (short) 100);
        org.joda.time.Period period24 = period9.withFields((org.joda.time.ReadablePeriod) period17);
        int[] intArray27 = chronology6.get((org.joda.time.ReadablePeriod) period17, (-31449600001L), (long) 53633250);
        int int28 = period17.getMinutes();
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period31 = period17.minusWeeks(822);
        org.joda.time.Period period32 = period31.toPeriod();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType36 = periodType35.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        int[] intArray55 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod50, 1L, (long) 4);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType35, chronology44);
        org.joda.time.Period period58 = period56.plusYears((int) (byte) 100);
        org.joda.time.Period period60 = period58.plusYears(53635369);
        org.joda.time.Period period61 = period32.withFields((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5, (int) (byte) 10);
        int int4 = dateTimeZone2.getStandardOffset((long) 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime9.plusSeconds(10);
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        org.joda.time.DateTime dateTime14 = property13.roundHalfCeilingCopy();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.lang.String str18 = locale15.getDisplayVariant(locale16);
        int int19 = property13.getMaximumTextLength(locale16);
        java.lang.String str20 = dateTimeZone2.getShortName((long) 310, locale16);
        java.lang.String str21 = dateTimeZone2.toString();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18600000 + "'", int4 == 18600000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455732097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+05:10" + "'", str20, "+05:10");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+05:10" + "'", str21, "+05:10");
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(33, 53758767, 367, 969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) 702);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, readableDuration12, periodType13);
        org.joda.time.Chronology chronology15 = mutableDateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        int int21 = dateTime20.getDayOfMonth();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean28 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime32.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = period38.negated();
        int int40 = period38.getMinutes();
        org.joda.time.DateTime dateTime42 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 50473355);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property48 = dateMidnight43.year();
        org.joda.time.DateMidnight dateMidnight49 = property48.roundCeilingCopy();
        java.lang.String str50 = property48.toString();
        org.joda.time.DateMidnight dateMidnight52 = property48.setCopy(301);
        org.joda.time.DateMidnight dateMidnight54 = property48.addToCopy((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.plusWeeks(505);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Property[year]" + "'", str50, "Property[year]");
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("eras");
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        java.lang.String str17 = mutableDateTime10.toString();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.millisOfSecond();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now();
        int int20 = localTime19.size();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        boolean boolean22 = localTime19.equals((java.lang.Object) locale21);
        int int23 = property18.getMaximumTextLength(locale21);
        boolean boolean24 = calendar7.after((java.lang.Object) locale21);
        java.util.Locale.Builder builder25 = builder5.setLocale(locale21);
        java.util.Locale.Builder builder27 = builder5.setRegion("");
        java.util.Locale.Builder builder29 = builder5.setLanguageTag("Englisch");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder5.removeUnicodeLocaleAttribute("35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455732185,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=185,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str17, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("00:00:00.100");
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.DurationField durationField9 = property7.getLeapDurationField();
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime12 = property7.add(0L);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.toMutableDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTime dateTime22 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime25 = dateTime17.withZoneRetainFields(dateTimeZone24);
        mutableDateTime12.setZone(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(dateTimeZone24);
        org.joda.time.Period period29 = org.joda.time.Period.seconds(69);
        org.joda.time.Period period30 = period29.negated();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period33 = period30.withFieldAdded(durationFieldType31, 53633250);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight27.withFieldAdded(durationFieldType31, 53715795);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.Interval interval10 = localDate6.toInterval(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime5.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight1.withZoneRetainFields(dateTimeZone9);
        java.lang.String str14 = dateTimeZone9.getNameKey(10L);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 11, dateTimeZone9);
        org.joda.time.LocalDate localDate17 = localDate15.withYear(53704400);
        org.joda.time.Interval interval18 = localDate17.toInterval();
        org.joda.time.LocalDate.Property property19 = localDate17.monthOfYear();
        org.joda.time.LocalDate localDate21 = localDate17.minusWeeks((-6126));
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        int int5 = localDateTime4.getCenturyOfEra();
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        calendar7.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTime dateTime18 = localDateTime4.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(382);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455732255,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=255,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=255,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        int int6 = mutableDateTime5.getMillisOfSecond();
        int int7 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.property(dateTimeFieldType8);
        mutableDateTime5.addDays(93);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(35417L);
        int int30 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now();
        int int35 = localTime33.compareTo((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        int int38 = mutableDateTime37.getYearOfEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        mutablePeriod42.addHours((int) (byte) -1);
        mutablePeriod42.addYears(2022);
        mutableDateTime37.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.LocalTime localTime51 = localTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.LocalTime localTime53 = localTime51.plusSeconds(100);
        boolean boolean54 = localTime29.isEqual((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property59 = dateTime58.dayOfMonth();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType62);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType66);
        mutablePeriod63.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        java.lang.String str69 = mutablePeriod63.toString();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateTime dateTime71 = localTime51.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property72 = dateTime58.dayOfWeek();
        int int73 = dateTime58.getYearOfEra();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT0.034S" + "'", str69, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1969 + "'", int73 == 1969);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime9.toMutableDateTimeISO();
        int int21 = mutableDateTime9.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 318);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusHours(0);
        int int11 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.millisOfSecond();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455732447,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=447,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 447 + "'", int6 == 447);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.addMonths(301);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        mutableDateTime8.add(durationFieldType11, (int) (byte) 1);
        int int14 = mutableDateTime8.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDayOfMonth(8);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        java.lang.String str33 = mutablePeriod27.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.setValue(0, 2022);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) (byte) 0);
        long long43 = duration42.getMillis();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        long long46 = duration45.getMillis();
        int int47 = duration42.compareTo((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration49 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration45, 2);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight18.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight51.toMutableDateTime();
        mutableDateTime52.add((long) 1);
        org.joda.time.DateTime dateTime55 = mutableDateTime52.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.years();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime52, readableDuration56, periodType57);
        org.joda.time.Chronology chronology59 = mutableDateTime52.getChronology();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfYear((int) (byte) 1);
        int int65 = dateTime64.getDayOfMonth();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime68 = dateTime64.minus((org.joda.time.ReadableDuration) duration67);
        mutableDateTime60.add((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration70 = duration49.plus((org.joda.time.ReadableDuration) duration67);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration67);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration67);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight73.toMutableDateTime();
        mutableDateTime74.add((long) 1);
        org.joda.time.DateTime dateTime77 = mutableDateTime74.toDateTimeISO();
        org.joda.time.DateTime.Property property78 = dateTime77.hourOfDay();
        org.joda.time.DateTime dateTime79 = property78.roundHalfFloorCopy();
        java.util.Locale locale80 = java.util.Locale.PRC;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale80);
        java.lang.String str82 = property78.getAsText(locale80);
        org.joda.time.DateTime dateTime83 = property78.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime84 = dateTime83.withLaterOffsetAtOverlap();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean86 = dateTime83.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.034S" + "'", str33, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645455732459,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=459,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.plusYears(521);
        org.joda.time.LocalDate.Property property11 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate13 = localDate8.plusDays(53676724);
        org.joda.time.LocalDate localDate15 = localDate8.plusYears(541);
        int int16 = localDate8.getDayOfYear();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate.Property property20 = localDate17.yearOfEra();
        org.joda.time.Interval interval21 = localDate17.toInterval();
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.withMillisOfSecond(3);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDate.Property property29 = localDate8.year();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight3.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight3.withMillis((long) 5);
        org.joda.time.Period period11 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight3.withYearOfEra(337);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withFields(readablePartial4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withWeekyear(53857);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime6.withZoneRetainFields(dateTimeZone8);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) 7);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration13, periodType14);
        org.joda.time.PeriodType periodType16 = periodType14.withYearsRemoved();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfCentury();
        int int19 = dateMidnight17.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean26 = dateMidnight17.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutableDateTime28.add(durationFieldType31, (int) (byte) 1);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableInstant) mutableDateTime28, periodType34);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        java.lang.String str38 = periodType37.toString();
        org.joda.time.PeriodType periodType39 = periodType37.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.months();
        mutablePeriod47.set(durationFieldType48, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        boolean boolean52 = mutablePeriod47.isSupported(durationFieldType51);
        int int53 = mutablePeriod43.indexOf(durationFieldType51);
        java.lang.String str54 = durationFieldType51.getName();
        int int55 = mutablePeriod41.get(durationFieldType51);
        boolean boolean56 = periodType39.isSupported(durationFieldType51);
        boolean boolean57 = period36.isSupported(durationFieldType51);
        java.lang.String str58 = durationFieldType51.toString();
        int int59 = periodType14.indexOf(durationFieldType51);
        org.joda.time.PeriodType periodType60 = periodType14.withHoursRemoved();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 885, periodType14);
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = period61.getFieldTypes();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.forFields(durationFieldTypeArray62);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.forFields(durationFieldTypeArray62);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        boolean boolean66 = periodType64.isSupported(durationFieldType65);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[Years]" + "'", str38, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "months" + "'", str54, "months");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "months" + "'", str58, "months");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.Instant instant5 = dateTime3.toInstant();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        mutablePeriod9.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        java.lang.String str15 = mutablePeriod9.toString();
        java.lang.String str16 = mutablePeriod9.toString();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod18.setMillis((int) (short) 100);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.setHours((int) '4');
        mutablePeriod18.addDays(15);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod18.copy();
        org.joda.time.DateTime dateTime28 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 602);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.034S" + "'", str15, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.034S" + "'", str16, "PT0.034S");
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMinimumValue();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addWrapFieldToCopy(147);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455732597,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=597,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 597 + "'", int6 == 597);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Interval interval36 = interval23.withStart(readableInstant35);
        java.lang.String str37 = interval23.toString();
        long long38 = interval23.toDurationMillis();
        long long39 = interval23.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-21T15:02:12.612Z/2022-02-21T15:02:12.646Z" + "'", str37, "2022-02-21T15:02:12.612Z/2022-02-21T15:02:12.646Z");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 34L + "'", long38 == 34L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 34L + "'", long39 == 34L);
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(134);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withWeekOfWeekyear(6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusYears(8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.plusDays(0);
        int int15 = localDateTime14.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear(102);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455732627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 627 + "'", int15 == 627);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(82);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(302);
        int int13 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.year();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455732677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, readableDuration8, periodType9);
        java.lang.String str11 = mutableDateTime4.toString();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime4.millisOfSecond();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now();
        int int14 = localTime13.size();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        boolean boolean16 = localTime13.equals((java.lang.Object) locale15);
        int int17 = property12.getMaximumTextLength(locale15);
        boolean boolean18 = calendar1.after((java.lang.Object) locale15);
        int int19 = calendar1.getWeeksInWeekYear();
        calendar1.set(39720000, 53986456, 54115265, 782, 674);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=39720000,MONTH=53986456,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=54115265,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=782,MINUTE=674,SECOND=12,MILLISECOND=691,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str11, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusYears(2022);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears(517);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        java.lang.String str12 = property11.getAsText();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale13.getDisplayVariant();
        java.lang.String str15 = property11.getAsText(locale13);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1390" + "'", str12, "1390");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1390" + "'", str15, "1390");
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100, chronology11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType2, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMinutes(828);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMillis(12);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay34.toDateMidnight();
        int[] intArray36 = yearMonthDay34.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology11.validate((org.joda.time.ReadablePartial) localDateTime19, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455732717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=717,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2022, 3, 21]");
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        java.lang.String[] strArray22 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean25 = strSet23.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray31 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList41);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList41);
        boolean boolean45 = strSet23.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.lang.String[] strArray68 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        boolean boolean71 = strSet69.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.lang.String[] strArray77 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList78);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.lang.String[] strArray86 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strList87);
        java.lang.String str90 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean91 = strSet69.retainAll((java.util.Collection<java.lang.String>) strList87);
        boolean boolean92 = strSet23.addAll((java.util.Collection<java.lang.String>) strSet69);
        java.util.stream.Stream<java.lang.String> strStream93 = strSet23.stream();
        strSet23.clear();
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strStream93);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime13.plusSeconds(10);
        org.joda.time.DateTime dateTime18 = dateTime13.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        boolean boolean21 = timeOfDay7.isSupported(dateTimeFieldType19);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay7.hourOfDay();
        int int23 = timeOfDay7.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.PeriodType periodType7 = mutablePeriod3.getPeriodType();
        mutablePeriod3.addHours(38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = mutablePeriod3.getFieldType(54022789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        java.lang.String[] strArray22 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean25 = strSet23.isEmpty();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusWeeks(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        int int36 = dateTime35.getDayOfMonth();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime35.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight31.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean41 = strSet23.remove((java.lang.Object) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withDurationAdded((-102387L), 5);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plusWeeks(8);
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight44.toYearMonthDay();
        org.joda.time.DateMidnight.Property property48 = dateMidnight44.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight49 = property48.withMinimumValue();
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight49);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        int int9 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(247);
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths(53953446);
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromCalendarFields(calendar17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withWeekyear(134);
        int int25 = localDateTime24.getDayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        mutablePeriod33.set(durationFieldType34, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        boolean boolean38 = mutablePeriod33.isSupported(durationFieldType37);
        int int39 = mutablePeriod29.indexOf(durationFieldType37);
        java.lang.String str40 = durationFieldType37.getName();
        int int41 = mutablePeriod27.get(durationFieldType37);
        int int42 = mutablePeriod27.getDays();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withDate(53982478, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455732919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=919,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 919 + "'", int6 == 919);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455732919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=12,MILLISECOND=919,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "months" + "'", str40, "months");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("eras");
        java.util.Locale.Builder builder7 = builder3.setLanguageTag("UTC");
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = builder3.build();
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale9.getDisplayName(locale13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "utc");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "utc" + "'", str10, "utc");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "utc" + "'", str15, "utc");
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        java.lang.Object obj0 = null;
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(obj1, chronology13);
        org.joda.time.Interval interval27 = new org.joda.time.Interval(obj0, chronology13);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        mutablePeriod36.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        java.lang.String str42 = mutablePeriod36.toString();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        boolean boolean45 = interval27.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        long long54 = interval52.getStartMillis();
        org.joda.time.MutableInterval mutableInterval55 = interval52.toMutableInterval();
        boolean boolean56 = interval27.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Chronology chronology57 = interval52.getChronology();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0.034S" + "'", str42, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645455732942L + "'", long54 == 1645455732942L);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime2.plusSeconds(10);
        org.joda.time.DateTime dateTime12 = dateTime2.withMillisOfSecond((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (short) 1);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime5.plusMonths(5);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfMonth(8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        int int28 = dateMidnight13.get(dateTimeFieldType26);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.property(dateTimeFieldType26);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        int int33 = periodType31.indexOf(durationFieldType32);
        mutableDateTime11.add(durationFieldType32, (int) ' ');
        org.joda.time.DateTime dateTime37 = dateTime8.withFieldAdded(durationFieldType32, 927);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str12, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(900, 2323, (-52), 552);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 900 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(706, 848, 18, 585, 3946, 997, 53742154);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 585 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        java.util.Date date9 = localDateTime8.toDate();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusYears(940);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(20);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology20 = dateMidnight19.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDayOfMonth(8);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime26.plusSeconds(10);
        org.joda.time.DateTime dateTime31 = dateTime26.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property33 = dateTime31.property(dateTimeFieldType32);
        int int34 = dateMidnight19.get(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType32.getRangeDurationType();
        boolean boolean36 = dateTime18.isSupported(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType32.getDurationType();
        int int38 = localDateTime8.get(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733033,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=33,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 33 + "'", int6 == 33);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Feb 21 15:02:13 GMT 36522");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(134);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.millisOfSecond();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.dayOfMonth();
        mutableDateTime17.addYears(365);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        mutablePeriod25.set(durationFieldType26, (int) 'a');
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        boolean boolean46 = interval36.contains((org.joda.time.ReadableInterval) interval44);
        long long47 = interval44.getEndMillis();
        boolean boolean48 = interval44.containsNow();
        mutablePeriod25.add((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.months();
        mutablePeriod55.set(durationFieldType56, (int) 'a');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.Chronology chronology67 = interval66.getChronology();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 100, chronology67);
        boolean boolean69 = durationFieldType56.isSupported(chronology67);
        boolean boolean70 = durationFieldType51.isSupported(chronology67);
        mutablePeriod25.add((long) '4', chronology67);
        org.joda.time.DurationField durationField72 = chronology67.minutes();
        int int73 = durationField10.compareTo(durationField72);
        long long75 = durationField10.getValueAsLong(1645455662592L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645455733092L + "'", long47 == 1645455733092L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645455662592L + "'", long75 == 1645455662592L);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime9 = property5.addCopy(18600000);
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime11 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        calendar2.set(5, 53700000, (int) (short) 1, (int) (short) -1, (int) ' ', 828);
        calendar2.setLenient(false);
        calendar2.setFirstDayOfWeek((int) (short) 10);
        java.util.TimeZone timeZone14 = calendar2.getTimeZone();
        int int15 = calendar2.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=133,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=53700000,WEEK_OF_YEAR=47,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=-1,MINUTE=32,SECOND=828,MILLISECOND=133,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("months");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        java.util.Calendar.Builder builder12 = builder0.setTimeZone(timeZone10);
        java.util.Date date18 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date18.setMonth((int) (short) 100);
        int int21 = date18.getTimezoneOffset();
        date18.setDate(53637206);
        int int24 = date18.getDay();
        int int25 = date18.getYear();
        date18.setMonth(42);
        java.util.Calendar.Builder builder28 = builder12.setInstant(date18);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455733141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=141,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Jul 03 03:59:00 GMT 148772");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 146869 + "'", int25 == 146869);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        int int28 = localTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property34 = localTime33.minuteOfHour();
        org.joda.time.LocalTime localTime36 = property34.addCopy(86400000L);
        org.joda.time.LocalTime localTime38 = property34.addWrapFieldToCopy(208);
        org.joda.time.LocalTime localTime40 = property34.addWrapFieldToCopy(999);
        org.joda.time.LocalTime localTime42 = property34.addWrapFieldToCopy((int) (byte) -1);
        int int43 = localTime42.size();
        org.joda.time.LocalTime.Property property44 = localTime42.millisOfDay();
        org.joda.time.LocalTime localTime45 = localTime27.withFields((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.Period period50 = new org.joda.time.Period(905, 848, 872, 2000);
        boolean boolean51 = localTime27.equals((java.lang.Object) 905);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 54133173 + "'", int28 == 54133173);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 43200000L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusSeconds(53892927);
        int int9 = localDateTime8.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDayOfMonth((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = localTime8.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime8.minus(readablePeriod10);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight17.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period27 = duration24.toPeriod();
        org.joda.time.Duration duration29 = duration24.plus((long) 1);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTime dateTime39 = dateTime33.plusYears((-1));
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((-1));
        org.joda.time.Period period42 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime43 = localTime8.plus((org.joda.time.ReadablePeriod) period42);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localTime43.getValue((-27424261));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -27424261");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localTime43);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.weekyear();
        java.lang.String str13 = dateMidnight11.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((-1748517800000L));
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        int int18 = mutableDateTime17.getYearOfEra();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.months();
        mutablePeriod22.set(durationFieldType23, (int) 'a');
        mutablePeriod22.addHours((int) (byte) -1);
        mutablePeriod22.addYears(2022);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        org.joda.time.DateTime dateTime37 = mutableDateTime34.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime34, readableDuration38, periodType39);
        java.lang.String str41 = mutableDateTime34.toString();
        org.joda.time.Chronology chronology42 = mutableDateTime34.getChronology();
        mutablePeriod22.setPeriod(32L, (long) (short) -1, chronology42);
        org.joda.time.DurationField durationField44 = chronology42.seconds();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology42);
        mutableDateTime45.addYears((int) (byte) 10);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime45, periodType48);
        int int50 = dateTime15.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property52 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime53 = property52.withMinimumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0022-02-21T00:00:00.000Z" + "'", str13, "0022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str41, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.joda.time.Period period1 = org.joda.time.Period.millis(52);
        org.joda.time.Period period3 = org.joda.time.Period.years((int) (byte) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.forFields(durationFieldTypeArray4);
        org.joda.time.Period period6 = period1.normalizedStandard(periodType5);
        org.joda.time.Days days7 = period1.toStandardDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, readableDuration12, periodType13);
        org.joda.time.Chronology chronology15 = mutableDateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        int int21 = dateTime20.getDayOfMonth();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean28 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Days days29 = duration27.toStandardDays();
        org.joda.time.Period period31 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period33 = period31.minusYears(8);
        org.joda.time.Period period35 = period31.withSeconds(11);
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration27, periodType36);
        org.joda.time.DateTime dateTime40 = dateTime6.minusSeconds(53637206);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime6.toMutableDateTime();
        int int42 = mutableDateTime41.getYearOfCentury();
        mutableDateTime41.setDate(1645455532751L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        int int3 = mutableDateTime2.getYearOfEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        mutablePeriod7.addHours((int) (byte) -1);
        mutablePeriod7.addYears(2022);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.Chronology chronology27 = mutableDateTime19.getChronology();
        mutablePeriod7.setPeriod(32L, (long) (short) -1, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(53636377L, chronology27);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str26, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.plusMinutes(23);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay6 = property4.addWrapFieldToCopy(2022);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(11);
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime1.plusYears((-840));
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks(12);
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(400);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        int int7 = property6.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100, chronology13);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyear();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 21, chronology13);
        org.joda.time.Period period19 = org.joda.time.Period.weeks(53875285);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay20.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean31 = timeOfDay27.isSupported(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.lang.String str46 = mutablePeriod40.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.setValue(0, 2022);
        mutablePeriod40.addDays(31);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay27.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay53.plusSeconds(100);
        org.joda.time.Chronology chronology58 = timeOfDay53.getChronology();
        org.joda.time.TimeOfDay.Property property59 = timeOfDay53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        int int61 = property59.get();
        org.joda.time.TimeOfDay timeOfDay63 = property59.addWrapFieldToCopy(7200000);
        boolean boolean64 = period19.equals((java.lang.Object) property59);
        org.joda.time.LocalTime localTime65 = localTime17.plus((org.joda.time.ReadablePeriod) period19);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.034S" + "'", str46, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 13 + "'", int61 == 13);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localTime65);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology2 = dateMidnight1.getChronology();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfMonth(8);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.String str19 = mutablePeriod13.toString();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.setValue(0, 2022);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        long long29 = duration28.getMillis();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        int int33 = duration28.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, 2);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight4.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, readableDuration42, periodType43);
        org.joda.time.Chronology chronology45 = mutableDateTime38.getChronology();
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology45);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfYear((int) (byte) 1);
        int int51 = dateTime50.getDayOfMonth();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime54 = dateTime50.minus((org.joda.time.ReadableDuration) duration53);
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration35.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(20);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType66 = periodType65.withMillisRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, (org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration70 = duration56.minus(34196642806L);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.034S" + "'", str19, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = dateTimeFormatter27.parseMutableDateTime("PT0.010S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        org.joda.time.DateTime dateTime13 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) 7);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration15, periodType16);
        boolean boolean18 = calendar1.before((java.lang.Object) duration15);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar1.get(915);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 915");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733532,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=532,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        calendar9.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        int int19 = timeZone18.getRawOffset();
        int int20 = timeZone18.getRawOffset();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18, locale21);
        java.util.Calendar.Builder builder23 = builder7.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder25 = builder7.setLenient(true);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder30 = builder25.set(445, 194);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455733544,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks(0);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology18 = dateMidnight17.getChronology();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        mutablePeriod22.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        java.lang.String str28 = mutablePeriod22.toString();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight17.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.year();
        org.joda.time.DateMidnight.Property property32 = dateMidnight29.monthOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.minusMonths(569);
        int int35 = dateMidnight34.getSecondOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0.034S" + "'", str28, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withSecondOfMinute((int) (short) 10);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.fromCalendarFields(calendar27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        boolean boolean32 = localDateTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        boolean boolean34 = localDateTime30.isSupported(durationFieldType33);
        boolean boolean35 = localDateTime23.isSupported(durationFieldType33);
        org.joda.time.Chronology chronology36 = localDateTime23.getChronology();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = chronology36.getDateTimeMillis(54090931, 39652171, 53726113, 799);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39652171 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733581,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=581,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455733581,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=581,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        mutableDateTime8.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime8.add(readableDuration14, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        org.joda.time.Chronology chronology25 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology25.halfdays();
        mutableDateTime8.setChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField30 = chronology25.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(59, 483, 912, 53741340, 53820000, 54, 363, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53741340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale9.getDisplayVariant(locale10);
        int int13 = property7.getMaximumTextLength(locale10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime17.plusSeconds(10);
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        java.lang.String str26 = locale23.getDisplayVariant(locale24);
        int int27 = property21.getMaximumTextLength(locale24);
        java.lang.String str28 = property7.getAsShortText(locale24);
        org.joda.time.DateTime dateTime29 = property7.withMaximumValue();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        int int35 = property7.getMaximumShortTextLength(locale30);
        java.lang.String str36 = property7.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455733609,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=609,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455733609,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=609,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969" + "'", str28, "1969");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FR" + "'", str33, "FR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "year" + "'", str36, "year");
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        long long6 = java.util.Date.UTC(146869, 54000000, 39623410, (-52), 444, 54133173);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 150062329527813000L + "'", long6 == 150062329527813000L);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        java.util.Date date5 = new java.util.Date(0, 451, 0, 53669316, 96);
        int int6 = date5.getDay();
        int int7 = date5.getDay();
        int int8 = date5.getHours();
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 22 13:36:00 GMT 8060");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(12);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.Interval interval15 = localDate11.toInterval(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime10.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight6.withZoneRetainFields(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone14);
        java.lang.StringBuffer stringBuffer19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod33, 1L, (long) 4);
        org.joda.time.DurationField durationField39 = chronology27.eras();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology27);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        int int42 = dateTime40.getMillisOfSecond();
        org.joda.time.DateTime.Property property43 = dateTime40.minuteOfHour();
        java.lang.String str45 = dateTime40.toString("23");
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer19, (org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 648 + "'", int42 == 648);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "23" + "'", str45, "23");
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.lang.String str10 = calendar8.getCalendarType();
        calendar8.roll(32772, 0);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.YearMonthDay yearMonthDay15 = org.joda.time.YearMonthDay.fromCalendarFields(calendar8);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.withFieldAdded(durationFieldType17, 10000);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight22 = property21.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight23 = property21.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight24 = property21.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight26 = property21.addWrapFieldToCopy(7);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        mutablePeriod30.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.lang.String str36 = mutablePeriod30.toString();
        java.lang.String str37 = mutablePeriod30.toString();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod39.setMillis((int) (short) 100);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.minus((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.addWeeks(54111633);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0.034S" + "'", str36, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.034S" + "'", str37, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(yearMonthDay46);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMillisOfDay(5);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withWeekyear(1970);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.secondOfMinute();
        int int13 = localDateTime8.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54133704 + "'", int6 == 54133704);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(134);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = property26.getLocalDateTime();
        org.joda.time.Period period29 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Period period31 = period29.minusMinutes((int) '#');
        int int32 = period29.getWeeks();
        org.joda.time.Period period34 = period29.withDays(52);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minus((org.joda.time.ReadablePeriod) period34);
        java.lang.String str36 = localDateTime27.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withMonthOfYear(19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-25T15:02:13.719" + "'", str36, "2022-02-25T15:02:13.719");
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime8 = property3.roundFloorCopy();
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMonthOfYear(9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMonths(1439);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733733,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=733,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(53833012);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusWeeks(189);
        org.joda.time.Period period12 = org.joda.time.Period.seconds((int) (short) 100);
        int int14 = period12.getValue((int) (short) 0);
        org.joda.time.Period period16 = period12.withWeeks(48);
        org.joda.time.Period period18 = period16.plusSeconds(53825645);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime5.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 769 + "'", int6 == 769);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        java.util.Date date10 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date10);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.weekOfWeekyear();
        mutableDateTime16.addMonths(301);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.property(dateTimeFieldType22);
        boolean boolean25 = dateMidnight12.isSupported(dateTimeFieldType22);
        boolean boolean26 = localDate11.isSupported(dateTimeFieldType22);
        org.joda.time.DateMidnight.Property property27 = dateMidnight0.property(dateTimeFieldType22);
        org.joda.time.DateMidnight dateMidnight29 = property27.addWrapFieldToCopy((-840));
        int int30 = property27.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals(date10.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        org.joda.time.Period period1 = org.joda.time.Period.hours(50473355);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((long) 4, chronology4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, readableDuration11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, 468);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        mutablePeriod18.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.String str24 = mutablePeriod18.toString();
        mutablePeriod18.add(0, 539, 539, 202, (int) (byte) -1, 301, 53636377, (-1));
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay5.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray35 = timeOfDay5.getValues();
        int int36 = timeOfDay5.getHourOfDay();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.lang.String str46 = mutablePeriod40.toString();
        java.lang.String str47 = mutablePeriod40.toString();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod49.setMillis((int) (short) 100);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((-199929599282L), (long) 53774237);
        org.joda.time.Duration duration57 = duration55.plus(1645455424417L);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime59 = dateMidnight58.toMutableDateTime();
        int int60 = mutableDateTime59.getYearOfEra();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.months();
        mutablePeriod64.set(durationFieldType65, (int) 'a');
        mutablePeriod64.addHours((int) (byte) -1);
        mutablePeriod64.addYears(2022);
        mutableDateTime59.add((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime76 = dateMidnight75.toMutableDateTime();
        mutableDateTime76.add((long) 1);
        org.joda.time.DateTime dateTime79 = mutableDateTime76.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime76, readableDuration80, periodType81);
        java.lang.String str83 = mutableDateTime76.toString();
        org.joda.time.Chronology chronology84 = mutableDateTime76.getChronology();
        mutablePeriod64.setPeriod(32L, (long) (short) -1, chronology84);
        org.joda.time.DurationField durationField86 = chronology84.seconds();
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime(chronology84);
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration57, chronology84);
        org.joda.time.TimeOfDay timeOfDay89 = timeOfDay5.withChronologyRetainFields(chronology84);
        org.joda.time.Period period92 = new org.joda.time.Period((long) 54, 0L);
        org.joda.time.TimeOfDay timeOfDay93 = timeOfDay89.plus((org.joda.time.ReadablePeriod) period92);
        org.joda.time.Period period94 = period1.minus((org.joda.time.ReadablePeriod) period92);
        org.joda.time.Period period96 = period92.withWeeks(62);
        org.joda.time.Period period98 = period96.plusDays((-5));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.034S" + "'", str24, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.034S" + "'", str46, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.034S" + "'", str47, "PT0.034S");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str83, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        boolean boolean21 = interval11.contains((org.joda.time.ReadableInterval) interval19);
        boolean boolean22 = interval4.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableDuration23, (org.joda.time.ReadableInstant) dateTime25);
        long long27 = interval26.getEndMillis();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        mutableDateTime29.add((long) 1);
        org.joda.time.DateTime dateTime32 = mutableDateTime29.toDateTimeISO();
        int int33 = dateTime32.getDayOfMonth();
        boolean boolean34 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval26.isBeforeNow();
        boolean boolean36 = interval19.isBefore((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Interval interval37 = interval19.toInterval();
        boolean boolean38 = interval19.isAfterNow();
        org.joda.time.Duration duration39 = interval19.toDuration();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.String str12 = mutablePeriod6.toString();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod28, 1L, (long) 4);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology22);
        mutablePeriod6.setPeriod(1645455232633L, 0L, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(343, 661, 0, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 343 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.034S" + "'", str12, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 3]");
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53850048);
        org.joda.time.LocalDate.Property property2 = localDate1.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate1.withDayOfWeek(843);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 843 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = dateTime1.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime1.plusWeeks((int) ' ');
        int int11 = dateTime1.getMonthOfYear();
        org.joda.time.DateTime dateTime13 = dateTime1.plusHours((-292275054));
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        org.joda.time.Chronology chronology23 = mutableDateTime16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 20, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology23.getZone();
        org.joda.time.DateTime dateTime28 = dateTime13.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField30 = dateTimeField29.getLeapDurationField();
        boolean boolean31 = dateTimeField29.isSupported();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(130);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.addSeconds(575);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        long long20 = duration19.getMillis();
        int int21 = duration16.compareTo((org.joda.time.ReadableDuration) duration19);
        long long22 = duration16.getMillis();
        long long23 = duration16.getStandardSeconds();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 53847221);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration16, 57);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime10.minusMillis(870);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime10.plusSeconds(481);
        int int32 = localDateTime31.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withEra(53741340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53741340 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=930,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 481000 + "'", int32 == 481000);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime2.weekyear();
        int int23 = localDateTime2.size();
        java.lang.String str24 = localDateTime2.toString();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 53);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455733946,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=13,MILLISECOND=946,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T15:02:13.946" + "'", str24, "2022-02-21T15:02:13.946");
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        org.joda.time.Period period1 = org.joda.time.Period.months(53817988);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("8");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        long long7 = dateTimeZone3.adjustOffset((long) 2, true);
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(dateTimeZone3);
        int int9 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight11 = property10.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight12 = property10.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight13 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.stream();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, readableDuration8, periodType9);
        org.joda.time.Chronology chronology11 = mutableDateTime4.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        long long16 = chronology11.add((long) 22, 100L, 0);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.dayOfWeek();
        boolean boolean18 = strSet1.equals((java.lang.Object) dateTimeField17);
        strSet1.clear();
        java.util.stream.Stream<java.lang.String> strStream20 = strSet1.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 22L + "'", long16 == 22L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strStream20);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(134);
        org.joda.time.Period period3 = period1.withMonths(53734070);
        org.joda.time.Period period5 = period3.minusYears(0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime13 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getName((long) 100);
        org.joda.time.DateTime dateTime18 = dateTime13.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 575, dateTimeZone15);
        long long23 = dateTimeZone15.convertLocalToUTC(32L, false, (long) 202);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(1645455463877L, dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) 0, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter2.getParser();
        boolean boolean30 = dateTimeFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = dateTimeFormatter2.parseLocalTime("2022-02-21T14:59:50.975");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) durationFieldType0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfCentury();
        int int16 = dateMidnight14.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean23 = dateMidnight14.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        mutableDateTime25.add(durationFieldType28, (int) (byte) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableInstant) mutableDateTime25, periodType31);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100, chronology45);
        org.joda.time.Period period47 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType36, chronology45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) 31, periodType31, chronology45);
        org.joda.time.PeriodType periodType49 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime11, readableInstant12, periodType31);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod50.setHours(54010168);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.lang.Object obj14 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, 1L, (long) 4);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType17, chronology26);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(obj14, chronology26);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate39.toDateTimeAtMidnight(dateTimeZone42);
        int int46 = dateTimeZone42.getStandardOffset((long) 23);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(1645455245049L, dateTimeZone42);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.Interval interval49 = yearMonthDay8.toInterval(dateTimeZone42);
        org.joda.time.Interval interval50 = interval49.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.addDays(4);
        mutableDateTime1.add((long) 53766846);
        int int11 = mutableDateTime1.getMinuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 896 + "'", int11 == 896);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        mutableDateTime22.add((long) 1);
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        int int28 = mutableDateTime22.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.plus(readableDuration31);
        mutableDateTime22.setMillis((org.joda.time.ReadableInstant) dateMidnight29);
        boolean boolean34 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        boolean boolean41 = mutableDateTime36.isSupported(dateTimeFieldType40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight29.withField(dateTimeFieldType40, 0);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDayOfWeek(954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 954 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 21 + "'", int28 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        calendar9.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        int int19 = timeZone18.getRawOffset();
        int int20 = timeZone18.getRawOffset();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18, locale21);
        java.util.Calendar.Builder builder23 = builder7.setTimeZone(timeZone18);
        java.util.Calendar calendar24 = builder23.build();
        java.util.Calendar calendar25 = builder23.build();
        java.util.Calendar.Builder builder29 = builder23.setWeekDate(2122, 744, 53713891);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder31 = builder23.setCalendarType("DurationField[millis]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: DurationField[millis]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=242,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455734242,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=242,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutableDateTime11.add(durationFieldType14, (int) (byte) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime11, periodType17);
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime11.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar20);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay24 = property22.addWrapFieldToCopy(34);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.hourOfDay();
        int int26 = timeOfDay24.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay24.withSecondOfMinute(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = timeOfDay28.getFieldType(737);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 737");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.set(551);
        mutableDateTime17.addMonths(54);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        calendar2.set(5, 53700000, (int) (short) 1, (int) (short) -1, (int) ' ', 828);
        calendar2.setLenient(false);
        calendar2.setFirstDayOfWeek((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar2.getMinimum(147);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 147");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455734312,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=312,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=53700000,WEEK_OF_YEAR=47,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=-1,MINUTE=32,SECOND=828,MILLISECOND=312,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) -1);
        boolean boolean4 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfCentury();
        int int8 = dateMidnight6.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        boolean boolean15 = dateMidnight6.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight16 = dateTime14.toDateMidnight();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime14);
        int int18 = dateTime14.getMillisOfDay();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 54134320 + "'", int18 == 54134320);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        java.util.Date date3 = dateTime1.toDate();
        date3.setSeconds(18);
        date3.setSeconds(59);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 31 23:59:59 GMT 1969");
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.String str9 = mutablePeriod3.toString();
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod12.setMillis((int) (short) 100);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setHours((int) '4');
        int int18 = mutablePeriod12.getMonths();
        int int19 = mutablePeriod12.getMonths();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withDayOfMonth(8);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        mutablePeriod32.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        java.lang.String str38 = mutablePeriod32.toString();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) mutablePeriod32);
        mutablePeriod32.setValue(0, 2022);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        long long48 = duration47.getMillis();
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        long long51 = duration50.getMillis();
        int int52 = duration47.compareTo((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration50, 2);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight23.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, readableDuration61, periodType62);
        org.joda.time.Chronology chronology64 = mutableDateTime57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(chronology64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear((int) (byte) 1);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.minus((org.joda.time.ReadableDuration) duration72);
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration75 = duration54.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = localDate76.isSupported(dateTimeFieldType77);
        org.joda.time.LocalDate.Property property79 = localDate76.yearOfEra();
        org.joda.time.Interval interval80 = localDate76.toInterval();
        org.joda.time.DateTime dateTime81 = localDate76.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime83 = dateTime81.plusDays(2022);
        org.joda.time.Period period84 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(29583L);
        org.joda.time.Interval interval87 = duration54.toIntervalFrom((org.joda.time.ReadableInstant) dateTime86);
        long long88 = duration54.getStandardDays();
        mutablePeriod12.add((org.joda.time.ReadableDuration) duration54);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.034S" + "'", str9, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.034S" + "'", str10, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.034S" + "'", str38, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.year();
        org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy(53855058);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        java.util.Date date6 = new java.util.Date(734, 677, 828, 147, 140, 53891850);
        date6.setTime(159L);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(1645455553019L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        mutableDateTime3.add((long) 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        mutableDateTime3.set(dateTimeFieldType6, 53);
        mutableDateTime3.addMillis(18);
        mutableDateTime3.setDayOfYear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        int int3 = dateTime1.getYear();
        boolean boolean5 = dateTime1.isEqual((long) 365);
        org.joda.time.DateTime.Property property6 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime8 = property6.addToCopy(521);
        org.joda.time.DateTime dateTime9 = property6.getDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(53760000);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, 1L, (long) 4);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType17, chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter14.withChronology(chronology26);
        boolean boolean40 = dateTimeFormatter14.isOffsetParsed();
        java.lang.Integer int41 = dateTimeFormatter14.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter14.withDefaultYear(134);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTime11.toString(dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1969 + "'", int3 == 1969);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePeriod) mutablePeriod26, 1L, (long) 4);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType11, chronology20);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology20);
        org.joda.time.DateTime dateTime34 = dateTime6.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField35 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField36 = chronology20.seconds();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        mutableDateTime39.add((long) 1);
        org.joda.time.DateTime dateTime42 = mutableDateTime39.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        boolean boolean44 = mutableDateTime39.isSupported(dateTimeFieldType43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime39.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        int[] intArray65 = chronology54.get((org.joda.time.ReadablePeriod) mutablePeriod60, 1L, (long) 4);
        org.joda.time.PeriodType periodType66 = mutablePeriod60.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        int int68 = periodType66.indexOf(durationFieldType67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) mutableDateTime46, periodType66);
        org.joda.time.DateTime dateTime71 = dateTime37.withCenturyOfEra(517);
        java.util.GregorianCalendar gregorianCalendar72 = dateTime71.toGregorianCalendar();
        org.joda.time.Period period77 = new org.joda.time.Period(744, 36522, 1969, 1);
        org.joda.time.DateTime dateTime78 = dateTime71.minus((org.joda.time.ReadablePeriod) period77);
        int[] intArray80 = chronology20.get((org.joda.time.ReadablePeriod) period77, 108000000L);
        org.joda.time.Period period82 = period77.minusHours(881);
        org.joda.time.Hours hours83 = period77.toStandardHours();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 7 + "'", int68 == 7);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gregorianCalendar72);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 1, 6, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(hours83);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(288, 53891850, 53639357, 997, 54030599, 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 997 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        java.lang.String str30 = dateTimeField28.getAsText(100L);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale34.getDisplayVariant(locale35);
        int int38 = property33.getMaximumTextLength(locale34);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale34.getDisplayCountry(locale40);
        java.lang.String str44 = dateTimeField28.getAsText((int) ' ', locale40);
        org.joda.time.YearMonthDay yearMonthDay45 = property12.setCopy("1", locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(1L, dateTimeZone47);
        org.joda.time.DateTime dateTime49 = yearMonthDay45.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay45.year();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        boolean boolean52 = dateTimeField51.isSupported();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455734554,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=554,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455734555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=555,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str43, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32" + "'", str44, "32");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(11);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.DateTime dateTime8 = mutableDateTime5.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, readableDuration9, periodType10);
        org.joda.time.Weeks weeks12 = period11.toStandardWeeks();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.plusYears((int) (byte) 0);
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period21 = period19.minusYears(8);
        org.joda.time.Period period23 = period19.withSeconds(11);
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight17.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        org.joda.time.Period period34 = period19.withField(durationFieldType30, 53700000);
        int int35 = period11.indexOf(durationFieldType30);
        org.joda.time.DateTime dateTime36 = dateTime1.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime37 = dateTime1.withEarlierOffsetAtOverlap();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        boolean boolean42 = calendar39.before((java.lang.Object) dateMidnight40);
        boolean boolean43 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateMidnight40);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        int int53 = mutablePeriod52.getMonths();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableInstant48, (org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("Property[year]");
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.lang.String str62 = dateTimeField56.getAsText(readablePartial57, 1, locale60);
        java.util.Locale locale64 = java.util.Locale.CHINA;
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale65);
        java.lang.String str67 = locale64.getDisplayVariant(locale65);
        java.lang.String str69 = locale64.getExtension('u');
        java.lang.String str70 = dateTimeField56.getAsText((long) 'x', locale64);
        java.lang.String str71 = dateTimeZone45.getShortName(32L, locale64);
        int int73 = dateTimeZone45.getOffsetFromLocal((long) 86399);
        long long75 = dateTimeZone45.convertUTCToLocal((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight40.withZoneRetainFields(dateTimeZone45);
        java.lang.String str77 = dateMidnight40.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455734577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645455734577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "70" + "'", str70, "70");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str77, "2022-02-21T00:00:00.000Z");
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.plusYears(202);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay16.toDateMidnight(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        int int25 = dateTime23.getWeekyear();
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfYear();
        org.joda.time.DateTime dateTime27 = dateTime23.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField28 = chronology12.era();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology30 = dateTimeFormatter2.getChronolgy();
        boolean boolean31 = dateTimeFormatter2.isPrinter();
        boolean boolean32 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withPivotYear(29);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.DurationField durationField6 = dateTimeField5.getLeapDurationField();
        int int8 = dateTimeField5.get(53769898L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        mutableDateTime1.addYears(4);
        int int10 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.setValue(0, 2022);
        int int26 = mutablePeriod15.getDays();
        int int27 = mutablePeriod15.getWeeks();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(chronology36);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        mutablePeriod42.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        java.lang.String str48 = mutablePeriod42.toString();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology58);
        mutablePeriod42.setPeriod(1645455232633L, 0L, chronology58);
        mutablePeriod42.addSeconds((int) (byte) 0);
        long long76 = chronology36.add((org.joda.time.ReadablePeriod) mutablePeriod42, (long) 718, (int) 'u');
        org.joda.time.DateTimeField dateTimeField77 = chronology36.yearOfEra();
        mutablePeriod15.add((long) 122, chronology36);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) 53637206, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(521, 53847221, 722, 917, 39653073, 64, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 917 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.034S" + "'", str48, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-192508671817343L) + "'", long76 == (-192508671817343L));
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy(6);
        java.util.Locale locale22 = new java.util.Locale("2022-02-21T00:00:00.000Z", "2022-02-21T00:00:00.000Z", "PT0.034S");
        java.lang.String str23 = property12.getAsShortText(locale22);
        org.joda.time.DurationField durationField24 = property12.getRangeDurationField();
        java.lang.String str25 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay26 = property12.getYearMonthDay();
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay26.toDateMidnight();
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455734712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=712,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455734712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=712,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.Period period6 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period8 = period6.minusYears(8);
        org.joda.time.Interval interval9 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        boolean boolean11 = interval9.isAfter((long) 744);
        org.joda.time.DateTime dateTime12 = interval9.getStart();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1969-12-31T23:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T23:59:59.999Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(12);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        java.lang.Appendable appendable7 = null;
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withCenturyOfEra(365);
        int int14 = localDateTime13.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int16 = localDateTime13.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusHours(0);
        int int19 = localDateTime13.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable7, (org.joda.time.ReadablePartial) localDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455734754,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=754,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 754 + "'", int14 == 754);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutableDateTime11.add(durationFieldType14, (int) (byte) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime11, periodType17);
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime11.toGregorianCalendar();
        org.joda.time.Period period22 = org.joda.time.Period.weeks((int) '4');
        mutableDateTime11.add((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1645455370198L);
        org.joda.time.Duration duration26 = period22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withDayOfYear(442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 442 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration26);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.Period period29 = new org.joda.time.Period((-31449600001L), chronology15);
        org.joda.time.Period period31 = period29.minusYears(11);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period34 = period31.withField(durationFieldType32, 301);
        org.joda.time.Period period36 = period31.withYears(739);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int3 = localDateTime2.getWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455734827,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=827,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.DurationField durationField9 = property7.getLeapDurationField();
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        long long11 = durationField10.getUnitMillis();
        java.lang.String str12 = durationField10.toString();
        long long14 = durationField10.getMillis(13);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3600000L + "'", long11 == 3600000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DurationField[hours]" + "'", str12, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 46800000L + "'", long14 == 46800000L);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime4 = property2.addCopy((int) (short) 100);
        org.joda.time.LocalTime localTime6 = localTime4.plusHours(40);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.halfdayOfDay();
        boolean boolean9 = dateTimeField8.isSupported();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        java.lang.String str56 = duration55.toString();
        org.joda.time.Duration duration59 = duration55.withDurationAdded((long) 12, 321);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) '#');
        org.joda.time.DateTime.Property property64 = dateTime61.monthOfYear();
        int int65 = dateTime61.getYearOfEra();
        int int66 = dateTime61.getMillisOfSecond();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime69 = dateMidnight68.toMutableDateTime();
        mutableDateTime69.add((long) 1);
        org.joda.time.DateTime dateTime72 = mutableDateTime69.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime69, readableDuration73, periodType74);
        org.joda.time.Weeks weeks76 = period75.toStandardWeeks();
        org.joda.time.Period period78 = period75.minusYears(12);
        org.joda.time.Duration duration79 = period75.toStandardDuration();
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone82);
        mutableDateTime83.add((long) 21);
        org.joda.time.Period period86 = duration79.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime83);
        org.joda.time.Duration duration87 = duration79.toDuration();
        boolean boolean88 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration87);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1969 + "'", int65 == 1969);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 999 + "'", int66 == 999);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(weeks76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5, (int) (byte) 10);
        int int5 = dateTimeZone3.getStandardOffset((long) 1970);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(0L, dateTimeZone3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now();
        int int8 = localTime7.size();
        org.joda.time.LocalTime.Property property9 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime11 = localTime7.withSecondOfMinute((int) '4');
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.era();
        java.lang.String str14 = property13.getAsText();
        org.joda.time.DateMidnight dateMidnight15 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now();
        int int17 = localTime16.size();
        org.joda.time.LocalTime.Property property18 = localTime16.minuteOfHour();
        org.joda.time.LocalTime localTime20 = property18.addCopy((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight15.withField(dateTimeFieldType21, (int) (short) 0);
        org.joda.time.LocalTime localTime26 = localTime7.withField(dateTimeFieldType21, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        org.joda.time.DateTime dateTime31 = mutableDateTime28.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime28, readableDuration32, periodType33);
        org.joda.time.Chronology chronology35 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfYear((int) (byte) 1);
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime40.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean48 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        int int55 = mutablePeriod54.getMonths();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableInstant50, (org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) 10, chronology57);
        org.joda.time.Period period60 = duration43.toPeriod(chronology57);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType21.getField(chronology57);
        boolean boolean62 = localTime6.isSupported(dateTimeFieldType21);
        int int63 = localTime6.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 18600000 + "'", int5 == 18600000);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u897f\u5143" + "'", str14, "\u897f\u5143");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = property3.addWrapFieldToCopy(382);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455734958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=14,MILLISECOND=958,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        int int4 = mutableDateTime3.getYearOfEra();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        mutablePeriod8.addHours((int) (byte) -1);
        mutablePeriod8.addYears(2022);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        org.joda.time.DateTime dateTime23 = mutableDateTime20.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, readableDuration24, periodType25);
        java.lang.String str27 = mutableDateTime20.toString();
        org.joda.time.Chronology chronology28 = mutableDateTime20.getChronology();
        mutablePeriod8.setPeriod(32L, (long) (short) -1, chronology28);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 53766846, (long) 528, chronology28);
        mutablePeriod30.addHours(53743428);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        org.joda.time.DateTime dateTime37 = mutableDateTime34.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime34, readableDuration38, periodType39);
        org.joda.time.Chronology chronology41 = mutableDateTime34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(chronology41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfYear((int) (byte) 1);
        int int47 = dateTime46.getDayOfMonth();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime46.minus((org.joda.time.ReadableDuration) duration49);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean54 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight55.toMutableDateTime();
        boolean boolean60 = dateMidnight55.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight55.withCenturyOfEra(0);
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight62.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        java.lang.String str65 = periodType64.toString();
        org.joda.time.PeriodType periodType66 = periodType64.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType73);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.months();
        mutablePeriod74.set(durationFieldType75, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.months();
        boolean boolean79 = mutablePeriod74.isSupported(durationFieldType78);
        int int80 = mutablePeriod70.indexOf(durationFieldType78);
        java.lang.String str81 = durationFieldType78.getName();
        int int82 = mutablePeriod68.get(durationFieldType78);
        boolean boolean83 = periodType66.isSupported(durationFieldType78);
        org.joda.time.PeriodType periodType84 = periodType66.withHoursRemoved();
        org.joda.time.Period period85 = duration49.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime63, periodType84);
        mutablePeriod30.add((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.weeks();
        mutablePeriod30.set(durationFieldType87, 394);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str27, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PeriodType[Years]" + "'", str65, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "months" + "'", str81, "months");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(durationFieldType87);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(72);
        org.joda.time.Duration duration8 = period7.toStandardDuration();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withDurationAdded((org.joda.time.ReadableDuration) duration8, 0);
        int int11 = localDateTime4.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455735036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        int int3 = dateMidnight2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.yearOfCentury();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        java.lang.String str10 = periodType9.toString();
        org.joda.time.PeriodType periodType11 = periodType9.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 2, (long) (byte) 0, periodType9);
        java.lang.String str13 = periodType9.toString();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 10, chronology22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 3, periodType9, chronology22);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, 711);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) mutablePeriod25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = interval28.withEndMillis(17L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PeriodType[Years]" + "'", str10, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Years]" + "'", str13, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField6 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime7 = property4.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = dateTimeField8.set((long) 39623410, 597);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 597 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455735085,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=85,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology8);
        java.util.Date date16 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromDateFields(date16);
        int int18 = date16.getDay();
        int int19 = date16.getDate();
        boolean boolean20 = dateMidnight10.equals((java.lang.Object) date16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withEra(1);
        org.joda.time.DateTime dateTime27 = dateTime22.plusMillis(32772);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        boolean boolean31 = dateMidnight28.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property33 = dateMidnight28.property(dateTimeFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight.Property property36 = dateMidnight28.property(dateTimeFieldType35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight28.minusYears(146869);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight28.plus(1645455296698L);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        org.joda.time.DateTime dateTime45 = mutableDateTime42.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime42, readableDuration46, periodType47);
        org.joda.time.Chronology chronology49 = mutableDateTime42.getChronology();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfYear((int) (byte) 1);
        int int55 = dateTime54.getDayOfMonth();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime58 = dateTime54.minus((org.joda.time.ReadableDuration) duration57);
        mutableDateTime50.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean62 = duration57.isShorterThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration65 = duration57.withDurationAdded((long) 573, 416);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        java.lang.String str10 = mutableDateTime3.toString();
        mutableDateTime3.addMinutes((int) ' ');
        mutableDateTime3.setYear(134);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime23 = dateTime18.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime3.property(dateTimeFieldType24);
        int int27 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(1695933676800159L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1645801293024L, dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str10, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(35417L);
        int int38 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        int int43 = localTime41.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        int int46 = mutableDateTime45.getYearOfEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        mutablePeriod50.set(durationFieldType51, (int) 'a');
        mutablePeriod50.addHours((int) (byte) -1);
        mutablePeriod50.addYears(2022);
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime59 = localTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime61 = localTime59.plusSeconds(100);
        boolean boolean62 = localTime37.isEqual((org.joda.time.ReadablePartial) localTime59);
        int int63 = property5.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.LocalTime localTime65 = localTime59.minusMinutes(53726113);
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfDay();
        org.joda.time.LocalTime localTime68 = property66.addWrapFieldToCopy(34);
        org.joda.time.LocalTime localTime69 = property66.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean7 = localDate4.isSupported(dateTimeFieldType6);
        int int8 = localDate4.getYear();
        org.joda.time.Period period10 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Period period12 = period10.minusMinutes((int) '#');
        org.joda.time.LocalDate localDate13 = localDate4.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate localDate14 = localDate0.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 10, chronology8);
        org.joda.time.DurationField durationField11 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight3.yearOfEra();
        org.joda.time.DateMidnight dateMidnight37 = property36.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight39 = property36.setCopy("69");
        int int40 = dateMidnight39.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withSeconds(11);
        org.joda.time.Period period7 = period1.minusMillis((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withSeconds(11);
        org.joda.time.Period period15 = period9.minusMillis((int) (short) 100);
        org.joda.time.Period period16 = period1.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period18 = period1.withMinutes(13);
        org.joda.time.Period period20 = period1.plusWeeks(42);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        mutableDateTime22.add((long) 1);
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, readableDuration26, periodType27);
        java.lang.String str29 = mutableDateTime22.toString();
        org.joda.time.Chronology chronology30 = mutableDateTime22.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.secondOfDay();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableDuration36, (org.joda.time.ReadableInstant) dateTime38, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) mutableDateTime32, periodType41);
        org.joda.time.Period period44 = period20.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period46 = period44.minusSeconds(2237499);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str29, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        boolean boolean28 = period22.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withYear(874);
        org.joda.time.Interval interval32 = dateMidnight29.toInterval();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekOfWeekyear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((java.lang.Object) interval32, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDayOfMonth(8);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.lang.String str22 = mutablePeriod16.toString();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.setValue(0, 2022);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        long long35 = duration34.getMillis();
        int int36 = duration31.compareTo((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration38 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, 2);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight7.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.DateTime dateTime44 = mutableDateTime41.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime41, readableDuration45, periodType46);
        org.joda.time.Chronology chronology48 = mutableDateTime41.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfYear((int) (byte) 1);
        int int54 = dateTime53.getDayOfMonth();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime53.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = duration38.plus((org.joda.time.ReadableDuration) duration56);
        java.lang.String str60 = duration38.toString();
        java.lang.Object obj61 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType65 = periodType64.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        int[] intArray84 = chronology73.get((org.joda.time.ReadablePeriod) mutablePeriod79, 1L, (long) 4);
        org.joda.time.Period period85 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType64, chronology73);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(obj61, chronology73);
        org.joda.time.DateTimeField dateTimeField87 = chronology73.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay(chronology73);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration38, chronology73);
        org.joda.time.DateTimeField dateTimeField90 = chronology73.clockhourOfHalfday();
        java.lang.String str91 = chronology73.toString();
        org.joda.time.DurationField durationField92 = chronology73.years();
        org.joda.time.DateTimeField dateTimeField93 = chronology73.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.034S" + "'", str22, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0S" + "'", str60, "PT0S");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ISOChronology[UTC]" + "'", str91, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.Interval interval11 = yearMonthDay8.toInterval();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight14 = property13.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight15 = property13.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays(2);
        boolean boolean18 = interval11.isAfter((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime(dateTimeZone21);
        boolean boolean24 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusWeeks(0);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.weekyear();
        int int32 = dateMidnight30.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.minusMonths(89);
        boolean boolean35 = interval11.isAfter((org.joda.time.ReadableInstant) dateMidnight30);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.DateTime dateTime8 = mutableDateTime5.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, readableDuration9, periodType10);
        org.joda.time.Chronology chronology12 = mutableDateTime5.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight3.toMutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = mutableDateTime14.compareTo(readableInstant15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        boolean boolean4 = calendar1.before((java.lang.Object) dateMidnight2);
        int int6 = calendar1.getMaximum(16);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePeriod) mutablePeriod30, 1L, (long) 4);
        org.joda.time.Period period36 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType15, chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter12.withChronology(chronology24);
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter37.withPivotYear(312);
        boolean boolean41 = dateTimeFormatter40.isPrinter();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder47.setExtension('a', "P0Y");
        java.util.Locale.Builder builder51 = builder47.clear();
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = locale52.getDisplayScript();
        boolean boolean54 = locale52.hasExtensions();
        int int55 = property46.getMaximumShortTextLength(locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter40.withLocale(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = calendar1.getDisplayName(595, 189, locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455735403,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=403,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7200000 + "'", int6 == 7200000);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy((long) (byte) 10);
        int int11 = localDateTime10.getWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455735429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int6 = date5.getHours();
        int int7 = date5.getYear();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = timeOfDay8.getFieldType(0);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday();
        int int12 = dateTime11.getDayOfMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(134);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy(18600000);
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        java.util.Locale locale13 = java.util.Locale.PRC;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields(calendar14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromCalendarFields(calendar22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDayOfMonth(8);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime33.plusSeconds(10);
        org.joda.time.DateTime dateTime38 = dateTime33.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property40 = dateTime38.property(dateTimeFieldType39);
        int int41 = dateMidnight26.get(dateTimeFieldType39);
        int int42 = localDateTime23.indexOf(dateTimeFieldType39);
        int int43 = localDateTime19.get(dateTimeFieldType39);
        org.joda.time.LocalDateTime.Property property44 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = property44.getLocalDateTime();
        int int46 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455735480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455735480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455735480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        mutableDateTime10.addDays((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.MutableDateTime mutableDateTime18 = property7.addWrapField(11);
        mutableDateTime18.setMillis(1645455354648L);
        int int21 = mutableDateTime18.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setWeekOfWeekyear(39662522);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39662522 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35417L + "'", long16 == 35417L);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) 'u');
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay12.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        java.lang.String str17 = property12.getAsText();
        org.joda.time.YearMonthDay yearMonthDay19 = property12.addToCopy(0);
        int int20 = yearMonthDay19.size();
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 468, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay19.toDateMidnight(dateTimeZone25);
        java.lang.String str30 = dateTimeZone25.getNameKey((long) 364);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+14:00");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        mutablePeriod33.set(durationFieldType34, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        boolean boolean38 = mutablePeriod33.isSupported(durationFieldType37);
        int int39 = mutablePeriod29.indexOf(durationFieldType37);
        java.lang.String str40 = durationFieldType37.getName();
        mutablePeriod25.add(durationFieldType37, (int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay20.withFieldAdded(durationFieldType37, 3);
        int int45 = yearMonthDay44.size();
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay44.dayOfMonth();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfYear();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.Interval interval51 = localDate47.toInterval(dateTimeZone50);
        boolean boolean52 = dateTimeZone50.isFixed();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone50);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.addWrapField(6);
        int int57 = property46.compareTo((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = null;
        org.joda.time.format.DateTimeParser dateTimeParser60 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter59, dateTimeParser60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType65 = periodType64.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        int[] intArray84 = chronology73.get((org.joda.time.ReadablePeriod) mutablePeriod79, 1L, (long) 4);
        org.joda.time.Period period85 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType64, chronology73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter61.withChronology(chronology73);
        org.joda.time.format.DateTimeParser dateTimeParser87 = dateTimeFormatter86.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter86.withPivotYear(312);
        org.joda.time.Chronology chronology90 = dateTimeFormatter86.getChronolgy();
        org.joda.time.Period period91 = new org.joda.time.Period(0L, chronology90);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(chronology90);
        org.joda.time.DateTimeField dateTimeField93 = chronology90.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime94 = new org.joda.time.LocalTime((java.lang.Object) property46, chronology90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "months" + "'", str40, "months");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNull(dateTimeParser87);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(15);
        org.joda.time.LocalTime localTime4 = localTime0.plusHours(53743428);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        int int9 = localTime7.compareTo((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        int int12 = mutableDateTime11.getYearOfEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.months();
        mutablePeriod16.set(durationFieldType17, (int) 'a');
        mutablePeriod16.addHours((int) (byte) -1);
        mutablePeriod16.addYears(2022);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.LocalTime localTime25 = localTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.LocalTime localTime27 = localTime25.plusSeconds(100);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        int int34 = dateTime33.getDayOfYear();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime35.plusMinutes(32769);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime46 = dateTime42.minusHours(10);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime42, periodType47);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = timeOfDay50.getFieldTypes();
        org.joda.time.Chronology chronology52 = timeOfDay50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int54 = timeOfDay50.get(dateTimeFieldType53);
        int int55 = dateTime42.get(dateTimeFieldType53);
        int int56 = localTime25.get(dateTimeFieldType53);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime25);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 365 + "'", int34 == 365);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 15 + "'", int54 == 15);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(899);
        org.joda.time.DateTime dateTime23 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay10.plusDays(457070);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        mutablePeriod6.setPeriod(32L, (long) (short) -1, chronology26);
        org.joda.time.DurationField durationField28 = chronology26.seconds();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(1L, dateTimeZone31);
        org.joda.time.Chronology chronology33 = chronology26.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology26);
        java.lang.String str35 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology26.dayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str25, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        org.joda.time.DateTime dateTime5 = dateTime3.minusWeeks(448);
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration13);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100, chronology29);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.secondOfDay();
        mutablePeriod14.setPeriod((long) 70, 34L, chronology29);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((long) 1439, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.yearOfEra();
        boolean boolean37 = dateTime6.equals((java.lang.Object) chronology29);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology29.getDateTimeMillis((long) 416, 999, 222, 150, 412);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay21 = property12.withMinimumValue();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = property12.getAsText(locale22);
        org.joda.time.YearMonthDay yearMonthDay27 = property12.setCopy(53704400);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        int int31 = mutableDateTime30.getYearOfEra();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.months();
        mutablePeriod35.set(durationFieldType36, (int) 'a');
        mutablePeriod35.addHours((int) (byte) -1);
        mutablePeriod35.addYears(2022);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        mutableDateTime47.add((long) 1);
        org.joda.time.DateTime dateTime50 = mutableDateTime47.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, readableDuration51, periodType52);
        java.lang.String str54 = mutableDateTime47.toString();
        org.joda.time.Chronology chronology55 = mutableDateTime47.getChronology();
        mutablePeriod35.setPeriod(32L, (long) (short) -1, chronology55);
        org.joda.time.DurationField durationField57 = chronology55.seconds();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) 440, chronology55);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.LocalDate localDate62 = localDate60.withYear(15);
        int int63 = property12.compareTo((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.YearMonthDay yearMonthDay64 = property12.withMinimumValue();
        int int65 = yearMonthDay64.getYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455735741,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=741,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455735741,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=741,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str54, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-292275054) + "'", int65 == (-292275054));
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundFloor();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.secondOfMinute();
        mutableDateTime9.setChronology(chronology17);
        org.joda.time.DurationField durationField25 = chronology17.years();
        int int28 = durationField25.getDifference((long) 159, (long) 21);
        long long31 = durationField25.add(623L, (long) 189);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5964278400623L + "'", long31 == 5964278400623L);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("P0Y", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("gregory", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("P0Y", throwable9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("gregory", (java.lang.Throwable) iOException10);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException10);
        iOException6.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException("", (java.lang.Throwable) iOException6);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        java.lang.String str31 = mutablePeriod25.toString();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) mutablePeriod25);
        boolean boolean33 = interval15.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        mutableDateTime35.add((long) 1);
        org.joda.time.DateTime dateTime38 = mutableDateTime35.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime35, readableDuration39, periodType40);
        java.lang.String str42 = mutableDateTime35.toString();
        mutableDateTime35.addMinutes((int) ' ');
        int int45 = mutableDateTime35.getCenturyOfEra();
        mutableDateTime35.addHours(53636377);
        boolean boolean48 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.Interval interval49 = interval15.toInterval();
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(0L, (long) 120);
        boolean boolean54 = interval49.overlaps((org.joda.time.ReadableInterval) interval53);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str42, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("1970-01-05T00:00:00.000+116:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1970-01-05t00:00:00.000+116:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((-1));
        long long12 = dateTime11.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62467200001L) + "'", long12 == (-62467200001L));
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(891);
        org.joda.time.Hours hours2 = period1.toStandardHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfWeek(7);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy(0);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withDayOfYear((int) (short) 10);
        int int14 = dateMidnight13.getSecondOfDay();
        org.joda.time.DateMidnight.Property property15 = dateMidnight13.monthOfYear();
        org.joda.time.DateMidnight dateMidnight16 = property15.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight18 = property15.addToCopy(2000);
        boolean boolean20 = dateMidnight18.isEqual(0L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod40, 1L, (long) 4);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType25, chronology34);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) 0, 1645455232453L, chronology34);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight18.toMutableDateTime(chronology34);
        long long49 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight51 = property8.setCopy("-1970-03-07T00:07:00.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-1970-03-07T00:07:00.000Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60832L) + "'", long49 == (-60832L));
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        boolean boolean41 = interval31.contains((org.joda.time.ReadableInterval) interval39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        int int55 = mutablePeriod54.getMonths();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableInstant50, (org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        boolean boolean58 = interval48.contains((org.joda.time.ReadableInterval) interval56);
        boolean boolean59 = interval31.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Interval interval60 = interval24.overlap((org.joda.time.ReadableInterval) interval48);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property62 = localDate61.dayOfYear();
        org.joda.time.DateMidnight dateMidnight63 = localDate61.toDateMidnight();
        org.joda.time.Chronology chronology64 = localDate61.getChronology();
        org.joda.time.LocalDate.Property property65 = localDate61.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(1L, dateTimeZone67);
        org.joda.time.Interval interval69 = localDate61.toInterval(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime71 = dateMidnight70.toMutableDateTime();
        mutableDateTime71.add((long) 1);
        org.joda.time.DateTime dateTime74 = mutableDateTime71.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.years();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime71, readableDuration75, periodType76);
        org.joda.time.Chronology chronology78 = mutableDateTime71.getChronology();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(chronology78);
        boolean boolean80 = interval69.contains((org.joda.time.ReadableInstant) mutableDateTime79);
        org.joda.time.Interval interval81 = interval48.withEnd((org.joda.time.ReadableInstant) mutableDateTime79);
        org.joda.time.Interval interval82 = interval14.gap((org.joda.time.ReadableInterval) interval81);
        org.joda.time.ReadableInterval readableInterval83 = null;
        boolean boolean84 = interval81.overlaps(readableInterval83);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMillis(27);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusMinutes(445);
        org.joda.time.Period period11 = org.joda.time.Period.weeks(891);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plus((org.joda.time.ReadablePeriod) period11);
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withCenturyOfEra(365);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withDayOfMonth(8);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        mutablePeriod32.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        java.lang.String str38 = mutablePeriod32.toString();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) mutablePeriod32);
        mutablePeriod32.setValue(0, 2022);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        long long48 = duration47.getMillis();
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        long long51 = duration50.getMillis();
        int int52 = duration47.compareTo((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration50, 2);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight23.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, readableDuration61, periodType62);
        org.joda.time.Chronology chronology64 = mutableDateTime57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(chronology64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear((int) (byte) 1);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.minus((org.joda.time.ReadableDuration) duration72);
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration75 = duration54.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Minutes minutes76 = duration75.toStandardMinutes();
        org.joda.time.Duration duration78 = new org.joda.time.Duration((long) (byte) 0);
        long long79 = duration78.getMillis();
        org.joda.time.Duration duration81 = new org.joda.time.Duration((long) (byte) 0);
        long long82 = duration81.getMillis();
        int int83 = duration78.compareTo((org.joda.time.ReadableDuration) duration81);
        int int84 = duration75.compareTo((org.joda.time.ReadableDuration) duration81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime16.plus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime16.minusHours(86399999);
        int int88 = localDateTime87.getSecondOfMinute();
        int int89 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime87);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455735936,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=936,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54135935 + "'", int5 == 54135935);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455735936,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=15,MILLISECOND=936,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.034S" + "'", str38, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 15 + "'", int88 == 15);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        mutablePeriod39.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        java.lang.String str45 = mutablePeriod39.toString();
        java.lang.String str46 = mutablePeriod39.toString();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod48.setMillis((int) (short) 100);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType58);
        mutablePeriod55.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod59);
        java.lang.String str61 = mutablePeriod55.toString();
        java.lang.String str62 = mutablePeriod55.toString();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod64.setMillis((int) (short) 100);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray68 = mutablePeriod64.getValues();
        mutablePeriod48.add((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay33.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.TimeOfDay.Property property71 = timeOfDay33.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = timeOfDay33.getFieldType(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.034S" + "'", str45, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.034S" + "'", str46, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT0.034S" + "'", str61, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT0.034S" + "'", str62, "PT0.034S");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks(0);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getName((long) 100);
        org.joda.time.DateTime dateTime28 = dateTime23.withZoneRetainFields(dateTimeZone25);
        int int30 = dateTimeZone25.getOffset((-31449600001L));
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 10, (long) 14, dateTimeZone25);
        mutableDateTime1.setZone(dateTimeZone25);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = localTime33.withField(dateTimeFieldType34, 53953446);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutablePeriod3.add(readableDuration7);
        mutablePeriod3.setPeriod(62135596799930L, 52L);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutablePeriod15.add(readableDuration16);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.months();
        mutablePeriod22.set(durationFieldType23, (int) 'a');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 100, chronology34);
        boolean boolean36 = durationFieldType23.isSupported(chronology34);
        mutablePeriod15.setPeriod((long) '4', chronology34);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property39 = localDate38.dayOfYear();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.Interval interval42 = localDate38.toInterval(dateTimeZone41);
        boolean boolean43 = dateTimeZone41.isFixed();
        org.joda.time.Chronology chronology44 = chronology34.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField45 = chronology44.weekyears();
        mutablePeriod3.setPeriod((long) 138, (long) 594, chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.halfdayOfDay();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(53704400, 8, 271, 0);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withSeconds(11);
        org.joda.time.Period period15 = period9.minusMillis((int) (short) 100);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        org.joda.time.Period period23 = period17.minusMillis((int) (short) 100);
        org.joda.time.Period period24 = period9.withFields((org.joda.time.ReadablePeriod) period17);
        int[] intArray27 = chronology6.get((org.joda.time.ReadablePeriod) period17, (-31449600001L), (long) 53633250);
        int int28 = period17.getMinutes();
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        org.joda.time.Chronology chronology38 = mutableDateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(chronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfYear((int) (byte) 1);
        int int44 = dateTime43.getDayOfMonth();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime43.minus((org.joda.time.ReadableDuration) duration46);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean51 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Minutes minutes52 = duration46.toStandardMinutes();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight53.toMutableDateTime();
        mutableDateTime54.add((long) 1);
        org.joda.time.DateTime dateTime57 = mutableDateTime54.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.years();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, readableDuration58, periodType59);
        org.joda.time.Chronology chronology61 = mutableDateTime54.getChronology();
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(chronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfYear((int) (byte) 1);
        int int67 = dateTime66.getDayOfMonth();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime70 = dateTime66.minus((org.joda.time.ReadableDuration) duration69);
        mutableDateTime62.add((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean74 = duration69.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Period period75 = duration69.toPeriod();
        org.joda.time.Period period76 = duration69.toPeriod();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime80 = dateTime78.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime82 = dateTime80.plusHours((int) (byte) 100);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType84 = periodType83.withSecondsRemoved();
        org.joda.time.Period period85 = duration69.toPeriodTo((org.joda.time.ReadableInstant) dateTime80, periodType84);
        org.joda.time.Duration duration86 = duration69.toDuration();
        java.lang.String str87 = duration86.toString();
        org.joda.time.Duration duration90 = duration86.withDurationAdded((long) 53897664, 53891850);
        org.joda.time.Duration duration91 = duration46.minus((org.joda.time.ReadableDuration) duration90);
        boolean boolean92 = mutablePeriod4.equals((java.lang.Object) duration90);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT0S" + "'", str87, "PT0S");
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(134);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withWeekOfWeekyear(6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusYears(8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.plusDays(0);
        int int15 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=161,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54136161 + "'", int15 == 54136161);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("AD");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ad" + "'", str2, "ad");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ad" + "'", str6, "ad");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ad" + "'", str7, "ad");
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.yearOfCentury();
        int int9 = dateMidnight7.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = dateMidnight7.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight7.yearOfCentury();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutablePeriod21.set(durationFieldType22, (int) 'a');
        mutablePeriod21.addHours((int) (byte) -1);
        mutablePeriod21.addYears(2022);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadablePeriod) mutablePeriod21);
        boolean boolean30 = interval6.isBefore((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay33.getFieldTypes();
        org.joda.time.Chronology chronology35 = timeOfDay33.getChronology();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        int int38 = mutableDateTime37.getYearOfEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        mutablePeriod42.addHours((int) (byte) -1);
        mutablePeriod42.addYears(2022);
        mutableDateTime37.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight53.toMutableDateTime();
        mutableDateTime54.add((long) 1);
        org.joda.time.DateTime dateTime57 = mutableDateTime54.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.years();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, readableDuration58, periodType59);
        java.lang.String str61 = mutableDateTime54.toString();
        org.joda.time.Chronology chronology62 = mutableDateTime54.getChronology();
        mutablePeriod42.setPeriod(32L, (long) (short) -1, chronology62);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay33.minus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.minusMillis(59);
        long long68 = chronology31.set((org.joda.time.ReadablePartial) timeOfDay66, 141375144960000021L);
        org.joda.time.DurationField durationField69 = chronology31.centuries();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str61, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 141375145014136156L + "'", long68 == 141375145014136156L);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(557);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusMinutes(54135935);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusWeeks(53763155);
        int int9 = localDateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736244,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=244,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(6);
        org.joda.time.LocalTime localTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfCentury();
        int int11 = dateMidnight9.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean18 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.months();
        mutableDateTime20.add(durationFieldType23, (int) (byte) 1);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType27 = periodType26.withYearsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) mutableDateTime20, periodType26);
        java.util.GregorianCalendar gregorianCalendar29 = mutableDateTime20.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar29);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        int int45 = dateTime44.getDayOfMonth();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = duration47.toPeriod();
        org.joda.time.Period period54 = duration47.toPeriod();
        org.joda.time.Hours hours55 = period54.toStandardHours();
        org.joda.time.Period period57 = period54.withMonths(53637206);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay30.withPeriodAdded((org.joda.time.ReadablePeriod) period54, (int) '#');
        boolean boolean60 = localTime8.isBefore((org.joda.time.ReadablePartial) timeOfDay59);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay59.plusHours(53766846);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withMillisOfSecond(40);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 0, 53, 32769, 828, 872, 0, (int) (short) 1, 6);
        mutablePeriod8.addDays(12);
        int int11 = mutablePeriod8.getWeeks();
        org.joda.time.Period period12 = mutablePeriod8.toPeriod();
        mutablePeriod8.add(1645455642662L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32769 + "'", int11 == 32769);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(35417L);
        int int30 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now();
        int int35 = localTime33.compareTo((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        int int38 = mutableDateTime37.getYearOfEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        mutablePeriod42.addHours((int) (byte) -1);
        mutablePeriod42.addYears(2022);
        mutableDateTime37.add((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.LocalTime localTime51 = localTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.LocalTime localTime53 = localTime51.plusSeconds(100);
        boolean boolean54 = localTime29.isEqual((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.LocalTime localTime56 = localTime51.minusSeconds(41);
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime62 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay57.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.plusMillis((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay64.minus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay64.minusMinutes(53726113);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay76.withMinuteOfHour(57);
        int int79 = localTime56.compareTo((org.joda.time.ReadablePartial) timeOfDay76);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime82 = dateTime81.toLocalTime();
        org.joda.time.LocalTime localTime84 = localTime82.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property85 = localTime84.minuteOfHour();
        org.joda.time.LocalTime localTime86 = property85.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime88 = property85.setCopy(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int90 = localTime88.get(dateTimeFieldType89);
        boolean boolean91 = localTime56.isSupported(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime93 = localTime56.withMinuteOfHour(595);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 595 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime3.plusMinutes(9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(476);
        long long13 = dateTime10.getMillis();
        int int14 = dateTime10.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31449060001L) + "'", long13 == (-31449060001L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutableDateTime1.addHours(8);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 100, chronology28);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType19, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.hourOfHalfday();
        long long35 = dateTimeField32.add(1645455402396L, (long) 53697926);
        int int36 = mutableDateTime1.get(dateTimeField32);
        long long38 = dateTimeField32.roundHalfCeiling(29979104400000L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 194957989002396L + "'", long35 == 194957989002396L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 29979104400000L + "'", long38 == 29979104400000L);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        calendar8.setFirstDayOfWeek(53742);
        int int12 = calendar8.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53742,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53742 + "'", int12 == 53742);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        mutableDateTime2.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.dayOfYear();
        int int9 = property8.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundFloor();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.secondOfMinute();
        mutableDateTime10.setChronology(chronology18);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 3599, chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.yearOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekOfWeekyear();
        org.joda.time.DateTime dateTime38 = dateTime27.toDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.minusMonths((int) (short) -1);
        int int50 = yearMonthDay47.size();
        org.joda.time.YearMonthDay.Property property51 = yearMonthDay47.year();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale52);
        int int55 = property51.getMaximumShortTextLength(locale52);
        org.joda.time.YearMonthDay yearMonthDay56 = property51.withMaximumValue();
        int int57 = property51.get();
        int int58 = property51.getMaximumValueOverall();
        org.joda.time.DurationField durationField59 = property51.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay60 = property51.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay62 = property51.addWrapFieldToCopy(0);
        org.joda.time.DurationField durationField63 = property51.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property51.getFieldType();
        int int65 = dateTime27.get(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645455736469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645455736469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertNull(durationField59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(3600000L);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withMonthsRemoved();
        java.lang.String str7 = periodType6.toString();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 55, periodType6);
        org.joda.time.PeriodType periodType9 = periodType6.withDaysRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 13, periodType6);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        java.lang.String str14 = periodType13.toString();
        org.joda.time.PeriodType periodType15 = periodType13.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutablePeriod23.set(durationFieldType24, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        boolean boolean28 = mutablePeriod23.isSupported(durationFieldType27);
        int int29 = mutablePeriod19.indexOf(durationFieldType27);
        java.lang.String str30 = durationFieldType27.getName();
        int int31 = mutablePeriod17.get(durationFieldType27);
        boolean boolean32 = periodType15.isSupported(durationFieldType27);
        org.joda.time.PeriodType periodType33 = periodType15.withSecondsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime36, readableDuration40, periodType41);
        org.joda.time.Chronology chronology43 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(2L, (long) 53676724, periodType33, chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1645401600001L, (long) 50400000, periodType6, chronology43);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod47.addMinutes(39617292);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PeriodType[MonthsNoMonths]" + "'", str7, "PeriodType[MonthsNoMonths]");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Years]" + "'", str14, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "months" + "'", str30, "months");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.Interval interval11 = localDate7.toInterval();
        int int12 = localDate7.getWeekOfWeekyear();
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        org.joda.time.LocalDate localDate15 = localDate7.withCenturyOfEra(33078);
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths(53885772);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        java.lang.String str25 = mutableDateTime24.toString();
        mutableDateTime24.setMonthOfYear(1);
        mutableDateTime24.addWeekyears(4);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime24.toMutableDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime21.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = localDate15.toDateTimeAtMidnight(dateTimeZone31);
        java.lang.String str36 = dateTimeZone31.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(734, 53784863, 706, 53970536, 163, (int) (short) 10, 53909242, dateTimeZone31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53970536 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str25, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withOffsetParsed();
        java.lang.Integer int31 = dateTimeFormatter30.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter30.print((long) 316);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(int31);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(36534, 985, 718);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36534 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 53808326);
        long long2 = mutableDateTime1.getMillis();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 53808326L + "'", long2 == 53808326L);
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval4 = new org.joda.time.Interval(readableDuration1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        boolean boolean11 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        int int14 = mutableDateTime13.getYearOfEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.months();
        mutablePeriod18.set(durationFieldType19, (int) 'a');
        mutablePeriod18.addHours((int) (byte) -1);
        mutablePeriod18.addYears(2022);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime30, readableDuration34, periodType35);
        java.lang.String str37 = mutableDateTime30.toString();
        org.joda.time.Chronology chronology38 = mutableDateTime30.getChronology();
        mutablePeriod18.setPeriod(32L, (long) (short) -1, chronology38);
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(1L, dateTimeZone43);
        org.joda.time.Chronology chronology45 = chronology38.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime9.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(53713732L, dateTimeZone43);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str37, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusYears(365);
        org.joda.time.DateMidnight dateMidnight11 = dateTime8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withMillis(1645401600096L);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        java.lang.String str17 = periodType16.toString();
        org.joda.time.PeriodType periodType18 = periodType16.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        mutablePeriod26.set(durationFieldType27, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        boolean boolean31 = mutablePeriod26.isSupported(durationFieldType30);
        int int32 = mutablePeriod22.indexOf(durationFieldType30);
        java.lang.String str33 = durationFieldType30.getName();
        int int34 = mutablePeriod20.get(durationFieldType30);
        boolean boolean35 = periodType18.isSupported(durationFieldType30);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 292278993, (long) (short) 10, periodType18);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight11.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalDate localDate38 = dateMidnight11.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PeriodType[Years]" + "'", str17, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "months" + "'", str33, "months");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setWeekDate(50473355, 517, 301);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutablePeriod16.add(readableDuration17);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutablePeriod23.set(durationFieldType24, (int) 'a');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100, chronology35);
        boolean boolean37 = durationFieldType24.isSupported(chronology35);
        mutablePeriod16.setPeriod((long) '4', chronology35);
        int[] intArray39 = mutablePeriod16.getValues();
        java.util.Calendar.Builder builder40 = builder14.setFields(intArray39);
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromCalendarFields(calendar42);
        calendar42.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        boolean boolean52 = timeZone51.observesDaylightTime();
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        java.time.ZoneId zoneId55 = timeZone51.toZoneId();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.Calendar.Builder builder58 = builder14.setTimeZone(timeZone57);
        java.util.Calendar.Builder builder63 = builder14.setTimeOfDay(0, 321, 569, 53825645);
        java.util.Calendar.Builder builder67 = builder14.setTimeOfDay(0, 13, 53697926);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder69 = builder14.setCalendarType("1970-01-05T20:00:00.010+116:00/1970-01-05T20:00:00.014+116:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 1970-01-05T20:00:00.010+116:00/1970-01-05T20:00:00.014+116:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645455736640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        int int5 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime7 = localTime0.withMillisOfSecond(312);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        org.joda.time.LocalTime localTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("24");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone3 = calendar2.getTimeZone();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar2);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455736672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.plusDays(12);
        int int26 = localDateTime25.size();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours(100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths(70);
        int int31 = localDateTime28.getYearOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736679,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=679,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(134);
        int int9 = localDateTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736700,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=700,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 78360100 + "'", int9 == 78360100);
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Period period6 = org.joda.time.Period.days(53637206);
        org.joda.time.DateTime dateTime7 = dateTime3.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period9 = period6.plusSeconds(105);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        int int13 = periodType11.indexOf(durationFieldType12);
        boolean boolean14 = period6.isSupported(durationFieldType12);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.DurationField durationField33 = chronology31.weeks();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology31);
        mutableDateTime17.setChronology(chronology31);
        org.joda.time.DurationField durationField36 = chronology31.hours();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 208, chronology31);
        org.joda.time.DurationField durationField38 = durationFieldType12.getField(chronology31);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfYear();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate39.toInterval(dateTimeZone42);
        boolean boolean44 = dateTimeZone42.isFixed();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.addWrapField(6);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property50 = localDate49.dayOfYear();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Interval interval53 = localDate49.toInterval(dateTimeZone52);
        long long56 = dateTimeZone52.adjustOffset((long) 2, true);
        org.joda.time.DateMidnight dateMidnight57 = org.joda.time.DateMidnight.now(dateTimeZone52);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        mutablePeriod61.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int67 = mutablePeriod61.getHours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray68 = mutablePeriod61.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight57.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        int int70 = dateMidnight57.getDayOfMonth();
        org.joda.time.Chronology chronology71 = dateMidnight57.getChronology();
        org.joda.time.DateTime dateTime72 = mutableDateTime48.toDateTime(chronology71);
        boolean boolean73 = durationFieldType12.isSupported(chronology71);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 21 + "'", int70 == 21);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy(86400000L);
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(208);
        org.joda.time.LocalTime localTime11 = property5.addWrapFieldToCopy(999);
        org.joda.time.LocalTime localTime12 = property5.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField13 = property5.getField();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.minusMonths((int) (short) -1);
        int int26 = yearMonthDay23.size();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay23.year();
        int int28 = property27.getMinimumValueOverall();
        java.lang.String str29 = property27.getAsString();
        org.joda.time.YearMonthDay yearMonthDay31 = property27.addWrapFieldToCopy(53637206);
        java.lang.String str32 = property27.getAsText();
        java.lang.String str33 = property27.getAsShortText();
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime41 = property40.roundHalfFloorCopy();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        java.lang.String str44 = property40.getAsText(locale42);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale42);
        java.util.Locale locale49 = new java.util.Locale("2022-02-21T00:00:00.000Z", "2022-02-21T00:00:00.000Z", "PT0.034S");
        java.lang.String str50 = locale42.getDisplayCountry(locale49);
        java.util.Locale.setDefault(category34, locale49);
        java.lang.String str52 = property27.getAsShortText(locale49);
        java.lang.String str53 = locale49.getLanguage();
        java.util.Locale locale54 = locale49.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime55 = property5.setCopy("2022-02-21T14:59:19.079", locale54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:59:19.079\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-292275054) + "'", int28 == (-292275054));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645455736764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645455736764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale49.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "China" + "'", str50, "China");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-21t00:00:00.000z" + "'", str53, "2022-02-21t00:00:00.000z");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) localDate1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy(86400000L);
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(53896067);
        org.joda.time.LocalTime localTime10 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((-2022));
        org.joda.time.LocalTime localTime14 = localTime10.plusHours(0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.Period period7 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period9 = period7.minusYears(8);
        org.joda.time.Period period11 = period7.withSeconds(11);
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        int int17 = mutableDateTime16.getYearOfEra();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutablePeriod21.set(durationFieldType22, (int) 'a');
        mutablePeriod21.addHours((int) (byte) -1);
        mutablePeriod21.addYears(2022);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        mutableDateTime33.add((long) 1);
        org.joda.time.DateTime dateTime36 = mutableDateTime33.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, readableDuration37, periodType38);
        java.lang.String str40 = mutableDateTime33.toString();
        org.joda.time.Chronology chronology41 = mutableDateTime33.getChronology();
        mutablePeriod21.setPeriod(32L, (long) (short) -1, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.era();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 70, 889906089600001L, periodType13, chronology41);
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay((long) 53740405, chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((java.lang.Object) 1658156078033L, periodType2, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str40, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(3);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusMonths((int) (short) -1);
        int int19 = yearMonthDay16.size();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay16.year();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale21);
        int int24 = property20.getMaximumShortTextLength(locale21);
        org.joda.time.YearMonthDay yearMonthDay26 = property20.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay28 = property20.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay29 = property20.withMinimumValue();
        org.joda.time.Period period31 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay29.withPeriodAdded((org.joda.time.ReadablePeriod) period31, (int) (byte) -1);
        int int34 = yearMonthDay29.getDayOfMonth();
        org.joda.time.DateTime dateTime35 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withCenturyOfEra(38);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime37.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        int int41 = mutableDateTime38.get(dateTimeFieldType39);
        int int42 = dateTime5.get(dateTimeFieldType39);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        int int45 = mutableDateTime44.getYearOfEra();
        mutableDateTime44.setHourOfDay((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.yearOfCentury();
        int int50 = dateMidnight48.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight48.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight54 = property53.roundHalfCeilingCopy();
        java.lang.String str55 = dateMidnight54.toString();
        mutableDateTime44.setMillis((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime44.copy();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.year();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.months();
        mutablePeriod62.set(durationFieldType63, (int) 'a');
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) 100, chronology74);
        boolean boolean76 = durationFieldType63.isSupported(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DurationField durationField78 = chronology74.days();
        org.joda.time.DurationField durationField79 = chronology74.halfdays();
        mutableDateTime57.setChronology(chronology74);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime5.toMutableDateTime(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(53861358, 539, 157, 53878243, chronology74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53861358 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455736827,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=827,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455736827,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=827,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 902 + "'", int41 == 902);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1439 + "'", int42 == 1439);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str55, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        int int10 = dateTimeField8.getMaximumTextLength(locale9);
        java.lang.String str11 = locale9.getCountry();
        java.lang.String str12 = locale9.getCountry();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime16.plusSeconds(10);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        java.lang.String str25 = locale22.getDisplayVariant(locale23);
        int int26 = property20.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime30.plusSeconds(10);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        org.joda.time.DateTime dateTime35 = property34.roundHalfCeilingCopy();
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        java.lang.String str39 = locale36.getDisplayVariant(locale37);
        int int40 = property34.getMaximumTextLength(locale37);
        java.lang.String str41 = property20.getAsShortText(locale37);
        java.lang.String str42 = locale9.getDisplayScript(locale37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736854,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=854,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455736854,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=854,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455736854,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=854,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(435, 3599, 336, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3599 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        int int5 = dateTimeZone1.getStandardOffset(1646265600001L);
        boolean boolean7 = dateTimeZone1.isStandardOffset((long) 53905888);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        int int9 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(247);
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property12.addWrapFieldToCopy(203);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMinutes(4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 905 + "'", int6 == 905);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        int int9 = localDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(247);
        int int12 = localDateTime11.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDayOfMonth(189);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 189 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455736958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=958,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 958 + "'", int6 == 958);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now();
        int int5 = localTime4.size();
        org.joda.time.LocalTime.Property property6 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property6.addCopy((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        org.joda.time.LocalTime localTime12 = localTime3.withField(dateTimeFieldType9, 12);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType9);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.era();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = property15.set("minuteOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minuteOfDay\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455736970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=16,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.Interval interval11 = yearMonthDay8.toInterval();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Interval interval16 = interval11.gap((org.joda.time.ReadableInterval) interval15);
        boolean boolean18 = interval16.isAfter((long) 2119);
        java.lang.String str19 = interval16.toString();
        org.joda.time.Interval interval20 = interval16.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Interval interval22 = interval16.gap(readableInterval21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31T23:59:59.999Z/2022-02-21T00:00:00.000Z" + "'", str19, "1969-12-31T23:59:59.999Z/2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval22);
    }
}

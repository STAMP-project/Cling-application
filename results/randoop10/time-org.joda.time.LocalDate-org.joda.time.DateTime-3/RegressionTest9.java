import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        int int9 = localTime7.compareTo((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        int int12 = mutableDateTime11.getYearOfEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.months();
        mutablePeriod16.set(durationFieldType17, (int) 'a');
        mutablePeriod16.addHours((int) (byte) -1);
        mutablePeriod16.addYears(2022);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.LocalTime localTime25 = localTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Period period27 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Period period29 = period27.minusMinutes((int) '#');
        int int30 = period27.getWeeks();
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period33 = period27.plusDays(31);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Period period36 = period34.minusMonths(365);
        org.joda.time.LocalTime localTime38 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 13);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfDay();
        org.joda.time.LocalTime.Property property40 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime42 = property40.addCopy(0L);
        int int43 = property40.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property5 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate6 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((-1));
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone21);
        mutableDateTime22.add((long) 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        mutableDateTime22.set(dateTimeFieldType25, 53);
        org.joda.time.DateTime.Property property29 = dateTime18.property(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate6.withField(dateTimeFieldType25, 53903296);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53903296 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate3.withMonthOfYear(515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 515 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Interval interval42 = interval41.toInterval();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int int48 = mutablePeriod47.getMonths();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Interval interval50 = interval49.toInterval();
        boolean boolean51 = interval42.contains((org.joda.time.ReadableInterval) interval49);
        boolean boolean52 = interval6.contains((org.joda.time.ReadableInterval) interval42);
        boolean boolean53 = interval42.isAfterNow();
        long long54 = interval42.getEndMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645455527827L + "'", long54 == 1645455527827L);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(1L, dateTimeZone6);
        org.joda.time.Interval interval8 = localDate0.toInterval(dateTimeZone6);
        org.joda.time.LocalDate.Property property9 = localDate0.dayOfYear();
        java.util.Locale locale12 = new java.util.Locale("era");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property9.setCopy("PT0.010S", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.010S\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals(locale12.toString(), "era");
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(1645455245049L, chronology8);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        org.joda.time.Period period20 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime16.minusMillis(53633250);
        org.joda.time.Period period23 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime22);
        int int24 = period23.getHours();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455527884,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=47,MILLISECOND=884,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-5) + "'", int24 == (-5));
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455527923,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=47,MILLISECOND=923,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy(86400000L);
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(208);
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime11 = property5.withMaximumValue();
        org.joda.time.DurationField durationField12 = property5.getLeapDurationField();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.DateMidnight dateMidnight15 = localDate13.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = localDate13.toDateMidnight();
        int int17 = localDate13.size();
        org.joda.time.LocalDate localDate19 = localDate13.plusDays(224);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = property5.compareTo((org.joda.time.ReadablePartial) localDate13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.plusHours(301);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        java.lang.String str8 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale9 = locale6.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale6.getDisplayScript(locale10);
        java.lang.String str12 = property4.getAsText(locale6);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455527979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=47,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("Property[year]");
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str19 = dateTimeField13.getAsText(readablePartial14, 1, locale17);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.lang.String str24 = locale21.getDisplayVariant(locale22);
        java.lang.String str26 = locale21.getExtension('u');
        java.lang.String str27 = dateTimeField13.getAsText((long) 'x', locale21);
        java.lang.String str28 = dateTimeZone2.getShortName(32L, locale21);
        int int30 = dateTimeZone2.getOffsetFromLocal((long) 86399);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(13L, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455527999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=47,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "70" + "'", str27, "70");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) dateMidnight2);
        int[] intArray5 = mutablePeriod4.getValues();
        mutablePeriod4.setYears(154);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 0L);
        org.joda.time.LocalDate.Property property2 = localDate1.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate1.withMonthOfYear(166);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 166 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        int int13 = timeZone10.getOffset((long) 'u');
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        int int21 = property18.getMaximumShortTextLength(locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone10, locale19);
        calendar22.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455528090,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455528090,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        boolean boolean6 = interval4.contains((long) 53808326);
        boolean boolean7 = interval4.isBeforeNow();
        long long8 = interval4.getEndMillis();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645488000000L + "'", long8 == 1645488000000L);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period19);
        int int21 = yearMonthDay20.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusYears((int) (short) 1);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.getShortName((long) 53700000);
        java.lang.String str30 = dateTimeZone25.getID();
        int int32 = dateTimeZone25.getOffsetFromLocal(2L);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay23.toDateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone25);
        boolean boolean36 = dateTimeZone25.isStandardOffset(32769L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        boolean boolean9 = mutableDateTime4.isSupported(dateTimeFieldType8);
        int int10 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plus(readableDuration13);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateMidnight11);
        int int16 = dateMidnight11.getHourOfDay();
        org.joda.time.DateTime dateTime17 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.plusSeconds(10);
        org.joda.time.DateTime dateTime26 = dateTime21.minus((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime21.plusMinutes(9);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        mutableDateTime30.add(durationFieldType33, (int) (byte) 1);
        int int36 = mutableDateTime30.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDayOfMonth(8);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfMonth();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        mutablePeriod49.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        java.lang.String str55 = mutablePeriod49.toString();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadablePeriod) mutablePeriod49);
        mutablePeriod49.setValue(0, 2022);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod49.setPeriod((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((long) (byte) 0);
        long long65 = duration64.getMillis();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) (byte) 0);
        long long68 = duration67.getMillis();
        int int69 = duration64.compareTo((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration71 = duration61.withDurationAdded((org.joda.time.ReadableDuration) duration67, 2);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight40.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight73.toMutableDateTime();
        mutableDateTime74.add((long) 1);
        org.joda.time.DateTime dateTime77 = mutableDateTime74.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.years();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime74, readableDuration78, periodType79);
        org.joda.time.Chronology chronology81 = mutableDateTime74.getChronology();
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now(chronology81);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime86 = dateTime84.withDayOfYear((int) (byte) 1);
        int int87 = dateTime86.getDayOfMonth();
        org.joda.time.Duration duration89 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime90 = dateTime86.minus((org.joda.time.ReadableDuration) duration89);
        mutableDateTime82.add((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Duration duration92 = duration71.plus((org.joda.time.ReadableDuration) duration89);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration89);
        org.joda.time.DateTime dateTime94 = dateTime28.plus((org.joda.time.ReadableDuration) duration89);
        boolean boolean95 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property96 = dateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime97 = property96.getDateTime();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT0.034S" + "'", str55, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(35417L);
        int int38 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        int int43 = localTime41.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        int int46 = mutableDateTime45.getYearOfEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        mutablePeriod50.set(durationFieldType51, (int) 'a');
        mutablePeriod50.addHours((int) (byte) -1);
        mutablePeriod50.addYears(2022);
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime59 = localTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime61 = localTime59.plusSeconds(100);
        boolean boolean62 = localTime37.isEqual((org.joda.time.ReadablePartial) localTime59);
        int int63 = property5.compareTo((org.joda.time.ReadablePartial) localTime59);
        int int64 = property5.getMaximumValueOverall();
        org.joda.time.DurationField durationField65 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime66 = property5.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime68 = property5.addNoWrapToCopy(53806543);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNull(durationField65);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay17 = property12.withMaximumValue();
        int int18 = property12.get();
        int int19 = property12.getMaximumValueOverall();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = property12.getAsShortText(locale20);
        java.lang.Object obj22 = locale20.clone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455528301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=301,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455528301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=301,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "fr_CA");
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime11 = property4.roundHalfCeilingCopy();
        int int12 = localDateTime11.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withTime(51, (int) (byte) 1, 799, (-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455528341,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=341,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(53861358);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        mutableDateTime4.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime4.add(readableDuration10, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.halfdays();
        mutableDateTime4.setChronology(chronology21);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime4.centuryOfEra();
        org.joda.time.Chronology chronology26 = mutableDateTime4.getChronology();
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromCalendarFields(calendar28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology33 = dateMidnight32.getChronology();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withDayOfMonth(8);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime39.plusSeconds(10);
        org.joda.time.DateTime dateTime44 = dateTime39.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property46 = dateTime44.property(dateTimeFieldType45);
        int int47 = dateMidnight32.get(dateTimeFieldType45);
        int int48 = localDateTime29.indexOf(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime29.withDayOfWeek(5);
        long long52 = chronology26.set((org.joda.time.ReadablePartial) localDateTime50, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(688, 318, 817, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 688 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455528401,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=401,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645801128401L + "'", long52 == 1645801128401L);
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyear();
        long long21 = dateTimeField18.add(32770L, 357);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 11266214432770L + "'", long21 == 11266214432770L);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfWeek(7);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withCenturyOfEra(21);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 10, chronology39);
        org.joda.time.Period period42 = duration25.toPeriod(chronology39);
        org.joda.time.Duration duration43 = duration25.toDuration();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime45 = dateMidnight8.toDateTime();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        mutableDateTime47.add((long) 1);
        org.joda.time.DateTime dateTime50 = mutableDateTime47.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, readableDuration51, periodType52);
        org.joda.time.Chronology chronology54 = mutableDateTime47.getChronology();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        int int60 = dateTime59.getDayOfMonth();
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime59.minus((org.joda.time.ReadableDuration) duration62);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean67 = duration62.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period68 = duration62.toPeriod();
        org.joda.time.Period period69 = duration62.toPeriod();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime75 = dateTime73.plusHours((int) (byte) 100);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.Period period78 = duration62.toPeriodTo((org.joda.time.ReadableInstant) dateTime73, periodType77);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration62);
        long long80 = duration62.getStandardHours();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(798);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 798 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455528492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.monthOfYear();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        int int13 = dateTime12.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime18 = dateTime12.plusYears((-1));
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        boolean boolean4 = calendar1.before((java.lang.Object) dateMidnight2);
        int int6 = calendar1.getMaximum(16);
        calendar1.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar1.get(53783103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53783103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7200000 + "'", int6 == 7200000);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((-1));
        int int19 = dateTime18.getDayOfWeek();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfYear();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.Interval interval28 = localDate24.toInterval(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime23.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime18.withZone(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(702, 239, 321, 55, 462, 76, 34, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        java.util.Locale locale2 = new java.util.Locale("T10:54:54.022", "2022-02-21T14:54:59.286");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now();
        int int7 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        int int10 = mutableDateTime9.getYearOfEra();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutablePeriod14.set(durationFieldType15, (int) 'a');
        mutablePeriod14.addHours((int) (byte) -1);
        mutablePeriod14.addYears(2022);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalTime localTime23 = localTime6.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Period period25 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Period period27 = period25.minusMinutes((int) '#');
        int int28 = period25.getWeeks();
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period31 = period25.plusDays(31);
        org.joda.time.Period period33 = period31.withYears(7200000);
        int int34 = period33.getHours();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.weekOfWeekyear();
        org.joda.time.Duration duration40 = period33.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Period period42 = period33.withMillis(300);
        boolean boolean43 = locale2.equals((java.lang.Object) 300);
        org.junit.Assert.assertEquals(locale2.toString(), "t10:54:54.022_2022-02-21T14:54:59.286");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfYear();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        calendar6.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        int int16 = timeZone15.getRawOffset();
        int int18 = timeZone15.getOffset((long) 'u');
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        int int26 = property23.getMaximumShortTextLength(locale24);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone15, locale24);
        java.util.Calendar calendar28 = mutableDateTime1.toCalendar(locale24);
        calendar28.clear();
        int int30 = calendar28.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar28.set(594, 147);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 594");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455528626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455528626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455528626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=48,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = period31.minusWeeks(5);
        org.joda.time.Period period34 = period33.normalizedStandard();
        org.joda.time.Period period36 = period34.withHours(828);
        org.joda.time.Period period38 = period34.minusMinutes(53670257);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDayOfMonth(8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        long long39 = duration38.getMillis();
        int int40 = duration35.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight11.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        mutableDateTime45.add((long) 1);
        org.joda.time.DateTime dateTime48 = mutableDateTime45.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime45, readableDuration49, periodType50);
        org.joda.time.Chronology chronology52 = mutableDateTime45.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(chronology52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfYear((int) (byte) 1);
        int int58 = dateTime57.getDayOfMonth();
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime61 = dateTime57.minus((org.joda.time.ReadableDuration) duration60);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = duration42.plus((org.joda.time.ReadableDuration) duration60);
        java.lang.String str64 = duration42.toString();
        org.joda.time.Duration duration66 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration42, 16);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        int int71 = dateTime70.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime73 = dateMidnight72.toMutableDateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime73.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) mutableDateTime73);
        mutableDateTime73.addMinutes(995);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.Interval interval11 = yearMonthDay8.toInterval();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableDuration12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Interval interval16 = interval11.gap((org.joda.time.ReadableInterval) interval15);
        boolean boolean18 = interval16.isAfter((long) 2119);
        java.lang.String str19 = interval16.toString();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        boolean boolean36 = interval26.contains((org.joda.time.ReadableInterval) interval34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        boolean boolean53 = interval43.contains((org.joda.time.ReadableInterval) interval51);
        boolean boolean54 = interval26.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType58);
        int int60 = mutablePeriod59.getMonths();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableInstant55, (org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Interval interval62 = interval61.toInterval();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType66);
        int int68 = mutablePeriod67.getMonths();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableInstant63, (org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.Interval interval70 = interval69.toInterval();
        boolean boolean71 = interval62.contains((org.joda.time.ReadableInterval) interval69);
        boolean boolean72 = interval26.contains((org.joda.time.ReadableInterval) interval62);
        boolean boolean73 = interval16.isAfter((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration74 = interval16.toDuration();
        org.joda.time.Chronology chronology75 = interval16.getChronology();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime79 = dateTime77.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property80 = dateTime79.minuteOfHour();
        boolean boolean81 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31T23:59:59.999Z/2022-02-21T00:00:00.000Z" + "'", str19, "1969-12-31T23:59:59.999Z/2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.Chronology chronology38 = timeOfDay33.getChronology();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        int int41 = property39.get();
        org.joda.time.TimeOfDay timeOfDay43 = property39.addWrapFieldToCopy(7200000);
        org.joda.time.TimeOfDay timeOfDay45 = property39.addNoWrapToCopy(900);
        org.joda.time.TimeOfDay timeOfDay47 = property39.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay48 = property39.getTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay50 = property39.setCopy("java.util.GregorianCalendar[time=-31449600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=-31449600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay48);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        mutablePeriod24.set(durationFieldType25, (int) 'a');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100, chronology36);
        boolean boolean38 = durationFieldType25.isSupported(chronology36);
        mutableDateTime1.add(durationFieldType25, 53633250);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.String str9 = mutablePeriod3.toString();
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod12.setMillis((int) (short) 100);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int16 = mutablePeriod12.getSeconds();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.034S" + "'", str9, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.034S" + "'", str10, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        java.lang.String[] strArray22 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean25 = strSet23.isEmpty();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusWeeks(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        int int36 = dateTime35.getDayOfMonth();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime35.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight31.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean41 = strSet23.remove((java.lang.Object) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withDurationAdded((-102387L), 5);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plusWeeks(8);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology54);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay55.minusMonths((int) (short) -1);
        int int58 = yearMonthDay55.size();
        boolean boolean59 = dateMidnight44.equals((java.lang.Object) yearMonthDay55);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay55.dayOfMonth();
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        mutableDateTime8.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.dayOfYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusWeeks(0);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        mutablePeriod32.set(durationFieldType33, (int) 'a');
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100, chronology44);
        boolean boolean46 = durationFieldType33.isSupported(chronology44);
        org.joda.time.DateTime dateTime48 = dateTime25.withFieldAdded(durationFieldType33, 32772);
        boolean boolean49 = period22.isSupported(durationFieldType33);
        int int50 = period22.size();
        org.joda.time.PeriodType periodType51 = period22.getPeriodType();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekyearOfCentury();
        org.joda.time.Period period57 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period59 = period57.minusYears(8);
        org.joda.time.Period period61 = period57.withSeconds(11);
        org.joda.time.Period period63 = period57.minusMillis((int) (short) 100);
        org.joda.time.Period period65 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period67 = period65.minusYears(8);
        org.joda.time.Period period69 = period65.withSeconds(11);
        org.joda.time.Period period71 = period65.minusMillis((int) (short) 100);
        org.joda.time.Period period72 = period57.withFields((org.joda.time.ReadablePeriod) period65);
        int[] intArray75 = chronology54.get((org.joda.time.ReadablePeriod) period65, (-31449600001L), (long) 53633250);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(10L, chronology54);
        org.joda.time.Period period77 = new org.joda.time.Period((long) 18, periodType51, chronology54);
        long long81 = chronology54.add(292278993L, (long) 752, 18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(157, 53, 427, 562, 86, 0, chronology54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 562 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 292292529L + "'", long81 == 292292529L);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime8 = dateTime3.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime11 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime13 = dateTime3.withMillisOfSecond((int) 'a');
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        mutableDateTime15.add((long) 1);
        org.joda.time.DateTime dateTime18 = mutableDateTime15.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, readableDuration19, periodType20);
        org.joda.time.PeriodType periodType22 = periodType20.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) dateTime3, periodType20);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        mutableDateTime6.setMonthOfYear(1);
        mutableDateTime6.addWeekyears(4);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime6.toMutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime3.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime3.withMillisOfDay(134);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withYearOfCentury(4);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str7, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-01-01T00:00:00.134Z" + "'", str19, "1969-01-01T00:00:00.134Z");
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 10, chronology30);
        org.joda.time.Period period33 = duration16.toPeriod(chronology30);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Period period36 = period33.withYears(53715795);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        int int39 = dateMidnight37.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime45 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = dateMidnight37.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight37.yearOfCentury();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.months();
        mutablePeriod51.set(durationFieldType52, (int) 'a');
        mutablePeriod51.addHours((int) (byte) -1);
        mutablePeriod51.addYears(2022);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadablePeriod) mutablePeriod51);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusWeeks(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear((int) (byte) 1);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight65.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight65.minusMonths(53636377);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusYears(86399);
        boolean boolean79 = interval59.contains((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.Duration duration80 = period36.toDurationTo((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight76.plus((long) 365);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.withCenturyOfEra(32772);
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withCenturyOfEra(365);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int11 = localDateTime8.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusHours(0);
        int int14 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.minuteOfHour();
        boolean boolean16 = calendar2.before((java.lang.Object) property15);
        int int17 = calendar2.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar2.clear(4479109);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4479109");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455529161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=49,MILLISECOND=161,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455529161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=49,MILLISECOND=161,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455529161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=49,MILLISECOND=161,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 161 + "'", int9 == 161);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        boolean boolean20 = mutableDateTime9.isEqual(0L);
        mutableDateTime9.addSeconds(905);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        java.lang.Integer int29 = dateTimeFormatter27.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 99);
        boolean boolean32 = dateTimeFormatter31.isPrinter();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(292278993);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        boolean boolean10 = interval3.overlaps((org.joda.time.ReadableInterval) interval9);
        org.joda.time.Period period11 = interval9.toPeriod();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.weekOfWeekyear();
        mutableDateTime15.addMonths(301);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.property(dateTimeFieldType21);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        int int27 = mutableDateTime26.getYearOfEra();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        mutablePeriod31.addHours((int) (byte) -1);
        mutablePeriod31.addYears(2022);
        mutableDateTime26.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        org.joda.time.DateTime dateTime46 = mutableDateTime43.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime43, readableDuration47, periodType48);
        java.lang.String str50 = mutableDateTime43.toString();
        org.joda.time.Chronology chronology51 = mutableDateTime43.getChronology();
        mutablePeriod31.setPeriod(32L, (long) (short) -1, chronology51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) 476, chronology51);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType21.getField(chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = chronology51.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) period11, dateTimeZone55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str50, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        boolean boolean5 = dateTimeZone3.isFixed();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(6);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.MutableDateTime mutableDateTime11 = property7.roundFloor();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        int int16 = dateTime15.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.dayOfMonth();
        mutableDateTime18.addYears(365);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        mutablePeriod26.set(durationFieldType27, (int) 'a');
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        boolean boolean47 = interval37.contains((org.joda.time.ReadableInterval) interval45);
        long long48 = interval45.getEndMillis();
        boolean boolean49 = interval45.containsNow();
        mutablePeriod26.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight53.toMutableDateTime();
        mutableDateTime54.add((long) 1);
        org.joda.time.DateTime dateTime57 = mutableDateTime54.toDateTimeISO();
        org.joda.time.DateTime.Property property58 = dateTime57.hourOfDay();
        org.joda.time.DateTime dateTime59 = property58.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime60 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType65 = periodType64.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        int[] intArray84 = chronology73.get((org.joda.time.ReadablePeriod) mutablePeriod79, 1L, (long) 4);
        org.joda.time.Period period85 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType64, chronology73);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology73);
        org.joda.time.DateTime dateTime87 = dateTime59.toDateTime(chronology73);
        org.joda.time.DateTimeField dateTimeField88 = chronology73.weekyearOfCentury();
        mutablePeriod26.setPeriod(193320000000000L, (long) 476, chronology73);
        mutableDateTime11.setChronology(chronology73);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645455529326L + "'", long48 == 1645455529326L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        java.lang.String[] strArray64 = new java.lang.String[] { "jpn", "UTC", "1969-01-01T23:59:59.999Z", "0", "Italy", "hourOfDay", "36522-2-21 14:56:27", "P0Y", "1969-01-02T00:00:00.000Z", "116", "weekyear", "T10:54:54.022", "PT0.100S", "weekyearOfCentury", "secondOfMinute", "2022-02-21T14:54:40.421", "java.io.IOException: P0Y", "2022-02-21T14:55:29.829", "2022-02-21T14:54:38.033Z/2022-02-21T14:54:38.067Z", "monthOfYear", "1", "-1970-03-07T00:07:00.000Z", "24", "1 Jan 1970 00:00:00 GMT", "\u610f\u5927\u5229\u6587", "", "java.io.IOException: ", "seconds", "2022-02-21", "14:55:24.989", "7200000", "+00:00", "Chinese", "2022-02-21T14:56:04.219", "2022-02-21T14:56:24.627", "36522-2-21 14:56:27", "monthOfYear", "DateTimeField[yearOfEra]", "2022-02-21T14:55:42.393", "36522-2-21 14:54:31", "1970-01-01T00:00:00.010Z/1970-01-01T00:00:00.014Z", "1969", "116", "7200000", "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z", "2", "2022-02-21T14:55:41.394Z/2022-02-21T14:55:41.428Z", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "DateTimeField[minuteOfDay]", "2022-02-21T14:56:04.219", "24", "cinese (Cina)", "Property[yearOfCentury]", "2022-02-21T14:54:30.205", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=716,ZONE_OFFSET=0,DST_OFFSET=0]", "weekyearOfCentury", "2022-02-21T14:55:29.829", "Italy", "1970", "2022-02-21T14:54:55.815Z/2022-02-21T14:54:55.849Z", "", "de", "DurationField[seconds]", "00:00:01.208" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        java.lang.Object[] objArray67 = strSet65.toArray();
        java.util.Set<java.lang.String> strSet68 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight69.toMutableDateTime();
        mutableDateTime70.add((long) 1);
        org.joda.time.DateTime dateTime73 = mutableDateTime70.toDateTimeISO();
        mutableDateTime70.addDays((int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime70.dayOfWeek();
        boolean boolean77 = strSet68.equals((java.lang.Object) property76);
        java.lang.Object[] objArray78 = strSet68.toArray();
        boolean boolean79 = strSet65.containsAll((java.util.Collection<java.lang.String>) strSet68);
        java.util.Locale locale80 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        boolean boolean82 = strSet68.containsAll((java.util.Collection<java.lang.String>) strSet81);
        java.util.Iterator<java.lang.String> strItor83 = strSet81.iterator();
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strItor83);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (short) -1);
        boolean boolean4 = dateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime1.withDayOfMonth(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withDayOfYear(238);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight2);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(292278993);
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withCenturyOfEra(365);
        int int13 = localDateTime12.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int15 = localDateTime12.get(dateTimeFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime4.withField(dateTimeFieldType14, 536);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455529515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=49,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 515 + "'", int13 == 515);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = yearMonthDay10.getFieldType(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean7 = localDate4.isSupported(dateTimeFieldType6);
        int int8 = localDate4.getYear();
        org.joda.time.Period period10 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Period period12 = period10.minusMinutes((int) '#');
        org.joda.time.LocalDate localDate13 = localDate4.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate localDate14 = localDate0.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 10, chronology30);
        org.joda.time.Period period33 = duration16.toPeriod(chronology30);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = period33.getFieldTypes();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        boolean boolean43 = mutableDateTime38.isSupported(dateTimeFieldType42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime38.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType58);
        int int60 = mutablePeriod59.getMonths();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableInstant55, (org.joda.time.ReadablePeriod) mutablePeriod59);
        int[] intArray64 = chronology53.get((org.joda.time.ReadablePeriod) mutablePeriod59, 1L, (long) 4);
        org.joda.time.PeriodType periodType65 = mutablePeriod59.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.millis();
        int int67 = periodType65.indexOf(durationFieldType66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) mutableDateTime45, periodType65);
        org.joda.time.Period period69 = period33.withFields((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period71 = period33.plusHours(996);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfYear((int) (byte) 1);
        int int76 = dateTime75.getDayOfMonth();
        org.joda.time.Period period78 = org.joda.time.Period.days(53637206);
        org.joda.time.DateTime dateTime79 = dateTime75.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Duration duration80 = period71.toDurationFrom((org.joda.time.ReadableInstant) dateTime79);
        int int81 = period71.getMonths();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(35417L);
        int int38 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        int int43 = localTime41.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        int int46 = mutableDateTime45.getYearOfEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        mutablePeriod50.set(durationFieldType51, (int) 'a');
        mutablePeriod50.addHours((int) (byte) -1);
        mutablePeriod50.addYears(2022);
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime59 = localTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime61 = localTime59.plusSeconds(100);
        boolean boolean62 = localTime37.isEqual((org.joda.time.ReadablePartial) localTime59);
        int int63 = property5.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.DurationField durationField64 = property5.getDurationField();
        org.joda.time.LocalTime localTime65 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime66 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime68 = localTime66.minusHours(0);
        org.joda.time.LocalTime localTime70 = localTime68.plusMillis(363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime72 = localTime70.withSecondOfMinute(757);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 757 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = builder0.setWeekDate(50473355, 517, 301);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutablePeriod16.add(readableDuration17);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutablePeriod23.set(durationFieldType24, (int) 'a');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100, chronology35);
        boolean boolean37 = durationFieldType24.isSupported(chronology35);
        mutablePeriod16.setPeriod((long) '4', chronology35);
        int[] intArray39 = mutablePeriod16.getValues();
        java.util.Calendar.Builder builder40 = builder14.setFields(intArray39);
        java.util.Calendar.Builder builder44 = builder14.setWeekDate((int) '#', 9, 0);
        java.util.Calendar.Builder builder48 = builder14.setTimeOfDay(528, 575, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder50 = builder14.setInstant(1645455387596L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        boolean boolean20 = interval10.contains((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime23.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        int int45 = mutablePeriod44.getMonths();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableInstant40, (org.joda.time.ReadablePeriod) mutablePeriod44);
        int[] intArray49 = chronology38.get((org.joda.time.ReadablePeriod) mutablePeriod44, 1L, (long) 4);
        org.joda.time.PeriodType periodType50 = mutablePeriod44.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.millis();
        int int52 = periodType50.indexOf(durationFieldType51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) mutableDateTime30, periodType50);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) interval18, periodType50);
        org.joda.time.PeriodType periodType55 = periodType50.withHoursRemoved();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        int int58 = mutableDateTime57.getYearOfEra();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.months();
        mutablePeriod62.set(durationFieldType63, (int) 'a');
        mutablePeriod62.addHours((int) (byte) -1);
        mutablePeriod62.addYears(2022);
        mutableDateTime57.add((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight73.toMutableDateTime();
        mutableDateTime74.add((long) 1);
        org.joda.time.DateTime dateTime77 = mutableDateTime74.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.years();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime74, readableDuration78, periodType79);
        java.lang.String str81 = mutableDateTime74.toString();
        org.joda.time.Chronology chronology82 = mutableDateTime74.getChronology();
        mutablePeriod62.setPeriod(32L, (long) (short) -1, chronology82);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 521, 17577269706310L, periodType55, chronology82);
        org.joda.time.DurationField durationField85 = chronology82.halfdays();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.millisOfDay();
        org.joda.time.DurationField durationField87 = chronology82.seconds();
        org.joda.time.Period period88 = new org.joda.time.Period(62120L, (long) 53859908, chronology82);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str81, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2, periodType5);
        org.joda.time.DateTime.Property property7 = dateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withOffsetParsed();
        java.io.Writer writer31 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter30.printTo(writer31, 3155695200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.centuryOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.Period period12 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period14 = period12.minusYears(8);
        org.joda.time.Interval interval15 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean16 = interval5.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        java.lang.String str31 = mutablePeriod25.toString();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod25.setValue(0, 2022);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        org.joda.time.DateTime dateTime45 = mutableDateTime42.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime42, readableDuration46, periodType47);
        org.joda.time.Chronology chronology49 = mutableDateTime42.getChronology();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(chronology49);
        long long54 = chronology49.add((long) 22, 100L, 0);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.dayOfWeek();
        mutablePeriod25.setPeriod((long) 624, (-1725048060000L), chronology49);
        org.joda.time.DateTimeField dateTimeField57 = chronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology49.yearOfEra();
        org.joda.time.Interval interval59 = interval5.withChronology(chronology49);
        org.joda.time.Interval interval60 = interval59.toInterval();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 22L + "'", long54 == 22L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay0.withMillisOfSecond(70);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay0.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.toString();
        org.joda.time.PeriodType periodType4 = periodType2.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        boolean boolean17 = mutablePeriod12.isSupported(durationFieldType16);
        int int18 = mutablePeriod8.indexOf(durationFieldType16);
        java.lang.String str19 = durationFieldType16.getName();
        int int20 = mutablePeriod6.get(durationFieldType16);
        boolean boolean21 = periodType4.isSupported(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 292278993, (long) (short) 10, periodType4);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, readableDuration28, periodType29);
        org.joda.time.Chronology chronology31 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((org.joda.time.ReadableDuration) duration39);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean44 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = duration39.toPeriod();
        org.joda.time.Period period46 = duration39.toPeriod();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) 100);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType54 = periodType53.withSecondsRemoved();
        org.joda.time.Period period55 = duration39.toPeriodTo((org.joda.time.ReadableInstant) dateTime50, periodType54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, readableDuration61, periodType62);
        org.joda.time.Chronology chronology64 = mutableDateTime57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(chronology64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear((int) (byte) 1);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.minus((org.joda.time.ReadableDuration) duration72);
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean77 = duration72.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType82);
        int int84 = mutablePeriod83.getMonths();
        org.joda.time.Interval interval85 = new org.joda.time.Interval(readableInstant79, (org.joda.time.ReadablePeriod) mutablePeriod83);
        org.joda.time.Chronology chronology86 = interval85.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((long) 10, chronology86);
        org.joda.time.Period period89 = duration72.toPeriod(chronology86);
        org.joda.time.DateTimeField dateTimeField90 = chronology86.era();
        org.joda.time.DateTimeField dateTimeField91 = chronology86.centuryOfEra();
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration39, chronology86);
        org.joda.time.DurationField durationField93 = chronology86.months();
        int int96 = durationField93.getValue((long) 503, (long) 357);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Years]" + "'", str3, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "months" + "'", str19, "months");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(718);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, readableDuration6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate localDate22 = localDate20.withCenturyOfEra(301);
        long long24 = chronology16.set((org.joda.time.ReadablePartial) localDate22, (long) 1);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 301, periodType7, chronology16);
        org.joda.time.DurationField durationField26 = chronology16.seconds();
        org.joda.time.DurationField durationField27 = chronology16.centuries();
        org.joda.time.DurationField durationField28 = chronology16.minutes();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 889906089600001L + "'", long24 == 889906089600001L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime16.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDayOfMonth(8);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        mutablePeriod33.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        java.lang.String str39 = mutablePeriod33.toString();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod33.setValue(0, 2022);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        long long49 = duration48.getMillis();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        long long52 = duration51.getMillis();
        int int53 = duration48.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration51, 2);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight24.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        org.joda.time.Chronology chronology65 = mutableDateTime58.getChronology();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        int int71 = dateTime70.getDayOfMonth();
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime70.minus((org.joda.time.ReadableDuration) duration73);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = duration55.plus((org.joda.time.ReadableDuration) duration73);
        java.lang.String str77 = duration55.toString();
        org.joda.time.Duration duration79 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration55, 16);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime83 = dateTime81.withDayOfYear((int) (byte) 1);
        int int84 = dateTime83.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime86 = dateMidnight85.toMutableDateTime();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime86.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight0.minus((org.joda.time.ReadablePeriod) mutablePeriod89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight92 = dateMidnight0.withCenturyOfEra((-840));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -840 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.034S" + "'", str39, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT0S" + "'", str77, "PT0S");
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight90);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(100, 36522, 757);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36522 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfCentury();
        int int13 = dateMidnight11.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean20 = dateMidnight11.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight11.yearOfCentury();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        mutablePeriod25.set(durationFieldType26, (int) 'a');
        mutablePeriod25.addHours((int) (byte) -1);
        mutablePeriod25.addYears(2022);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadablePeriod) mutablePeriod25);
        boolean boolean34 = interval10.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 950, (long) 53715795, periodType3, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod36.setMonths(17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        java.lang.String[] strArray64 = new java.lang.String[] { "jpn", "UTC", "1969-01-01T23:59:59.999Z", "0", "Italy", "hourOfDay", "36522-2-21 14:56:27", "P0Y", "1969-01-02T00:00:00.000Z", "116", "weekyear", "T10:54:54.022", "PT0.100S", "weekyearOfCentury", "secondOfMinute", "2022-02-21T14:54:40.421", "java.io.IOException: P0Y", "2022-02-21T14:55:29.829", "2022-02-21T14:54:38.033Z/2022-02-21T14:54:38.067Z", "monthOfYear", "1", "-1970-03-07T00:07:00.000Z", "24", "1 Jan 1970 00:00:00 GMT", "\u610f\u5927\u5229\u6587", "", "java.io.IOException: ", "seconds", "2022-02-21", "14:55:24.989", "7200000", "+00:00", "Chinese", "2022-02-21T14:56:04.219", "2022-02-21T14:56:24.627", "36522-2-21 14:56:27", "monthOfYear", "DateTimeField[yearOfEra]", "2022-02-21T14:55:42.393", "36522-2-21 14:54:31", "1970-01-01T00:00:00.010Z/1970-01-01T00:00:00.014Z", "1969", "116", "7200000", "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z", "2", "2022-02-21T14:55:41.394Z/2022-02-21T14:55:41.428Z", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "DateTimeField[minuteOfDay]", "2022-02-21T14:56:04.219", "24", "cinese (Cina)", "Property[yearOfCentury]", "2022-02-21T14:54:30.205", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=716,ZONE_OFFSET=0,DST_OFFSET=0]", "weekyearOfCentury", "2022-02-21T14:55:29.829", "Italy", "1970", "2022-02-21T14:54:55.815Z/2022-02-21T14:54:55.849Z", "", "de", "DurationField[seconds]", "00:00:01.208" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        java.lang.Object[] objArray67 = strSet65.toArray();
        java.util.Set<java.lang.String> strSet68 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight69.toMutableDateTime();
        mutableDateTime70.add((long) 1);
        org.joda.time.DateTime dateTime73 = mutableDateTime70.toDateTimeISO();
        mutableDateTime70.addDays((int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime70.dayOfWeek();
        boolean boolean77 = strSet68.equals((java.lang.Object) property76);
        java.lang.Object[] objArray78 = strSet68.toArray();
        boolean boolean79 = strSet65.containsAll((java.util.Collection<java.lang.String>) strSet68);
        java.util.Locale locale80 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        boolean boolean82 = strSet68.containsAll((java.util.Collection<java.lang.String>) strSet81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = strSet81.add("Sun May 04 02:59:00 GMT 2200");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(100);
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime25 = localTime22.minusMinutes(557);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = localTime22.withMinuteOfHour(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.Chronology chronology38 = timeOfDay33.getChronology();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay33.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay40 = property39.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay41 = property39.withMinimumValue();
        int int42 = property39.get();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int int48 = mutablePeriod47.getMonths();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(chronology50);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusMonths((int) (short) -1);
        int int54 = yearMonthDay51.size();
        org.joda.time.YearMonthDay.Property property55 = yearMonthDay51.year();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale56);
        int int59 = property55.getMaximumShortTextLength(locale56);
        org.joda.time.YearMonthDay yearMonthDay61 = property55.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay63 = property55.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay64 = property55.withMinimumValue();
        org.joda.time.Period period66 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay64.withPeriodAdded((org.joda.time.ReadablePeriod) period66, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay64.withYear((int) (byte) 100);
        org.joda.time.YearMonthDay.Property property71 = yearMonthDay64.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int72 = property39.compareTo((org.joda.time.ReadablePartial) yearMonthDay64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645455530150,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=150,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455530150,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=150,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        java.util.Date date9 = localDateTime8.toDate();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutablePeriod13.add(readableDuration14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod13.add(durationFieldType20, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime8.withFieldAdded(durationFieldType20, 569);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfWeek(828);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 828 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455530170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 170 + "'", int6 == 170);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Feb 21 14:58:50 GMT 36522");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = period31.getDays();
        org.joda.time.Days days33 = period31.toStandardDays();
        int int34 = period31.size();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withEra(1);
        org.joda.time.DateTime dateTime16 = dateTime11.plusMillis(32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int18 = dateTime11.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime11.plusWeeks((int) ' ');
        int int21 = dateTime11.getMonthOfYear();
        org.joda.time.DateTime dateTime23 = dateTime11.plusHours((-292275054));
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DateTime dateTime29 = mutableDateTime26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime26, readableDuration30, periodType31);
        org.joda.time.Chronology chronology33 = mutableDateTime26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 20, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology33.getZone();
        org.joda.time.DateTime dateTime38 = dateTime23.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField39.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property41 = yearMonthDay9.property(dateTimeFieldType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        java.lang.String str30 = dateTimeField28.getAsText(100L);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale34.getDisplayVariant(locale35);
        int int38 = property33.getMaximumTextLength(locale34);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale34.getDisplayCountry(locale40);
        java.lang.String str44 = dateTimeField28.getAsText((int) ' ', locale40);
        org.joda.time.YearMonthDay yearMonthDay45 = property12.setCopy("1", locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(1L, dateTimeZone47);
        org.joda.time.DateTime dateTime49 = yearMonthDay45.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.DateTime dateTime51 = property50.withMinimumValue();
        org.joda.time.DateTime dateTime53 = dateTime51.minusHours(666);
        org.joda.time.DateTime.Property property54 = dateTime51.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455530235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455530235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str43, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32" + "'", str44, "32");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        java.lang.Integer int29 = dateTimeFormatter27.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 99);
        java.lang.StringBuffer stringBuffer32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        mutableDateTime34.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.dayOfWeek();
        int int40 = mutableDateTime34.getYear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime34.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter31.printTo(stringBuffer32, (org.joda.time.ReadableInstant) mutableDateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2119 + "'", int40 == 2119);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 42);
        mutablePeriod1.addHours(53862697);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(3938, 35, 672);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3938 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.YearMonthDay yearMonthDay1 = org.joda.time.YearMonthDay.fromDateFields(date0);
        date0.setHours(874);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Mar 29 10:58:50 GMT 2022");
        org.junit.Assert.assertNotNull(yearMonthDay1);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        java.util.Date date9 = localDateTime8.toDate();
        java.util.Date date11 = new java.util.Date((long) 224);
        boolean boolean12 = date9.after(date11);
        int int13 = date11.getSeconds();
        date11.setTime((long) 208);
        java.lang.Object obj16 = date11.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455530313,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=313,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 313 + "'", int6 == 313);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Feb 21 14:58:50 GMT 36522");
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "Thu Jan 01 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2022-02-21T14:58:47.273");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate(199, 46, 936);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay17 = property12.withMaximumValue();
        int int18 = property12.get();
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addToCopy(134);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withYear(300);
        int int23 = yearMonthDay20.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DateTime dateTime28 = mutableDateTime25.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, readableDuration29, periodType30);
        org.joda.time.Chronology chronology32 = mutableDateTime25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfYear((int) (byte) 1);
        int int38 = dateTime37.getDayOfMonth();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime37.minus((org.joda.time.ReadableDuration) duration40);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean45 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = duration40.toPeriod();
        org.joda.time.Period period47 = duration40.toPeriod();
        org.joda.time.Hours hours48 = period47.toStandardHours();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = locale49.getDisplayVariant();
        boolean boolean51 = period47.equals((java.lang.Object) str50);
        org.joda.time.Period period53 = period47.plusMinutes(517);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property55 = localDate54.dayOfYear();
        org.joda.time.DurationField durationField56 = property55.getRangeDurationField();
        boolean boolean57 = durationField56.isPrecise();
        boolean boolean58 = period47.equals((java.lang.Object) durationField56);
        boolean boolean59 = yearMonthDay20.equals((java.lang.Object) boolean58);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455530355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=355,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455530355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=355,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.LocalDate localDate11 = property3.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = property3.addWrapFieldToCopy(32770);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(224);
        int int16 = localDate15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        mutableDateTime19.add((long) 2022);
        int int33 = mutableDateTime19.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str26, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("months");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        calendar5.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale25);
        java.lang.String str27 = locale24.getDisplayVariant(locale25);
        int int28 = property22.getMaximumTextLength(locale25);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone14, locale25);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone1, locale25);
        java.util.Date date31 = calendar30.getTime();
        int int32 = calendar30.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = calendar30.getMaximum(53909336);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53909336");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455530567,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=567,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=567,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455530567,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=567,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645455530567,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=567,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645455530567,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=567,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Mon Feb 21 14:58:50 GMT 2022");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 0, 53636377, 312, 16, 53636377, 440, (int) 'a', 208);
        org.joda.time.Period period10 = period8.withDays(1);
        org.joda.time.Period period12 = period8.minusHours(312);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        mutableDateTime14.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.dayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusWeeks(0);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateMidnight26, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        int int30 = period28.get(durationFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = period12.withField(durationFieldType29, 53905001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(53704400, 8, 271, 0);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withSeconds(11);
        org.joda.time.Period period15 = period9.minusMillis((int) (short) 100);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        org.joda.time.Period period23 = period17.minusMillis((int) (short) 100);
        org.joda.time.Period period24 = period9.withFields((org.joda.time.ReadablePeriod) period17);
        int[] intArray27 = chronology6.get((org.joda.time.ReadablePeriod) period17, (-31449600001L), (long) 53633250);
        int int28 = period17.getMinutes();
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period17);
        org.joda.time.MutablePeriod mutablePeriod30 = period17.toMutablePeriod();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod30);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.Period period4 = org.joda.time.Period.seconds((int) (short) 100);
        int int6 = period4.getValue((int) (short) 0);
        org.joda.time.Period period8 = period4.withWeeks(48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = strSet2.contains((java.lang.Object) 48);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod3.getHours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod3.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.String str35 = mutablePeriod29.toString();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(chronology37);
        mutablePeriod3.setPeriod((long) 70, chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        long long42 = dateTimeField40.roundCeiling((long) 53829956);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.034S" + "'", str35, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 31536000000L + "'", long42 == 31536000000L);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("eras");
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        calendar7.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        boolean boolean17 = timeZone16.observesDaylightTime();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale18);
        java.util.Locale.Builder builder20 = builder5.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder5.setExtension('x', "1917-12-4 2:59:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 4 2:59:00 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=664,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455530664,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=664,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval14 = new org.joda.time.Interval((long) 53866932, (long) 53783416, chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withPivotYear(312);
        org.joda.time.Chronology chronology32 = dateTimeFormatter28.getChronolgy();
        org.joda.time.Period period33 = new org.joda.time.Period(0L, chronology32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        mutableDateTime35.add((long) 1);
        org.joda.time.DateTime dateTime38 = mutableDateTime35.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime35, readableDuration39, periodType40);
        org.joda.time.Weeks weeks42 = period41.toStandardWeeks();
        org.joda.time.Period period44 = period41.minusYears(12);
        int[] intArray45 = period44.getValues();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        mutablePeriod49.set(durationFieldType50, (int) 'a');
        mutablePeriod49.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        boolean boolean60 = mutablePeriod49.equals((java.lang.Object) int59);
        int int61 = mutablePeriod49.getYears();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology63 = dateMidnight62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekyearOfCentury();
        org.joda.time.Period period66 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period68 = period66.minusYears(8);
        org.joda.time.Period period70 = period66.withSeconds(11);
        org.joda.time.Period period72 = period66.minusMillis((int) (short) 100);
        org.joda.time.Period period74 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period76 = period74.minusYears(8);
        org.joda.time.Period period78 = period74.withSeconds(11);
        org.joda.time.Period period80 = period74.minusMillis((int) (short) 100);
        org.joda.time.Period period81 = period66.withFields((org.joda.time.ReadablePeriod) period74);
        int[] intArray84 = chronology63.get((org.joda.time.ReadablePeriod) period74, (-31449600001L), (long) 53633250);
        mutablePeriod49.add((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period88 = period74.withFieldAdded(durationFieldType86, 271);
        boolean boolean89 = period44.isSupported(durationFieldType86);
        int int90 = period44.getDays();
        org.joda.time.Period period91 = period33.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period93 = period33.withWeeks(52);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-12]");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        boolean boolean8 = localDateTime4.isSupported(durationFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusHours(13);
        int int11 = localDateTime4.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDayOfYear(53669316);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53669316 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455530764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        mutableDateTime1.addYears(53633250);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfEven();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        mutableDateTime15.add((long) 1);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.dayOfYear();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        calendar20.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        int int30 = timeZone29.getRawOffset();
        int int32 = timeZone29.getOffset((long) 'u');
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.fromCalendarFields(calendar34);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property37.getMaximumShortTextLength(locale38);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone29, locale38);
        java.util.Calendar calendar42 = mutableDateTime15.toCalendar(locale38);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime15.hourOfDay();
        mutableDateTime15.setMillisOfSecond(63);
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setSecondOfMinute(202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 202 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=774,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645455530774,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=774,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455530774,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=774,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455530774,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=774,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear(312);
        org.joda.time.Chronology chronology31 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter27.getParser();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay41.minusMonths((int) (short) -1);
        int int44 = yearMonthDay41.size();
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay41.year();
        int int46 = property45.getMinimumValueOverall();
        java.lang.String str47 = property45.getAsString();
        org.joda.time.YearMonthDay yearMonthDay49 = property45.addWrapFieldToCopy(53637206);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.secondOfMinute();
        java.lang.String str63 = dateTimeField61.getAsText(100L);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property66 = localDate65.yearOfEra();
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale68);
        java.lang.String str70 = locale67.getDisplayVariant(locale68);
        int int71 = property66.getMaximumTextLength(locale67);
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(locale73);
        java.lang.String str75 = locale72.getDisplayVariant(locale73);
        java.lang.String str76 = locale67.getDisplayCountry(locale73);
        java.lang.String str77 = dateTimeField61.getAsText((int) ' ', locale73);
        org.joda.time.YearMonthDay yearMonthDay78 = property45.setCopy("1", locale73);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(1L, dateTimeZone80);
        org.joda.time.DateTime dateTime82 = yearMonthDay78.toDateTimeAtCurrentTime(dateTimeZone80);
        org.joda.time.DateTime.Property property83 = dateTime82.yearOfEra();
        org.joda.time.DateTime dateTime84 = dateTime82.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property85 = dateTime84.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = dateTimeFormatter27.print((org.joda.time.ReadableInstant) dateTime84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292275054) + "'", int46 == (-292275054));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645455530798,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=798,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645455530798,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=798,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str76, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "32" + "'", str77, "32");
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        int int6 = property1.getMaximumTextLength(locale2);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        java.lang.String str10 = locale7.getDisplayVariant(locale8);
        java.lang.String str11 = locale2.getDisplayCountry(locale8);
        java.lang.String str13 = locale8.getUnicodeLocaleType("zh");
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfMinute();
        java.lang.String str26 = dateTimeField24.getAsText(100L);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = dateTimeField24.getAsText(312, locale28);
        java.lang.String str32 = locale8.getDisplayCountry(locale28);
        java.lang.String str33 = locale8.getCountry();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455530845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455530845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=50,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str11, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "312" + "'", str31, "312");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        boolean boolean21 = interval11.contains((org.joda.time.ReadableInterval) interval19);
        boolean boolean22 = interval4.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        boolean boolean29 = mutableDateTime24.isSupported(dateTimeFieldType28);
        int int30 = mutableDateTime24.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.plus(readableDuration33);
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) dateMidnight31);
        boolean boolean36 = interval4.isAfter((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Period period37 = interval4.toPeriod();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod51, 1L, (long) 4);
        org.joda.time.DurationField durationField57 = chronology45.eras();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime60 = dateTime58.withCenturyOfEra(40);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((-31449599991L), 0L, periodType64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, readableDuration61, periodType64);
        org.joda.time.Period period67 = period37.normalizedStandard(periodType64);
        org.joda.time.Period period69 = period37.plusMinutes(318);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.Interval interval8 = localDate4.toInterval(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime3.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = dateTime3.withDurationAdded((long) 18600000, 53670933);
        org.joda.time.LocalDate localDate13 = dateTime3.toLocalDate();
        int int14 = dateTime3.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1969 + "'", int14 == 1969);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        java.util.Locale locale3 = new java.util.Locale("2022-02-21T00:00:00.000Z", "2022-02-21T00:00:00.000Z", "PT0.034S");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod25, 1L, (long) 4);
        org.joda.time.Period period31 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType10, chronology19);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getShortName((long) 53700000);
        java.lang.String str39 = dateTimeZone34.getID();
        int int41 = dateTimeZone34.getOffsetFromLocal(2L);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime32, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 271, dateTimeZone34);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 0, 12600879L, dateTimeZone34);
        org.joda.time.DateTime dateTime45 = interval44.getStart();
        boolean boolean46 = locale3.equals((java.lang.Object) dateTime45);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(271);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        int int9 = localTime7.compareTo((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        int int12 = mutableDateTime11.getYearOfEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.months();
        mutablePeriod16.set(durationFieldType17, (int) 'a');
        mutablePeriod16.addHours((int) (byte) -1);
        mutablePeriod16.addYears(2022);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.LocalTime localTime25 = localTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Period period27 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Period period29 = period27.minusMinutes((int) '#');
        int int30 = period27.getWeeks();
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period33 = period27.plusDays(31);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Period period36 = period34.minusMonths(365);
        org.joda.time.LocalTime localTime38 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 13);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfDay();
        org.joda.time.LocalTime.Property property40 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime42 = property40.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.LocalTime localTime44 = localTime42.plusMillis(583);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((long) 130, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(0, (-63304), 10000, 53710144, 146869, 4052, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53710144 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.lang.String str9 = property5.getAsText(locale7);
        org.joda.time.DateTime dateTime10 = property5.roundHalfEvenCopy();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Calendar calendar13 = dateTime10.toCalendar(locale12);
        calendar13.setFirstDayOfWeek((-57));
        // The following exception was thrown during execution in test generation
        try {
            calendar13.roll(314, 848);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455531248,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=51,MILLISECOND=248,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645401600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=-57,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.plusDays(12);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.String str35 = mutablePeriod29.toString();
        java.lang.String str36 = mutablePeriod29.toString();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod38.setMillis((int) (short) 100);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        int[] intArray42 = mutablePeriod38.getValues();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours(1969);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusMinutes(53806543);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455531262,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=51,MILLISECOND=262,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.034S" + "'", str35, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0.034S" + "'", str36, "PT0.034S");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay17 = property12.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = yearMonthDay17.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Interval interval21 = yearMonthDay17.toInterval(dateTimeZone20);
        java.lang.String str22 = interval21.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455531306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=51,MILLISECOND=306,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455531306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=51,MILLISECOND=306,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "292278993-02-21T00:00:00.000+00:00:00.120/292278993-02-22T00:00:00.000+00:00:00.120" + "'", str22, "292278993-02-21T00:00:00.000+00:00:00.120/292278993-02-22T00:00:00.000+00:00:00.120");
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        int int9 = dateTime8.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) mutableDateTime11);
        long long13 = dateTime8.getMillis();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31449600001L) + "'", long13 == (-31449600001L));
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime4 = property2.addCopy((int) (short) 100);
        org.joda.time.LocalTime localTime5 = property2.roundCeilingCopy();
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.Chronology chronology7 = localTime5.getChronology();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis(517);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        mutablePeriod21.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.lang.String str27 = mutablePeriod21.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int int29 = mutablePeriod21.getMonths();
        int[] intArray30 = mutablePeriod21.getValues();
        chronology7.validate((org.joda.time.ReadablePartial) localTime12, intArray30);
        java.util.Date date37 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date37.setMonth((int) (short) 100);
        int int40 = date37.getTimezoneOffset();
        long long41 = date37.getTime();
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.fromDateFields(date37);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withEra(1);
        org.joda.time.DateTime dateTime49 = dateTime44.plusMillis(32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int51 = dateTime44.get(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate42.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = localTime12.get(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53940000 + "'", int6 == 53940000);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455531401,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=51,MILLISECOND=401,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.034S" + "'", str27, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 34]");
        org.junit.Assert.assertEquals(date37.toString(), "Tue May 04 03:59:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1725048060000L) + "'", long41 == (-1725048060000L));
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        java.lang.String str11 = periodType10.toString();
        org.joda.time.PeriodType periodType12 = periodType10.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        long long16 = chronology7.add((org.joda.time.ReadablePeriod) mutablePeriod13, (long) (byte) 100, (int) (short) 1);
        org.joda.time.Period period17 = mutablePeriod13.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = period17.withDays(12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PeriodType[Years]" + "'", str11, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        java.util.Date date3 = new java.util.Date(147, 53820000, 53896067);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jun 02 00:00:00 GMT 4634609");
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        date5.setMinutes((int) (short) -1);
        int int11 = date5.getHours();
        java.time.Instant instant12 = date5.toInstant();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.TimeOfDay timeOfDay17 = property14.addToCopy(870);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = property14.setCopy("0001-02-21");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0001-02-21\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Tue May 04 02:59:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.minusMinutes(301);
        org.joda.time.LocalTime localTime8 = timeOfDay0.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        mutableDateTime2.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime2.add(readableDuration8, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.Chronology chronology19 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        mutableDateTime2.setChronology(chronology19);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime2.centuryOfEra();
        org.joda.time.Chronology chronology24 = mutableDateTime2.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((long) (byte) 1, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.Chronology chronology27 = chronology24.withUTC();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime4 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear(53710144);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53710144 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        long long8 = interval6.toDurationMillis();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.Period period11 = interval6.toPeriod(periodType10);
        java.lang.String str12 = period11.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 34L + "'", long8 == 34L);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P" + "'", str12, "P");
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDate56.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDate.Property property59 = localDate56.yearOfEra();
        org.joda.time.Interval interval60 = localDate56.toInterval();
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(2022);
        org.joda.time.Period period64 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        int int65 = dateTime61.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = dateTime61.withDayOfMonth(567);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 567 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(6);
        org.joda.time.LocalTime localTime8 = property5.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.minusMinutes(24);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        java.util.Date date18 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date18.setMonth((int) (short) 100);
        int int21 = date18.getTimezoneOffset();
        date18.setMinutes((int) (short) -1);
        int int24 = date18.getHours();
        java.time.Instant instant25 = date18.toInstant();
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromDateFields(date18);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.minusMillis(30);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay26.plusSeconds(20);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay26.plusMinutes(33);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay26.withField(dateTimeFieldType34, 9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = localTime11.withField(dateTimeFieldType34, 53909242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53909242 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals(date18.toString(), "Tue May 04 02:59:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(timeOfDay36);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime4.plusSeconds(10);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        mutablePeriod24.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        java.lang.String str30 = mutablePeriod24.toString();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = interval31.withDurationAfterStart(readableDuration32);
        boolean boolean34 = interval15.isBefore((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration35 = interval31.toDuration();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        java.lang.String str37 = periodType36.toString();
        org.joda.time.PeriodType periodType38 = periodType36.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        mutablePeriod46.set(durationFieldType47, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        boolean boolean51 = mutablePeriod46.isSupported(durationFieldType50);
        int int52 = mutablePeriod42.indexOf(durationFieldType50);
        java.lang.String str53 = durationFieldType50.getName();
        int int54 = mutablePeriod40.get(durationFieldType50);
        boolean boolean55 = periodType38.isSupported(durationFieldType50);
        org.joda.time.PeriodType periodType56 = periodType38.withSecondsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration35, periodType56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField70 = chronology65.dayOfYear();
        org.joda.time.DateTimeField dateTimeField71 = chronology65.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 17, periodType56, chronology65);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight73.toMutableDateTime();
        mutableDateTime74.add((long) 1);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime74.dayOfYear();
        org.joda.time.LocalDate localDate78 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        boolean boolean80 = localDate78.isSupported(dateTimeFieldType79);
        org.joda.time.LocalDate localDate82 = localDate78.withWeekyear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean84 = localDate82.isSupported(durationFieldType83);
        java.lang.String str85 = durationFieldType83.toString();
        mutableDateTime74.add(durationFieldType83, 517);
        boolean boolean88 = periodType56.isSupported(durationFieldType83);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.034S" + "'", str30, "PT0.034S");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[Years]" + "'", str37, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "months" + "'", str53, "months");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "weekyears" + "'", str85, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = property32.isLeap();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationAfterStart(readableDuration23);
        boolean boolean25 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration26 = interval22.toDuration();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.secondOfDay();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime28.addDays(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        java.lang.String str37 = durationFieldType36.toString();
        mutableDateTime28.add(durationFieldType36, (int) (byte) 10);
        java.lang.String str40 = mutableDateTime28.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "years" + "'", str37, "years");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2032-03-14T00:00:00.001Z" + "'", str40, "2032-03-14T00:00:00.001Z");
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks((-1));
        org.joda.time.Interval interval12 = localDate11.toInterval();
        int int13 = localDate11.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime16.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDayOfMonth(8);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        mutablePeriod33.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        java.lang.String str39 = mutablePeriod33.toString();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod33.setValue(0, 2022);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        long long49 = duration48.getMillis();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        long long52 = duration51.getMillis();
        int int53 = duration48.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration51, 2);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight24.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        org.joda.time.Chronology chronology65 = mutableDateTime58.getChronology();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        int int71 = dateTime70.getDayOfMonth();
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime70.minus((org.joda.time.ReadableDuration) duration73);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = duration55.plus((org.joda.time.ReadableDuration) duration73);
        java.lang.String str77 = duration55.toString();
        org.joda.time.Duration duration79 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration55, 16);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime83 = dateTime81.withDayOfYear((int) (byte) 1);
        int int84 = dateTime83.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime86 = dateMidnight85.toMutableDateTime();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime86.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight0.minus((org.joda.time.ReadablePeriod) mutablePeriod89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight92 = dateMidnight90.withDayOfWeek(528);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 528 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.034S" + "'", str39, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT0S" + "'", str77, "PT0S");
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight90);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        calendar9.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        int int19 = timeZone18.getRawOffset();
        int int20 = timeZone18.getRawOffset();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18, locale21);
        java.util.Calendar.Builder builder23 = builder7.setTimeZone(timeZone18);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone18);
        // The following exception was thrown during execution in test generation
        try {
            calendar24.clear(17814872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17814872");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455532009,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455532009,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("19");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"19\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime4 = property2.addCopy((int) (short) 100);
        org.joda.time.LocalTime localTime5 = property2.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property2.roundHalfFloorCopy();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        long long10 = durationField7.getValueAsLong(1645455364490L, (long) 53718302);
        long long13 = durationField7.add(1645455431529L, 761);
        int int15 = durationField7.getValue((long) 940);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 457070L + "'", long10 == 457070L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1648195031529L + "'", long13 == 1648195031529L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder19.setExtension('a', "P0Y");
        java.util.Locale.Builder builder23 = builder19.clear();
        java.util.Locale locale24 = builder23.build();
        java.lang.String str25 = locale24.getDisplayScript();
        boolean boolean26 = locale24.hasExtensions();
        int int27 = property18.getMaximumShortTextLength(locale24);
        java.lang.String str28 = dateTimeZone11.getName(1645455232633L, locale24);
        org.joda.time.DateTime dateTime29 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        int int30 = dateTime29.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        mutableDateTime11.setMonthOfYear(1);
        mutableDateTime11.addWeekyears(4);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime(dateTimeZone18);
        mutableDateTime21.addHours(53743428);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DateTime dateTime28 = mutableDateTime25.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, readableDuration29, periodType30);
        org.joda.time.Chronology chronology32 = mutableDateTime25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfYear((int) (byte) 1);
        int int38 = dateTime37.getDayOfMonth();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime37.minus((org.joda.time.ReadableDuration) duration40);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean45 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period46 = duration44.toPeriod();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        boolean boolean52 = period46.equals((java.lang.Object) dateTimeZone49);
        mutableDateTime21.setZone(dateTimeZone49);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str12, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 100, 53637206, 14, 0, 55, 56, 4, 541);
        org.joda.time.Period period10 = period8.plusHours(995);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds11 = period8.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology12);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        mutableDateTime27.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime27.dayOfYear();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusWeeks(0);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateMidnight39, periodType40);
        mutableDateTime25.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime27.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime45 = property43.set(72);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond((int) 'a');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.centuryOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455532125,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=125,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.Period period29 = new org.joda.time.Period((-31449600001L), chronology15);
        org.joda.time.Period period31 = period29.minusYears(11);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period34 = period31.withField(durationFieldType32, 301);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime36, readableDuration40, periodType41);
        org.joda.time.Chronology chronology43 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear((int) (byte) 1);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime52 = dateTime48.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean56 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Minutes minutes57 = duration51.toStandardMinutes();
        org.joda.time.Period period58 = period31.withFields((org.joda.time.ReadablePeriod) minutes57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType60 = period58.getFieldType(744);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("-0115-09-04");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: -0115-09-04");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusYears(365);
        org.joda.time.DateMidnight dateMidnight11 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime13 = dateTime8.plusMillis(53713891);
        org.joda.time.DateTime.Property property14 = dateTime8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = property14.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, readableDuration8, periodType9);
        java.lang.String str11 = mutableDateTime4.toString();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime4.millisOfSecond();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now();
        int int14 = localTime13.size();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        boolean boolean16 = localTime13.equals((java.lang.Object) locale15);
        int int17 = property12.getMaximumTextLength(locale15);
        boolean boolean18 = calendar1.after((java.lang.Object) locale15);
        int int19 = calendar1.getWeeksInWeekYear();
        int int20 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar1.get(271);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 271");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455532207,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=207,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str11, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear(312);
        org.joda.time.Chronology chronology31 = dateTimeFormatter27.getChronolgy();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfMonth();
        java.lang.String str34 = chronology31.toString();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("P0Y", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("24", (java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException("PT14H57M3.699S", (java.lang.Throwable) iOException6);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Interval interval8 = interval6.toInterval();
        boolean boolean10 = interval8.equals((java.lang.Object) 9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        boolean boolean27 = interval17.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        boolean boolean35 = mutableDateTime30.isSupported(dateTimeFieldType34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime30.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod51, 1L, (long) 4);
        org.joda.time.PeriodType periodType57 = mutablePeriod51.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.millis();
        int int59 = periodType57.indexOf(durationFieldType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) mutableDateTime37, periodType57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) interval25, periodType57);
        org.joda.time.Interval interval62 = interval8.gap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        mutableDateTime64.add((long) 1);
        org.joda.time.DateTime dateTime67 = mutableDateTime64.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.era();
        boolean boolean69 = mutableDateTime64.isSupported(dateTimeFieldType68);
        boolean boolean70 = interval8.contains((org.joda.time.ReadableInstant) mutableDateTime64);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertNull(interval62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime3.minusHours(10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(31);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(726);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMonths(514);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        mutableDateTime1.add(86399L);
        int int12 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setDate(0L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 86 + "'", int12 == 86);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        long long39 = duration38.getMillis();
        int int40 = duration35.compareTo((org.joda.time.ReadableDuration) duration38);
        mutablePeriod20.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        mutableDateTime43.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime43.dayOfYear();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusWeeks(0);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime43, (org.joda.time.ReadableInstant) dateMidnight55, periodType56);
        org.joda.time.Duration duration58 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime43);
        long long59 = duration58.getStandardMinutes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1063514880L + "'", long59 == 1063514880L);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(505, 502, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 502 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutablePeriod1.add(readableDuration2);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        boolean boolean22 = durationFieldType9.isSupported(chronology20);
        mutablePeriod1.setPeriod((long) '4', chronology20);
        org.joda.time.DurationField durationField24 = chronology20.halfdays();
        org.joda.time.DurationField durationField25 = chronology20.weekyears();
        org.joda.time.DurationField durationField26 = chronology20.years();
        long long29 = durationField26.add(224L, 718L);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 22657881600224L + "'", long29 == 22657881600224L);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        java.util.Locale locale2 = new java.util.Locale("FR", "1970");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_1970");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455532426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(9);
        org.joda.time.DateTime dateTime13 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(268);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(17, 57, 539, (int) (short) 100, 2000, 672, 62, 53715795);
        mutablePeriod8.setMonths(521);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        java.lang.String str30 = dateTimeField28.getAsText(100L);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale34.getDisplayVariant(locale35);
        int int38 = property33.getMaximumTextLength(locale34);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale34.getDisplayCountry(locale40);
        java.lang.String str44 = dateTimeField28.getAsText((int) ' ', locale40);
        org.joda.time.YearMonthDay yearMonthDay45 = property12.setCopy("1", locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(1L, dateTimeZone47);
        org.joda.time.DateTime dateTime49 = yearMonthDay45.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = yearMonthDay45.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        int int55 = property51.getMaximumShortTextLength(locale52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455532546,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=546,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455532546,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=546,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str43, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32" + "'", str44, "32");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.setPeriod(1645455232633L, 34L);
        int int12 = mutablePeriod7.getMonths();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((int) (byte) 100, 12, (int) '#', 10, (int) (byte) 10, 4, 2, (int) (short) -1);
        mutablePeriod21.setSeconds((int) '4');
        mutablePeriod21.setHours(440);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100, chronology11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType2, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology11.getDateTimeMillis(1645401600000L, 53899497, 2134, 310, 202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53899497 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutableDateTime1.addHours(8);
        int int17 = mutableDateTime1.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.clear();
        java.util.Date date3 = calendar1.getTime();
        java.lang.String str4 = calendar1.getCalendarType();
        calendar1.setLenient(true);
        calendar1.setTimeInMillis((long) 833);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add(10000, 53808326);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=833,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=833,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.era();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight13 = property10.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 43200000L, dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getShortName((long) 6);
        java.lang.String str24 = dateTimeZone18.getNameKey((long) 448);
        org.joda.time.DateTime dateTime25 = dateMidnight15.toDateTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(63, 184, 0, 86399999, 557, 4052, 0, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.120" + "'", str22, "+00:00:00.120");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.hourOfDay();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 53823772, (long) 53805223);
        org.joda.time.LocalTime localTime10 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = period8.getFieldType(53896067);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 0L);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(54);
        java.lang.String str6 = localDate5.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7370-01-01" + "'", str6, "7370-01-01");
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutablePeriod5.add(readableDuration6);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        boolean boolean26 = durationFieldType13.isSupported(chronology24);
        mutablePeriod5.setPeriod((long) '4', chronology24);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod5.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 10, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.minutes();
        mutablePeriod5.add(0L, chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(30, (int) ' ', 53697741, 53927295, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime11 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property4.addToCopy((long) 12);
        int int14 = localDateTime13.getCenturyOfEra();
        int int15 = localDateTime13.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455532824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=52,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("PT0.100S", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("P0Y", throwable3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("24", (java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException("PT0.034S", (java.lang.Throwable) iOException4);
        java.lang.String str8 = iOException7.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.io.IOException: PT0.034S" + "'", str8, "java.io.IOException: PT0.034S");
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.withMillis(1645455279080L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withDayOfWeek(33078);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33078 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.TimeOfDay timeOfDay1 = dateTime0.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime0.withMinuteOfHour((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfWeek(7);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withCenturyOfEra(21);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 10, chronology39);
        org.joda.time.Period period42 = duration25.toPeriod(chronology39);
        org.joda.time.Duration duration43 = duration25.toDuration();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight46 = dateMidnight8.withMonthOfYear(528);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 528 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        long long43 = interval41.toDurationMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType45 = periodType44.withYearsRemoved();
        org.joda.time.Period period46 = interval41.toPeriod(periodType45);
        boolean boolean47 = interval6.contains((org.joda.time.ReadableInterval) interval41);
        long long48 = interval41.getStartMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType55 = periodType54.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType68);
        int int70 = mutablePeriod69.getMonths();
        org.joda.time.Interval interval71 = new org.joda.time.Interval(readableInstant65, (org.joda.time.ReadablePeriod) mutablePeriod69);
        int[] intArray74 = chronology63.get((org.joda.time.ReadablePeriod) mutablePeriod69, 1L, (long) 4);
        org.joda.time.Period period75 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType54, chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter51.withChronology(chronology63);
        org.joda.time.Chronology chronology77 = dateTimeFormatter76.getChronology();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(chronology77);
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((java.lang.Object) long48, chronology77);
        org.joda.time.YearMonthDay.Property property80 = yearMonthDay79.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 34L + "'", long43 == 34L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645455533138L + "'", long48 == 1645455533138L);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now();
        int int5 = localTime4.size();
        org.joda.time.LocalTime.Property property6 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property6.addCopy((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        org.joda.time.LocalTime localTime12 = localTime3.withField(dateTimeFieldType9, 12);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType9);
        org.joda.time.DurationField durationField14 = property13.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfEven();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455533188,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=53,MILLISECOND=188,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(570, 50486009, 53765948, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50486009 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        long long15 = interval13.toDurationMillis();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology17 = dateMidnight16.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDayOfMonth(8);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        mutablePeriod28.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        java.lang.String str34 = mutablePeriod28.toString();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.setValue(0, 2022);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        long long44 = duration43.getMillis();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getMillis();
        int int48 = duration43.compareTo((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration46, 2);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight19.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        mutableDateTime53.add((long) 1);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.secondOfDay();
        boolean boolean57 = mutableDateTime53.isEqualNow();
        boolean boolean58 = dateMidnight51.equals((java.lang.Object) boolean57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight59.plusYears((int) (byte) 0);
        org.joda.time.Period period65 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period67 = period65.minusYears(8);
        org.joda.time.Period period69 = period65.withSeconds(11);
        org.joda.time.PeriodType periodType70 = period65.getPeriodType();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight63.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.months();
        mutablePeriod75.set(durationFieldType76, (int) 'a');
        org.joda.time.Period period80 = period65.withField(durationFieldType76, 53700000);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight51.withFieldAdded(durationFieldType76, 53760000);
        boolean boolean83 = interval13.contains((org.joda.time.ReadableInstant) dateMidnight82);
        int int84 = dateMidnight82.getSecondOfDay();
        org.joda.time.DateTime dateTime85 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateMidnight82);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 34L + "'", long15 == 34L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.034S" + "'", str34, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate3 = property2.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(134);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withWeekOfWeekyear(6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusYears(8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusDays(702);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfYear(53862697);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53862697 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455533387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=53,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        org.joda.time.Chronology chronology10 = mutableDateTime3.getChronology();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(chronology10);
        long long15 = chronology10.add((long) 22, 100L, 0);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 238, (long) 624, chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 22L + "'", long15 == 22L);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate localDate34 = localDate32.withCenturyOfEra(301);
        int int35 = localDate25.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property37 = localDate25.property(dateTimeFieldType36);
        org.joda.time.LocalDate localDate39 = localDate25.withCenturyOfEra(2000);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        int int45 = mutablePeriod44.getMonths();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableInstant40, (org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekyearOfCentury();
        long long50 = dateTimeField48.roundHalfFloor((long) 1);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        mutableDateTime53.add((long) 1);
        org.joda.time.DateTime dateTime56 = mutableDateTime53.toDateTimeISO();
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        java.lang.String str61 = property57.getAsText(locale59);
        java.lang.String str62 = locale59.getDisplayScript();
        java.lang.String str63 = dateTimeField48.getAsText(7200000, locale59);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime66 = localTime64.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutablePeriod68.add(readableDuration69);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.months();
        mutablePeriod75.set(durationFieldType76, (int) 'a');
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType83);
        int int85 = mutablePeriod84.getMonths();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableInstant80, (org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.Chronology chronology87 = interval86.getChronology();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) (short) 100, chronology87);
        boolean boolean89 = durationFieldType76.isSupported(chronology87);
        mutablePeriod68.setPeriod((long) '4', chronology87);
        org.joda.time.LocalTime localTime91 = localTime66.minus((org.joda.time.ReadablePeriod) mutablePeriod68);
        int int92 = localTime91.getMillisOfDay();
        org.joda.time.LocalTime localTime94 = localTime91.withMillisOfDay(208);
        int int95 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localTime94);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = localDate25.isBefore((org.joda.time.ReadablePartial) localTime94);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645455533411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=53,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7200000" + "'", str63, "7200000");
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 53933411 + "'", int92 == 53933411);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime12 = localTime8.plusMinutes(3);
        org.joda.time.DateTime dateTime13 = localTime8.toDateTimeToday();
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-31449600001L));
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = localDate1.getFields();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getShortName((long) 944);
        org.joda.time.DateMidnight dateMidnight10 = localDate1.toDateMidnight(dateTimeZone5);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateMidnight10.toString("Property[year]", locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(charSet14);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths((int) (short) -1);
        int int17 = yearMonthDay14.size();
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay14.year();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale19);
        int int22 = property18.getMaximumShortTextLength(locale19);
        org.joda.time.YearMonthDay yearMonthDay23 = property18.withMaximumValue();
        int int24 = property18.get();
        int int25 = property18.getMaximumValueOverall();
        org.joda.time.DurationField durationField26 = property18.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay27 = property18.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay29 = property18.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property31 = localDate30.dayOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.Interval interval34 = localDate30.toInterval(dateTimeZone33);
        boolean boolean35 = dateTimeZone33.isFixed();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = yearMonthDay29.toDateTimeAtMidnight(dateTimeZone33);
        long long41 = dateTimeZone33.convertLocalToUTC((long) 156, false, (-31449600001L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(310, 0, 1439, 146869, 2022, 2922789, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 146869 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455533488,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=53,MILLISECOND=488,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455533488,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=53,MILLISECOND=488,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 156L + "'", long41 == 156L);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.monthOfYear();
        int int20 = dateTimeField19.getMaximumValue();
        int int23 = dateTimeField19.getDifference(1645455296698L, (long) (-895));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((java.lang.Object) dateTimeField19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJMonthOfYearDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 625 + "'", int23 == 625);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.Duration duration58 = duration55.minus((long) 53697926);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.Period period14 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType3, chronology12);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) 23, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusHours(8);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.plusSeconds(99);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455533672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=53,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        boolean boolean29 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("1969-01-01T23:59:59.999Z/1969-01-01T23:59:59.999Z", dateTimeFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(364, 53855058, 53861358, 734);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 364 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(1946L, chronology1);
        org.joda.time.Period period4 = period2.withYears(564);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDate56.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDate.Property property59 = localDate56.yearOfEra();
        org.joda.time.Interval interval60 = localDate56.toInterval();
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(2022);
        org.joda.time.Period period64 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime66 = dateTime61.plusMillis(292278993);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight67.toMutableDateTime();
        mutableDateTime68.add((long) 1);
        org.joda.time.DateTime dateTime71 = mutableDateTime68.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.years();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime68, readableDuration72, periodType73);
        org.joda.time.Weeks weeks75 = period74.toStandardWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter76 = null;
        java.lang.String str77 = period74.toString(periodFormatter76);
        int int78 = period74.getMinutes();
        org.joda.time.DateTime dateTime79 = dateTime66.plus((org.joda.time.ReadablePeriod) period74);
        int int80 = dateTime79.getMinuteOfDay();
        int int81 = dateTime79.getCenturyOfEra();
        int int82 = dateTime79.getYearOfEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "P0Y" + "'", str77, "P0Y");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 551 + "'", int80 == 551);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20 + "'", int81 == 20);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight10 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight13 = property11.addWrapFieldToCopy(300);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        boolean boolean10 = dateTimeField9.isLenient();
        boolean boolean11 = dateTimeField9.isLenient();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime16.plusSeconds(10);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        long long25 = dateTimeField22.getDifferenceAsLong((long) (byte) 10, 315532800000L);
        java.util.Locale locale29 = new java.util.Locale("1970", "PT0.034S", "weekyearOfCentury");
        java.lang.String str30 = locale29.getVariant();
        int int31 = dateTimeField22.getMaximumTextLength(locale29);
        java.util.Locale locale32 = locale29.stripExtensions();
        java.lang.String str33 = dateTimeField9.getAsShortText((long) 105, locale29);
        java.lang.String str34 = locale29.getCountry();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-9L) + "'", long25 == (-9L));
        org.junit.Assert.assertEquals(locale29.toString(), "1970_PT0.034S_weekyearOfCentury");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyearOfCentury" + "'", str30, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "1970_PT0.034S_weekyearOfCentury");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.034S" + "'", str34, "PT0.034S");
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (byte) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.joda.time.Period period4 = period1.plusDays(96);
        org.joda.time.Period period6 = period4.minusMinutes(41);
        org.joda.time.Period period8 = period6.minusYears(53917726);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        int int28 = localTime27.getMillisOfDay();
        org.joda.time.LocalTime localTime30 = localTime27.withMillisOfDay(208);
        org.joda.time.LocalTime localTime32 = localTime30.minusSeconds((int) (byte) -1);
        org.joda.time.DateTime dateTime33 = localTime32.toDateTimeToday();
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTime dateTime35 = property34.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = property34.setCopy("2022-02-21T14:55:29.829");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:55:29.829\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53934019 + "'", int28 == 53934019);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localDate4.isSupported(durationFieldType5);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod28, 1L, (long) 4);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType13, chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter10.withChronology(chronology22);
        org.joda.time.Period period36 = new org.joda.time.Period((-31449600001L), chronology22);
        org.joda.time.Period period38 = period36.minusYears(11);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period41 = period38.withField(durationFieldType39, 301);
        java.lang.Object obj42 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType46 = periodType45.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        int[] intArray65 = chronology54.get((org.joda.time.ReadablePeriod) mutablePeriod60, 1L, (long) 4);
        org.joda.time.Period period66 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType45, chronology54);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(obj42, chronology54);
        org.joda.time.DateTimeField dateTimeField68 = chronology54.yearOfEra();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField70 = chronology54.minuteOfDay();
        boolean boolean71 = durationFieldType39.isSupported(chronology54);
        boolean boolean72 = localDate4.isSupported(durationFieldType39);
        java.lang.String str73 = durationFieldType39.getName();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "days" + "'", str73, "days");
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, readableDuration10, periodType11);
        org.joda.time.Chronology chronology13 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean26 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime2.plus((org.joda.time.ReadableDuration) duration21);
        int int28 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks(940);
        int int31 = localDateTime27.getWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455534062,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=54,MILLISECOND=62,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 62 + "'", int28 == 62);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 120, 0L, periodType2);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        java.lang.String str9 = periodType8.toString();
        org.joda.time.PeriodType periodType10 = periodType8.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.months();
        mutablePeriod18.set(durationFieldType19, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        boolean boolean23 = mutablePeriod18.isSupported(durationFieldType22);
        int int24 = mutablePeriod14.indexOf(durationFieldType22);
        java.lang.String str25 = durationFieldType22.getName();
        int int26 = mutablePeriod12.get(durationFieldType22);
        boolean boolean27 = periodType10.isSupported(durationFieldType22);
        org.joda.time.PeriodType periodType28 = periodType10.withSecondsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        org.joda.time.Chronology chronology38 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(2L, (long) 53676724, periodType28, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfWeek();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(1645401600096L, chronology38);
        java.lang.String str43 = chronology38.toString();
        mutablePeriod3.add((long) 856, chronology38);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Years]" + "'", str9, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "months" + "'", str25, "months");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DateTime dateTime10 = mutableDateTime7.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, readableDuration11, periodType12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.weeks();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology21);
        mutableDateTime7.setChronology(chronology21);
        org.joda.time.DurationField durationField26 = chronology21.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.DurationField durationField28 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology21.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((-895), 99, 439, 210, 792, 19, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 210 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.minusMinutes(301);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay(1);
        int int10 = timeOfDay7.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay7.plusHours(557);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        java.util.Date date16 = dateTime14.toDate();
        org.joda.time.DateTime dateTime18 = dateTime14.withDayOfMonth(21);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        mutableDateTime20.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime20.dayOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusWeeks(0);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) dateMidnight32, periodType33);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 100, chronology56);
        boolean boolean58 = durationFieldType45.isSupported(chronology56);
        org.joda.time.DateTime dateTime60 = dateTime37.withFieldAdded(durationFieldType45, 32772);
        boolean boolean61 = period34.isSupported(durationFieldType45);
        org.joda.time.DateTime dateTime63 = dateTime18.withFieldAdded(durationFieldType45, 271);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        int int66 = dateTimeZone64.getStandardOffset(62135596800000L);
        org.joda.time.DateTime dateTime67 = timeOfDay12.toDateTimeToday(dateTimeZone64);
        int int69 = dateTimeZone64.getStandardOffset((long) 17814872);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 180 + "'", int10 == 180);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.toString();
        org.joda.time.PeriodType periodType4 = periodType2.withMinutesRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = duration1.toPeriod(periodType4, chronology5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 53769128, chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfDay();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 32, periodType4, chronology15);
        java.lang.String str23 = periodType4.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Years]" + "'", str3, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[Years]" + "'", str23, "PeriodType[Years]");
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withEra(825);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 825 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime16.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology22 = dateMidnight21.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDayOfMonth(8);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        mutablePeriod33.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        java.lang.String str39 = mutablePeriod33.toString();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod33.setValue(0, 2022);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        long long49 = duration48.getMillis();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        long long52 = duration51.getMillis();
        int int53 = duration48.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration51, 2);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight24.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        org.joda.time.Chronology chronology65 = mutableDateTime58.getChronology();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        int int71 = dateTime70.getDayOfMonth();
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime70.minus((org.joda.time.ReadableDuration) duration73);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = duration55.plus((org.joda.time.ReadableDuration) duration73);
        java.lang.String str77 = duration55.toString();
        org.joda.time.Duration duration79 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration55, 16);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime83 = dateTime81.withDayOfYear((int) (byte) 1);
        int int84 = dateTime83.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime86 = dateMidnight85.toMutableDateTime();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime86.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight0.minus((org.joda.time.ReadablePeriod) mutablePeriod89);
        int int91 = mutablePeriod89.size();
        org.joda.time.PeriodType periodType92 = mutablePeriod89.getPeriodType();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.034S" + "'", str39, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT0S" + "'", str77, "PT0S");
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        int int4 = period3.getDays();
        int int5 = period3.size();
        int int6 = period3.getMinutes();
        org.joda.time.Period period8 = period3.minusMinutes(210);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("months");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 366, dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) period3, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455534458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=54,MILLISECOND=458,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        mutableDateTime10.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.dayOfYear();
        int int17 = property16.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundFloor();
        boolean boolean19 = dateTime8.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setMillis((long) 12);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime18.getZone();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getName((long) 100);
        org.joda.time.DateTime dateTime33 = dateTime28.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone30);
        long long36 = dateTimeZone22.getMillisKeepLocal(dateTimeZone30, 136746792000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(0, 874, 779, 53900904, 134, 53636377, 606, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53900904 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 365 + "'", int17 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 136746792000L + "'", long36 == 136746792000L);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(72);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = dateTime0.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.lang.String str9 = property5.getAsText(locale7);
        org.joda.time.DateTime dateTime10 = property5.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withMonthOfYear(817);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 817 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455534595,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=54,MILLISECOND=595,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfCentury();
        int int10 = dateMidnight8.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean17 = dateMidnight8.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutableDateTime19.add(durationFieldType22, (int) (byte) 1);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType26 = periodType25.withYearsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) mutableDateTime19, periodType25);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100, chronology39);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType30, chronology39);
        org.joda.time.Period period42 = new org.joda.time.Period((long) 31, periodType25, chronology39);
        org.joda.time.DurationField durationField43 = chronology39.months();
        long long47 = chronology39.add((long) 50473355, (long) 995, 208);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(14, (int) (byte) 0, 240, (int) 'x', 53769898, 53910953, 53706310, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 50680315L + "'", long47 == 50680315L);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.years();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(52L, chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight0.yearOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(134);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withWeekOfWeekyear(6);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        int int14 = localDateTime12.size();
        org.joda.time.DateTime dateTime15 = localDateTime12.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withDayOfYear(719162);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 719162 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455534667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=54,MILLISECOND=667,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight2 = property1.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = property3.addToCopy((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight6 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 43200000L, dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getShortName((long) 6);
        java.lang.String str17 = dateTimeZone11.getNameKey((long) 448);
        org.joda.time.DateTime dateTime18 = dateMidnight8.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period((java.lang.Object) dateTimeZone11, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.120" + "'", str15, "+00:00:00.120");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        java.lang.String str36 = timeOfDay33.toString();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay33.minusMinutes(52);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.secondOfMinute();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay38.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay38.minusMinutes(825);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "T10:58:54.764" + "'", str36, "T10:58:54.764");
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(timeOfDay42);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        int int4 = calendar1.getMinimum((int) (short) 10);
        calendar1.setLenient(false);
        java.util.Date date7 = calendar1.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar1.getGreatestMinimum(50463283);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50463283");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455534815,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=54,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 14:58:54 GMT 2022");
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        mutablePeriod33.set(durationFieldType34, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        boolean boolean38 = mutablePeriod33.isSupported(durationFieldType37);
        int int39 = mutablePeriod29.indexOf(durationFieldType37);
        java.lang.String str40 = durationFieldType37.getName();
        mutablePeriod25.add(durationFieldType37, (int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay20.withFieldAdded(durationFieldType37, 3);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay20.minusYears(1439);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology48.getDateTimeMillis(4460132788L, 53860446, 1920, 517, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53860446 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "months" + "'", str40, "months");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.plusHours(301);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(10L);
        boolean boolean7 = property4.equals((java.lang.Object) mutablePeriod6);
        org.joda.time.TimeOfDay timeOfDay8 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.String str23 = mutablePeriod17.toString();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) mutablePeriod17);
        mutablePeriod17.setValue(0, 2022);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getMillis();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        int int37 = duration32.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration39 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration35, 2);
        boolean boolean40 = property4.equals((java.lang.Object) duration35);
        org.joda.time.Duration duration43 = duration35.withDurationAdded(29537308800000L, 7);
        org.joda.time.Hours hours44 = duration35.toStandardHours();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.034S" + "'", str23, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(hours44);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        long long6 = dateTimeZone3.nextTransition(292278993L);
        java.lang.String str7 = dateTimeZone3.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 292278993L + "'", long6 == 292278993L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        java.lang.String str36 = duration34.toString();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withEra(1);
        org.joda.time.DateTime dateTime43 = dateTime38.plusMillis(32772);
        org.joda.time.DateTime.Property property44 = dateTime38.hourOfDay();
        int int45 = property44.getLeapAmount();
        org.joda.time.DateTime dateTime46 = property44.roundFloorCopy();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType48 = periodType47.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        int int50 = periodType48.indexOf(durationFieldType49);
        org.joda.time.Period period51 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46, periodType48);
        org.joda.time.DateTime dateTime53 = dateTime46.minusWeeks(146869);
        java.lang.String str55 = dateTime53.toString("\u610f\u5927\u5229\u6587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime53.withEra(953);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 953 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str55, "\u610f\u5927\u5229\u6587");
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Duration duration7 = interval6.toDuration();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutableInterval8);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withMillis((long) 53726113);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusWeeks(44);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.DateTime dateTime8 = mutableDateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        boolean boolean10 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        int int13 = mutableDateTime12.getYearOfEra();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        mutablePeriod17.set(durationFieldType18, (int) 'a');
        mutablePeriod17.addHours((int) (byte) -1);
        mutablePeriod17.addYears(2022);
        mutableDateTime12.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        mutableDateTime29.add((long) 1);
        org.joda.time.DateTime dateTime32 = mutableDateTime29.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, readableDuration33, periodType34);
        java.lang.String str36 = mutableDateTime29.toString();
        org.joda.time.Chronology chronology37 = mutableDateTime29.getChronology();
        mutablePeriod17.setPeriod(32L, (long) (short) -1, chronology37);
        org.joda.time.DurationField durationField39 = chronology37.seconds();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(1L, dateTimeZone42);
        org.joda.time.Chronology chronology44 = chronology37.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime8.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime48 = dateTime8.minus((-53L));
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str36, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("1969-01-02T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1969-01-02t00:00:00.000z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.addSeconds(575);
        mutableDateTime2.setMillisOfDay(716);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime14 = dateTime10.minusHours(10);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis(31);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(726);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekyear();
        org.joda.time.DurationField durationField35 = chronology31.millis();
        org.joda.time.DateTime dateTime36 = dateTime16.toDateTime(chronology31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime2, chronology31);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1969, chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        java.lang.String str12 = dateTimeField10.getAsText(100L);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str17 = dateTimeField10.getAsText(312, locale14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale14);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyearOfCentury();
        int int31 = dateTimeField29.getLeapAmount((long) ' ');
        long long33 = dateTimeField29.roundCeiling(1640995200000L);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate34.yearOfEra();
        org.joda.time.Interval interval38 = localDate34.toInterval();
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime40 = localDate34.toDateTimeAtStartOfDay();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDate34, 32772, locale42);
        boolean boolean44 = dateTimeField29.isSupported();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale46.getDisplayLanguage();
        java.lang.String str49 = dateTimeField29.getAsText((long) 744, locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap50 = calendar18.getDisplayNames(48, 53927273, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "312" + "'", str17, "312");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455535386,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=55,MILLISECOND=386,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1640995200000L + "'", long33 == 1640995200000L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "32772" + "'", str43, "32772");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "70" + "'", str49, "70");
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        int int4 = mutableDateTime3.getYearOfEra();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        mutablePeriod8.addHours((int) (byte) -1);
        mutablePeriod8.addYears(2022);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        org.joda.time.DateTime dateTime23 = mutableDateTime20.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, readableDuration24, periodType25);
        java.lang.String str27 = mutableDateTime20.toString();
        org.joda.time.Chronology chronology28 = mutableDateTime20.getChronology();
        mutablePeriod8.setPeriod(32L, (long) (short) -1, chronology28);
        org.joda.time.DurationField durationField30 = chronology28.seconds();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(1L, dateTimeZone33);
        org.joda.time.Chronology chronology35 = chronology28.withZone(dateTimeZone33);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 12, (long) 570, chronology28);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str27, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutableDateTime1.addMinutes((int) (byte) 100);
        mutableDateTime1.addDays(2);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getShortName((long) 53700000);
        mutableDateTime1.setZoneRetainFields(dateTimeZone20);
        java.lang.String str27 = dateTimeZone20.getName(0L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        int int2 = timeOfDay1.size();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        boolean boolean11 = mutablePeriod6.isSupported(durationFieldType10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withSecondOfMinute(44);
        java.lang.String str15 = timeOfDay12.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "T23:59:59.976" + "'", str15, "T23:59:59.976");
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration16.toPeriod();
        long long23 = duration16.getMillis();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property29 = dateMidnight24.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight24.plusYears(0);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.Period period33 = duration16.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 505);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, readableDuration6, periodType7);
        org.joda.time.Chronology chronology9 = mutableDateTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime14.minus((org.joda.time.ReadableDuration) duration17);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean22 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Days days23 = duration21.toStandardDays();
        mutableDateTime0.add((org.joda.time.ReadablePeriod) days23, 1);
        mutableDateTime0.addMinutes(0);
        org.joda.time.Chronology chronology28 = mutableDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.LocalTime localTime30 = localDateTime29.toLocalTime();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        java.lang.String str10 = mutableDateTime9.toString();
        mutableDateTime9.setMillisOfDay(8);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (short) -1);
        boolean boolean18 = dateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        long long19 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        mutableDateTime21.add((long) 1);
        org.joda.time.DateTime dateTime24 = mutableDateTime21.toDateTimeISO();
        mutableDateTime21.addDays((int) (short) 10);
        java.lang.Object obj28 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType32 = periodType31.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        int[] intArray51 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L, (long) 4);
        org.joda.time.Period period52 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType31, chronology40);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(obj28, chronology40);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate53.toDateTimeAtMidnight(dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((-1L), dateTimeZone56);
        long long63 = dateTimeZone56.convertLocalToUTC((long) 53637206, true, (long) 0);
        mutableDateTime21.setZoneRetainFields(dateTimeZone56);
        mutableDateTime17.setZone(dateTimeZone56);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone56);
        org.joda.time.DateTime dateTime67 = dateTime7.withZoneRetainFields(dateTimeZone56);
        long long70 = dateTimeZone56.convertLocalToUTC(1645401600001L, true);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str10, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 53637206L + "'", long63 == 53637206L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645401600001L + "'", long70 == 1645401600001L);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfWeek();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale9.getDisplayVariant(locale10);
        int int13 = property8.getMaximumTextLength(locale9);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale14.getDisplayVariant(locale15);
        java.lang.String str18 = locale9.getDisplayCountry(locale15);
        java.lang.String str19 = locale9.getDisplayName();
        int int20 = property6.getMaximumTextLength(locale9);
        org.joda.time.MutableDateTime mutableDateTime21 = property6.roundHalfFloor();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455535826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=55,MILLISECOND=826,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455535826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=55,MILLISECOND=826,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str18, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime2.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMillisOfDay(5);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra(56);
        java.util.Date date14 = localDateTime11.toDate();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455535846,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=55,MILLISECOND=846,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53935846 + "'", int6 == 53935846);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 16 00:00:00 GMT 1970");
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial17 = null;
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("Property[year]");
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str22 = dateTimeField16.getAsText(readablePartial17, 1, locale20);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale25);
        java.lang.String str27 = locale24.getDisplayVariant(locale25);
        java.lang.String str29 = locale24.getExtension('u');
        java.lang.String str30 = dateTimeField16.getAsText((long) 'x', locale24);
        java.util.Calendar.Builder builder31 = builder0.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder33 = builder31.setCalendarType("P");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455535862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=55,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight0.yearOfEra();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime16.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight12.withZoneRetainFields(dateTimeZone20);
        java.lang.String str25 = dateTimeZone20.getNameKey(10L);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 11, dateTimeZone20);
        long long29 = dateTimeZone20.convertLocalToUTC((long) 7, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((java.lang.Object) property10, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7L + "'", long29 == 7L);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(799, 15, 711, 481, 24, 10, 514, 53670257);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy(86400000L);
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(208);
        org.joda.time.LocalTime localTime11 = property5.addWrapFieldToCopy(999);
        org.joda.time.LocalTime localTime12 = property5.getLocalTime();
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(53806543);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        java.lang.String str56 = duration34.toString();
        org.joda.time.Duration duration59 = duration34.withDurationAdded(0L, 53637206);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.yearOfCentury();
        int int62 = dateMidnight60.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = timeOfDay63.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = dateMidnight60.isEqual((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight60.withCenturyOfEra(0);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusWeeks(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime81 = dateTime79.withDayOfYear((int) (byte) 1);
        int int82 = dateTime81.getDayOfMonth();
        org.joda.time.Duration duration84 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime85 = dateTime81.minus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight77.minus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Period period87 = duration84.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateMidnight.Property property89 = dateMidnight71.dayOfYear();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateMidnight71);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, readableDuration12, periodType13);
        org.joda.time.Chronology chronology15 = mutableDateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        int int21 = dateTime20.getDayOfMonth();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean28 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Days days29 = duration27.toStandardDays();
        org.joda.time.Period period31 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period33 = period31.minusYears(8);
        org.joda.time.Period period35 = period31.withSeconds(11);
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration27, periodType36);
        org.joda.time.DateTime dateTime40 = dateTime6.minusSeconds(53637206);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime6.toMutableDateTime();
        int int42 = mutableDateTime41.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        mutableDateTime2.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime2.add(readableDuration8, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.Chronology chronology19 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        mutableDateTime2.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.secondOfDay();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 991, chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusWeeks(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime65 = dateTime63.withDayOfYear((int) (byte) 1);
        int int66 = dateTime65.getDayOfMonth();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime65.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight61.minus((org.joda.time.ReadableDuration) duration68);
        int int71 = dateMidnight70.getDayOfYear();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType73 = periodType72.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateMidnight70, periodType72);
        org.joda.time.Duration duration75 = duration52.toDuration();
        org.joda.time.LocalTime localTime77 = org.joda.time.LocalTime.now();
        int int78 = localTime77.size();
        org.joda.time.LocalTime.Property property79 = localTime77.minuteOfHour();
        org.joda.time.LocalTime localTime81 = property79.addCopy((int) (short) 100);
        org.joda.time.LocalTime localTime83 = localTime81.plusHours(40);
        org.joda.time.Chronology chronology84 = localTime83.getChronology();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(17L, chronology84);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime.Property property87 = dateTime85.yearOfEra();
        org.joda.time.DateTime dateTime88 = dateTime85.withEarlierOffsetAtOverlap();
        boolean boolean89 = dateTime85.isBeforeNow();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 365 + "'", int71 == 365);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        java.lang.String str3 = mutableDateTime2.toString();
        mutableDateTime2.setMillisOfDay(8);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.centuryOfEra();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (short) -1);
        boolean boolean11 = dateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime10);
        long long12 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        int int13 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str3, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        int int10 = dateTimeField8.getLeapAmount((long) ' ');
        long long12 = dateTimeField8.roundCeiling(1640995200000L);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.Interval interval17 = localDate13.toInterval();
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtStartOfDay();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDate13, 32772, locale21);
        org.joda.time.DateMidnight dateMidnight23 = localDate13.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1640995200000L + "'", long12 == 1640995200000L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "32772" + "'", str22, "32772");
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime8 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime3.plusYears(74);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.Chronology chronology19 = mutableDateTime12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime24.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean32 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 10, chronology41);
        org.joda.time.Period period44 = duration27.toPeriod(chronology41);
        org.joda.time.DateTime dateTime45 = dateTime3.withChronology(chronology41);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        org.joda.time.Period period1 = org.joda.time.Period.millis(50486009);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.Interval interval11 = yearMonthDay8.toInterval();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay8.minusYears(468);
        int int14 = yearMonthDay8.getMonthOfYear();
        int int15 = yearMonthDay8.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        boolean boolean9 = mutableDateTime4.isSupported(dateTimeFieldType8);
        int int10 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plus(readableDuration13);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateMidnight11);
        int int16 = dateMidnight11.getHourOfDay();
        org.joda.time.DateTime dateTime17 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateMidnight11);
        int int18 = dateTime17.getMillisOfDay();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53936529 + "'", int18 == 53936529);
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.plusHours(301);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(10L);
        boolean boolean7 = property4.equals((java.lang.Object) mutablePeriod6);
        java.lang.String str8 = property4.toString();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusWeeks(0);
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears(575);
        int int18 = property4.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusMillis(33078);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.monthOfYear();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        int int13 = dateTime12.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime18 = dateTime12.plusYears((-1));
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        int int22 = mutableDateTime21.getYearOfEra();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        mutablePeriod26.set(durationFieldType27, (int) 'a');
        mutablePeriod26.addHours((int) (byte) -1);
        mutablePeriod26.addYears(2022);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutableDateTime21.addMinutes((int) (byte) 100);
        mutableDateTime21.addSeconds(53637206);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours(1645455425124L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.add((org.joda.time.ReadableDuration) duration41, 53891850);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 5923639530446400000 * 53891850");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(duration41);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.joda.time.Period period1 = org.joda.time.Period.months(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property3.addWrapFieldToCopy(53740405);
        int int11 = localDate10.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = timeOfDay0.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        boolean boolean27 = interval17.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        boolean boolean44 = interval34.contains((org.joda.time.ReadableInterval) interval42);
        boolean boolean45 = interval17.overlaps((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Interval interval46 = interval10.overlap((org.joda.time.ReadableInterval) interval34);
        boolean boolean47 = localDate1.equals((java.lang.Object) interval46);
        org.joda.time.LocalDate localDate49 = localDate1.minusWeeks(53710144);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = localDate1.toString("CHN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: N");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDayOfMonth(8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        long long39 = duration38.getMillis();
        int int40 = duration35.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight11.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        mutableDateTime45.add((long) 1);
        org.joda.time.DateTime dateTime48 = mutableDateTime45.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime45, readableDuration49, periodType50);
        org.joda.time.Chronology chronology52 = mutableDateTime45.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(chronology52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfYear((int) (byte) 1);
        int int58 = dateTime57.getDayOfMonth();
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime61 = dateTime57.minus((org.joda.time.ReadableDuration) duration60);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = duration42.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusHours(0);
        int int11 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(130);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        org.joda.time.Weeks weeks23 = period22.toStandardWeeks();
        org.joda.time.Period period25 = period22.minusYears(12);
        int[] intArray26 = period25.getValues();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutablePeriod30.set(durationFieldType31, (int) 'a');
        mutablePeriod30.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        boolean boolean41 = mutablePeriod30.equals((java.lang.Object) int40);
        int int42 = mutablePeriod30.getYears();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology44 = dateMidnight43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        org.joda.time.Period period47 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period49 = period47.minusYears(8);
        org.joda.time.Period period51 = period47.withSeconds(11);
        org.joda.time.Period period53 = period47.minusMillis((int) (short) 100);
        org.joda.time.Period period55 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period57 = period55.minusYears(8);
        org.joda.time.Period period59 = period55.withSeconds(11);
        org.joda.time.Period period61 = period55.minusMillis((int) (short) 100);
        org.joda.time.Period period62 = period47.withFields((org.joda.time.ReadablePeriod) period55);
        int[] intArray65 = chronology44.get((org.joda.time.ReadablePeriod) period55, (-31449600001L), (long) 53633250);
        mutablePeriod30.add((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period69 = period55.withFieldAdded(durationFieldType67, 271);
        boolean boolean70 = period25.isSupported(durationFieldType67);
        int int71 = period25.getDays();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime14.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.minusMonths((-14));
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusYears(451);
        org.joda.time.DateMidnight dateMidnight79 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property85 = localDate84.dayOfYear();
        java.util.TimeZone timeZone86 = null;
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        org.joda.time.Interval interval88 = localDate84.toInterval(dateTimeZone87);
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime83.toMutableDateTime(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight79.withZoneRetainFields(dateTimeZone87);
        java.lang.String str92 = dateTimeZone87.getNameKey(10L);
        org.joda.time.LocalDate localDate93 = new org.joda.time.LocalDate((long) 11, dateTimeZone87);
        int int94 = localDate93.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = localDateTime77.isBefore((org.joda.time.ReadablePartial) localDate93);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455536835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=56,MILLISECOND=835,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 835 + "'", int6 == 835);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-12]");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "UTC" + "'", str92, "UTC");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        java.util.GregorianCalendar gregorianCalendar10 = dateTime3.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = gregorianCalendar10.getMinimum(53903296);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53903296");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Etc/UTC\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears(872);
        org.joda.time.Period period8 = org.joda.time.Period.years(53710144);
        int int9 = period8.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod10 = period8.toMutablePeriod();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekyear(40);
        int int14 = localDateTime13.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withTime(792, 53916, 551, 977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 792 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455536937,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=56,MILLISECOND=937,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        java.util.Date date9 = localDateTime8.toDate();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property10.addWrapFieldToCopy(567);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455537036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=57,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36 + "'", int6 == 36);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Feb 21 14:58:57 GMT 36522");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        mutableDateTime1.setChronology(chronology18);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology18);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.centuryOfEra();
        org.joda.time.DurationField durationField25 = dateTimeField24.getLeapDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNull(durationField25);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        int int4 = localDateTime2.getDayOfMonth();
        java.util.Date date5 = localDateTime2.toDate();
        java.lang.String str6 = localDateTime2.toString();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, readableDuration12, periodType13);
        org.joda.time.Weeks weeks15 = period14.toStandardWeeks();
        org.joda.time.Period period17 = period14.minusYears(12);
        org.joda.time.Weeks weeks18 = period14.toStandardWeeks();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plus((org.joda.time.ReadablePeriod) period14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period21 = period14.plusSeconds(917);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455537142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=57,MILLISECOND=142,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 21 14:58:57 GMT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:58:57.142" + "'", str6, "2022-02-21T14:58:57.142");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("java.util.GregorianCalendar[time=1645455336891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=55,SECOND=36,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(50473355, 96, 239, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50473355 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        org.joda.time.Interval interval13 = yearMonthDay8.toInterval();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod15.setMillis((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 69);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusYears(53832893);
        int int22 = yearMonthDay21.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = property5.setCopy("2022-02-21T14:58:43.617");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:58:43.617\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.Chronology chronology38 = timeOfDay33.getChronology();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay33.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = property39.addNoWrapToCopy(521);
        int int42 = property39.getMinimumValueOverall();
        java.lang.String str43 = property39.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[secondOfMinute]" + "'", str43, "Property[secondOfMinute]");
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        long long6 = dateTimeField4.remainder((long) 10);
        java.lang.String str7 = dateTimeField4.toString();
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) '#');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.Interval interval18 = localDate14.toInterval(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime13.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.withZoneRetainFields(dateTimeZone17);
        java.lang.String str22 = dateTimeZone17.getNameKey(10L);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 11, dateTimeZone17);
        org.joda.time.LocalDate localDate25 = localDate23.withYear(53704400);
        org.joda.time.LocalDate localDate27 = localDate25.minusDays((-895));
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.secondOfMinute();
        java.lang.String str41 = dateTimeField39.getAsText(100L);
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromCalendarFields(calendar43);
        org.joda.time.LocalTime localTime46 = localTime44.withMillisOfDay(134);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutablePeriod49.add(readableDuration50);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.months();
        mutablePeriod56.set(durationFieldType57, (int) 'a');
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        int int66 = mutablePeriod65.getMonths();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant61, (org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 100, chronology68);
        boolean boolean70 = durationFieldType57.isSupported(chronology68);
        mutablePeriod49.setPeriod((long) '4', chronology68);
        int[] intArray72 = mutablePeriod49.getValues();
        int[] intArray74 = dateTimeField39.addWrapPartial((org.joda.time.ReadablePartial) localTime44, 1, intArray72, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = dateTimeField4.set((org.joda.time.ReadablePartial) localDate27, 503, intArray72, 825);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[yearOfEra]" + "'", str7, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645455537347,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=57,MILLISECOND=347,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 52]");
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundCeiling();
        mutableDateTime9.addMinutes(625);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        boolean boolean13 = interval3.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        java.lang.String str30 = dateTimeField28.getAsText(100L);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale34.getDisplayVariant(locale35);
        int int38 = property33.getMaximumTextLength(locale34);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale34.getDisplayCountry(locale40);
        java.lang.String str44 = dateTimeField28.getAsText((int) ' ', locale40);
        org.joda.time.YearMonthDay yearMonthDay45 = property12.setCopy("1", locale40);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.plusYears(5);
        org.joda.time.Chronology chronology48 = yearMonthDay47.getChronology();
        long long52 = chronology48.add((long) 819, 62135596799930L, 281);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455537450,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=57,MILLISECOND=450,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455537450,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=57,MILLISECOND=450,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str43, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32" + "'", str44, "32");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17460102700781149L + "'", long52 == 17460102700781149L);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.secondOfDay();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableDuration15, (org.joda.time.ReadableInstant) dateTime17, periodType20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime11, periodType20);
        org.joda.time.Minutes minutes23 = period22.toStandardMinutes();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime27.plusSeconds(10);
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime27.minusMinutes((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTime();
        boolean boolean35 = minutes23.equals((java.lang.Object) dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str8, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        int int3 = dateMidnight1.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean10 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutableDateTime12.add(durationFieldType15, (int) (byte) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadableInstant) mutableDateTime12, periodType18);
        java.util.GregorianCalendar gregorianCalendar21 = mutableDateTime12.toGregorianCalendar();
        org.joda.time.Period period23 = org.joda.time.Period.weeks((int) '4');
        mutableDateTime12.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        org.joda.time.DateTime dateTime30 = mutableDateTime27.toDateTimeISO();
        mutableDateTime27.addDays((int) (short) 10);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime27.dayOfWeek();
        mutableDateTime27.setTime((long) (byte) -1);
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime12.add((long) 53742154);
        mutableDateTime12.setTime((long) 53813087);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.addMonths(301);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.property(dateTimeFieldType9);
        int int12 = mutableDateTime3.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime14.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add(7200000);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property33 = dateMidnight28.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight28.withMillis((long) 5);
        org.joda.time.Period period36 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableDuration) duration26, periodType37);
        org.joda.time.Duration duration39 = duration26.toDuration();
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime3.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setMonthOfYear(872);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 872 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        int int5 = property4.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundFloor();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMillisOfSecond(4482732);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4482732 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.minusMinutes(301);
        org.joda.time.Chronology chronology9 = timeOfDay1.getChronology();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 53713891, chronology9);
        org.joda.time.DurationField durationField12 = chronology9.hours();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 10, chronology30);
        org.joda.time.Period period33 = duration16.toPeriod(chronology30);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Period period36 = period33.withYears(53715795);
        org.joda.time.Period period38 = org.joda.time.Period.seconds((int) (short) 100);
        int int40 = period38.getValue((int) (short) 0);
        org.joda.time.Period period42 = period38.withWeeks(48);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.plusYears((int) (byte) 0);
        java.util.Date date53 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.fromDateFields(date53);
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone58);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.weekOfWeekyear();
        mutableDateTime59.addMonths(301);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean66 = localDate63.isSupported(dateTimeFieldType65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime59.property(dateTimeFieldType65);
        boolean boolean68 = dateMidnight55.isSupported(dateTimeFieldType65);
        boolean boolean69 = localDate54.isSupported(dateTimeFieldType65);
        org.joda.time.DateMidnight.Property property70 = dateMidnight43.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType65.getRangeDurationType();
        int int72 = period42.get(durationFieldType71);
        boolean boolean73 = period36.isSupported(durationFieldType71);
        org.joda.time.Period period75 = period36.minusMillis(53897664);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertEquals(date53.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfMonth();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        mutablePeriod9.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        java.lang.String str15 = mutablePeriod9.toString();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadablePeriod) mutablePeriod9);
        mutablePeriod9.setValue(0, 2022);
        int int20 = mutablePeriod9.getDays();
        int int21 = mutablePeriod9.getWeeks();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(chronology30);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology30);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        mutablePeriod36.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        java.lang.String str42 = mutablePeriod36.toString();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray63 = chronology52.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1L, (long) 4);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology52);
        mutablePeriod36.setPeriod(1645455232633L, 0L, chronology52);
        mutablePeriod36.addSeconds((int) (byte) 0);
        long long70 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 718, (int) 'u');
        org.joda.time.DateTimeField dateTimeField71 = chronology30.yearOfEra();
        mutablePeriod9.add((long) 122, chronology30);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 36522, chronology30);
        mutablePeriod73.setDays(718);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.034S" + "'", str15, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0.034S" + "'", str42, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-192508671817343L) + "'", long70 == (-192508671817343L));
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime6.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(150);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        java.lang.String str9 = mutablePeriod3.toString();
        mutablePeriod3.add(0, 539, 539, 202, (int) (byte) -1, 301, 53636377, (-1));
        mutablePeriod3.addSeconds(53742154);
        mutablePeriod3.setPeriod(53910953, 53857, 0, 690, (int) (byte) 0, 53718302, 895, 240);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.034S" + "'", str9, "PT0.034S");
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutableDateTime1.add(durationFieldType4, (int) (byte) 1);
        int int7 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.yearOfEra();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = mutableDateTime13.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime13.hourOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        long long30 = dateTimeField28.roundHalfFloor((long) 1);
        mutableDateTime13.setRounding(dateTimeField28, (int) (byte) 0);
        int int33 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setMillis((long) 2119);
        int int36 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours(1645455239530L);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = mutableDateTime13.toInstant();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime13.weekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval16 = interval7.gap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        java.lang.String str31 = mutablePeriod25.toString();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) mutablePeriod25);
        boolean boolean33 = interval15.isBefore((org.joda.time.ReadableInterval) interval32);
        long long34 = interval15.getEndMillis();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime36, readableDuration40, periodType41);
        org.joda.time.Chronology chronology43 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear((int) (byte) 1);
        int int49 = dateTime48.getDayOfMonth();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime52 = dateTime48.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean56 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration51.toPeriod();
        org.joda.time.Period period58 = duration51.toPeriod();
        org.joda.time.Hours hours59 = period58.toStandardHours();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.lang.String str61 = locale60.getDisplayVariant();
        boolean boolean62 = period58.equals((java.lang.Object) str61);
        org.joda.time.Period period64 = period58.plusMinutes(517);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property66 = localDate65.dayOfYear();
        org.joda.time.DurationField durationField67 = property66.getRangeDurationField();
        boolean boolean68 = durationField67.isPrecise();
        boolean boolean69 = period58.equals((java.lang.Object) durationField67);
        org.joda.time.Period period71 = period58.withYears(557);
        org.joda.time.PeriodType periodType72 = period58.getPeriodType();
        org.joda.time.Period period73 = interval15.toPeriod(periodType72);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNull(interval16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645401600000L + "'", long34 == 1645401600000L);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.weeks();
        java.lang.Object obj4 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1L, (long) 4);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType7, chronology16);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(obj4, chronology16);
        org.joda.time.DateTimeField dateTimeField30 = chronology16.yearOfEra();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField32 = chronology16.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 999, periodType3, chronology16);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((-1725048060000L), (long) 7200000, chronology16);
        org.joda.time.DateTimeField dateTimeField35 = chronology16.yearOfEra();
        org.joda.time.DurationField durationField36 = dateTimeField35.getRangeDurationField();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 53639228);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withSecondOfMinute(757);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 757 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        long long8 = durationField5.getDifferenceAsLong((long) 21, (long) (byte) -1);
        long long11 = durationField5.subtract((long) 43, 384);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-12117859199957L) + "'", long11 == (-12117859199957L));
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight2 = property1.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        int int6 = mutableDateTime5.getMillisOfSecond();
        int int7 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(583);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.lang.String str16 = locale13.getDisplayVariant(locale14);
        java.util.Locale.setDefault(locale13);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.minusMonths((int) (short) -1);
        int int29 = yearMonthDay26.size();
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay26.year();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale31);
        int int34 = property30.getMaximumShortTextLength(locale31);
        org.joda.time.YearMonthDay yearMonthDay35 = property30.withMaximumValue();
        int int36 = property30.get();
        int int37 = property30.getMaximumValueOverall();
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = property30.getAsShortText(locale38);
        java.lang.String str40 = locale13.getDisplayScript(locale38);
        java.lang.String str41 = locale13.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = mutableDateTime11.toString("2022-02-21T14:54:12.648", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455538071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455538071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455538071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, (long) 4);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType14, chronology23);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) 0, 1645455232453L, chronology23);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) '4', 0L);
        long long42 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod39, 1L, 1969);
        org.joda.time.DateTimeField dateTimeField43 = chronology23.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) property9, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455538108,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=108,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 108 + "'", int6 == 108);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-102387L) + "'", long42 == (-102387L));
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime12 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime13 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime14 = localTime13.toDateTimeToday();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusWeeks(0);
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        mutableDateTime23.setWeekyear(134);
        java.util.Locale locale32 = java.util.Locale.PRC;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.fromCalendarFields(calendar33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology38 = dateMidnight37.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDayOfMonth(8);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfMonth();
        org.joda.time.DateTime dateTime47 = dateTime44.plusSeconds(10);
        org.joda.time.DateTime dateTime49 = dateTime44.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property51 = dateTime49.property(dateTimeFieldType50);
        int int52 = dateMidnight37.get(dateTimeFieldType50);
        int int53 = localDateTime34.indexOf(dateTimeFieldType50);
        mutableDateTime23.set(dateTimeFieldType50, (int) (byte) 0);
        boolean boolean56 = dateTime21.isSupported(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime58 = localTime13.withField(dateTimeFieldType50, 503);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455538122,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=122,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100, chronology11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType2, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology11.add(readablePeriod15, (long) 53881886, 562);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 53881886L + "'", long18 == 53881886L);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration57 = duration52.plus((long) 53758767);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Minutes minutes59 = period58.toStandardMinutes();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(minutes59);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate3 = property2.roundFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        java.lang.Object obj5 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType8, chronology17);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(obj5, chronology17);
        org.joda.time.LocalDate.Property property31 = localDate30.dayOfMonth();
        org.joda.time.LocalDate localDate33 = property31.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate34 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate35 = localDate4.withFields((org.joda.time.ReadablePartial) localDate34);
        int int36 = localDate35.getWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plus(readableDuration10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime();
        int int14 = dateTime13.getDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645455443052L, (long) 610);
        mutablePeriod2.setMonths(119);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        java.lang.String str9 = dateTimeField8.getName();
        long long11 = dateTimeField8.roundCeiling(0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "weekyearOfCentury" + "'", str9, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        java.util.Locale locale3 = new java.util.Locale("2028", "14:56:06.971", "23");
        org.junit.Assert.assertEquals(locale3.toString(), "2028_14:56:06.971_23");
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645455278033L);
        int int2 = mutablePeriod1.getDays();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, readableDuration6, periodType7);
        org.joda.time.Chronology chronology9 = mutableDateTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime14.minus((org.joda.time.ReadableDuration) duration17);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean22 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 10, chronology31);
        org.joda.time.Period period34 = duration17.toPeriod(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.weekyearOfCentury();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(chronology31);
        org.joda.time.DurationField durationField37 = chronology31.weekyears();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(53741358L, chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.DateTime dateTime5 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withCenturyOfEra(365);
        int int8 = localDateTime7.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int10 = localDateTime7.get(dateTimeFieldType9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusHours(0);
        int int13 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(130);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        org.joda.time.Period period27 = period24.minusYears(12);
        int[] intArray28 = period27.getValues();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        mutablePeriod32.set(durationFieldType33, (int) 'a');
        mutablePeriod32.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        boolean boolean43 = mutablePeriod32.equals((java.lang.Object) int42);
        int int44 = mutablePeriod32.getYears();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology46 = dateMidnight45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyearOfCentury();
        org.joda.time.Period period49 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period51 = period49.minusYears(8);
        org.joda.time.Period period53 = period49.withSeconds(11);
        org.joda.time.Period period55 = period49.minusMillis((int) (short) 100);
        org.joda.time.Period period57 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period59 = period57.minusYears(8);
        org.joda.time.Period period61 = period57.withSeconds(11);
        org.joda.time.Period period63 = period57.minusMillis((int) (short) 100);
        org.joda.time.Period period64 = period49.withFields((org.joda.time.ReadablePeriod) period57);
        int[] intArray67 = chronology46.get((org.joda.time.ReadablePeriod) period57, (-31449600001L), (long) 53633250);
        mutablePeriod32.add((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period71 = period57.withFieldAdded(durationFieldType69, 271);
        boolean boolean72 = period27.isSupported(durationFieldType69);
        int int73 = period27.getDays();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime16.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval76 = new org.joda.time.Interval(254L, (long) (byte) 0, chronology75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455538433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 433 + "'", int8 == 433);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-12]");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 11, 4, 2, 14, 53, 53, 251]");
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(chronology75);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getWeekyear();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDayOfMonth(8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        mutablePeriod22.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        java.lang.String str28 = mutablePeriod22.toString();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.setValue(0, 2022);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        long long38 = duration37.getMillis();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        long long41 = duration40.getMillis();
        int int42 = duration37.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration44 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration40, 2);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight13.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        mutableDateTime47.add((long) 1);
        org.joda.time.DateTime dateTime50 = mutableDateTime47.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, readableDuration51, periodType52);
        org.joda.time.Chronology chronology54 = mutableDateTime47.getChronology();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        int int60 = dateTime59.getDayOfMonth();
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime59.minus((org.joda.time.ReadableDuration) duration62);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = duration44.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Interval interval66 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        long long67 = duration65.getStandardSeconds();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration65);
        mutableDateTime1.addSeconds(0);
        int int71 = mutableDateTime1.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0.034S" + "'", str28, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(obj2, chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.yearOfEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField30 = chronology14.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 4, chronology14);
        org.joda.time.DateTimeField dateTimeField32 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology14.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.TimeOfDay timeOfDay1 = dateTime0.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusMillis(146869);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withMinuteOfHour(82800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property10 = localDate8.year();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.Chronology chronology19 = mutableDateTime12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime24.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean32 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 10, chronology41);
        org.joda.time.Period period44 = duration27.toPeriod(chronology41);
        org.joda.time.Period period45 = period44.negated();
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = period44.getFieldTypes();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        mutableDateTime49.add((long) 1);
        org.joda.time.DateTime dateTime52 = mutableDateTime49.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        boolean boolean54 = mutableDateTime49.isSupported(dateTimeFieldType53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime49.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.getMutableDateTime();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        int int62 = mutablePeriod61.getMonths();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableInstant57, (org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        int[] intArray75 = chronology64.get((org.joda.time.ReadablePeriod) mutablePeriod70, 1L, (long) 4);
        org.joda.time.PeriodType periodType76 = mutablePeriod70.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.millis();
        int int78 = periodType76.indexOf(durationFieldType77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) mutableDateTime56, periodType76);
        org.joda.time.Period period80 = period44.withFields((org.joda.time.ReadablePeriod) period79);
        org.joda.time.LocalDate localDate82 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 19);
        int int83 = localDate82.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 7 + "'", int78 == 7);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight8 = property5.addToCopy(18);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.LocalDate localDate10 = dateMidnight8.toLocalDate();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100, chronology22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType13, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight8.toMutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        int[] intArray47 = chronology36.get((org.joda.time.ReadablePeriod) mutablePeriod42, 1L, (long) 4);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology36);
        int int49 = dateTime48.getMillisOfSecond();
        int int50 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.minusDays(53847221);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime52.withMinuteOfHour(50486009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50486009 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 3]");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 676 + "'", int49 == 676);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        long long9 = date5.getTime();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate13 = property11.addWrapFieldToCopy(53741340);
        int int14 = localDate13.getEra();
        org.junit.Assert.assertEquals(date5.toString(), "Tue May 04 03:59:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1725048060000L) + "'", long9 == (-1725048060000L));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfYear(10);
        org.joda.time.LocalDate localDate10 = dateMidnight4.toLocalDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ITA");
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate2.yearOfEra();
        org.joda.time.Interval interval6 = localDate2.toInterval();
        org.joda.time.Period period8 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period10 = period8.minusYears(8);
        org.joda.time.Interval interval11 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod25, 1L, (long) 4);
        org.joda.time.DurationField durationField31 = chronology19.eras();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(40);
        boolean boolean35 = interval6.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.weekyear();
        boolean boolean37 = languageRange1.equals((java.lang.Object) property36);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = localDate4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = localDate4.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.String str23 = mutablePeriod17.toString();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight7.toMutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology25.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(53860446, 17814872, 953, 53851516, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53860446 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.034S" + "'", str23, "PT0.034S");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100, chronology19);
        boolean boolean21 = durationFieldType8.isSupported(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 52, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(944, 726, 895, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 726 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        int int8 = dateTimeField6.getLeapAmount(86409999L);
        long long10 = dateTimeField6.roundFloor((long) 345);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455538850,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=850,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-259200000L) + "'", long10 == (-259200000L));
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(32770);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundCeiling();
        mutableDateTime6.addMinutes(625);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime6.getZone();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 301, dateTimeZone9);
        mutableDateTime10.addMonths(53783103);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(1, 53633250, 53633250, 517, 50473355, 1);
        calendar0.set(20, 5, 16, 23, 96, 9);
        calendar0.setMinimalDaysInFirstWeek(13);
        calendar0.set(357, 53704400, 50473355, 199, 50473355);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.set(62, 34622);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 62");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=13,ERA=1,YEAR=357,MONTH=53704400,WEEK_OF_YEAR=24,WEEK_OF_MONTH=3,DAY_OF_MONTH=50473355,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=199,MINUTE=50473355,SECOND=9,MILLISECOND=907,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.YearMonthDay yearMonthDay16 = property12.addWrapFieldToCopy(53637206);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        java.lang.String str30 = dateTimeField28.getAsText(100L);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale34.getDisplayVariant(locale35);
        int int38 = property33.getMaximumTextLength(locale34);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale34.getDisplayCountry(locale40);
        java.lang.String str44 = dateTimeField28.getAsText((int) ' ', locale40);
        org.joda.time.YearMonthDay yearMonthDay45 = property12.setCopy("1", locale40);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfYear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Interval interval50 = localDate46.toInterval(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = yearMonthDay45.toDateTimeAtCurrentTime(dateTimeZone49);
        int int52 = yearMonthDay45.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay45.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455538918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=918,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645455538918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=918,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str43, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32" + "'", str44, "32");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 21 + "'", int52 == 21);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        mutableDateTime11.setMonthOfYear(1);
        mutableDateTime11.addWeekyears(4);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime8.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime8.millisOfSecond();
        mutableDateTime8.setMillisOfDay(825);
        int int25 = mutableDateTime8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str12, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.joda.time.Period period1 = org.joda.time.Period.hours(12);
        org.joda.time.Period period3 = period1.withHours((-69));
        org.joda.time.MutablePeriod mutablePeriod4 = period1.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        java.util.Date date3 = new java.util.Date(9, 208, (int) 'a');
        java.time.Instant instant4 = date3.toInstant();
        int int5 = date3.getDate();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 05 00:00:00 GMT 1926");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        boolean boolean15 = mutableDateTime10.isSupported(dateTimeFieldType14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.hourOfDay();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyearOfCentury();
        long long27 = dateTimeField25.roundHalfFloor((long) 1);
        mutableDateTime10.setRounding(dateTimeField25, (int) (byte) 0);
        mutableDateTime10.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        boolean boolean33 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime10.secondOfMinute();
        org.joda.time.Chronology chronology35 = mutableDateTime10.getChronology();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.addWeeks(37);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = localDate39.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDate.Property property42 = localDate39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.DurationField durationField44 = property42.getDurationField();
        org.joda.time.LocalDate localDate46 = property42.setCopy(2022);
        org.joda.time.LocalDate localDate47 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate49 = property42.addToCopy(365);
        org.joda.time.LocalDate localDate51 = property42.setCopy(747);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight53.toMutableDateTime();
        mutableDateTime54.add((long) 1);
        org.joda.time.DateTime dateTime57 = mutableDateTime54.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.years();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, readableDuration58, periodType59);
        org.joda.time.Chronology chronology61 = mutableDateTime54.getChronology();
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(chronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfYear((int) (byte) 1);
        int int67 = dateTime66.getDayOfMonth();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime70 = dateTime66.minus((org.joda.time.ReadableDuration) duration69);
        mutableDateTime62.add((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean74 = duration69.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Period period75 = duration73.toPeriod();
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone78);
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone78);
        boolean boolean81 = period75.equals((java.lang.Object) dateTimeZone78);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) 999, dateTimeZone78);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.era();
        int int84 = property42.compareTo((org.joda.time.ReadableInstant) dateMidnight82);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) dateMidnight82);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withCenturyOfEra(134);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        int int5 = localDateTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455539167,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 167 + "'", int5 == 167);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.lang.String str7 = locale4.getDisplayVariant(locale5);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone3, locale4);
        calendar8.set(23, 321, 451, (int) (byte) 0, 312);
        calendar8.setLenient(false);
        java.util.TimeZone timeZone17 = calendar8.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromCalendarFields(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+14:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455539185,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=185,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:00\",offset=50400000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=23,MONTH=321,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=451,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=4,HOUR_OF_DAY=0,MINUTE=312,SECOND=59,MILLISECOND=185,ZONE_OFFSET=50400000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+14:00");
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.Chronology chronology3 = timeOfDay1.getChronology();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(1645455239728L, chronology3);
        org.joda.time.DurationField durationField5 = chronology3.years();
        long long8 = durationField5.getMillis(722, (long) 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 22784112000000L + "'", long8 == 22784112000000L);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        mutablePeriod6.setPeriod(32L, (long) (short) -1, chronology26);
        org.joda.time.DurationField durationField28 = chronology26.seconds();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(1L, dateTimeZone31);
        org.joda.time.Chronology chronology33 = chronology26.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField34 = chronology26.years();
        long long35 = durationField34.getUnitMillis();
        long long38 = durationField34.getDifferenceAsLong((long) 594, (long) 138);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str25, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 31556952000L + "'", long35 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = localTime8.getMillisOfDay();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.MIDNIGHT;
        int int11 = localTime8.compareTo((org.joda.time.ReadablePartial) timeOfDay10);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight17.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withDayOfMonth(8);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        mutablePeriod39.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        java.lang.String str45 = mutablePeriod39.toString();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.setValue(0, 2022);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        long long55 = duration54.getMillis();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) (byte) 0);
        long long58 = duration57.getMillis();
        int int59 = duration54.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration61 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration57, 2);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight30.minus((org.joda.time.ReadableDuration) duration61);
        java.lang.String str63 = duration61.toString();
        org.joda.time.Duration duration64 = duration61.toDuration();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight17.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean67 = dateMidnight65.isSupported(dateTimeFieldType66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean69 = dateMidnight65.isSupported(dateTimeFieldType68);
        org.joda.time.LocalTime.Property property70 = localTime8.property(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.034S" + "'", str45, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0S" + "'", str63, "PT0S");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.joda.time.Period period1 = org.joda.time.Period.months(905);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        mutablePeriod6.setPeriod(32L, (long) (short) -1, chronology26);
        org.joda.time.DurationField durationField28 = chronology26.seconds();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.era();
        long long31 = dateTimeField29.remainder(43200000L);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) 43200000L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str25, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 62135640000000L + "'", long31 == 62135640000000L);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("eras");
        java.util.Locale.Builder builder7 = builder3.addUnicodeLocaleAttribute("months");
        java.util.Locale.Builder builder8 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder3.addUnicodeLocaleAttribute("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: centuryOfEra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 53897149);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.halfdays();
        long long12 = durationField10.getMillis(32766750);
        long long15 = durationField10.getValueAsLong(53715795L, (-53L));
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1415523600000000L + "'", long12 == 1415523600000000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        int int4 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths(1);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getShortName((long) 53700000);
        org.joda.time.DateMidnight dateMidnight13 = localDate6.toDateMidnight(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-31449600001L));
        org.joda.time.ReadablePartial readablePartial2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.withFields(readablePartial2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, 2119);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate1.withPeriodAdded(readablePeriod7, 53743428);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        java.lang.Object obj19 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType23 = periodType22.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        int[] intArray42 = chronology31.get((org.joda.time.ReadablePeriod) mutablePeriod37, 1L, (long) 4);
        org.joda.time.Period period43 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType22, chronology31);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(obj19, chronology31);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate44.toDateTimeAtMidnight(dateTimeZone47);
        long long52 = dateTimeZone47.convertLocalToUTC((long) 31, true);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone47);
        mutableDateTime11.setZoneRetainFields(dateTimeZone47);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime57 = localDate9.toDateTimeAtCurrentTime(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 31L + "'", long52 == 31L);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight8.toMutableDateTime();
        boolean boolean13 = dateMidnight8.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.withCenturyOfEra(0);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 100, chronology29);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        mutableDateTime16.setRounding(dateTimeField32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime16.toMutableDateTime();
        long long35 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean57 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = duration52.toPeriod();
        org.joda.time.Period period59 = duration52.toPeriod();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime65 = dateTime63.plusHours((int) (byte) 100);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType67 = periodType66.withSecondsRemoved();
        org.joda.time.Period period68 = duration52.toPeriodTo((org.joda.time.ReadableInstant) dateTime63, periodType67);
        org.joda.time.Duration duration69 = duration52.toDuration();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableDuration) duration69);
        int int71 = mutableDateTime34.getRoundingMode();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1946L + "'", long35 == 1946L);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) 43200000L, dateTimeZone2);
        java.lang.String str6 = dateTimeZone2.getShortName((long) 6);
        long long9 = dateTimeZone2.adjustOffset(0L, true);
        java.lang.String str10 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.120" + "'", str6, "+00:00:00.120");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.120" + "'", str10, "+00:00:00.120");
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) (short) -1);
        org.joda.time.Interval interval13 = yearMonthDay10.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = yearMonthDay10.getFieldType((int) (short) 0);
        int int16 = localDate0.get(dateTimeFieldType15);
        org.joda.time.DateMidnight dateMidnight17 = localDate0.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration16.toPeriod();
        org.joda.time.Period period23 = duration16.toPeriod();
        org.joda.time.Hours hours24 = period23.toStandardHours();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale25.getDisplayVariant();
        boolean boolean27 = period23.equals((java.lang.Object) str26);
        org.joda.time.Period period29 = period23.plusMinutes(517);
        int int31 = period23.getValue(0);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("months");
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone33);
        java.util.TimeZone.setDefault(timeZone33);
        timeZone33.setID("\u4e2d\u6587\u4e2d\u56fd)");
        int int38 = timeZone33.getRawOffset();
        java.lang.String str39 = timeZone33.getID();
        boolean boolean40 = period23.equals((java.lang.Object) str39);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645455539564,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=564,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str39, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Interval interval25 = interval23.toInterval();
        boolean boolean26 = interval6.isAfter((org.joda.time.ReadableInterval) interval25);
        boolean boolean27 = interval25.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight2 = property1.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy(0);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = dateTime13.toLocalDateTime();
        boolean boolean17 = localDateTime10.equals((java.lang.Object) dateTime13);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.plusMinutes(744);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        org.joda.time.DateTime dateTime31 = mutableDateTime28.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime28, readableDuration32, periodType33);
        org.joda.time.Chronology chronology35 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfYear((int) (byte) 1);
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime40.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean48 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Days days49 = duration47.toStandardDays();
        org.joda.time.Period period51 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period53 = period51.minusYears(8);
        org.joda.time.Period period55 = period51.withSeconds(11);
        org.joda.time.PeriodType periodType56 = period51.getPeriodType();
        org.joda.time.PeriodType periodType57 = periodType56.withHoursRemoved();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration47, periodType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime10.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime10.minusYears(541);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.dayOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455539621,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=621,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T14:58:59.621" + "'", str11, "2022-02-21T14:58:59.621");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMillis(27);
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withFields(readablePartial8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(53636377);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury(310);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 310 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455539763,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=763,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53939762 + "'", int5 == 53939762);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53633250,MONTH=100,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=-292275054,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=468,MINUTE=999,SECOND=3,MILLISECOND=746,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        mutablePeriod33.set(durationFieldType34, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        boolean boolean38 = mutablePeriod33.isSupported(durationFieldType37);
        int int39 = mutablePeriod29.indexOf(durationFieldType37);
        java.lang.String str40 = durationFieldType37.getName();
        mutablePeriod25.add(durationFieldType37, (int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay20.withFieldAdded(durationFieldType37, 3);
        int int45 = yearMonthDay44.size();
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay44.monthOfYear();
        java.lang.String str47 = property46.getAsString();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfEra();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        java.lang.String str54 = locale51.getDisplayVariant(locale52);
        int int55 = property50.getMaximumTextLength(locale51);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        java.lang.String str59 = locale56.getDisplayVariant(locale57);
        java.lang.String str60 = locale51.getDisplayCountry(locale57);
        java.util.Set<java.lang.Character> charSet61 = locale51.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay62 = property46.setCopy("en-GB", locale51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en-GB\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "months" + "'", str40, "months");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "6" + "'", str47, "6");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645455539809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455539809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str60, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(charSet61);
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withPivotYear(34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.parse("PT0.010S", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusHours(8);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(202);
        org.joda.time.LocalTime localTime10 = timeOfDay7.toLocalTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455539932,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=932,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plus(readableDuration10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusYears(157);
        org.joda.time.LocalDate localDate16 = dateTime15.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime15.withYearOfCentury(856);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 856 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks(0);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        mutablePeriod25.set(durationFieldType26, (int) 'a');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100, chronology37);
        boolean boolean39 = durationFieldType26.isSupported(chronology37);
        org.joda.time.DateTime dateTime41 = dateTime18.withFieldAdded(durationFieldType26, 32772);
        boolean boolean42 = period15.isSupported(durationFieldType26);
        int int43 = period15.size();
        org.joda.time.Period period45 = period15.plusYears(53676724);
        org.joda.time.Period period47 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Seconds seconds48 = period47.toStandardSeconds();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight49.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight49, readableDuration54);
        org.joda.time.Period period56 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.setMonths(224);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period59 = period45.withFields((org.joda.time.ReadablePeriod) mutablePeriod55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-31449600001L));
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate localDate8 = localDate3.withYear(365);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        java.lang.Object obj18 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType22 = periodType21.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePeriod) mutablePeriod36, 1L, (long) 4);
        org.joda.time.Period period42 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType21, chronology30);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(obj18, chronology30);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate43.toDateTimeAtMidnight(dateTimeZone46);
        long long51 = dateTimeZone46.convertLocalToUTC((long) 31, true);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone46);
        mutableDateTime10.setZoneRetainFields(dateTimeZone46);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime56 = localDate3.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime57 = dateTime2.withZone(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 31L + "'", long51 == 31L);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) ' ', chronology3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.PeriodType periodType13 = mutablePeriod4.getPeriodType();
        java.lang.String str14 = periodType13.toString();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekOfWeekyear();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.Period period26 = new org.joda.time.Period((long) 53713891, (long) 53670257, periodType13, chronology22);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology22);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Standard]" + "'", str14, "PeriodType[Standard]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutableDateTime11.add(durationFieldType14, (int) (byte) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime11, periodType17);
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime11.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar20);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay21.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay24 = property22.addWrapFieldToCopy(34);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay27 = property25.addToCopy((int) (short) 1);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology12);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.LocalTime localTime17 = property15.roundCeilingCopy();
        org.joda.time.Interval interval18 = property15.toInterval();
        int int19 = property15.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        int int10 = dateTime9.getDayOfMonth();
        boolean boolean11 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        org.joda.time.Chronology chronology23 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale26);
        java.lang.String str29 = dateTimeField24.getAsShortText(21, locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = gregorianCalendar12.getDisplayName(56, 53881886, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455540236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455540236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "21" + "'", str29, "21");
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        int int3 = mutableDateTime1.getWeekyear();
        int int4 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.millisOfSecond();
        java.lang.String str6 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str6, "2022-02-21T00:00:00.000Z");
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withSecondOfMinute(697);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 697 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = localTime8.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime8.minus(readablePeriod10);
        org.joda.time.LocalTime localTime13 = localTime8.minusHours(52);
        org.joda.time.LocalTime localTime15 = localTime13.minusSeconds(462);
        org.joda.time.LocalTime localTime17 = localTime13.minusSeconds(719162);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        long long10 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.Period period13 = interval8.toPeriod(periodType12);
        boolean boolean14 = duration1.equals((java.lang.Object) period13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime23 = dateTime19.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfYear();
        org.joda.time.DateMidnight dateMidnight26 = localDate24.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = localDate24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        java.lang.String str30 = periodType29.toString();
        org.joda.time.PeriodType periodType31 = periodType29.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.months();
        mutablePeriod39.set(durationFieldType40, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        boolean boolean44 = mutablePeriod39.isSupported(durationFieldType43);
        int int45 = mutablePeriod35.indexOf(durationFieldType43);
        java.lang.String str46 = durationFieldType43.getName();
        int int47 = mutablePeriod33.get(durationFieldType43);
        boolean boolean48 = periodType31.isSupported(durationFieldType43);
        org.joda.time.PeriodType periodType49 = periodType31.withSecondsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withMinutesRemoved();
        org.joda.time.Period period51 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight27, periodType49);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1645455254213L, periodType49);
        org.joda.time.Period period53 = period13.normalizedStandard(periodType49);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 34L + "'", long10 == 34L);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[Years]" + "'", str30, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "months" + "'", str46, "months");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMaximumValue();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(53636377);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) (short) 0);
        int int13 = localDateTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455540533,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=533,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfWeek();
        java.lang.String str6 = localDateTime4.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455540573,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=573,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:59:00.573" + "'", str6, "2022-02-21T14:59:00.573");
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) '4');
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = period31.negated();
        org.joda.time.Period period33 = period32.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType35 = period33.getFieldType(147027);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime14.plusSeconds(10);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        int int24 = property18.getMaximumTextLength(locale21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone10, locale21);
        java.util.TimeZone.setDefault(timeZone10);
        java.util.TimeZone.setDefault(timeZone10);
        boolean boolean28 = timeZone10.observesDaylightTime();
        java.lang.String str29 = timeZone10.getID();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=618,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455540618,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=618,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455540618,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=618,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str29, "\u4e2d\u6587\u4e2d\u56fd)");
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 10, chronology30);
        org.joda.time.Period period33 = duration16.toPeriod(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = chronology30.era();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime35.addSeconds(2119);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        int int36 = timeOfDay35.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.withMinuteOfHour(0);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        mutableDateTime40.add((long) 1);
        org.joda.time.DateTime dateTime43 = mutableDateTime40.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime40, readableDuration44, periodType45);
        org.joda.time.Chronology chronology47 = mutableDateTime40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(chronology47);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfYear((int) (byte) 1);
        int int53 = dateTime52.getDayOfMonth();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime52.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime48.add((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean60 = duration55.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 10, chronology69);
        org.joda.time.Period period72 = duration55.toPeriod(chronology69);
        org.joda.time.Period period73 = period72.negated();
        org.joda.time.Period period75 = period72.withYears(53715795);
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay38.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 53742154);
        org.joda.time.TimeOfDay.Property property78 = timeOfDay38.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay79 = property78.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(timeOfDay79);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray3 = strSet2.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, readableDuration10, periodType11);
        org.joda.time.Chronology chronology13 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean26 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime2.plus((org.joda.time.ReadableDuration) duration21);
        int int28 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = property29.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField(752);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 752");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455540874,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=874,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 874 + "'", int28 == 874);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1999330192333483L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime5.plusSeconds(10);
        org.joda.time.DateTime dateTime10 = dateTime5.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property12 = dateTime10.property(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay1.withField(dateTimeFieldType15, 36523);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.lang.String str10 = calendar8.getCalendarType();
        calendar8.set(53639228, 224, 357);
        java.lang.String str15 = calendar8.toString();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53639228,MONTH=224,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=357,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53639228,MONTH=224,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=357,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str15, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53639228,MONTH=224,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=357,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfWeek(7);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.withCenturyOfEra(21);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDayOfMonth(8);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfMonth();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        java.lang.String str25 = mutablePeriod19.toString();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.setValue(0, 2022);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        long long35 = duration34.getMillis();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        long long38 = duration37.getMillis();
        int int39 = duration34.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration41 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration37, 2);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight10.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        mutableDateTime44.add((long) 1);
        org.joda.time.DateTime dateTime47 = mutableDateTime44.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime44, readableDuration48, periodType49);
        org.joda.time.Chronology chronology51 = mutableDateTime44.getChronology();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear((int) (byte) 1);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime56.minus((org.joda.time.ReadableDuration) duration59);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration41.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = localDate63.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDate.Property property66 = localDate63.yearOfEra();
        org.joda.time.Interval interval67 = localDate63.toInterval();
        org.joda.time.DateTime dateTime68 = localDate63.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(2022);
        org.joda.time.Period period71 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight0.withYearOfEra(20);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.034S" + "'", str25, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateMidnight74);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1L, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalDate localDate7 = property3.addToCopy(70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration8, (org.joda.time.ReadableInstant) dateTime10, periodType13);
        org.joda.time.DateTime dateTime16 = dateTime10.withMonthOfYear((int) (short) 1);
        boolean boolean17 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfDay(4);
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime22 = timeOfDay21.toDateTimeToday();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        int int24 = property20.compareTo((org.joda.time.ReadableInstant) dateTime22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime22.withTime(468, 0, (-51), 146869);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 468 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        date5.setMonth((int) (short) 100);
        int int8 = date5.getTimezoneOffset();
        date5.setMinutes((int) (short) -1);
        int int11 = date5.getHours();
        java.time.Instant instant12 = date5.toInstant();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay13.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusMillis(30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay13.withHourOfDay(53857);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53857 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Tue May 04 02:59:00 GMT+00:00 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfYear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.Interval interval26 = localDate22.toInterval(dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfEra();
        mutableDateTime28.addMillis(517);
        mutableDateTime28.setMillis(43200000L);
        java.util.Date date34 = mutableDateTime28.toDate();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime28.minuteOfHour();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) mutableDateTime28);
        int int37 = mutableDateTime28.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 12:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = locale0.stripExtensions();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.Interval interval6 = localDate2.toInterval(dateTimeZone5);
        long long9 = dateTimeZone5.adjustOffset((long) 2, true);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        int int20 = mutablePeriod14.getHours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod14.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight10.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateMidnight.Property property23 = dateMidnight10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) locale1, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property24 = localDate23.yearOfEra();
        org.joda.time.LocalDate localDate26 = localDate23.withYearOfEra((int) (short) 100);
        org.joda.time.LocalDate localDate28 = localDate23.withYearOfCentury(0);
        org.joda.time.LocalDate localDate30 = localDate23.plusYears(893);
        boolean boolean31 = duration20.equals((java.lang.Object) localDate23);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(311, 82, 517);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 311 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes(32769);
        boolean boolean22 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = mutableDateTime1.getRoundingField();
        mutableDateTime1.setWeekyear(53742154);
        int int27 = mutableDateTime1.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str8, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 365 + "'", int17 == 365);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond((int) 'a');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight14 = property13.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight15 = property13.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        int int18 = mutableDateTime17.getMillisOfSecond();
        int int19 = property13.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime23.plusSeconds(10);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        mutablePeriod43.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.String str49 = mutablePeriod43.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval50.withDurationAfterStart(readableDuration51);
        boolean boolean53 = interval34.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration54 = interval50.toDuration();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        java.lang.String str56 = periodType55.toString();
        org.joda.time.PeriodType periodType57 = periodType55.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.months();
        mutablePeriod65.set(durationFieldType66, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.months();
        boolean boolean70 = mutablePeriod65.isSupported(durationFieldType69);
        int int71 = mutablePeriod61.indexOf(durationFieldType69);
        java.lang.String str72 = durationFieldType69.getName();
        int int73 = mutablePeriod59.get(durationFieldType69);
        boolean boolean74 = periodType57.isSupported(durationFieldType69);
        org.joda.time.PeriodType periodType75 = periodType57.withSecondsRemoved();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration54, periodType75);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime17, periodType75);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime17.weekOfWeekyear();
        int int79 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.setMillis((long) 157);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455541393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=1,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.034S" + "'", str49, "PT0.034S");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PeriodType[Years]" + "'", str56, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "months" + "'", str72, "months");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(35417L);
        int int38 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now();
        int int43 = localTime41.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        int int46 = mutableDateTime45.getYearOfEra();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        mutablePeriod50.set(durationFieldType51, (int) 'a');
        mutablePeriod50.addHours((int) (byte) -1);
        mutablePeriod50.addYears(2022);
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime59 = localTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalTime localTime61 = localTime59.plusSeconds(100);
        boolean boolean62 = localTime37.isEqual((org.joda.time.ReadablePartial) localTime59);
        int int63 = property5.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.DurationField durationField64 = property5.getDurationField();
        org.joda.time.LocalTime localTime65 = property5.roundHalfEvenCopy();
        int int66 = localTime65.getHourOfDay();
        int int67 = localTime65.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        int int5 = dateMidnight4.getSecondOfDay();
        int int6 = dateMidnight4.getDayOfWeek();
        org.joda.time.Interval interval7 = dateMidnight4.toInterval();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, readableDuration13, periodType14);
        java.lang.String str16 = mutableDateTime9.toString();
        mutableDateTime9.addMinutes((int) ' ');
        int int19 = mutableDateTime9.getDayOfWeek();
        boolean boolean20 = interval7.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property24 = localDate21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        org.joda.time.LocalDate localDate28 = property24.setCopy(2022);
        org.joda.time.LocalDate localDate29 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate31 = property24.addToCopy(365);
        int int32 = property24.getMinimumValueOverall();
        org.joda.time.LocalDate localDate33 = property24.roundHalfEvenCopy();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getName((long) 100);
        org.joda.time.DateTime dateTime38 = localDate33.toDateTimeAtStartOfDay(dateTimeZone35);
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property40 = dateTime38.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime38.minus(62135636400000L);
        int int43 = dateTime42.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str16, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-21T00:00:00.000Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.monthOfYear();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property15 = dateMidnight10.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight10.plusMonths(134);
        long long18 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        long long19 = property8.remainder();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1728000001L + "'", long19 == 1728000001L);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePeriod) mutablePeriod16, 1L, (long) 4);
        org.joda.time.DurationField durationField22 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(62, 953, 159, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plus(readableDuration10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.Interval interval13 = dateMidnight8.toInterval();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.withYear(905);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withCenturyOfEra(134);
        org.joda.time.DateTime dateTime14 = dateTime8.plusYears(53769898);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 10, chronology26);
        org.joda.time.Period period29 = new org.joda.time.Period(22L, (long) 86399, chronology26);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withDayOfMonth(8);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime38.plusSeconds(10);
        org.joda.time.DateTime dateTime43 = dateTime38.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        int int46 = dateMidnight31.get(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType44.getRangeDurationType();
        int int48 = localDate30.get(dateTimeFieldType44);
        boolean boolean49 = localDate15.isSupported(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DateTime dateTime10 = mutableDateTime7.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, readableDuration11, periodType12);
        org.joda.time.Weeks weeks14 = period13.toStandardWeeks();
        org.joda.time.Period period16 = period13.minusYears(12);
        org.joda.time.Duration duration17 = period13.toStandardDuration();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone20);
        mutableDateTime21.add((long) 21);
        org.joda.time.Period period24 = duration17.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) mutableDateTime21);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.setDayOfMonth(32770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(32772);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime1.plusWeeks(301);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1641116552333L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(4);
        org.joda.time.Chronology chronology32 = dateTimeFormatter31.getChronology();
        java.io.Writer writer33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay34.minusMinutes(301);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.withHourOfDay(1);
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay43);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.minusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter31.printTo(writer33, (org.joda.time.ReadablePartial) timeOfDay47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight1.toMutableDateTime();
        boolean boolean6 = dateMidnight1.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight1.withCenturyOfEra(0);
        int int9 = dateMidnight1.getDayOfYear();
        java.util.Date date10 = dateMidnight1.toDate();
        org.joda.time.DateMidnight.Property property11 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight12 = property11.withMaximumValue();
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant0, (org.joda.time.ReadableInstant) dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField6 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime7 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455541827,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=1,MILLISECOND=827,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek(167);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 167 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455541843,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=1,MILLISECOND=843,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int3 = calendar1.getFirstDayOfWeek();
        calendar1.add(5, 14);
        int int8 = calendar1.getActualMinimum(6);
        boolean boolean9 = calendar1.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1646665141883,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=66,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=1,MILLISECOND=883,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays(31);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay33.plusSeconds(100);
        org.joda.time.Chronology chronology38 = timeOfDay33.getChronology();
        org.joda.time.TimeOfDay.Property property39 = timeOfDay33.secondOfMinute();
        org.joda.time.TimeOfDay.Property property40 = timeOfDay33.minuteOfHour();
        org.joda.time.LocalTime localTime41 = timeOfDay33.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime43 = localTime41.withSecondOfMinute(66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 100, chronology11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType2, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay16.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean27 = timeOfDay23.isSupported(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        mutablePeriod36.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        java.lang.String str42 = mutablePeriod36.toString();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadablePeriod) mutablePeriod36);
        mutablePeriod36.setValue(0, 2022);
        mutablePeriod36.addDays(31);
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay23.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay49.plusSeconds(100);
        org.joda.time.Chronology chronology54 = timeOfDay49.getChronology();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        org.joda.time.TimeOfDay timeOfDay57 = property55.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay58 = property55.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.plusSeconds(56);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        int int66 = mutablePeriod65.getMonths();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant61, (org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(chronology68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.minusMonths((int) (short) -1);
        int int72 = yearMonthDay69.size();
        org.joda.time.YearMonthDay.Property property73 = yearMonthDay69.year();
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(locale74);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(locale74);
        int int77 = property73.getMaximumShortTextLength(locale74);
        org.joda.time.YearMonthDay yearMonthDay79 = property73.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay81 = property73.addWrapFieldToCopy((int) (byte) 100);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.lang.String str83 = property73.getAsText(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) timeOfDay60, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0.034S" + "'", str42, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1645455542117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1645455542117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022" + "'", str83, "2022");
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        int int5 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str15 = property14.toString();
        org.joda.time.DurationField durationField16 = property14.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundHalfFloor();
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime17.getRoundingField();
        mutableDateTime17.setWeekyear(53919760);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str2, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+14:00");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[weekOfWeekyear]" + "'", str15, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNull(dateTimeField18);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = chronology21.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = durationField22.getValueAsLong((long) 53861358);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        java.lang.String str12 = dateTimeField10.getAsText(100L);
        long long15 = dateTimeField10.add(34196642806L, (long) 16);
        boolean boolean16 = dateTimeField10.isLenient();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay17.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean28 = timeOfDay24.isSupported(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        mutablePeriod37.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        java.lang.String str43 = mutablePeriod37.toString();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.setValue(0, 2022);
        mutablePeriod37.addDays(31);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay24.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay50.plusSeconds(100);
        org.joda.time.Chronology chronology55 = timeOfDay50.getChronology();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) timeOfDay50, 116, locale57);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay50.plusMinutes(53635369);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.withHourOfDay(798);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 798 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 34196658806L + "'", long15 == 34196658806L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.034S" + "'", str43, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "116" + "'", str58, "116");
        org.junit.Assert.assertNotNull(timeOfDay60);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(12);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("2022-02-21T14:55:58.839", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(dateTimeParser7);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int3 = calendar1.getFirstDayOfWeek();
        calendar1.add(5, 14);
        int int8 = calendar1.getActualMinimum(6);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(697, 53676724);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1646665142321,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=66,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=321,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(chronology9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths((int) (short) -1);
        org.joda.time.Interval interval13 = yearMonthDay10.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = yearMonthDay10.getFieldType((int) (short) 0);
        int int16 = localDate0.get(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate0.year();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond(21);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear(1969);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withDayOfWeek(950);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 950 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455542456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 456 + "'", int6 == 456);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime0.toDateTime(dateTimeZone2);
        int int5 = dateTime0.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime0.withSecondOfMinute((-14));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -14 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        java.util.GregorianCalendar gregorianCalendar13 = dateMidnight12.toGregorianCalendar();
        int int14 = gregorianCalendar13.getWeeksInWeekYear();
        gregorianCalendar13.setFirstDayOfWeek((int) (byte) 0);
        java.util.TimeZone timeZone17 = gregorianCalendar13.getTimeZone();
        int int18 = gregorianCalendar13.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay21 = property12.withMinimumValue();
        org.joda.time.Period period23 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.withPeriodAdded((org.joda.time.ReadablePeriod) period23, (int) (byte) -1);
        int int26 = yearMonthDay21.getDayOfMonth();
        org.joda.time.DateTime dateTime27 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        long long29 = property28.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property28.getFieldType();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455542551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=551,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455542551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=551,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 53942551L + "'", long29 == 53942551L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        org.joda.time.Period period2 = new org.joda.time.Period(19691596800000L, 1645455439837L);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfYear(10);
        org.joda.time.Period period11 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.Seconds seconds12 = period11.toStandardSeconds();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, readableDuration18);
        org.joda.time.Period period20 = period11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Period period22 = period20.plusHours((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight9.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 271);
        int int25 = dateMidnight9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        java.util.GregorianCalendar gregorianCalendar13 = dateMidnight12.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.plusYears(4);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded((long) (short) 10, 702);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.plus(3092581296000239L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = timeOfDay0.toString("1968-03-01T00:10:25.001Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = strSet2.add("DateTimeField[minuteOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        org.joda.time.LocalDate.Property property6 = localDate4.weekyear();
        org.joda.time.LocalDate localDate8 = localDate4.plusWeeks((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str10 = dateTimeFieldType9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate8.withField(dateTimeFieldType9, 944);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455542864,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=864,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfDay" + "'", str10, "hourOfDay");
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(874);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DurationField durationField19 = chronology7.eras();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(40);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-31449599991L), 0L, periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, readableDuration23, periodType26);
        org.joda.time.DateTime.Property property29 = dateTime20.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        org.joda.time.Chronology chronology38 = mutableDateTime31.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology38);
        long long43 = chronology38.add((long) 22, 100L, 0);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfWeek();
        org.joda.time.DateTime dateTime45 = dateTime20.withChronology(chronology38);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime47 = property46.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight49.toMutableDateTime();
        mutableDateTime50.add((long) 1);
        org.joda.time.DateTime dateTime53 = mutableDateTime50.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime50, readableDuration54, periodType55);
        java.lang.String str57 = mutableDateTime50.toString();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime50.millisOfSecond();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now();
        int int60 = localTime59.size();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        boolean boolean62 = localTime59.equals((java.lang.Object) locale61);
        int int63 = property58.getMaximumTextLength(locale61);
        java.lang.String str64 = locale61.getDisplayVariant();
        java.lang.String str65 = locale61.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = property46.setCopy("2022-02-21T14:56:54.103", locale61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:56:54.103\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 22L + "'", long43 == 22L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str57, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.Period period29 = new org.joda.time.Period((-31449600001L), chronology15);
        org.joda.time.Period period31 = period29.minusYears(11);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period34 = period31.withField(durationFieldType32, 301);
        org.joda.time.Period period36 = period34.minusDays(0);
        org.joda.time.Period period38 = period36.multipliedBy(744);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType40 = period36.getFieldType(44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(1L, dateTimeZone6);
        org.joda.time.Interval interval8 = localDate0.toInterval(dateTimeZone6);
        org.joda.time.LocalDate.Property property9 = localDate0.year();
        org.joda.time.LocalDate.Property property10 = localDate0.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate0.withWeekOfWeekyear(394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 394 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfMonth();
        mutableDateTime6.addYears(365);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutablePeriod14.set(durationFieldType15, (int) 'a');
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        boolean boolean35 = interval25.contains((org.joda.time.ReadableInterval) interval33);
        long long36 = interval33.getEndMillis();
        boolean boolean37 = interval33.containsNow();
        mutablePeriod14.add((org.joda.time.ReadableInterval) interval33);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfYear();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate39.toInterval(dateTimeZone42);
        boolean boolean44 = interval33.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Chronology chronology45 = interval33.getChronology();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfMonth();
        org.joda.time.DateTime dateTime52 = dateTime49.plusSeconds(10);
        org.joda.time.DateTime dateTime54 = dateTime49.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property56 = dateTime54.property(dateTimeFieldType55);
        org.joda.time.DateTime dateTime58 = property56.addWrapFieldToCopy(9);
        org.joda.time.DateTime dateTime60 = dateTime58.minusYears((int) '#');
        org.joda.time.DateTime dateTime62 = dateTime58.plusMinutes(7);
        int int63 = dateTime62.getMillisOfSecond();
        int int64 = dateTime62.getHourOfDay();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight67.toMutableDateTime();
        mutableDateTime68.add((long) 1);
        mutableDateTime68.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime68.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime68.dayOfYear();
        int int75 = property74.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime76 = property74.roundFloor();
        boolean boolean77 = dateTime66.isAfter((org.joda.time.ReadableInstant) mutableDateTime76);
        mutableDateTime76.setMillis((long) 12);
        org.joda.time.Duration duration81 = new org.joda.time.Duration(31556952000L);
        java.lang.String str82 = duration81.toString();
        mutableDateTime76.add((org.joda.time.ReadableDuration) duration81, (-63304));
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableDuration) duration81);
        boolean boolean86 = interval33.abuts((org.joda.time.ReadableInterval) interval85);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645455542970L + "'", long36 == 1645455542970L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 365 + "'", int75 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT31556952S" + "'", str82, "PT31556952S");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withYearOfEra((int) (short) 100);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod25, 1L, (long) 4);
        org.joda.time.Period period31 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType10, chronology19);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology19);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getShortName((long) 53700000);
        java.lang.String str39 = dateTimeZone34.getID();
        int int41 = dateTimeZone34.getOffsetFromLocal(2L);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime32, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 271, dateTimeZone34);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) 0, 12600879L, dateTimeZone34);
        org.joda.time.Interval interval45 = localDate0.toInterval(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = localDate0.withEra(363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 363 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        int int4 = localDateTime2.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455542995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=995,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate2.yearOfEra();
        org.joda.time.LocalDate.Property property6 = localDate2.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withChronology(chronology21);
        boolean boolean35 = dateTimeFormatter9.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter9.withZoneUTC();
        boolean boolean37 = dateTimeFormatter36.isParser();
        org.joda.time.Chronology chronology38 = dateTimeFormatter36.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeFormatter36.getZone();
        org.joda.time.Interval interval40 = localDate2.toInterval(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        org.joda.time.DateTime dateTime45 = mutableDateTime42.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime42, readableDuration46, periodType47);
        java.lang.String str49 = mutableDateTime42.toString();
        mutableDateTime42.addMinutes((int) ' ');
        mutableDateTime42.setYear(134);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfMonth();
        org.joda.time.DateTime dateTime60 = dateTime57.plusSeconds(10);
        org.joda.time.DateTime dateTime62 = dateTime57.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime42.property(dateTimeFieldType63);
        int int66 = mutableDateTime42.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime42.getZone();
        int int68 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) mutableDateTime42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval69 = new org.joda.time.Interval((long) 817, (long) 138, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str49, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getWeekyear();
        boolean boolean3 = mutableDateTime1.isEqualNow();
        mutableDateTime1.addMonths(1971);
        mutableDateTime1.setMillisOfSecond(936);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.LocalTime localTime4 = timeOfDay0.toLocalTime();
        org.joda.time.LocalTime localTime6 = localTime4.plusHours(53706310);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        mutableDateTime8.add(durationFieldType11, (int) (byte) 1);
        int int14 = mutableDateTime8.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfCentury();
        boolean boolean19 = dateMidnight16.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property21 = dateMidnight16.property(dateTimeFieldType20);
        java.lang.String str22 = dateTimeFieldType20.toString();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime8.property(dateTimeFieldType20);
        boolean boolean24 = localTime4.isSupported(dateTimeFieldType20);
        org.joda.time.LocalTime.Property property25 = localTime4.millisOfSecond();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.fromCalendarFields(calendar27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withWeekyear(134);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfMonth();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        mutablePeriod45.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        java.lang.String str51 = mutablePeriod45.toString();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) mutablePeriod45);
        mutablePeriod45.setValue(0, 2022);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod45.setPeriod((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        long long61 = duration60.getMillis();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) (byte) 0);
        long long64 = duration63.getMillis();
        int int65 = duration60.compareTo((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration67 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration63, 2);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration57, 69);
        java.util.Locale locale70 = java.util.Locale.PRC;
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale70);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.fromCalendarFields(calendar71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.era();
        boolean boolean76 = localDateTime74.isSupported(dateTimeFieldType75);
        boolean boolean77 = localDateTime69.isSupported(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime69.withEra((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = localTime4.compareTo((org.joda.time.ReadablePartial) localDateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "clockhourOfHalfday" + "'", str22, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455543037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0.034S" + "'", str51, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455543037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        java.lang.String str25 = locale22.getDisplayVariant(locale23);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet26.spliterator();
        java.lang.String[] strArray50 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        boolean boolean53 = strSet51.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.lang.String[] strArray59 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.lang.String[] strArray68 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList69);
        java.lang.String str72 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList69);
        boolean boolean73 = strSet51.retainAll((java.util.Collection<java.lang.String>) strList69);
        boolean boolean74 = strSet26.retainAll((java.util.Collection<java.lang.String>) strSet51);
        boolean boolean76 = strSet51.add("\u65e5\u6587");
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet51);
        boolean boolean78 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.stream.Stream<java.lang.String> strStream79 = strSet51.stream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455543075,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=75,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strStream79);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        java.lang.String str12 = dateTimeField10.getAsText(100L);
        long long15 = dateTimeField10.add(34196642806L, (long) 16);
        boolean boolean16 = dateTimeField10.isLenient();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay17.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean28 = timeOfDay24.isSupported(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        mutablePeriod37.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        java.lang.String str43 = mutablePeriod37.toString();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.setValue(0, 2022);
        mutablePeriod37.addDays(31);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay24.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.minusHours(292278993);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay50.plusSeconds(100);
        org.joda.time.Chronology chronology55 = timeOfDay50.getChronology();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) timeOfDay50, 116, locale57);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay50.plusMinutes(53635369);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.months();
        mutablePeriod64.set(durationFieldType65, (int) 'a');
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType72);
        int int74 = mutablePeriod73.getMonths();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableInstant69, (org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (short) 100, chronology76);
        boolean boolean78 = durationFieldType65.isSupported(chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay80 = timeOfDay60.withFieldAdded(durationFieldType65, 337);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 34196658806L + "'", long15 == 34196658806L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.034S" + "'", str43, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "116" + "'", str58, "116");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.minusMinutes(301);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay(1);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay9);
        org.joda.time.DateTime dateTime12 = timeOfDay11.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "P0Y");
        java.util.Locale.Builder builder4 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ISOChronology[UTC] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        org.joda.time.Period period1 = org.joda.time.Period.years(53734070);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.hourOfDay();
        mutableDateTime3.addWeeks(828);
        java.lang.Object obj7 = mutableDateTime3.clone();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, readableDuration13, periodType14);
        org.joda.time.Chronology chronology16 = mutableDateTime9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean29 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 10, chronology38);
        org.joda.time.Period period41 = duration24.toPeriod(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight45.toMutableDateTime();
        mutableDateTime46.add((long) 1);
        org.joda.time.DateTime dateTime49 = mutableDateTime46.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime46, readableDuration50, periodType51);
        org.joda.time.Chronology chronology53 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfHalfday();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale56);
        java.lang.String str59 = dateTimeField54.getAsShortText(21, locale56);
        java.lang.String str60 = locale56.getDisplayLanguage();
        java.lang.String str61 = dateTimeField43.getAsShortText(6, locale56);
        boolean boolean62 = dateTimeField43.isLenient();
        org.joda.time.DurationField durationField63 = dateTimeField43.getRangeDurationField();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType72);
        int int74 = mutablePeriod73.getMonths();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableInstant69, (org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (short) 100, chronology76);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology76);
        org.joda.time.LocalTime.Property property79 = localTime78.secondOfMinute();
        org.joda.time.DurationField durationField80 = property79.getDurationField();
        org.joda.time.LocalTime localTime81 = property79.roundCeilingCopy();
        org.joda.time.LocalTime localTime82 = org.joda.time.LocalTime.now();
        int int83 = localTime82.size();
        java.util.Locale locale84 = java.util.Locale.ITALY;
        boolean boolean85 = localTime82.equals((java.lang.Object) locale84);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale84);
        java.lang.String str87 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localTime81, locale84);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setRounding(dateTimeField43, 53742);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 53742");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "2038-01-04T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "2038-01-04T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "2038-01-04T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645455543370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455543370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "21" + "'", str59, "21");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u6587" + "'", str60, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "6" + "'", str61, "6");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=1645455543370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "10" + "'", str87, "10");
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        java.lang.String str7 = dateTimeFieldType5.getName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455543393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "era" + "'", str7, "era");
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        long long1 = java.util.Date.parse("Tue Sep 07 20:41:59 GMT 148754");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 4632077220119000L + "'", long1 == 4632077220119000L);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.minus(readablePeriod8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(840);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMillis(4);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withWeekyear(134);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withWeekOfWeekyear(6);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.plus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        int int26 = localDateTime24.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = localTime9.isEqual((org.joda.time.ReadablePartial) localDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455543422,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=422,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.DurationField durationField14 = property12.getDurationField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-292275054) + "'", int13 == (-292275054));
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekOfWeekyear();
        mutableDateTime11.addMonths(301);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.property(dateTimeFieldType17);
        boolean boolean20 = dateMidnight7.isSupported(dateTimeFieldType17);
        boolean boolean21 = localDate6.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate.Property property22 = localDate6.era();
        org.joda.time.LocalDate localDate24 = localDate6.plusMonths(53769898);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(chronology32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.minusMonths((int) (short) -1);
        int int36 = yearMonthDay33.size();
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay33.year();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale38);
        int int41 = property37.getMaximumShortTextLength(locale38);
        org.joda.time.YearMonthDay yearMonthDay43 = property37.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay45 = property37.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay46 = property37.withMinimumValue();
        org.joda.time.Period period48 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, (int) (byte) -1);
        org.joda.time.Period period52 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period54 = period52.minusYears(8);
        org.joda.time.Period period56 = period52.withSeconds(11);
        org.joda.time.Period period58 = period52.minusMillis((int) (short) 100);
        org.joda.time.Period period60 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period62 = period60.minusYears(8);
        org.joda.time.Period period64 = period60.withSeconds(11);
        org.joda.time.Period period66 = period60.minusMillis((int) (short) 100);
        org.joda.time.Period period67 = period52.withFields((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period68 = period48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalDate localDate69 = localDate24.plus((org.joda.time.ReadablePeriod) period48);
        int int70 = localDate69.getYear();
        org.joda.time.LocalDate.Property property71 = localDate69.monthOfYear();
        org.joda.time.LocalDate localDate73 = localDate69.plusDays(180);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT+00:00 1907");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455543575,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=575,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645455543575,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=575,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4482732 + "'", int70 == 4482732);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DurationField durationField19 = chronology7.eras();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology7);
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        long long27 = dateTimeField24.set((long) 53861358, "55");
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.minusMonths((int) (short) -1);
        int int40 = yearMonthDay37.size();
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay37.year();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale42);
        int int45 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.YearMonthDay yearMonthDay47 = property41.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay49 = property41.addWrapFieldToCopy((int) (byte) 100);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = property41.getAsText(locale50);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String str54 = locale50.getDisplayScript(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTimeField24.getAsText(readablePartial28, locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 626 + "'", int22 == 626);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 53741358L + "'", long27 == 53741358L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645455543626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645455543626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setExtension('4', "CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime3.plusMinutes(9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(476);
        int int13 = dateTime12.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        int int5 = dateMidnight4.getSecondOfDay();
        org.joda.time.DateMidnight.Property property6 = dateMidnight4.monthOfYear();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight9 = property6.addToCopy(2000);
        org.joda.time.DateMidnight dateMidnight10 = property6.roundCeilingCopy();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.year();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(2000);
        org.joda.time.Period period3 = org.joda.time.Period.seconds(69);
        org.joda.time.Period period4 = period1.minus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology30 = dateTimeFormatter2.getChronolgy();
        boolean boolean31 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(50);
        java.lang.Integer int34 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology35 = dateTimeFormatter2.getChronolgy();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        mutableDateTime40.add((long) 1);
        org.joda.time.DateTime dateTime43 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        boolean boolean45 = mutableDateTime40.isSupported(dateTimeFieldType44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime40.hourOfDay();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekyearOfCentury();
        long long57 = dateTimeField55.roundHalfFloor((long) 1);
        mutableDateTime40.setRounding(dateTimeField55, (int) (byte) 0);
        int int60 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) mutableDateTime40);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone62);
        java.lang.String str66 = dateTimeZone62.getShortName((long) 53700000);
        java.lang.String str67 = dateTimeZone62.getID();
        mutableDateTime40.setZone(dateTimeZone62);
        java.util.TimeZone timeZone69 = dateTimeZone62.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter2.withZone(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime73 = dateMidnight72.toMutableDateTime();
        mutableDateTime73.add((long) 1);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime73.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundCeiling();
        mutableDateTime77.addMinutes(625);
        org.joda.time.DateTimeZone dateTimeZone80 = mutableDateTime77.getZone();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) 301, dateTimeZone80);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = dateTimeFormatter70.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime81, "54", 552);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(14, 0);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.lang.String str7 = locale4.getDisplayVariant(locale5);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone3, locale4);
        calendar8.set(23, 321, 451, (int) (byte) 0, 312);
        java.util.Date date21 = new java.util.Date((int) (byte) 0, (int) (short) 10, (int) ' ', (int) 'u', 53633250, 53633250);
        calendar8.setTime(date21);
        int int23 = date21.getHours();
        date21.setYear(17);
        int int26 = date21.getDate();
        java.time.Instant instant27 = date21.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+14:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455543816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1092004650000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+14:00\",offset=50400000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2004,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=222,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=37,SECOND=30,MILLISECOND=0,ZONE_OFFSET=50400000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date21.toString(), "Wed Aug 08 22:37:30 GMT+00:00 1917");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(instant27);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        java.util.Date date5 = mutableDateTime1.toDate();
        int int6 = date5.getDay();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date5);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = dateTimeField4.getRangeDurationField();
        boolean boolean6 = dateTimeField4.isLenient();
        long long8 = dateTimeField4.roundHalfFloor(62135596800022L);
        long long11 = dateTimeField4.addWrapField((long) 53940000, 53861358);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 62135596800000L + "'", long8 == 62135596800000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1699700289087540000L + "'", long11 == 1699700289087540000L);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        java.io.IOException iOException1 = new java.io.IOException("DurationField[hours]");
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("months");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        org.joda.time.DateTime dateTime13 = dateTime8.withZoneRetainFields(dateTimeZone10);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = dateTimeZone10.getShortName((-192508671817343L), locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone1, locale15);
        java.lang.String str19 = timeZone1.getID();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = calendar20.isSet(53636377);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455543901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=901,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455543901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=901,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455543901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=3,MILLISECOND=901,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) 100);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(2L);
        int int10 = timeOfDay8.getValue((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusMinutes(7);
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(53635369, 86, 53636377, 800, 505, 53718302, 719162, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 800 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        java.util.Date date6 = mutableDateTime2.toDate();
        java.util.Calendar.Builder builder7 = builder0.setInstant(date6);
        java.util.Calendar calendar8 = builder0.build();
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.lang.String str10 = calendar8.getCalendarType();
        calendar8.roll(32772, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar8.getActualMinimum(366);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 366");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes(32769);
        boolean boolean22 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.setYear(366);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(583);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period27, 53844742);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str8, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 365 + "'", int17 == 365);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.joda.time.Period period4 = new org.joda.time.Period(53909336, 97, 105, 32766750);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        int int5 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime7 = localTime0.withMillisOfSecond(312);
        org.joda.time.LocalTime localTime9 = localTime0.plusMillis(27);
        org.joda.time.LocalTime localTime11 = localTime0.plusMillis(32766750);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(53914963);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        boolean boolean6 = dateMidnight3.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property8 = dateMidnight3.property(dateTimeFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setMonthOfYear(1);
        mutableDateTime10.addWeekyears(4);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime10.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = localDate2.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean23 = dateTime21.isBefore((long) 889);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str11, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        mutableDateTime3.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime3.dayOfYear();
        int int10 = property9.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundFloor();
        boolean boolean12 = dateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.setMillis((long) 12);
        int int15 = mutableDateTime11.getDayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property5 = dateTime1.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = property2.addNoWrapToCopy(594);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        mutableDateTime1.setChronology(chronology18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekOfWeekyear();
        mutableDateTime1.setRounding(dateTimeField31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(1L, dateTimeZone34);
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, readableDuration42, periodType43);
        int[] intArray45 = period44.getValues();
        int int46 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDate35, intArray45);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localDate47.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDate.Property property50 = localDate47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        org.joda.time.DurationField durationField52 = property50.getDurationField();
        org.joda.time.LocalDate localDate54 = property50.setCopy(2022);
        org.joda.time.LocalDate localDate55 = property50.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate57 = property50.addToCopy(517);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDate57, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField31.getType();
        boolean boolean62 = dateTimeField31.isLeap((long) 53808326);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "8" + "'", str59, "8");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate4.getEra();
        int int6 = localDate4.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight8 = localDate6.toDateMidnight();
        org.joda.time.Chronology chronology9 = localDate6.getChronology();
        org.joda.time.LocalDate localDate11 = localDate6.withYear(365);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.Chronology chronology20 = mutableDateTime13.getChronology();
        java.lang.Object obj21 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        int[] intArray44 = chronology33.get((org.joda.time.ReadablePeriod) mutablePeriod39, 1L, (long) 4);
        org.joda.time.Period period45 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType24, chronology33);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(obj21, chronology33);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate46.toDateTimeAtMidnight(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC((long) 31, true);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone49);
        mutableDateTime13.setZoneRetainFields(dateTimeZone49);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone49);
        org.joda.time.DateTime dateTime59 = localDate6.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight5.withZoneRetainFields(dateTimeZone49);
        int int61 = dateMidnight60.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 31L + "'", long54 == 31L);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("08:35:52.877");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '08:35:52.877' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 0, 53636377, 312, 16, 53636377, 440, (int) 'a', 208);
        org.joda.time.Period period10 = period8.withDays(1);
        org.joda.time.Period period12 = period10.plusDays(310);
        org.joda.time.Period period14 = period12.withWeeks(53706310);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration34.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.yearOfCentury();
        int int65 = dateMidnight63.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = timeOfDay66.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean72 = dateMidnight63.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateMidnight.Property property73 = dateMidnight63.yearOfCentury();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType76);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.months();
        mutablePeriod77.set(durationFieldType78, (int) 'a');
        mutablePeriod77.addHours((int) (byte) -1);
        mutablePeriod77.addYears(2022);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadablePeriod) mutablePeriod77);
        boolean boolean86 = interval62.isBefore((org.joda.time.ReadableInterval) interval85);
        org.joda.time.DateTime dateTime87 = interval62.getStart();
        boolean boolean88 = duration34.equals((java.lang.Object) interval62);
        org.joda.time.Period period89 = interval62.toPeriod();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        boolean boolean4 = calendar1.before((java.lang.Object) dateMidnight2);
        int int6 = calendar1.getMaximum(16);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localTime7.toDateTimeToday(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withEra(1);
        org.joda.time.DateTime dateTime21 = dateTime16.plusMillis(32772);
        org.joda.time.DateTime.Property property22 = dateTime16.hourOfDay();
        int int23 = property22.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        org.joda.time.DateTime dateTime25 = property22.getDateTime();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime25);
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime25.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay27.withYear(53669316);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) yearMonthDay27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455544676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=4,MILLISECOND=676,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7200000 + "'", int6 == 7200000);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(32772);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime1.plusWeeks(301);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        int[] intArray36 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod31, 1L, (long) 4);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType16, chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter13.withChronology(chronology25);
        org.joda.time.Period period39 = new org.joda.time.Period((-31449600001L), chronology25);
        org.joda.time.Period period41 = period39.minusYears(11);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period44 = period41.withField(durationFieldType42, 301);
        int int45 = period44.getSeconds();
        org.joda.time.DateTime dateTime46 = dateTime9.plus((org.joda.time.ReadablePeriod) period44);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (short) -1);
        boolean boolean4 = dateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.add((long) (byte) -1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = localDate7.toDateMidnight();
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        org.joda.time.LocalDate localDate12 = localDate7.withYear(365);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        java.lang.Object obj22 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod40, 1L, (long) 4);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType25, chronology34);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(obj22, chronology34);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtMidnight(dateTimeZone50);
        long long55 = dateTimeZone50.convertLocalToUTC((long) 31, true);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone50);
        mutableDateTime14.setZoneRetainFields(dateTimeZone50);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.DateTime dateTime60 = localDate7.toDateTimeAtCurrentTime(dateTimeZone50);
        mutableDateTime3.setZoneRetainFields(dateTimeZone50);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime3.year();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundHalfCeiling();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 31L + "'", long55 == 31L);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(840L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        boolean boolean17 = mutablePeriod12.isSupported(durationFieldType16);
        int int18 = mutablePeriod8.indexOf(durationFieldType16);
        java.lang.String str19 = durationFieldType16.getName();
        mutablePeriod4.add(durationFieldType16, (int) (short) 10);
        mutablePeriod4.setHours(53715795);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "months" + "'", str19, "months");
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime3.minusHours(10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(31);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(726);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int12 = timeZone10.getOffset(22L);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.lang.String str16 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.lang.String str18 = locale14.getDisplayScript();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone10, locale14);
        java.lang.String str20 = calendar19.getCalendarType();
        calendar19.clear(0);
        // The following exception was thrown during execution in test generation
        try {
            calendar19.set(521, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 521");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455544950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=4,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=4,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = timeOfDay7.getField((-57));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -57");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        long long12 = dateTimeField10.roundHalfFloor(1645455397520L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455544996,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=4,MILLISECOND=996,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645455420000L + "'", long12 == 1645455420000L);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay20 = property12.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minusMonths(53700000);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withDayOfMonth(8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime35.plusSeconds(10);
        org.joda.time.DateTime dateTime40 = dateTime35.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property42 = dateTime40.property(dateTimeFieldType41);
        int int43 = dateMidnight28.get(dateTimeFieldType41);
        int int44 = localDateTime25.indexOf(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay22.withField(dateTimeFieldType41, (-840));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455545020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455545020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455545020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100, chronology13);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyear();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 21, chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField19 = dateTimeField18.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("months");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getOffset(1645455330384L);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(zoneId5);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(0L);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDayOfMonth(8);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        java.lang.String str20 = mutablePeriod14.toString();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.setValue(0, 2022);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        long long30 = duration29.getMillis();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getMillis();
        int int34 = duration29.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration36 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration32, 2);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        mutableDateTime39.add((long) 1);
        org.joda.time.DateTime dateTime42 = mutableDateTime39.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime39, readableDuration43, periodType44);
        org.joda.time.Chronology chronology46 = mutableDateTime39.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(chronology46);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfYear((int) (byte) 1);
        int int52 = dateTime51.getDayOfMonth();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime51.minus((org.joda.time.ReadableDuration) duration54);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration36.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = localDate58.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDate.Property property61 = localDate58.yearOfEra();
        org.joda.time.Interval interval62 = localDate58.toInterval();
        org.joda.time.DateTime dateTime63 = localDate58.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime65 = dateTime63.plusDays(2022);
        org.joda.time.Period period66 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = duration36.toDuration();
        org.joda.time.Duration duration68 = duration1.minus((org.joda.time.ReadableDuration) duration36);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0.034S" + "'", str20, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(chronology10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusMonths((int) (short) -1);
        int int14 = yearMonthDay11.size();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay11.year();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale16);
        int int19 = property15.getMaximumShortTextLength(locale16);
        org.joda.time.YearMonthDay yearMonthDay20 = property15.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = yearMonthDay20.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.Interval interval24 = yearMonthDay20.toInterval(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DateTime dateTime29 = mutableDateTime26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime26, readableDuration30, periodType31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.DurationField durationField42 = chronology40.weeks();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology40);
        mutableDateTime26.setChronology(chronology40);
        org.joda.time.DurationField durationField45 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.secondOfMinute();
        org.joda.time.DurationField durationField47 = chronology40.years();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.dayOfMonth();
        org.joda.time.DurationField durationField49 = chronology40.halfdays();
        boolean boolean50 = interval24.equals((java.lang.Object) chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(53817988, 0, 206, chronology40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455545137,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=137,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455545137,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=137,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(99, 46, 435, 427);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusHours(5);
        int int8 = localDateTime4.getMonthOfYear();
        int int9 = localDateTime4.getEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455545247,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=247,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        mutableDateTime1.addYears(53633250);
        java.lang.String str13 = mutableDateTime1.toString("416");
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "416" + "'", str13, "416");
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 0L);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(0);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = property3.setCopy("Japanese", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Japanese\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.Period period10 = period7.minusYears(12);
        org.joda.time.Weeks weeks11 = period7.toStandardWeeks();
        org.joda.time.Period period12 = period7.toPeriod();
        int int13 = period7.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((java.lang.Object) period7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale11);
        java.lang.String str14 = dateTimeField9.getAsShortText(21, locale11);
        java.lang.String str15 = dateTimeField9.getName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455545325,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=325,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455545325,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=325,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "21" + "'", str14, "21");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfHalfday" + "'", str15, "clockhourOfHalfday");
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime4 = dateTime3.toLocalTime();
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(100);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime12 = localTime10.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutablePeriod21.set(durationFieldType22, (int) 'a');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 100, chronology33);
        boolean boolean35 = durationFieldType22.isSupported(chronology33);
        mutablePeriod14.setPeriod((long) '4', chronology33);
        org.joda.time.LocalTime localTime37 = localTime12.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(35417L);
        int int40 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now();
        int int45 = localTime43.compareTo((org.joda.time.ReadablePartial) localTime44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        int int48 = mutableDateTime47.getYearOfEra();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.months();
        mutablePeriod52.set(durationFieldType53, (int) 'a');
        mutablePeriod52.addHours((int) (byte) -1);
        mutablePeriod52.addYears(2022);
        mutableDateTime47.add((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.LocalTime localTime61 = localTime44.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.LocalTime localTime63 = localTime61.plusSeconds(100);
        boolean boolean64 = localTime39.isEqual((org.joda.time.ReadablePartial) localTime61);
        int int65 = property7.compareTo((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.LocalTime localTime67 = localTime61.minusMinutes(53726113);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType69 = periodType68.withMillisRemoved();
        org.joda.time.PeriodType periodType70 = periodType68.withSecondsRemoved();
        boolean boolean71 = localTime67.equals((java.lang.Object) periodType68);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 10, chronology82);
        org.joda.time.Period period85 = new org.joda.time.Period(22L, (long) 86399, chronology82);
        org.joda.time.DateTimeField dateTimeField86 = chronology82.weekOfWeekyear();
        org.joda.time.Period period87 = new org.joda.time.Period((long) 20, 29583L, periodType68, chronology82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period89 = period87.minusHours(53851516);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.minusMillis(21);
        org.joda.time.DateTime dateTime4 = timeOfDay3.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 100, chronology13);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 208, (long) (byte) 10, periodType4, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfHalfday();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology13);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 5, 311L, chronology13);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("GMT", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        mutableDateTime5.addMinutes(625);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withCenturyOfEra(365);
        int int14 = localDateTime13.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(21);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear(1969);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.year();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime18.getFields();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        java.lang.String str24 = periodType23.toString();
        org.joda.time.PeriodType periodType25 = periodType23.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        mutablePeriod33.set(durationFieldType34, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        boolean boolean38 = mutablePeriod33.isSupported(durationFieldType37);
        int int39 = mutablePeriod29.indexOf(durationFieldType37);
        java.lang.String str40 = durationFieldType37.getName();
        int int41 = mutablePeriod27.get(durationFieldType37);
        boolean boolean42 = periodType25.isSupported(durationFieldType37);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime18.withFieldAdded(durationFieldType37, 321);
        mutableDateTime5.add(durationFieldType37, 9);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime5.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime5.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime48.setMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455545492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 492 + "'", int14 == 492);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[Years]" + "'", str24, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "months" + "'", str40, "months");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale11);
        java.lang.String str14 = dateTimeField9.getAsShortText(21, locale11);
        java.lang.String str15 = locale11.getDisplayLanguage();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setScript("eras");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.setLanguageTag("eras");
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DateTime dateTime29 = mutableDateTime26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime26, readableDuration30, periodType31);
        java.lang.String str33 = mutableDateTime26.toString();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.millisOfSecond();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now();
        int int36 = localTime35.size();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        boolean boolean38 = localTime35.equals((java.lang.Object) locale37);
        int int39 = property34.getMaximumTextLength(locale37);
        boolean boolean40 = calendar23.after((java.lang.Object) locale37);
        java.util.Locale.Builder builder41 = builder21.setLocale(locale37);
        java.lang.String str42 = locale11.getDisplayScript(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale11);
        // The following exception was thrown during execution in test generation
        try {
            calendar43.clear(465);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 465");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455545511,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=511,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455545511,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=511,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "21" + "'", str14, "21");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u6587" + "'", str15, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455545511,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=511,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str33, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645455545511,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=511,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        java.lang.String str36 = duration34.toString();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withEra(1);
        org.joda.time.DateTime dateTime43 = dateTime38.plusMillis(32772);
        org.joda.time.DateTime.Property property44 = dateTime38.hourOfDay();
        int int45 = property44.getLeapAmount();
        org.joda.time.DateTime dateTime46 = property44.roundFloorCopy();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType48 = periodType47.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        int int50 = periodType48.indexOf(durationFieldType49);
        org.joda.time.Period period51 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46, periodType48);
        int int52 = period51.getSeconds();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.plusMinutes(23);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay0.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = property4.setCopy("ko");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ko\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(971, 798, 472, 0, 119, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 119 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay6.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean17 = timeOfDay13.isSupported(dateTimeFieldType16);
        int int18 = dateTime4.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime20 = dateTime4.minus(1645455232633L);
        org.joda.time.DateTime dateTime22 = dateTime4.plusMonths(53742154);
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime4);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        int int10 = calendar1.getWeekYear();
        java.util.Date date11 = calendar1.getTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1641116552712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=712,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Jan 02 09:42:32 GMT+00:00 2022");
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear(312);
        org.joda.time.Chronology chronology31 = dateTimeFormatter27.getChronolgy();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.minusMonths((int) (short) -1);
        int int43 = yearMonthDay40.size();
        org.joda.time.YearMonthDay.Property property44 = yearMonthDay40.year();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale45);
        int int48 = property44.getMaximumShortTextLength(locale45);
        org.joda.time.YearMonthDay yearMonthDay49 = property44.withMaximumValue();
        int int50 = property44.get();
        int int51 = property44.getMaximumValueOverall();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        int int53 = property44.getMaximumShortTextLength(locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter27.withLocale(locale52);
        int int55 = dateTimeFormatter54.getDefaultYear();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645455545749,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=749,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645455545749,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=749,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2000 + "'", int55 == 2000);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay8.year();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        int int16 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.YearMonthDay yearMonthDay18 = property12.setCopy(6);
        java.util.Locale locale22 = new java.util.Locale("2022-02-21T00:00:00.000Z", "2022-02-21T00:00:00.000Z", "PT0.034S");
        java.lang.String str23 = property12.getAsShortText(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = property12.getYearMonthDay();
        java.lang.String str25 = property12.getAsShortText();
        int int26 = property12.getMinimumValue();
        java.lang.String str27 = property12.getAsShortText();
        int int28 = property12.get();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455545775,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=775,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455545775,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=775,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-21t00:00:00.000z_2022-02-21T00:00:00.000Z_PT0.034S");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-292275054) + "'", int26 == (-292275054));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getMillis();
        int int32 = duration27.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight3.yearOfEra();
        org.joda.time.DateMidnight dateMidnight38 = property36.addToCopy((long) 96);
        org.joda.time.DateMidnight dateMidnight39 = property36.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(254L, 53734070);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(792);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 792 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1L, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusMonths((int) (short) -1);
        int int15 = yearMonthDay12.size();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay12.year();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale17);
        int int20 = property16.getMaximumShortTextLength(locale17);
        org.joda.time.YearMonthDay yearMonthDay22 = property16.setCopy(6);
        org.joda.time.YearMonthDay yearMonthDay24 = property16.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay25 = property16.withMinimumValue();
        org.joda.time.Period period27 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.withPeriodAdded((org.joda.time.ReadablePeriod) period27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.months();
        boolean boolean47 = mutablePeriod42.isSupported(durationFieldType46);
        int int48 = mutablePeriod38.indexOf(durationFieldType46);
        java.lang.String str49 = durationFieldType46.getName();
        mutablePeriod34.add(durationFieldType46, (int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay25.withFieldAdded(durationFieldType46, (int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.minusMonths((int) (byte) -1);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime60 = dateMidnight59.toMutableDateTime();
        mutableDateTime60.add((long) 1);
        org.joda.time.DateTime dateTime63 = mutableDateTime60.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        boolean boolean65 = mutableDateTime60.isSupported(dateTimeFieldType64);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime60.hourOfDay();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekyearOfCentury();
        long long77 = dateTimeField75.roundHalfFloor((long) 1);
        mutableDateTime60.setRounding(dateTimeField75, (int) (byte) 0);
        int int80 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) mutableDateTime60);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.LocalDate localDate83 = org.joda.time.LocalDate.now(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now(dateTimeZone82);
        java.lang.String str86 = dateTimeZone82.getShortName((long) 53700000);
        java.lang.String str87 = dateTimeZone82.getID();
        mutableDateTime60.setZone(dateTimeZone82);
        org.joda.time.DateTime dateTime89 = yearMonthDay53.toDateTimeAtMidnight(dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight90 = org.joda.time.DateMidnight.now(dateTimeZone82);
        org.joda.time.DateTime dateTime91 = localDate2.toDateTimeAtCurrentTime(dateTimeZone82);
        int[] intArray92 = localDate2.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455545830,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=830,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455545830,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=830,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "months" + "'", str49, "months");
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "UTC" + "'", str87, "UTC");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1970, 1, 1]");
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        java.lang.String[] strArray28 = new java.lang.String[] { "\u65e5\u6587", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "UTC", "2022-02-21T00:00:00.001Z", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "PeriodType[Years]", "months", "\u65e5\u6587", "2022-02-21T00:00:00.001Z", "+00:00", "52", "months", "AD", "1", "AD", "1", "2022-02-21T00:00:00.001Z", "eras", "PT0.034S", "hi!", "1969-01-01T23:59:59.999Z/1969-01-02T00:00:00.033Z", "2022-02-21T00:00:00.001Z" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        boolean boolean31 = strSet29.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList47);
        java.lang.String str50 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList47);
        boolean boolean51 = strSet29.retainAll((java.util.Collection<java.lang.String>) strList47);
        boolean boolean52 = strSet4.retainAll((java.util.Collection<java.lang.String>) strSet29);
        boolean boolean54 = strSet29.add("\u65e5\u6587");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.parse("Years", strMap56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray63 = new java.lang.String[] { "PT0.034S", "52" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList64);
        java.lang.String str67 = java.util.Locale.lookupTag(languageRangeList57, (java.util.Collection<java.lang.String>) strList64);
        boolean boolean68 = strSet29.addAll((java.util.Collection<java.lang.String>) strList64);
        java.util.stream.Stream<java.lang.String> strStream69 = strList64.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455545900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strStream69);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.Period period11 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period13 = period11.minusYears(8);
        int int14 = period13.getDays();
        int int15 = period13.size();
        org.joda.time.Period period17 = period13.minusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadablePeriod) period13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(2022);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMaximumValue();
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusHours(53636377);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) (short) 0);
        int int13 = localDateTime12.getYearOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455545955,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e2d\u6587\u4e2d\u56fd)\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=955,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        int int2 = timeOfDay1.size();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        boolean boolean11 = mutablePeriod6.isSupported(durationFieldType10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeOfDay1.getValue(726);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 726");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        boolean boolean6 = dateMidnight3.isBefore((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property8 = dateMidnight3.property(dateTimeFieldType7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.setMonthOfYear(1);
        mutableDateTime10.addWeekyears(4);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime10.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = localDate2.toDateTimeAtStartOfDay(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = localDate2.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str11, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.Interval interval11 = property3.toInterval();
        org.joda.time.LocalDate localDate12 = property3.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology30 = dateTimeFormatter2.getChronolgy();
        boolean boolean31 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(50);
        org.joda.time.format.DateTimeParser dateTimeParser34 = dateTimeFormatter33.getParser();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.DateTime dateTime39 = mutableDateTime36.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime36, readableDuration40, periodType41);
        org.joda.time.Weeks weeks43 = period42.toStandardWeeks();
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        mutableDateTime45.add((long) 1);
        org.joda.time.DateTime dateTime48 = mutableDateTime45.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        boolean boolean50 = mutableDateTime45.isSupported(dateTimeFieldType49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime45.hourOfDay();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        int int57 = mutablePeriod56.getMonths();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableInstant52, (org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekyearOfCentury();
        long long62 = dateTimeField60.roundHalfFloor((long) 1);
        mutableDateTime45.setRounding(dateTimeField60, (int) (byte) 0);
        mutableDateTime45.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime();
        boolean boolean68 = mutableDateTime45.isBefore((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime45.secondOfMinute();
        org.joda.time.Chronology chronology70 = mutableDateTime45.getChronology();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period42, (org.joda.time.ReadableInstant) mutableDateTime45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = dateTimeFormatter33.print((org.joda.time.ReadableInstant) mutableDateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(dateTimeParser34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis((int) (short) -1);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone10);
        mutableDateTime11.add((long) 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        mutableDateTime11.set(dateTimeFieldType14, 53);
        int int18 = dateTime5.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime19 = dateTime5.toDateTimeISO();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("2022-02-21T14:54:51.674", "Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-21T14:54:51.674 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.Period period6 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period8 = period6.minusYears(8);
        org.joda.time.Period period10 = period6.withSeconds(11);
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight4.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfMonth(8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        java.lang.String str31 = mutablePeriod25.toString();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod25.setValue(0, 2022);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        long long41 = duration40.getMillis();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        long long44 = duration43.getMillis();
        int int45 = duration40.compareTo((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration47 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, 2);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight16.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight49.toMutableDateTime();
        mutableDateTime50.add((long) 1);
        org.joda.time.DateTime dateTime53 = mutableDateTime50.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime50, readableDuration54, periodType55);
        org.joda.time.Chronology chronology57 = mutableDateTime50.getChronology();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfYear((int) (byte) 1);
        int int63 = dateTime62.getDayOfMonth();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime62.minus((org.joda.time.ReadableDuration) duration65);
        mutableDateTime58.add((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration68 = duration47.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Minutes minutes69 = duration68.toStandardMinutes();
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (byte) 0);
        long long72 = duration71.getMillis();
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) (byte) 0);
        long long75 = duration74.getMillis();
        int int76 = duration71.compareTo((org.joda.time.ReadableDuration) duration74);
        int int77 = duration68.compareTo((org.joda.time.ReadableDuration) duration74);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType83);
        int int85 = mutablePeriod84.getMonths();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableInstant80, (org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.Chronology chronology87 = interval86.getChronology();
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay((java.lang.Object) (-1725048060000L), chronology87);
        org.joda.time.Period period89 = duration74.toPeriod(periodType78, chronology87);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight4.withDurationAdded((org.joda.time.ReadableDuration) duration74, 146869);
        org.joda.time.Duration duration92 = duration74.toDuration();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(duration92);
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((-32), 136, 301, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 136 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDayOfMonth(8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        long long39 = duration38.getMillis();
        int int40 = duration35.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight11.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        mutableDateTime45.add((long) 1);
        org.joda.time.DateTime dateTime48 = mutableDateTime45.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime45, readableDuration49, periodType50);
        org.joda.time.Chronology chronology52 = mutableDateTime45.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(chronology52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfYear((int) (byte) 1);
        int int58 = dateTime57.getDayOfMonth();
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime61 = dateTime57.minus((org.joda.time.ReadableDuration) duration60);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = duration42.plus((org.joda.time.ReadableDuration) duration60);
        java.lang.String str64 = duration42.toString();
        org.joda.time.Duration duration66 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration42, 16);
        org.joda.time.Duration duration67 = duration66.toDuration();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) (byte) 0);
        int int70 = duration67.compareTo((org.joda.time.ReadableDuration) duration69);
        long long71 = duration67.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String[] strArray4 = java.util.TimeZone.getAvailableIDs(53743428);
        java.lang.CharSequence[] charSequenceArray5 = strSet2.toArray((java.lang.CharSequence[]) strArray4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(charSequenceArray5);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(obj1, chronology13);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtMidnight(dateTimeZone29);
        int int33 = dateTimeZone29.getStandardOffset((long) 23);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(1645455245049L, dateTimeZone29);
        long long38 = dateTimeZone29.convertLocalToUTC((long) 17, false, 292278993L);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.weekOfWeekyear();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours(1645455239530L);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(193414006800000L);
        boolean boolean46 = duration42.isEqual((org.joda.time.ReadableDuration) duration45);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 17L + "'", long38 == 17L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("eras");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("DateTimeField[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: DateTimeField[secondOfMinute] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.Chronology chronology2 = timeOfDay0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        int int5 = mutableDateTime4.getYearOfEra();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutablePeriod9.set(durationFieldType10, (int) 'a');
        mutablePeriod9.addHours((int) (byte) -1);
        mutablePeriod9.addYears(2022);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        mutableDateTime21.add((long) 1);
        org.joda.time.DateTime dateTime24 = mutableDateTime21.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime21, readableDuration25, periodType26);
        java.lang.String str28 = mutableDateTime21.toString();
        org.joda.time.Chronology chronology29 = mutableDateTime21.getChronology();
        mutablePeriod9.setPeriod(32L, (long) (short) -1, chronology29);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.DateTime dateTime32 = timeOfDay31.toDateTimeToday();
        int int33 = timeOfDay31.size();
        org.joda.time.LocalTime localTime34 = timeOfDay31.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-21T00:00:00.001Z" + "'", str28, "2022-02-21T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Interval interval8 = interval6.toInterval();
        boolean boolean10 = interval8.equals((java.lang.Object) 9);
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.Chronology chronology20 = mutableDateTime13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime25.minus((org.joda.time.ReadableDuration) duration28);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean33 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 10, chronology42);
        org.joda.time.Period period45 = duration28.toPeriod(chronology42);
        org.joda.time.Period period46 = period45.negated();
        org.joda.time.Period period48 = period45.withYears(53715795);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfCentury();
        int int51 = dateMidnight49.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime57 = timeOfDay52.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean58 = dateMidnight49.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateMidnight.Property property59 = dateMidnight49.yearOfCentury();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.months();
        mutablePeriod63.set(durationFieldType64, (int) 'a');
        mutablePeriod63.addHours((int) (byte) -1);
        mutablePeriod63.addYears(2022);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadablePeriod) mutablePeriod63);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusWeeks(0);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime81 = dateTime79.withDayOfYear((int) (byte) 1);
        int int82 = dateTime81.getDayOfMonth();
        org.joda.time.Duration duration84 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime85 = dateTime81.minus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight77.minus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight77.minusMonths(53636377);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.minusYears(86399);
        boolean boolean91 = interval71.contains((org.joda.time.ReadableInstant) dateMidnight88);
        org.joda.time.Duration duration92 = period48.toDurationTo((org.joda.time.ReadableInstant) dateMidnight88);
        org.joda.time.Interval interval93 = interval8.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration92);
        long long94 = interval8.getEndMillis();
        org.joda.time.DateTime dateTime95 = interval8.getEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(interval93);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645455546540L + "'", long94 == 1645455546540L);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        int int5 = mutableDateTime3.getRoundingMode();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = localDate15.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        java.lang.String str21 = periodType20.toString();
        org.joda.time.PeriodType periodType22 = periodType20.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        mutablePeriod30.set(durationFieldType31, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        boolean boolean35 = mutablePeriod30.isSupported(durationFieldType34);
        int int36 = mutablePeriod26.indexOf(durationFieldType34);
        java.lang.String str37 = durationFieldType34.getName();
        int int38 = mutablePeriod24.get(durationFieldType34);
        boolean boolean39 = periodType22.isSupported(durationFieldType34);
        org.joda.time.PeriodType periodType40 = periodType22.withSecondsRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withMinutesRemoved();
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight18, periodType40);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration6, periodType40);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod43.setHours((-32));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Years]" + "'", str21, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "months" + "'", str37, "months");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology15);
        mutableDateTime1.setChronology(chronology15);
        org.joda.time.DurationField durationField20 = chronology15.seconds();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53633250);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime();
        org.joda.time.DateTime dateTime9 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalDate.Property property10 = localDate1.era();
        org.joda.time.LocalDate localDate11 = property10.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
    }
}

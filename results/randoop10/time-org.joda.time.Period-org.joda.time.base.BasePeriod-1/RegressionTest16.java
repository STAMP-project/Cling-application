import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.joda.time.Period period2 = new org.joda.time.Period((-2000L), 0L);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType16 = periodType15.withMinutesRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) -1, (long) (short) -1, periodType16, chronology18);
        org.joda.time.PeriodType periodType20 = periodType16.withMinutesRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((long) (-95), (long) (byte) 0, periodType20);
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 1, periodType20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (-87), (long) 13, periodType20, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = new org.joda.time.Period(14400, (-7), (int) (short) 100, 268435465, (-200), (-14400), (-9500), (-38), periodType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.joda.time.Period period8 = new org.joda.time.Period((-53), (-105), 59, (-9500), 11, 999, 10, 126064);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(35);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeksIn(readableInterval3);
        boolean boolean5 = weeks2.isLessThan(weeks4);
        org.joda.time.Weeks weeks7 = weeks4.multipliedBy(10);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.ZERO;
        java.lang.String str9 = weeks8.toString();
        int int10 = weeks8.size();
        org.joda.time.PeriodType periodType11 = weeks8.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod12 = weeks8.toMutablePeriod();
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks15 = weeks14.negated();
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.weeksIn(readableInterval17);
        boolean boolean19 = weeks16.isLessThan(weeks18);
        boolean boolean20 = weeks15.isGreaterThan(weeks18);
        org.joda.time.Weeks weeks21 = null;
        org.joda.time.Weeks weeks22 = weeks18.minus(weeks21);
        org.joda.time.DurationFieldType durationFieldType23 = weeks22.getFieldType();
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks27 = weeks26.negated();
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.weeksIn(readableInterval29);
        boolean boolean31 = weeks28.isLessThan(weeks30);
        boolean boolean32 = weeks27.isGreaterThan(weeks30);
        boolean boolean33 = weeks24.isLessThan(weeks27);
        org.joda.time.Weeks weeks34 = weeks22.plus(weeks27);
        org.joda.time.Weeks weeks36 = weeks27.minus(2);
        org.joda.time.Weeks weeks38 = weeks36.dividedBy((-10));
        org.joda.time.Weeks weeks39 = weeks38.negated();
        boolean boolean40 = weeks8.isLessThan(weeks39);
        org.joda.time.Weeks weeks41 = weeks4.minus(weeks39);
        int int42 = weeks39.getWeeks();
        org.joda.time.Weeks weeks43 = weeks1.minus(weeks39);
        org.joda.time.Weeks weeks44 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks39);
        org.joda.time.Weeks weeks46 = weeks39.minus((int) '4');
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P0W" + "'", str9, "P0W");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks46);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P0D");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationTo(readableInstant2);
        org.joda.time.Duration duration5 = duration3.withMillis(0L);
        org.joda.time.Hours hours6 = duration3.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = hours6.getFieldType(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period4.minusSeconds(0);
        org.joda.time.Period period8 = period6.minusWeeks(10);
        org.joda.time.Period period9 = period6.negated();
        org.joda.time.Period period11 = period6.minusMillis((int) (short) 0);
        org.joda.time.Weeks weeks12 = period11.toStandardWeeks();
        org.joda.time.Weeks weeks14 = weeks12.minus(36);
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeks(1);
        boolean boolean18 = weeks15.isGreaterThan(weeks17);
        java.lang.Object obj19 = null;
        boolean boolean20 = weeks17.equals(obj19);
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.weeks((int) (short) 1);
        org.joda.time.Weeks weeks24 = weeks22.dividedBy(100);
        org.joda.time.Weeks weeks25 = weeks17.minus(weeks24);
        org.joda.time.Weeks weeks27 = weeks24.plus(35);
        org.joda.time.Weeks weeks29 = weeks24.multipliedBy(10);
        java.lang.String str30 = weeks24.toString();
        boolean boolean31 = weeks12.isGreaterThan(weeks24);
        org.joda.time.Weeks weeks33 = weeks24.minus((-97));
        // The following exception was thrown during execution in test generation
        try {
            int int35 = weeks33.getValue((-95));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -95");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P0W" + "'", str30, "P0W");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(weeks33);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.Days days1 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType2 = days1.getPeriodType();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType2.withMonthsRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period((long) (-87), periodType2);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy(2);
        org.joda.time.PeriodType periodType11 = minutes10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        boolean boolean14 = periodType12.equals((java.lang.Object) (-38));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) 0);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant8, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period16.minusMonths(0);
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Duration duration20 = minutes19.toStandardDuration();
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant13, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) duration23, periodType25, chronology26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, readableInstant12, periodType25);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes(100L);
        boolean boolean31 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration10.isLongerThan(readableDuration32);
        org.joda.time.Duration duration35 = duration10.withMillis(151200L);
        java.lang.Object obj36 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period41 = period39.minusMonths(0);
        org.joda.time.Period period43 = period39.minusSeconds((int) (byte) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray44 = period39.getFieldTypes();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.forFields(durationFieldTypeArray44);
        org.joda.time.PeriodType periodType46 = periodType45.withMillisRemoved();
        org.joda.time.PeriodType periodType47 = periodType46.withDaysRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period(obj36, periodType47);
        org.joda.time.Period period49 = duration35.toPeriod(periodType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period50 = new org.joda.time.Period(20, 35, 2, (-1680), (-5), 35, (-1680), (-52), periodType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(durationFieldTypeArray44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.PeriodType periodType8 = periodFormatter7.getParseType();
        org.joda.time.format.PeriodParser periodParser9 = periodFormatter7.getParser();
        org.joda.time.Chronology chronology10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) periodFormatter7, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.format.PeriodFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNull(periodParser9);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType2);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        int int9 = period8.getYears();
        org.joda.time.Period period10 = period8.toPeriod();
        org.joda.time.Seconds seconds11 = period8.toStandardSeconds();
        org.joda.time.Period period12 = period3.withFields((org.joda.time.ReadablePeriod) seconds11);
        int int14 = period12.getValue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = period12.minusHours((-35));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(660000L, 0L);
        org.joda.time.Days days3 = duration2.toStandardDays();
        org.joda.time.Days days4 = days3.negated();
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = duration6.plus((long) (byte) 0);
        org.joda.time.Duration duration11 = duration6.withMillis((long) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period16.minusMonths(0);
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Duration duration20 = minutes19.toStandardDuration();
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant13, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration25 = duration11.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = duration25.toDuration();
        java.lang.String str27 = duration26.toString();
        long long28 = duration26.getMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.001S" + "'", str27, "PT0.001S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 0);
        org.joda.time.Period period3 = period1.plusMonths((int) '4');
        org.joda.time.Period period4 = period1.toPeriod();
        int int5 = period1.getMonths();
        org.joda.time.Period period7 = period1.plusWeeks((-37));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.toPeriod();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period0.toDurationTo(readableInstant2);
        long long4 = duration3.getStandardDays();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration2 = minutes1.toStandardDuration();
        long long3 = duration2.getStandardSeconds();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
        org.joda.time.Duration duration10 = minutes9.toStandardDuration();
        org.joda.time.Minutes minutes12 = minutes9.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration13 = minutes9.toStandardDuration();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period16.minusMonths(0);
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Duration duration20 = minutes19.toStandardDuration();
        org.joda.time.Period period21 = duration20.toPeriod();
        boolean boolean22 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.Period period25 = duration13.toPeriodTo(readableInstant23, periodType24);
        org.joda.time.Duration duration26 = duration2.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration27 = duration26.toDuration();
        long long28 = duration26.getStandardHours();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration26, periodType29);
        int int31 = period30.getHours();
        org.joda.time.Period period33 = period30.plusMonths(0);
        int int34 = period30.getHours();
        org.joda.time.Period period35 = period30.normalizedStandard();
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Weeks weeks38 = org.joda.time.Weeks.weeksIn(readableInterval37);
        boolean boolean39 = weeks36.isLessThan(weeks38);
        org.joda.time.Weeks weeks41 = weeks38.multipliedBy(10);
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.ZERO;
        java.lang.String str43 = weeks42.toString();
        int int44 = weeks42.size();
        org.joda.time.PeriodType periodType45 = weeks42.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod46 = weeks42.toMutablePeriod();
        org.joda.time.Weeks weeks48 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks49 = weeks48.negated();
        org.joda.time.Weeks weeks50 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.weeksIn(readableInterval51);
        boolean boolean53 = weeks50.isLessThan(weeks52);
        boolean boolean54 = weeks49.isGreaterThan(weeks52);
        org.joda.time.Weeks weeks55 = null;
        org.joda.time.Weeks weeks56 = weeks52.minus(weeks55);
        org.joda.time.DurationFieldType durationFieldType57 = weeks56.getFieldType();
        org.joda.time.Weeks weeks58 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks60 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks61 = weeks60.negated();
        org.joda.time.Weeks weeks62 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.Weeks weeks64 = org.joda.time.Weeks.weeksIn(readableInterval63);
        boolean boolean65 = weeks62.isLessThan(weeks64);
        boolean boolean66 = weeks61.isGreaterThan(weeks64);
        boolean boolean67 = weeks58.isLessThan(weeks61);
        org.joda.time.Weeks weeks68 = weeks56.plus(weeks61);
        org.joda.time.Weeks weeks70 = weeks61.minus(2);
        org.joda.time.Weeks weeks72 = weeks70.dividedBy((-10));
        org.joda.time.Weeks weeks73 = weeks72.negated();
        boolean boolean74 = weeks42.isLessThan(weeks73);
        org.joda.time.Weeks weeks75 = weeks38.minus(weeks73);
        int int76 = weeks73.getWeeks();
        org.joda.time.Weeks weeks78 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks79 = weeks78.negated();
        org.joda.time.Weeks weeks80 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval81 = null;
        org.joda.time.Weeks weeks82 = org.joda.time.Weeks.weeksIn(readableInterval81);
        boolean boolean83 = weeks80.isLessThan(weeks82);
        boolean boolean84 = weeks79.isGreaterThan(weeks82);
        org.joda.time.Weeks weeks85 = weeks73.minus(weeks82);
        int int86 = weeks73.getWeeks();
        org.joda.time.PeriodType periodType87 = weeks73.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period88 = period35.normalizedStandard(periodType87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-128849018880L) + "'", long3 == (-128849018880L));
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-35791394L) + "'", long28 == (-35791394L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0W" + "'", str43, "P0W");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertNotNull(weeks70);
        org.junit.Assert.assertNotNull(weeks72);
        org.junit.Assert.assertNotNull(weeks73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(weeks78);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(weeks85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.joda.time.Period period4 = period1.minusMonths(100);
        org.joda.time.Period period6 = period4.minusYears((int) (short) 10);
        org.joda.time.Period period8 = period6.withMillis((-36));
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period11.minusMonths(0);
        org.joda.time.Period period15 = period11.minusSeconds((int) (byte) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = period11.getFieldTypes();
        org.joda.time.Period period17 = period8.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period19 = period17.minusYears((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration20 = period19.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.withMillis((int) (short) 0);
        int int7 = period6.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod8 = period6.toMutablePeriod();
        org.joda.time.Duration duration9 = period6.toStandardDuration();
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds13 = seconds11.plus(seconds12);
        org.joda.time.Seconds seconds15 = seconds11.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds16 = seconds10.minus(seconds15);
        int int17 = seconds16.size();
        org.joda.time.PeriodType periodType18 = seconds16.getPeriodType();
        org.joda.time.Seconds seconds20 = seconds16.minus(104);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(seconds20);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isParser();
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds8 = seconds6.plus(seconds7);
        org.joda.time.PeriodType periodType9 = seconds6.getPeriodType();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.DurationFieldType durationFieldType15 = period12.getFieldType((int) (short) 1);
        int int16 = periodType9.indexOf(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) ' ', periodType9);
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter3.withParseType(periodType9);
        org.joda.time.PeriodType periodType19 = periodType9.withDaysRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period(10L, periodType9);
        org.joda.time.Period period21 = period20.normalizedStandard();
        org.joda.time.Period period23 = period21.withWeeks(1);
        org.joda.time.Period period24 = period21.normalizedStandard();
        org.joda.time.Period period26 = period21.withMinutes((-31));
        // The following exception was thrown during execution in test generation
        try {
            int int28 = period26.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 0);
        org.joda.time.Period period3 = period1.plusMonths((int) '4');
        org.joda.time.Period period5 = period3.withDays(3);
        org.joda.time.Period period6 = period3.toPeriod();
        org.joda.time.Period period8 = period6.plusMonths((-1491308));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = period6.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.Days days10 = days1.minus(35);
        org.joda.time.Days days12 = days1.plus(14400);
        org.joda.time.Days days14 = days12.dividedBy((-36));
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        org.joda.time.Days days17 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType18 = days17.getPeriodType();
        org.joda.time.Days days20 = days17.minus(0);
        org.joda.time.Days days21 = days20.negated();
        boolean boolean22 = days15.isGreaterThan(days20);
        org.joda.time.Days days23 = days12.minus(days20);
        org.joda.time.Days days24 = days20.negated();
        org.joda.time.Days days26 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days28 = days26.multipliedBy((int) (short) 100);
        org.joda.time.Days days29 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType30 = days29.getPeriodType();
        org.joda.time.Days days32 = days29.minus(0);
        org.joda.time.Days days33 = days26.minus(days32);
        org.joda.time.Days days34 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days33);
        org.joda.time.Days days36 = days33.dividedBy(3);
        org.joda.time.PeriodType periodType37 = days33.getPeriodType();
        org.joda.time.Days days38 = days20.minus(days33);
        java.lang.String str39 = days20.toString();
        org.joda.time.Days days41 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days43 = days41.multipliedBy((int) (short) 100);
        org.joda.time.Days days44 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType45 = days44.getPeriodType();
        org.joda.time.Days days47 = days44.minus(0);
        org.joda.time.Days days48 = days41.minus(days47);
        java.lang.String str49 = days48.toString();
        org.joda.time.Days days50 = days48.negated();
        org.joda.time.Days days51 = org.joda.time.Days.FIVE;
        java.lang.String str52 = days51.toString();
        org.joda.time.Days days54 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days55 = days51.minus(days54);
        org.joda.time.DurationFieldType durationFieldType56 = days51.getFieldType();
        boolean boolean57 = days50.isLessThan(days51);
        org.joda.time.Days days59 = days50.dividedBy(52);
        org.joda.time.Days days61 = days50.plus(268435465);
        boolean boolean62 = days20.isLessThan(days61);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "P5D" + "'", str39, "P5D");
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "P0D" + "'", str49, "P0D");
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "P5D" + "'", str52, "P5D");
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(244983);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period1);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks((int) (byte) -1);
        org.joda.time.PeriodType periodType3 = weeks2.getPeriodType();
        org.joda.time.PeriodType periodType4 = periodType3.withMonthsRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period(111640L, periodType3);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes10 = minutes8.multipliedBy(2);
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes10.plus((-1680));
        java.lang.String str14 = minutes10.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0M" + "'", str14, "PT0M");
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.joda.time.Period period1 = org.joda.time.Period.millis((-14400));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.plus(11);
        org.joda.time.Weeks weeks5 = weeks1.plus((int) (short) 100);
        java.lang.String str6 = weeks5.toString();
        org.joda.time.Weeks weeks8 = weeks5.multipliedBy((-95));
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks11 = weeks9.dividedBy(1);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MIN_VALUE;
        boolean boolean13 = weeks11.isGreaterThan(weeks12);
        org.joda.time.Duration duration14 = weeks11.toStandardDuration();
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.ZERO;
        java.lang.String str16 = weeks15.toString();
        int int17 = weeks15.size();
        org.joda.time.PeriodType periodType18 = weeks15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod19 = weeks15.toMutablePeriod();
        org.joda.time.Weeks weeks20 = weeks11.minus(weeks15);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks24 = weeks23.negated();
        java.lang.String str25 = weeks23.toString();
        boolean boolean26 = weeks21.isLessThan(weeks23);
        boolean boolean27 = weeks15.isLessThan(weeks23);
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks30 = weeks29.negated();
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        boolean boolean34 = weeks31.isLessThan(weeks33);
        boolean boolean35 = weeks30.isGreaterThan(weeks33);
        org.joda.time.Weeks weeks36 = null;
        org.joda.time.Weeks weeks37 = weeks33.minus(weeks36);
        org.joda.time.DurationFieldType durationFieldType38 = weeks33.getFieldType();
        org.joda.time.Weeks weeks40 = weeks33.plus(52);
        org.joda.time.Weeks weeks41 = weeks33.negated();
        org.joda.time.Weeks weeks42 = weeks23.minus(weeks33);
        org.joda.time.Weeks weeks43 = weeks5.plus(weeks42);
        org.joda.time.Weeks weeks44 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks46 = weeks44.dividedBy(1);
        org.joda.time.Weeks weeks48 = weeks44.dividedBy(8);
        java.lang.String str49 = weeks48.toString();
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.weeks((-10));
        org.joda.time.Weeks weeks53 = org.joda.time.Weeks.weeks(1);
        boolean boolean54 = weeks51.isGreaterThan(weeks53);
        org.joda.time.Weeks weeks55 = weeks48.minus(weeks51);
        int int56 = weeks55.getWeeks();
        boolean boolean57 = weeks42.isGreaterThan(weeks55);
        org.joda.time.Weeks weeks58 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks60 = weeks58.dividedBy(1);
        org.joda.time.Weeks weeks62 = weeks58.dividedBy(8);
        java.lang.String str63 = weeks62.toString();
        org.joda.time.Weeks weeks65 = weeks62.plus((int) (byte) 1);
        boolean boolean66 = weeks55.isGreaterThan(weeks65);
        org.joda.time.Weeks weeks68 = weeks65.dividedBy((-8));
        org.joda.time.Weeks weeks70 = weeks68.plus(0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P100W" + "'", str6, "P100W");
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P0W" + "'", str16, "P0W");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P10W" + "'", str25, "P10W");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "P268435455W" + "'", str49, "P268435455W");
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 268435465 + "'", int56 == 268435465);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P268435455W" + "'", str63, "P268435455W");
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertNotNull(weeks70);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        org.joda.time.Days days8 = duration1.toStandardDays();
        org.joda.time.Days days9 = org.joda.time.Days.MIN_VALUE;
        boolean boolean10 = days8.isLessThan(days9);
        java.lang.String str11 = days9.toString();
        org.joda.time.Days days13 = days9.plus((int) (byte) 100);
        org.joda.time.Period period14 = days13.toPeriod();
        org.joda.time.Days days16 = days13.minus(35);
        org.joda.time.Days days18 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days20 = days18.multipliedBy((int) (short) 100);
        org.joda.time.Days days21 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType22 = days21.getPeriodType();
        org.joda.time.Days days24 = days21.minus(0);
        org.joda.time.Days days25 = days18.minus(days24);
        java.lang.String str26 = days25.toString();
        org.joda.time.Days days27 = days25.negated();
        org.joda.time.Days days28 = org.joda.time.Days.FIVE;
        java.lang.String str29 = days28.toString();
        org.joda.time.Days days31 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days32 = days28.minus(days31);
        org.joda.time.DurationFieldType durationFieldType33 = days28.getFieldType();
        boolean boolean34 = days27.isLessThan(days28);
        org.joda.time.Days days35 = org.joda.time.Days.FIVE;
        java.lang.String str36 = days35.toString();
        org.joda.time.Days days38 = days35.multipliedBy((int) (byte) -1);
        org.joda.time.Days days39 = days35.negated();
        org.joda.time.Days days40 = org.joda.time.Days.ONE;
        org.joda.time.Days days41 = org.joda.time.Days.ONE;
        int int42 = days40.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days41);
        org.joda.time.Days days44 = days41.multipliedBy((int) '#');
        org.joda.time.Days days45 = days39.minus(days41);
        boolean boolean46 = days28.isGreaterThan(days45);
        org.joda.time.Duration duration47 = days45.toStandardDuration();
        org.joda.time.Days days49 = days45.minus(35);
        org.joda.time.Days days50 = days16.plus(days49);
        int int51 = days49.getDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P-2147483648D" + "'", str11, "P-2147483648D");
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P0D" + "'", str26, "P0D");
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P5D" + "'", str29, "P5D");
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P5D" + "'", str36, "P5D");
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-41) + "'", int51 == (-41));
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = period0.toDurationFrom(readableInstant1);
        org.joda.time.Minutes minutes3 = period0.toStandardMinutes();
        org.joda.time.Minutes minutes5 = minutes3.multipliedBy(2147483647);
        org.joda.time.Minutes minutes7 = minutes3.minus(36);
        org.joda.time.Minutes minutes9 = minutes3.multipliedBy(87);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes19 = minutes10.minus(minutes16);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period22.minusMonths(0);
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        org.joda.time.Minutes minutes27 = minutes25.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((java.lang.Object) minutes25, chronology28);
        org.joda.time.Minutes minutes30 = minutes10.minus(minutes25);
        org.joda.time.DurationFieldType durationFieldType32 = minutes30.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType33 = minutes30.getPeriodType();
        org.joda.time.Minutes minutes34 = minutes30.negated();
        org.joda.time.DurationFieldType durationFieldType35 = minutes30.getFieldType();
        org.joda.time.Minutes minutes36 = minutes9.minus(minutes30);
        org.joda.time.PeriodType periodType37 = minutes30.getPeriodType();
        java.lang.String str38 = periodType37.getName();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Minutes" + "'", str38, "Minutes");
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.Period period8 = new org.joda.time.Period((-1), (int) (short) 10, (-49), (-2147483640), 103, (-7), 0, (-214748364));
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        org.joda.time.Duration duration12 = duration10.withMillis((-518400000L));
        org.joda.time.Duration duration14 = duration10.minus((long) (-8));
        org.joda.time.format.PeriodPrinter periodPrinter17 = null;
        org.joda.time.format.PeriodParser periodParser18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = new org.joda.time.format.PeriodFormatter(periodPrinter17, periodParser18);
        boolean boolean20 = periodFormatter19.isParser();
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds24 = seconds22.plus(seconds23);
        org.joda.time.PeriodType periodType25 = seconds22.getPeriodType();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period29 = period28.negated();
        org.joda.time.DurationFieldType durationFieldType31 = period28.getFieldType((int) (short) 1);
        int int32 = periodType25.indexOf(durationFieldType31);
        org.joda.time.Period period33 = new org.joda.time.Period((long) ' ', periodType25);
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter19.withParseType(periodType25);
        org.joda.time.PeriodType periodType35 = periodType25.withDaysRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withMillisRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period(0L, 240000L, periodType36);
        org.joda.time.Period period39 = duration10.toPeriod(periodType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = new org.joda.time.Period(1680, (-38), (-35), 7, (-7), 118, (-100), (int) (byte) 0, periodType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalFrom(readableInstant7);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Period period10 = weeks9.toPeriod();
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeks(1);
        boolean boolean14 = weeks11.isGreaterThan(weeks13);
        org.joda.time.Weeks weeks15 = weeks9.minus(weeks11);
        org.joda.time.PeriodType periodType16 = weeks9.getPeriodType();
        int int17 = weeks9.size();
        java.lang.String str18 = weeks9.toString();
        org.joda.time.PeriodType periodType19 = weeks9.getPeriodType();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P0W" + "'", str18, "P0W");
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period3 = org.joda.time.Period.seconds((int) (byte) 100);
        org.joda.time.Period period5 = period3.multipliedBy(87);
        org.joda.time.Period period7 = period3.minusHours((-100));
        org.joda.time.PeriodType periodType8 = period3.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration15 = duration12.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration15.toIntervalFrom(readableInstant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = duration15.toPeriodFrom(readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, readableInstant20);
        org.joda.time.Days days22 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withYearsRemoved();
        int int26 = periodType23.size();
        boolean boolean27 = duration15.equals((java.lang.Object) int26);
        org.joda.time.Days days28 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType29 = days28.getPeriodType();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.PeriodType periodType31 = periodType29.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType29.withSecondsRemoved();
        org.joda.time.Period period33 = duration15.toPeriod(periodType29);
        org.joda.time.Period period34 = period10.normalizedStandard(periodType29);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period5 = period2.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period5.toDurationFrom(readableInstant7);
        long long9 = duration8.getMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-36L) + "'", long9 == (-36L));
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period5 = period2.normalizedStandard();
        org.joda.time.Period period7 = period2.minusMinutes((int) '#');
        org.joda.time.Period period9 = period7.plusSeconds((int) (byte) 1);
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = seconds10.minus((int) 'a');
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.Seconds seconds17 = seconds13.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds20 = seconds18.plus(seconds19);
        java.lang.String str21 = seconds18.toString();
        org.joda.time.DurationFieldType durationFieldType22 = seconds18.getFieldType();
        java.lang.String str23 = durationFieldType22.getName();
        boolean boolean24 = seconds13.isSupported(durationFieldType22);
        int int25 = seconds12.get(durationFieldType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DurationField durationField27 = durationFieldType22.getField(chronology26);
        int int28 = period9.get(durationFieldType22);
        org.joda.time.Period period30 = period9.plusDays(13);
        org.joda.time.Period period32 = period30.minusMillis((int) (byte) -1);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT2S" + "'", str21, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "seconds" + "'", str23, "seconds");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-95) + "'", int25 == (-95));
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Period period18 = period14.minusSeconds((int) (byte) 100);
        org.joda.time.Days days19 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType20 = days19.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withHoursRemoved();
        org.joda.time.PeriodType periodType22 = periodType20.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.days();
        boolean boolean24 = periodType22.isSupported(durationFieldType23);
        int int25 = period14.get(durationFieldType23);
        org.joda.time.Period period27 = period14.withHours(1);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        boolean boolean29 = period27.equals((java.lang.Object) periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant10, readableInstant11, periodType28);
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType28);
        org.joda.time.PeriodType periodType32 = periodType28.withMinutesRemoved();
        org.joda.time.PeriodType periodType33 = periodType28.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType28.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = new org.joda.time.Period((-6), (-268435455), (-2147483646), 999, (-105), 32, 2147483647, (-31), periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period13 = period11.minusMillis((-5));
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Minutes minutes22 = minutes20.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes23 = minutes14.minus(minutes20);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period28 = period26.minusMonths(0);
        org.joda.time.Minutes minutes29 = period28.toStandardMinutes();
        org.joda.time.Minutes minutes31 = minutes29.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((java.lang.Object) minutes29, chronology32);
        org.joda.time.Minutes minutes34 = minutes14.minus(minutes29);
        org.joda.time.DurationFieldType durationFieldType36 = minutes34.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType37 = minutes34.getPeriodType();
        org.joda.time.Minutes minutes38 = minutes34.negated();
        org.joda.time.DurationFieldType durationFieldType39 = minutes34.getFieldType();
        org.joda.time.Period period41 = period13.withField(durationFieldType39, (int) (byte) 1);
        org.joda.time.Period period43 = period41.withMillis((-100));
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-95));
        org.joda.time.Weeks weeks3 = weeks1.plus((int) (short) 1);
        org.joda.time.Duration duration4 = weeks3.toStandardDuration();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.ZERO;
        java.lang.String str6 = weeks5.toString();
        int int7 = weeks5.size();
        org.joda.time.Period period8 = weeks5.toPeriod();
        org.joda.time.Weeks weeks9 = weeks3.plus(weeks5);
        int int10 = weeks9.getWeeks();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P0W" + "'", str6, "P0W");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-94) + "'", int10 == (-94));
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration6.plus((long) (short) 10);
        org.joda.time.Period period17 = duration6.toPeriod();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period23 = period21.minusMonths(0);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant18, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.Period period32 = duration28.toPeriod(periodType31);
        boolean boolean33 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration34 = org.joda.time.Duration.ZERO;
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period39 = period37.minusMonths(0);
        org.joda.time.Minutes minutes40 = period39.toStandardMinutes();
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period46 = period44.minusMonths(0);
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Duration duration48 = minutes47.toStandardDuration();
        boolean boolean49 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration41.plus((long) (short) 10);
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period56 = period54.minusMonths(0);
        int int57 = period56.getYears();
        org.joda.time.Period period59 = period56.plusYears((int) ' ');
        boolean boolean60 = duration51.equals((java.lang.Object) period59);
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period65 = period63.minusMonths(0);
        org.joda.time.Minutes minutes66 = period65.toStandardMinutes();
        org.joda.time.Duration duration67 = minutes66.toStandardDuration();
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Duration duration70 = duration67.plus((long) (byte) 0);
        org.joda.time.Duration duration72 = duration67.withMillis((long) 1);
        boolean boolean73 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration67);
        java.lang.String str74 = duration51.toString();
        boolean boolean75 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, readableInstant76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, readableInstant78, periodType79);
        org.joda.time.Duration duration82 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-2147483646));
        org.joda.time.Duration duration85 = duration28.withDurationAdded((-32L), (-89));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0.010S" + "'", str74, "PT0.010S");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("YearMonthDayNoMonths");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearMonthDayNoMonths\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        org.joda.time.Minutes minutes11 = minutes8.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration12 = minutes8.toStandardDuration();
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period15.minusMonths(0);
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Duration duration19 = minutes18.toStandardDuration();
        org.joda.time.Period period20 = duration19.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.Period period24 = duration12.toPeriodTo(readableInstant22, periodType23);
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration26 = duration25.toDuration();
        long long27 = duration26.getStandardMinutes();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(47L);
        long long30 = duration29.getStandardHours();
        boolean boolean31 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Interval interval33 = duration29.toIntervalTo(readableInstant32);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-128849018880L) + "'", long2 == (-128849018880L));
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2147483648L) + "'", long27 == (-2147483648L));
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours2 = hours0.dividedBy(572);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = period11.getFieldType((int) (short) 1);
        int int15 = periodType8.indexOf(durationFieldType14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) ' ', periodType8);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType8);
        java.util.Locale locale18 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str20 = periodType19.getName();
        org.joda.time.PeriodType periodType21 = periodType19.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withParseType(periodType19);
        boolean boolean23 = periodFormatter22.isPrinter();
        java.util.Locale locale24 = null;
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter22.withLocale(locale24);
        org.joda.time.PeriodType periodType26 = periodFormatter22.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((-190));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -190");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "YearMonthDay" + "'", str20, "YearMonthDay");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration6.toDuration();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, readableInstant20);
        org.joda.time.Period period23 = period21.withHours((int) (byte) -1);
        org.joda.time.Period period24 = period23.negated();
        org.joda.time.Period period26 = period23.minusMonths(2);
        org.joda.time.Period period28 = period26.minusDays(5);
        int int29 = period28.getMonths();
        org.joda.time.Period period31 = period28.plusYears(118);
        int int32 = period31.getWeeks();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2) + "'", int29 == (-2));
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.Period period13 = period11.minusYears(0);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days15 = days7.plus(days14);
        java.lang.String str16 = days14.toString();
        org.joda.time.Days days17 = days14.negated();
        org.joda.time.Period period18 = days17.toPeriod();
        org.joda.time.Days days19 = days17.negated();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P0D" + "'", str16, "P0D");
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P-100M10D");
        org.joda.time.Period period3 = period1.minusMinutes(100);
        org.joda.time.Period period5 = period3.plusDays(0);
        org.joda.time.Period period7 = period5.minusMonths(2);
        org.joda.time.Period period9 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes10 = period9.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType11 = minutes10.getFieldType();
        boolean boolean12 = period5.isSupported(durationFieldType11);
        org.joda.time.Period period14 = period5.withYears((-3));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Minutes minutes10 = minutes7.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration11 = minutes7.toStandardDuration();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Duration duration18 = minutes17.toStandardDuration();
        org.joda.time.Period period19 = duration18.toPeriod();
        boolean boolean20 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.Period period23 = duration11.toPeriodTo(readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant24);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        long long28 = duration27.getStandardSeconds();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period33 = period31.minusMonths(0);
        org.joda.time.Minutes minutes34 = period33.toStandardMinutes();
        org.joda.time.Duration duration35 = minutes34.toStandardDuration();
        org.joda.time.Minutes minutes37 = minutes34.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration38 = minutes34.toStandardDuration();
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period43 = period41.minusMonths(0);
        org.joda.time.Minutes minutes44 = period43.toStandardMinutes();
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Period period46 = duration45.toPeriod();
        boolean boolean47 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration38.toPeriodTo(readableInstant48, periodType49);
        org.joda.time.Duration duration51 = duration27.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration52 = duration51.toDuration();
        boolean boolean53 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration58 = duration56.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration58, readableInstant59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration65 = duration62.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration67 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 0);
        boolean boolean68 = duration11.isEqual((org.joda.time.ReadableDuration) duration67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = duration11.toPeriodFrom(readableInstant69, periodType70);
        org.joda.time.PeriodType periodType72 = period71.getPeriodType();
        org.joda.time.Period period73 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType72);
        int int74 = period73.getMillis();
        org.joda.time.Period period76 = period73.plusSeconds(7);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-128849018880L) + "'", long28 == (-128849018880L));
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.joda.time.Period period2 = new org.joda.time.Period((-1491308L), (long) 6);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.MutablePeriod mutablePeriod1 = hours0.toMutablePeriod();
        org.joda.time.Hours hours2 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours3 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours4 = hours2.minus(hours3);
        int int5 = hours3.getHours();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        boolean boolean7 = hours3.isSupported(durationFieldType6);
        boolean boolean8 = hours0.isLessThan(hours3);
        org.joda.time.Hours hours9 = org.joda.time.Hours.EIGHT;
        int int10 = hours9.getHours();
        org.joda.time.Hours hours11 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours12 = hours9.minus(hours11);
        org.joda.time.Hours hours13 = hours0.minus(hours11);
        org.joda.time.Hours hours15 = hours0.dividedBy(2147483644);
        org.joda.time.PeriodType periodType16 = hours15.getPeriodType();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.joda.time.Days days1 = org.joda.time.Days.days(36);
        org.joda.time.Days days3 = days1.minus(11);
        org.joda.time.Days days5 = days1.dividedBy((-2147483647));
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Minutes minutes18 = minutes16.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes19 = minutes10.minus(minutes16);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period22.minusMonths(0);
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        org.joda.time.Duration duration26 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes28 = minutes25.multipliedBy((int) (short) 1);
        int int29 = minutes10.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes28);
        org.joda.time.Minutes minutes30 = minutes9.plus(minutes28);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period35 = period33.minusMonths(0);
        org.joda.time.Minutes minutes36 = period35.toStandardMinutes();
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        org.joda.time.Minutes minutes39 = minutes36.multipliedBy((int) (short) 1);
        java.lang.String str40 = minutes39.toString();
        org.joda.time.Minutes minutes41 = minutes30.minus(minutes39);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes41);
        org.joda.time.Period period45 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period47 = period45.minusMonths(0);
        org.joda.time.Minutes minutes48 = period47.toStandardMinutes();
        org.joda.time.Duration duration49 = minutes48.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration49.toIntervalFrom(readableInstant50);
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period58 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period60 = period58.minusMonths(0);
        org.joda.time.Minutes minutes61 = period60.toStandardMinutes();
        org.joda.time.Minutes minutes62 = minutes55.minus(minutes61);
        int int63 = minutes62.size();
        boolean boolean64 = duration49.equals((java.lang.Object) minutes62);
        org.joda.time.Minutes minutes66 = minutes62.multipliedBy(0);
        boolean boolean67 = minutes42.isLessThan(minutes66);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0M" + "'", str40, "PT0M");
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalFrom(readableInstant7);
        org.joda.time.Days days9 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Days days11 = days9.minus((int) '4');
        org.joda.time.Duration duration12 = days9.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.FIVE;
        java.lang.String str14 = days13.toString();
        org.joda.time.Days days16 = days13.multipliedBy((int) (byte) -1);
        org.joda.time.Days days17 = days13.negated();
        org.joda.time.Days days18 = org.joda.time.Days.ONE;
        org.joda.time.Days days19 = org.joda.time.Days.ONE;
        int int20 = days18.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days19);
        org.joda.time.Days days22 = days19.multipliedBy((int) '#');
        org.joda.time.Days days23 = days17.minus(days19);
        org.joda.time.MutablePeriod mutablePeriod24 = days17.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod25 = days17.toMutablePeriod();
        boolean boolean26 = days9.isGreaterThan(days17);
        org.joda.time.Period period27 = days9.toPeriod();
        org.joda.time.Days days29 = days9.multipliedBy(2147483644);
        int int30 = days29.getDays();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P5D" + "'", str14, "P5D");
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        boolean boolean9 = periodFormatter8.isParser();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds13 = seconds11.plus(seconds12);
        org.joda.time.PeriodType periodType14 = seconds11.getPeriodType();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period17.negated();
        org.joda.time.DurationFieldType durationFieldType20 = period17.getFieldType((int) (short) 1);
        int int21 = periodType14.indexOf(durationFieldType20);
        org.joda.time.Period period22 = new org.joda.time.Period((long) ' ', periodType14);
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter8.withParseType(periodType14);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType25 = periodType24.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter8.withParseType(periodType25);
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType25);
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant2, readableInstant3, periodType25);
        org.joda.time.Period period29 = new org.joda.time.Period(4492800L, (long) (byte) 0, periodType25);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodFormatter26);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days5 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days7 = days5.multipliedBy((int) (short) 100);
        org.joda.time.Duration duration8 = days5.toStandardDuration();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) (byte) -1);
        long long11 = duration10.getMillis();
        int int12 = duration8.compareTo((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration14 = duration10.plus((long) 59);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Period period22 = period20.minusSeconds(0);
        org.joda.time.Period period24 = period22.minusWeeks(10);
        org.joda.time.Period period25 = period22.negated();
        org.joda.time.Period period27 = period22.minusMillis((int) (short) 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray28 = period22.getFieldTypes();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.forFields(durationFieldTypeArray28);
        org.joda.time.Period period30 = duration14.toPeriodTo(readableInstant15, periodType29);
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter2.withParseType(periodType29);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter2.withParseType(periodType32);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Period period40 = period38.minusSeconds(0);
        org.joda.time.Period period42 = period40.plusHours(7);
        org.joda.time.Period period44 = period40.withSeconds((int) (byte) 1);
        org.joda.time.Period period46 = period44.withWeeks((-110));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = periodFormatter33.print((org.joda.time.ReadablePeriod) period44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldTypeArray28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        int int1 = hours0.getHours();
        org.joda.time.Hours hours3 = hours0.dividedBy(8);
        org.joda.time.Hours hours5 = hours3.plus((int) 'a');
        org.joda.time.Hours hours7 = hours3.minus((int) (short) -1);
        org.joda.time.PeriodType periodType8 = hours3.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType11 = periodType9.getFieldType((-5));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds5 = seconds3.plus(seconds4);
        org.joda.time.Seconds seconds7 = seconds4.plus((int) (byte) 0);
        org.joda.time.Seconds seconds9 = seconds7.minus((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        int int11 = seconds7.get(durationFieldType10);
        boolean boolean12 = period2.isSupported(durationFieldType10);
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = durationFieldType10.isSupported(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DurationField durationField16 = durationFieldType10.getField(chronology15);
        java.lang.String str17 = durationFieldType10.toString();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "months" + "'", str17, "months");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.multipliedBy((int) (byte) -1);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Days days5 = org.joda.time.Days.ONE;
        org.joda.time.Days days6 = org.joda.time.Days.ONE;
        int int7 = days5.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days6);
        org.joda.time.Days days9 = days6.multipliedBy((int) '#');
        org.joda.time.Days days10 = days4.minus(days6);
        org.joda.time.Days days12 = days4.minus((int) 'a');
        org.joda.time.Days days13 = org.joda.time.Days.FIVE;
        java.lang.String str14 = days13.toString();
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        org.joda.time.Days days18 = days15.minus(0);
        boolean boolean19 = days13.isLessThan(days18);
        java.lang.String str20 = days13.toString();
        org.joda.time.DurationFieldType durationFieldType21 = days13.getFieldType();
        org.joda.time.Period period23 = org.joda.time.Period.seconds((int) (byte) 100);
        org.joda.time.Period period25 = period23.multipliedBy(87);
        org.joda.time.Days days26 = period23.toStandardDays();
        boolean boolean27 = days13.isLessThan(days26);
        boolean boolean28 = days12.isGreaterThan(days13);
        org.joda.time.Period period30 = org.joda.time.Period.days(10);
        org.joda.time.Period period32 = period30.plusMonths((int) 'a');
        org.joda.time.Period period34 = period30.plusSeconds((int) (short) 100);
        org.joda.time.Period period36 = period30.withMinutes(1);
        org.joda.time.Days days37 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Days days38 = days37.negated();
        org.joda.time.Days days40 = days38.minus(5);
        org.joda.time.Days days42 = days38.plus(59);
        org.joda.time.Days days44 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days46 = days44.multipliedBy((int) (short) 100);
        org.joda.time.Days days47 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType48 = days47.getPeriodType();
        org.joda.time.Days days50 = days47.minus(0);
        org.joda.time.Days days51 = days44.minus(days50);
        java.lang.String str52 = days51.toString();
        org.joda.time.Days days53 = days51.negated();
        org.joda.time.Days days54 = org.joda.time.Days.FIVE;
        java.lang.String str55 = days54.toString();
        org.joda.time.Days days57 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days58 = days54.minus(days57);
        org.joda.time.DurationFieldType durationFieldType59 = days54.getFieldType();
        boolean boolean60 = days53.isLessThan(days54);
        org.joda.time.Days days61 = org.joda.time.Days.FIVE;
        java.lang.String str62 = days61.toString();
        org.joda.time.Days days64 = days61.multipliedBy((int) (byte) -1);
        org.joda.time.Days days65 = days61.negated();
        org.joda.time.Days days66 = org.joda.time.Days.ONE;
        org.joda.time.Days days67 = org.joda.time.Days.ONE;
        int int68 = days66.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days67);
        org.joda.time.Days days70 = days67.multipliedBy((int) '#');
        org.joda.time.Days days71 = days65.minus(days67);
        boolean boolean72 = days54.isGreaterThan(days71);
        org.joda.time.Duration duration73 = days71.toStandardDuration();
        org.joda.time.Days days75 = days71.minus(35);
        org.joda.time.Days days76 = days42.plus(days75);
        boolean boolean77 = days12.equals((java.lang.Object) days42);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P5D" + "'", str14, "P5D");
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P5D" + "'", str20, "P5D");
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "P0D" + "'", str52, "P0D");
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "P5D" + "'", str55, "P5D");
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "P5D" + "'", str62, "P5D");
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(days71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.withDays(8);
        org.joda.time.Period period4 = period0.plusMinutes((int) (byte) 0);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period0);
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter8.getPrinter();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.Period period18 = duration12.toPeriodFrom(readableInstant13, periodType15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (short) 1, periodType15, chronology19);
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter8.withParseType(periodType15);
        org.joda.time.format.PeriodPrinter periodPrinter22 = periodFormatter21.getPrinter();
        org.joda.time.format.PeriodParser periodParser23 = periodFormatter21.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = period0.toString(periodFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNull(periodPrinter9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNull(periodPrinter22);
        org.junit.Assert.assertNull(periodParser23);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        java.lang.String str6 = periodType5.toString();
        org.joda.time.PeriodType periodType7 = periodType5.withHoursRemoved();
        org.joda.time.Period period8 = duration1.toPeriodFrom(readableInstant2, periodType5);
        int int9 = period8.getHours();
        org.joda.time.Period period11 = period8.multipliedBy(6);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Days]" + "'", str6, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.joda.time.Days days1 = org.joda.time.Days.days(13);
        org.joda.time.Days days3 = days1.dividedBy(32);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration8 = duration6.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, readableInstant9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Interval interval12 = duration8.toIntervalFrom(readableInstant11);
        org.joda.time.Days days13 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Days days15 = days13.minus((int) '4');
        org.joda.time.Days days17 = days13.minus((int) 'a');
        org.joda.time.Days days18 = days1.plus(days13);
        org.joda.time.DurationFieldType durationFieldType19 = days1.getFieldType();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(durationFieldType19);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        boolean boolean6 = weeks3.isLessThan(weeks5);
        boolean boolean7 = weeks2.isGreaterThan(weeks5);
        org.joda.time.Weeks weeks8 = null;
        org.joda.time.Weeks weeks9 = weeks5.minus(weeks8);
        org.joda.time.DurationFieldType durationFieldType10 = weeks9.getFieldType();
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks14 = weeks13.negated();
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksIn(readableInterval16);
        boolean boolean18 = weeks15.isLessThan(weeks17);
        boolean boolean19 = weeks14.isGreaterThan(weeks17);
        boolean boolean20 = weeks11.isLessThan(weeks14);
        org.joda.time.Weeks weeks21 = weeks9.plus(weeks14);
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeks(1);
        boolean boolean25 = weeks22.isGreaterThan(weeks24);
        org.joda.time.DurationFieldType durationFieldType26 = weeks24.getFieldType();
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeksIn(readableInterval28);
        boolean boolean30 = weeks27.isLessThan(weeks29);
        org.joda.time.Weeks weeks32 = weeks29.multipliedBy(10);
        org.joda.time.Weeks weeks33 = weeks24.minus(weeks29);
        int int34 = weeks33.getWeeks();
        org.joda.time.Weeks weeks36 = weeks33.multipliedBy(2147483647);
        org.joda.time.Weeks weeks37 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Weeks weeks39 = org.joda.time.Weeks.weeksIn(readableInterval38);
        boolean boolean40 = weeks37.isLessThan(weeks39);
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks43 = weeks41.dividedBy(1);
        boolean boolean44 = weeks37.isGreaterThan(weeks43);
        java.lang.String str45 = weeks37.toString();
        int int46 = weeks36.compareTo((org.joda.time.base.BaseSingleFieldPeriod) weeks37);
        org.joda.time.Weeks weeks48 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks49 = weeks48.negated();
        org.joda.time.Weeks weeks50 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.weeksIn(readableInterval51);
        boolean boolean53 = weeks50.isLessThan(weeks52);
        boolean boolean54 = weeks49.isGreaterThan(weeks52);
        org.joda.time.Weeks weeks56 = weeks52.dividedBy(52);
        boolean boolean57 = weeks36.isGreaterThan(weeks52);
        org.joda.time.Weeks weeks58 = weeks14.minus(weeks36);
        org.joda.time.Weeks weeks60 = weeks14.minus(36);
        org.joda.time.PeriodType periodType61 = weeks14.getPeriodType();
        org.joda.time.Duration duration62 = weeks14.toStandardDuration();
        org.joda.time.Duration duration64 = duration62.plus(420L);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P2147483647W" + "'", str45, "P2147483647W");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration6.toDuration();
        org.joda.time.Period period20 = duration6.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((-3600000L));
        org.joda.time.format.PeriodPrinter periodPrinter23 = null;
        org.joda.time.format.PeriodParser periodParser24 = null;
        org.joda.time.format.PeriodFormatter periodFormatter25 = new org.joda.time.format.PeriodFormatter(periodPrinter23, periodParser24);
        java.util.Locale locale26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter25.withLocale(locale26);
        org.joda.time.format.PeriodParser periodParser28 = periodFormatter25.getParser();
        boolean boolean29 = periodFormatter25.isPrinter();
        boolean boolean30 = duration22.equals((java.lang.Object) boolean29);
        org.joda.time.Duration duration31 = duration6.plus((org.joda.time.ReadableDuration) duration22);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNull(periodParser28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("PT432000.031S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.Period period4 = new org.joda.time.Period((-38), 32, 44, (-63));
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(100L, chronology1);
        org.joda.time.Period period3 = period2.toPeriod();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes(6);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) minutes11, chronology14);
        org.joda.time.Period period16 = minutes11.toPeriod();
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        boolean boolean18 = minutes11.isLessThan(minutes17);
        boolean boolean19 = minutes5.isGreaterThan(minutes11);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DurationFieldType durationFieldType33 = period31.getFieldType((int) (short) 0);
        int int34 = minutes5.get(durationFieldType33);
        org.joda.time.Period period36 = period2.withField(durationFieldType33, (int) (short) 10);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Minutes minutes7 = minutes5.dividedBy((int) (byte) 100);
        int int8 = minutes7.size();
        org.joda.time.PeriodType periodType9 = minutes7.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withDaysRemoved();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.Period period4 = new org.joda.time.Period(5, (-2), (int) (short) 10, (-95));
        org.joda.time.Period period6 = period4.minusMillis((int) (short) 10);
        org.joda.time.Period period8 = period4.plusMonths(59);
        org.joda.time.Period period10 = period4.withMillis((int) (byte) 10);
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds13 = seconds11.plus(seconds12);
        org.joda.time.Seconds seconds15 = seconds12.plus((int) (byte) 0);
        org.joda.time.Seconds seconds16 = seconds15.negated();
        int int17 = seconds15.getSeconds();
        org.joda.time.DurationFieldType durationFieldType18 = seconds15.getFieldType();
        boolean boolean19 = period10.isSupported(durationFieldType18);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("P2W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        int int1 = hours0.getHours();
        org.joda.time.Hours hours3 = hours0.multipliedBy((-95));
        org.joda.time.Period period4 = hours3.toPeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(0L);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Period period7 = period4.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = period7.toDurationFrom(readableInstant9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withSecondsRemoved();
        org.joda.time.PeriodType periodType20 = periodType17.withMinutesRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType21);
        org.joda.time.Duration duration23 = duration10.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant24, periodType25);
        org.joda.time.Duration duration27 = duration1.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration1.toPeriod(chronology28);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.joda.time.Period period1 = new org.joda.time.Period((-14L));
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        boolean boolean15 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.Duration duration19 = duration7.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, readableInstant20);
        org.joda.time.Duration duration23 = duration7.plus((long) 8);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration23.toIntervalFrom(readableInstant24);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period30 = period28.minusMonths(0);
        org.joda.time.Minutes minutes31 = period30.toStandardMinutes();
        org.joda.time.Duration duration32 = minutes31.toStandardDuration();
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period37 = period35.minusMonths(0);
        org.joda.time.Minutes minutes38 = period37.toStandardMinutes();
        org.joda.time.Duration duration39 = minutes38.toStandardDuration();
        boolean boolean40 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration32.plus((long) (short) 10);
        org.joda.time.Duration duration44 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 0);
        org.joda.time.Duration duration45 = duration44.toDuration();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = duration45.toPeriodFrom(readableInstant46);
        org.joda.time.Duration duration48 = duration45.toDuration();
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period51 = period49.minusDays(7);
        org.joda.time.Period period53 = period49.plusMillis((-116));
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-268435465), chronology1);
        org.joda.time.Period period4 = period2.withYears(1);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.withWeeks((-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period1.toDurationFrom(readableInstant5);
        org.joda.time.Period period8 = period1.plusMonths((-95));
        org.joda.time.Period period10 = org.joda.time.Period.days(10);
        org.joda.time.Period period12 = period10.minusWeeks((int) (short) 1);
        org.joda.time.Period period13 = period8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.minusWeeks(0);
        org.joda.time.Period period17 = period15.plusMonths(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks18 = period17.toStandardWeeks();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Weeks as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.multipliedBy((int) (byte) -1);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Duration duration5 = days0.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant6);
        java.lang.Object obj8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(obj8);
        org.joda.time.Period period11 = period9.minusWeeks((int) (short) 100);
        org.joda.time.Period period12 = period7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period14 = period7.plusWeeks(10);
        int int15 = period7.getMonths();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Minutes minutes10 = minutes7.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration11 = minutes7.toStandardDuration();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Duration duration18 = minutes17.toStandardDuration();
        org.joda.time.Period period19 = duration18.toPeriod();
        boolean boolean20 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        boolean boolean23 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration26 = duration18.withDurationAdded((long) 10, (int) (short) 0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Interval interval28 = duration26.toIntervalFrom(readableInstant27);
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationFrom(readableInstant30);
        org.joda.time.Duration duration32 = duration31.toDuration();
        long long33 = duration31.getStandardSeconds();
        long long34 = duration31.getMillis();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((-128849018880L), (long) (-35791394));
        boolean boolean38 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean39 = duration26.equals((java.lang.Object) duration31);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isParser();
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds8 = seconds6.plus(seconds7);
        org.joda.time.PeriodType periodType9 = seconds6.getPeriodType();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.DurationFieldType durationFieldType15 = period12.getFieldType((int) (short) 1);
        int int16 = periodType9.indexOf(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) ' ', periodType9);
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter3.withParseType(periodType9);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType20 = periodType19.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter3.withParseType(periodType20);
        java.util.Locale locale22 = null;
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter3.withLocale(locale22);
        org.joda.time.format.PeriodPrinter periodPrinter24 = periodFormatter23.getPrinter();
        java.util.Locale locale25 = periodFormatter23.getLocale();
        java.util.Locale locale26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter23.withLocale(locale26);
        org.joda.time.format.PeriodParser periodParser28 = periodFormatter23.getParser();
        boolean boolean29 = periodFormatter23.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = org.joda.time.Period.parse("PT52M", periodFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNull(periodPrinter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNull(periodParser28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.MutablePeriod mutablePeriod1 = hours0.toMutablePeriod();
        org.joda.time.Hours hours2 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours3 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours4 = hours2.minus(hours3);
        int int5 = hours3.getHours();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        boolean boolean7 = hours3.isSupported(durationFieldType6);
        boolean boolean8 = hours0.isLessThan(hours3);
        org.joda.time.Hours hours9 = org.joda.time.Hours.EIGHT;
        int int10 = hours9.getHours();
        org.joda.time.Hours hours11 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours12 = hours9.minus(hours11);
        org.joda.time.Hours hours13 = hours0.minus(hours11);
        org.joda.time.Hours hours15 = hours11.dividedBy((-7));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period4.negated();
        int int6 = period4.getHours();
        org.joda.time.Period period8 = org.joda.time.Period.days(10);
        org.joda.time.Period period10 = period8.plusMonths((int) 'a');
        org.joda.time.Period period12 = period8.plusSeconds((int) (short) 100);
        org.joda.time.Period period14 = period12.minusMonths((int) 'a');
        org.joda.time.Period period15 = period4.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Hours hours16 = period4.toStandardHours();
        int int17 = hours16.getHours();
        org.joda.time.Hours hours18 = hours0.plus(hours16);
        org.joda.time.Hours hours19 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours21 = hours19.dividedBy(100);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Period period28 = period26.minusSeconds(0);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Hours hours30 = period29.toStandardHours();
        boolean boolean31 = hours21.isLessThan(hours30);
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) '#');
        int int34 = period33.getYears();
        org.joda.time.Hours hours35 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period33.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours38 = period37.toStandardHours();
        org.joda.time.Hours hours39 = hours21.minus(hours38);
        boolean boolean40 = hours16.isLessThan(hours38);
        org.joda.time.Hours hours41 = org.joda.time.Hours.ONE;
        java.lang.String str42 = hours41.toString();
        org.joda.time.Hours hours43 = hours41.negated();
        org.joda.time.Hours hours44 = hours38.plus(hours41);
        org.joda.time.PeriodType periodType45 = hours38.getPeriodType();
        org.joda.time.Hours hours47 = hours38.plus((-2147483646));
        org.joda.time.Hours hours48 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours49 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours51 = hours49.dividedBy(100);
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period56 = period54.minusMonths(0);
        org.joda.time.Period period58 = period56.minusSeconds(0);
        org.joda.time.Period period59 = period58.normalizedStandard();
        org.joda.time.Hours hours60 = period59.toStandardHours();
        boolean boolean61 = hours51.isLessThan(hours60);
        boolean boolean62 = hours48.isLessThan(hours51);
        org.joda.time.Duration duration63 = hours51.toStandardDuration();
        java.lang.String str64 = hours51.toString();
        org.joda.time.Period period66 = org.joda.time.Period.millis((int) '#');
        int int67 = period66.getYears();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Period period69 = period66.withFields(readablePeriod68);
        org.joda.time.Hours hours70 = period66.toStandardHours();
        org.joda.time.Hours hours71 = hours51.minus(hours70);
        int int72 = hours71.getHours();
        org.joda.time.Hours hours73 = hours47.minus(hours71);
        org.joda.time.Hours hours74 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours75 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours77 = hours75.dividedBy(100);
        org.joda.time.Period period80 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period82 = period80.minusMonths(0);
        org.joda.time.Period period84 = period82.minusSeconds(0);
        org.joda.time.Period period85 = period84.normalizedStandard();
        org.joda.time.Hours hours86 = period85.toStandardHours();
        boolean boolean87 = hours77.isLessThan(hours86);
        boolean boolean88 = hours74.isLessThan(hours77);
        org.joda.time.Hours hours89 = hours73.minus(hours77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes90 = hours89.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483646 * 60");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1H" + "'", str42, "PT1H");
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(hours60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0H" + "'", str64, "PT0H");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertNotNull(hours71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertNotNull(hours74);
        org.junit.Assert.assertNotNull(hours75);
        org.junit.Assert.assertNotNull(hours77);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(hours86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(hours89);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Minutes minutes7 = minutes5.dividedBy((int) (byte) 100);
        int int8 = minutes7.size();
        org.joda.time.PeriodType periodType9 = minutes7.getPeriodType();
        org.joda.time.Duration duration10 = minutes7.toStandardDuration();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Duration duration17 = minutes16.toStandardDuration();
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.plus((long) (byte) 0);
        org.joda.time.Period period21 = duration17.toPeriod();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period27 = period25.minusMonths(0);
        org.joda.time.Minutes minutes28 = period27.toStandardMinutes();
        org.joda.time.Duration duration29 = minutes28.toStandardDuration();
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.plus((long) (byte) 0);
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant22, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) duration32, periodType34, chronology35);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period41 = period39.minusMonths(0);
        org.joda.time.Minutes minutes42 = period41.toStandardMinutes();
        org.joda.time.Duration duration43 = minutes42.toStandardDuration();
        org.joda.time.Minutes minutes45 = minutes42.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration46 = minutes42.toStandardDuration();
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period51 = period49.minusMonths(0);
        org.joda.time.Minutes minutes52 = period51.toStandardMinutes();
        org.joda.time.Duration duration53 = minutes52.toStandardDuration();
        org.joda.time.Period period54 = duration53.toPeriod();
        boolean boolean55 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = duration17.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration17.toIntervalFrom(readableInstant58);
        org.joda.time.Duration duration60 = duration10.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration61 = duration10.toDuration();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration61, readableInstant62);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 10);
        org.joda.time.Period period2 = period1.negated();
        org.joda.time.Period period4 = org.joda.time.Period.millis(36);
        org.joda.time.Period period5 = period2.minus((org.joda.time.ReadablePeriod) period4);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days2 = org.joda.time.Days.ONE;
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = days2.isSupported(durationFieldType3);
        boolean boolean5 = days0.isGreaterThan(days2);
        org.joda.time.Days days7 = org.joda.time.Days.parseDays("P0W");
        org.joda.time.Days days8 = days2.plus(days7);
        int int9 = days8.getDays();
        java.lang.String str10 = days8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = days8.getFieldType((-7));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P1D" + "'", str10, "P1D");
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType7 = period2.getPeriodType();
        org.joda.time.PeriodType periodType8 = periodType7.withMinutesRemoved();
        java.lang.String str9 = periodType8.toString();
        int int10 = periodType8.size();
        org.joda.time.Days days12 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days14 = days12.multipliedBy((int) (short) 100);
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        org.joda.time.Days days18 = days15.minus(0);
        org.joda.time.Days days19 = days12.minus(days18);
        org.joda.time.Days days20 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days19);
        org.joda.time.Days days22 = days20.minus((-1));
        java.lang.String str23 = days22.toString();
        org.joda.time.Days days25 = days22.dividedBy((-2));
        org.joda.time.DurationFieldType durationFieldType26 = days22.getFieldType();
        int int27 = periodType8.indexOf(durationFieldType26);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str9, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P1D" + "'", str23, "P1D");
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-100), 12000L);
        org.joda.time.Duration duration4 = duration2.minus(120000L);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(47L, (long) 35, periodType7);
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period9.plusMinutes(103);
        boolean boolean12 = duration2.equals((java.lang.Object) period9);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P-100M10D");
        org.joda.time.Period period3 = org.joda.time.Period.millis(0);
        org.joda.time.Days days4 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Days days6 = days4.plus((int) ' ');
        org.joda.time.DurationFieldType durationFieldType7 = days6.getFieldType();
        boolean boolean8 = period1.isSupported(durationFieldType7);
        java.lang.String str9 = durationFieldType7.getName();
        java.lang.String str10 = durationFieldType7.getName();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "days" + "'", str9, "days");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "days" + "'", str10, "days");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withYearsRemoved();
        java.lang.String str12 = periodType11.toString();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter7.withParseType(periodType11);
        org.joda.time.PeriodType periodType14 = periodFormatter13.getParseType();
        org.joda.time.PeriodType periodType15 = periodFormatter13.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod17 = periodFormatter13.parseMutablePeriod("PT0.011S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[Days]" + "'", str12, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy(1);
        org.joda.time.Weeks weeks4 = weeks0.dividedBy(8);
        java.lang.String str5 = weeks4.toString();
        int int6 = weeks4.size();
        int int7 = weeks4.getWeeks();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P268435455W" + "'", str5, "P268435455W");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 268435455 + "'", int7 == 268435455);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 1);
        long long2 = duration1.getStandardDays();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = seconds7.minus((int) 'a');
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = seconds10.plus(seconds11);
        org.joda.time.Seconds seconds14 = seconds10.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds17 = seconds15.plus(seconds16);
        java.lang.String str18 = seconds15.toString();
        org.joda.time.DurationFieldType durationFieldType19 = seconds15.getFieldType();
        java.lang.String str20 = durationFieldType19.getName();
        boolean boolean21 = seconds10.isSupported(durationFieldType19);
        int int22 = seconds9.get(durationFieldType19);
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = durationFieldType19.isSupported(chronology23);
        int int25 = periodType6.indexOf(durationFieldType19);
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant4, readableInstant5, periodType6);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant3, periodType6);
        org.joda.time.Period period28 = duration1.toPeriod();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT2S" + "'", str18, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "seconds" + "'", str20, "seconds");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-95) + "'", int22 == (-95));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration6.toDuration();
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period22.minusMonths(0);
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        org.joda.time.Duration duration26 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes28 = minutes25.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration29 = minutes25.toStandardDuration();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period34 = period32.minusMonths(0);
        org.joda.time.Minutes minutes35 = period34.toStandardMinutes();
        org.joda.time.Duration duration36 = minutes35.toStandardDuration();
        org.joda.time.Period period37 = duration36.toPeriod();
        boolean boolean38 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.Period period41 = duration29.toPeriodTo(readableInstant39, periodType40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, readableInstant42);
        boolean boolean44 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration29);
        long long45 = duration19.getMillis();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Duration duration48 = duration19.withDurationAdded(readableDuration46, 0);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str50 = periodType49.getName();
        boolean boolean52 = periodType49.equals((java.lang.Object) true);
        org.joda.time.PeriodType periodType53 = periodType49.withMinutesRemoved();
        org.joda.time.Period period54 = duration19.toPeriod(periodType49);
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period58 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period60 = period58.minusMonths(0);
        org.joda.time.Minutes minutes61 = period60.toStandardMinutes();
        org.joda.time.Minutes minutes63 = minutes61.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes64 = minutes55.minus(minutes61);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.years();
        java.lang.String str66 = durationFieldType65.getName();
        java.lang.String str67 = durationFieldType65.getName();
        boolean boolean68 = minutes61.isSupported(durationFieldType65);
        boolean boolean69 = periodType49.isSupported(durationFieldType65);
        org.joda.time.Chronology chronology70 = null;
        boolean boolean71 = durationFieldType65.isSupported(chronology70);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "YearMonthDay" + "'", str50, "YearMonthDay");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "years" + "'", str66, "years");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "years" + "'", str67, "years");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.MutablePeriod mutablePeriod1 = period0.toMutablePeriod();
        java.lang.String str2 = mutablePeriod1.toString();
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser9 = periodFormatter2.getParser();
        boolean boolean10 = periodFormatter2.isPrinter();
        boolean boolean11 = periodFormatter2.isPrinter();
        java.io.Writer writer12 = null;
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        java.lang.String str16 = seconds13.toString();
        org.joda.time.DurationFieldType durationFieldType17 = seconds13.getFieldType();
        org.joda.time.Seconds seconds19 = seconds13.multipliedBy(0);
        org.joda.time.Seconds seconds21 = seconds13.dividedBy((-1));
        org.joda.time.Seconds seconds23 = seconds13.dividedBy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer12, (org.joda.time.ReadablePeriod) seconds13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodPrinter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertNull(periodParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT2S" + "'", str16, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.joda.time.Days days1 = org.joda.time.Days.days(8);
        org.joda.time.Seconds seconds2 = days1.toStandardSeconds();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((-99L), (-14L), chronology2);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        org.joda.time.Duration duration15 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (short) 100);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = duration6.toPeriod(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = duration6.toPeriodTo(readableInstant18);
        org.joda.time.Period period21 = period19.minusMillis(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period19, chronology22);
        org.joda.time.Period period24 = period19.negated();
        org.joda.time.Period period26 = period19.minusWeeks((-2));
        org.joda.time.Period period28 = period26.plusMillis(44);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Minutes minutes10 = minutes7.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration11 = minutes7.toStandardDuration();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Duration duration18 = minutes17.toStandardDuration();
        org.joda.time.Period period19 = duration18.toPeriod();
        boolean boolean20 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration18.toIntervalTo(readableInstant21);
        boolean boolean23 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = duration18.toPeriodFrom(readableInstant24);
        org.joda.time.Period period26 = period25.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period3 = period2.negated();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationTo(readableInstant4);
        org.joda.time.Period period7 = period3.plusWeeks((int) (short) 10);
        org.joda.time.Period period9 = period7.plusDays((int) (short) 1);
        org.joda.time.Period period11 = period7.plusMillis(118);
        org.joda.time.Period period13 = period7.withDays((-10));
        int int14 = period13.getYears();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.Seconds seconds9 = seconds6.plus((int) (byte) 0);
        org.joda.time.Seconds seconds11 = seconds9.minus((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        int int13 = seconds9.get(durationFieldType12);
        boolean boolean14 = period4.isSupported(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = new org.joda.time.DurationFieldType[] { durationFieldType12, durationFieldType15 };
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.forFields(durationFieldTypeArray16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.forFields(durationFieldTypeArray16);
        org.joda.time.PeriodType periodType19 = periodType18.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (-10));
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.ZERO;
        java.lang.String str3 = weeks2.toString();
        int int4 = weeks2.size();
        org.joda.time.PeriodType periodType5 = weeks2.getPeriodType();
        org.joda.time.Weeks weeks7 = weeks2.minus(7);
        java.lang.String str8 = weeks2.toString();
        org.joda.time.Duration duration9 = weeks2.toStandardDuration();
        org.joda.time.Duration duration11 = duration9.plus((-2147483648L));
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = duration11.toPeriodFrom(readableInstant12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant14);
        org.joda.time.Duration duration16 = duration1.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration11.minus((long) (-3));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "P0W" + "'", str3, "P0W");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "P0W" + "'", str8, "P0W");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.withWeeks((-1));
        int int5 = period4.size();
        org.joda.time.Period period7 = period4.plusYears((-35));
        org.joda.time.Hours hours8 = period4.toStandardHours();
        org.joda.time.PeriodType periodType9 = hours8.getPeriodType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.plusWeeks((-36));
        int int4 = period3.getMillis();
        org.joda.time.format.PeriodPrinter periodPrinter5 = null;
        org.joda.time.format.PeriodParser periodParser6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = new org.joda.time.format.PeriodFormatter(periodPrinter5, periodParser6);
        boolean boolean8 = periodFormatter7.isParser();
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = seconds10.plus(seconds11);
        org.joda.time.PeriodType periodType13 = seconds10.getPeriodType();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period16.negated();
        org.joda.time.DurationFieldType durationFieldType19 = period16.getFieldType((int) (short) 1);
        int int20 = periodType13.indexOf(durationFieldType19);
        org.joda.time.Period period21 = new org.joda.time.Period((long) ' ', periodType13);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter7.withParseType(periodType13);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType24 = periodType23.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter7.withParseType(periodType24);
        boolean boolean26 = periodFormatter7.isPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter27 = periodFormatter7.getPrinter();
        java.util.Locale locale28 = periodFormatter7.getLocale();
        org.joda.time.format.PeriodParser periodParser29 = periodFormatter7.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = period3.toString(periodFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(periodPrinter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNull(periodParser29);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        int int8 = period7.getMillis();
        org.joda.time.Period period9 = period7.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = period9.withWeeks((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days2 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.Days days5 = days2.minus(0);
        boolean boolean6 = days0.isLessThan(days5);
        java.lang.String str7 = days0.toString();
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.Days days10 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.Days days13 = days10.minus(0);
        org.joda.time.Days days14 = days13.negated();
        boolean boolean15 = days8.isGreaterThan(days13);
        org.joda.time.Days days16 = days0.minus(days8);
        org.joda.time.Days days18 = days16.minus(14405);
        org.joda.time.Days days20 = days18.plus(35);
        org.joda.time.Days days21 = org.joda.time.Days.FIVE;
        java.lang.String str22 = days21.toString();
        org.joda.time.Days days24 = days21.multipliedBy((int) (byte) -1);
        java.lang.String str25 = days21.toString();
        org.joda.time.Days days27 = days21.plus((-10));
        org.joda.time.Days days29 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days31 = days29.multipliedBy((int) (short) 100);
        org.joda.time.Days days32 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        org.joda.time.Days days35 = days32.minus(0);
        org.joda.time.Days days36 = days29.minus(days35);
        java.lang.String str37 = days36.toString();
        org.joda.time.Days days38 = org.joda.time.Days.ONE;
        boolean boolean39 = days36.isLessThan(days38);
        org.joda.time.Days days40 = days36.negated();
        boolean boolean41 = days21.isGreaterThan(days36);
        boolean boolean42 = days20.isGreaterThan(days21);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Days days46 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType47 = days46.getPeriodType();
        org.joda.time.PeriodType periodType48 = periodType47.withHoursRemoved();
        org.joda.time.PeriodType periodType49 = periodType47.withSecondsRemoved();
        org.joda.time.Period period50 = duration44.toPeriodFrom(readableInstant45, periodType47);
        org.joda.time.Days days51 = duration44.toStandardDays();
        org.joda.time.Days days52 = org.joda.time.Days.MIN_VALUE;
        boolean boolean53 = days51.isLessThan(days52);
        java.lang.String str54 = days52.toString();
        org.joda.time.Days days56 = days52.plus((int) (byte) 100);
        org.joda.time.Days days58 = org.joda.time.Days.days(8);
        boolean boolean59 = days52.isGreaterThan(days58);
        org.joda.time.Days days61 = org.joda.time.Days.days(6);
        org.joda.time.Days days62 = org.joda.time.Days.FIVE;
        java.lang.String str63 = days62.toString();
        org.joda.time.Days days64 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType65 = days64.getPeriodType();
        org.joda.time.Days days67 = days64.minus(0);
        boolean boolean68 = days62.isLessThan(days67);
        org.joda.time.Days days69 = days61.plus(days67);
        org.joda.time.Days days70 = days58.plus(days67);
        org.joda.time.Days days72 = org.joda.time.Days.parseDays("P10D");
        org.joda.time.Days days73 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType74 = days73.getPeriodType();
        org.joda.time.Days days76 = days73.plus((int) (byte) 100);
        boolean boolean77 = days72.isLessThan(days76);
        org.joda.time.DurationFieldType durationFieldType78 = days72.getFieldType();
        org.joda.time.Days days79 = days70.minus(days72);
        boolean boolean80 = days21.isGreaterThan(days72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days82 = days72.multipliedBy(268435455);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 10 * 268435455");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "P5D" + "'", str7, "P5D");
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P5D" + "'", str22, "P5D");
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P5D" + "'", str25, "P5D");
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P0D" + "'", str37, "P0D");
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P-2147483648D" + "'", str54, "P-2147483648D");
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P5D" + "'", str63, "P5D");
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertNotNull(days73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(days79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.plusMinutes(1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period1.toDurationTo(readableInstant5);
        org.joda.time.Period period8 = org.joda.time.Period.millis((int) '#');
        int int9 = period8.getYears();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Period period11 = period8.withFields(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period8.toDurationTo(readableInstant12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Interval interval15 = duration13.toIntervalFrom(readableInstant14);
        org.joda.time.Duration duration16 = duration6.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration13.toIntervalTo(readableInstant17);
        org.joda.time.Period period19 = duration13.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 1, periodType9, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType9);
        org.joda.time.Days days16 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter2.withParseType(periodType17);
        org.joda.time.format.PeriodPrinter periodPrinter21 = periodFormatter2.getPrinter();
        java.util.Locale locale22 = periodFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.FIVE;
        java.lang.String str25 = days24.toString();
        org.joda.time.Days days27 = days24.multipliedBy((int) (byte) -1);
        org.joda.time.Days days28 = days24.negated();
        org.joda.time.Duration duration29 = days24.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, readableInstant30);
        java.lang.Object obj32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(obj32);
        org.joda.time.Period period35 = period33.minusWeeks((int) (short) 100);
        org.joda.time.Period period36 = period31.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period38 = period35.plusYears((-36));
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer23, (org.joda.time.ReadablePeriod) period35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(periodPrinter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P5D" + "'", str25, "P5D");
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Period period7 = period3.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType8 = period3.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (-2), periodType9, chronology11);
        int int13 = periodType9.size();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        int int2 = weeks0.size();
        org.joda.time.PeriodType periodType3 = weeks0.getPeriodType();
        org.joda.time.Weeks weeks5 = weeks0.minus(7);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks8 = weeks7.negated();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        boolean boolean13 = weeks8.isGreaterThan(weeks11);
        org.joda.time.Weeks weeks14 = null;
        org.joda.time.Weeks weeks15 = weeks11.minus(weeks14);
        org.joda.time.DurationFieldType durationFieldType16 = weeks15.getFieldType();
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks20 = weeks19.negated();
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn(readableInterval22);
        boolean boolean24 = weeks21.isLessThan(weeks23);
        boolean boolean25 = weeks20.isGreaterThan(weeks23);
        boolean boolean26 = weeks17.isLessThan(weeks20);
        org.joda.time.Weeks weeks27 = weeks15.plus(weeks20);
        org.joda.time.Weeks weeks29 = weeks20.minus(2);
        org.joda.time.Weeks weeks31 = weeks29.dividedBy((-10));
        org.joda.time.Weeks weeks32 = weeks31.negated();
        org.joda.time.Weeks weeks33 = weeks0.plus(weeks31);
        java.lang.String str34 = weeks31.toString();
        org.joda.time.Duration duration35 = weeks31.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType36 = weeks31.getFieldType();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "P0W" + "'", str34, "P0W");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(durationFieldType36);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks3 = weeks2.negated();
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.weeksIn(readableInterval5);
        boolean boolean7 = weeks4.isLessThan(weeks6);
        boolean boolean8 = weeks3.isGreaterThan(weeks6);
        boolean boolean9 = weeks0.isLessThan(weeks3);
        org.joda.time.Duration duration10 = weeks0.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, readableInstant11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.millis((long) (short) 1);
        java.lang.String str15 = duration14.toString();
        int int16 = duration10.compareTo((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration18 = duration10.withMillis((long) (short) -1);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '4');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        boolean boolean23 = duration10.isEqual((org.joda.time.ReadableDuration) duration22);
        long long24 = duration10.getMillis();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.001S" + "'", str15, "PT0.001S");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1298798110310400000L) + "'", long24 == (-1298798110310400000L));
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        int int2 = period1.getYears();
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = period1.getFieldTypes();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.forFields(durationFieldTypeArray3);
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        long long8 = duration7.getStandardSeconds();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period11.minusMonths(0);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        org.joda.time.Minutes minutes17 = minutes14.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration18 = minutes14.toStandardDuration();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period23 = period21.minusMonths(0);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Period period26 = duration25.toPeriod();
        boolean boolean27 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        org.joda.time.Period period30 = duration18.toPeriodTo(readableInstant28, periodType29);
        org.joda.time.Duration duration31 = duration7.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration32 = duration31.toDuration();
        long long33 = duration31.getStandardHours();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period45 = period43.minusMonths(0);
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Duration duration47 = minutes46.toStandardDuration();
        boolean boolean48 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration47, readableInstant49);
        long long51 = duration47.getStandardHours();
        org.joda.time.Period period52 = duration47.toPeriod();
        org.joda.time.Duration duration53 = duration31.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableDuration readableDuration54 = null;
        boolean boolean55 = duration53.isEqual(readableDuration54);
        boolean boolean56 = periodType5.equals((java.lang.Object) boolean55);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-128849018880L) + "'", long8 == (-128849018880L));
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-35791394L) + "'", long33 == (-35791394L));
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.Period period4 = org.joda.time.Period.millis((int) '#');
        int int5 = period4.getYears();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Period period7 = period4.withFields(readablePeriod6);
        org.joda.time.Period period9 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes10 = period9.toStandardMinutes();
        org.joda.time.Period period12 = period9.minusMonths(100);
        org.joda.time.Period period14 = period12.minusYears((int) (short) 10);
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period17 = period12.minusMillis((int) (short) 10);
        org.joda.time.Period period18 = period4.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period20 = period4.plusSeconds(10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Duration duration28 = minutes27.toStandardDuration();
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.plus((long) (byte) 0);
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant21, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((java.lang.Object) duration31, periodType33, chronology34);
        org.joda.time.PeriodType periodType36 = periodType33.withDaysRemoved();
        org.joda.time.Period period37 = period4.normalizedStandard(periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((long) 2147483645, periodType36);
        org.joda.time.PeriodType periodType39 = periodType36.withWeeksRemoved();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((-5700000L), (long) (short) 10, periodType39, chronology40);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P-100M10D" + "'", str15, "P-100M10D");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("P104W");
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeks(35);
        org.joda.time.Weeks weeks5 = weeks3.multipliedBy(5);
        org.joda.time.MutablePeriod mutablePeriod6 = weeks5.toMutablePeriod();
        boolean boolean7 = weeks1.isGreaterThan(weeks5);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '4');
        org.joda.time.Period period3 = period1.minusMonths((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        java.lang.String str5 = durationFieldType4.getName();
        org.joda.time.Period period7 = period3.withFieldAdded(durationFieldType4, (-10));
        org.joda.time.Period period9 = period3.withMonths(5);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "years" + "'", str5, "years");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (byte) 1);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("PT432000.031S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PeriodType[StandardNoHours]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[StandardNoHours]\" is malformed at \"eriodType[StandardNoHours]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.PeriodType periodType8 = periodType6.withSecondsRemoved();
        org.joda.time.Period period9 = duration3.toPeriodFrom(readableInstant4, periodType6);
        long long10 = duration3.getMillis();
        org.joda.time.Days days13 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType14.withSecondsRemoved();
        org.joda.time.PeriodType periodType17 = periodType14.withMinutesRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(10L, (long) (byte) -1, periodType18, chronology19);
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration3, periodType18);
        org.joda.time.Duration duration22 = duration3.toDuration();
        org.joda.time.Days days23 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType24 = days23.getPeriodType();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType26 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType27 = periodType24.withSecondsRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withMinutesRemoved();
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3, periodType28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType31 = period29.getFieldType(776);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100000L + "'", long10 == 100000L);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT3120S");
        org.joda.time.Duration duration2 = seconds1.toStandardDuration();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.joda.time.Period period1 = org.joda.time.Period.hours(105);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes16 = minutes13.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration17 = minutes13.toStandardDuration();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period22 = period20.minusMonths(0);
        org.joda.time.Minutes minutes23 = period22.toStandardMinutes();
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        org.joda.time.Period period25 = duration24.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = duration6.isEqual((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration29 = duration6.plus((long) (short) 100);
        org.joda.time.Duration duration31 = duration29.minus((long) '4');
        org.joda.time.Duration duration34 = duration31.withDurationAdded(6000000L, 4);
        long long35 = duration31.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = duration31.toPeriodTo(readableInstant36);
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period42 = period40.minusMonths(0);
        org.joda.time.Minutes minutes43 = period42.toStandardMinutes();
        org.joda.time.Duration duration44 = minutes43.toStandardDuration();
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Duration duration49 = duration44.withMillis((long) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period56 = period54.minusMonths(0);
        org.joda.time.Minutes minutes57 = period56.toStandardMinutes();
        org.joda.time.Duration duration58 = minutes57.toStandardDuration();
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration61 = duration58.plus((long) (byte) 0);
        org.joda.time.Period period62 = new org.joda.time.Period(readableInstant51, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration63 = duration49.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = duration49.toDuration();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Period period66 = duration49.toPeriodTo(readableInstant65);
        boolean boolean67 = duration31.equals((java.lang.Object) duration49);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod2 = hours1.toMutablePeriod();
        org.joda.time.Days days3 = hours1.toStandardDays();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (byte) 0);
        org.joda.time.Period period5 = period1.plusSeconds((int) '4');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period1.toDurationFrom(readableInstant6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration12 = duration10.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration19 = duration16.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (byte) 0);
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration23 = seconds22.toStandardDuration();
        int int24 = duration21.compareTo((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType28);
        org.joda.time.PeriodType periodType30 = periodType28.withMinutesRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, readableInstant25, periodType28);
        long long32 = duration23.getStandardHours();
        boolean boolean33 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration23);
        long long34 = duration23.getMillis();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3000L + "'", long34 == 3000L);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 377884);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period21 = period19.minusMonths(0);
        org.joda.time.Minutes minutes22 = period21.toStandardMinutes();
        org.joda.time.Duration duration23 = minutes22.toStandardDuration();
        boolean boolean24 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = new org.joda.time.Duration(readableInstant25, readableInstant26);
        org.joda.time.Duration duration28 = duration16.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration29 = duration16.toDuration();
        org.joda.time.Duration duration30 = duration9.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period36 = period34.minusMonths(0);
        org.joda.time.Minutes minutes37 = period36.toStandardMinutes();
        org.joda.time.Duration duration38 = minutes37.toStandardDuration();
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.plus((long) (byte) 0);
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant31, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration43 = duration9.plus((org.joda.time.ReadableDuration) duration41);
        long long44 = duration9.getStandardSeconds();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Period period46 = duration9.toPeriodTo(readableInstant45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Period period48 = duration9.toPeriodFrom(readableInstant47);
        org.joda.time.Period period49 = period48.toPeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.joda.time.Days days0 = org.joda.time.Days.FOUR;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period3.negated();
        int int5 = period3.getHours();
        int int6 = period3.getWeeks();
        org.joda.time.Days days8 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days10 = days8.multipliedBy((int) (short) 100);
        org.joda.time.Days days11 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType12 = days11.getPeriodType();
        org.joda.time.Days days14 = days11.minus(0);
        org.joda.time.Days days15 = days8.minus(days14);
        org.joda.time.Days days16 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days15);
        boolean boolean17 = period3.equals((java.lang.Object) days15);
        boolean boolean18 = days0.isGreaterThan(days15);
        org.joda.time.Days days20 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days22 = days20.multipliedBy((int) (short) 100);
        org.joda.time.Duration duration23 = days20.toStandardDuration();
        org.joda.time.Days days24 = org.joda.time.Days.FOUR;
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period28 = period27.negated();
        int int29 = period27.getHours();
        int int30 = period27.getWeeks();
        org.joda.time.Days days32 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days34 = days32.multipliedBy((int) (short) 100);
        org.joda.time.Days days35 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        org.joda.time.Days days38 = days35.minus(0);
        org.joda.time.Days days39 = days32.minus(days38);
        org.joda.time.Days days40 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days39);
        boolean boolean41 = period27.equals((java.lang.Object) days39);
        boolean boolean42 = days24.isGreaterThan(days39);
        org.joda.time.Days days43 = days20.minus(days39);
        org.joda.time.Days days44 = days15.plus(days39);
        org.joda.time.PeriodType periodType45 = days39.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod46 = days39.toMutablePeriod();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((-2147483646));
        org.joda.time.Period period3 = period1.withMonths((-87));
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = period3.getValue((-37));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        org.joda.time.Minutes minutes18 = minutes15.multipliedBy((int) (short) 1);
        int int19 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes18);
        org.joda.time.DurationFieldType durationFieldType20 = minutes18.getFieldType();
        org.joda.time.Minutes minutes21 = minutes18.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration22 = new org.joda.time.Duration((java.lang.Object) minutes18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Minutes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-596L));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(11L);
        org.joda.time.Minutes minutes5 = duration4.toStandardMinutes();
        org.joda.time.PeriodType periodType6 = minutes5.getPeriodType();
        org.joda.time.Period period7 = duration1.toPeriodTo(readableInstant2, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration1.toPeriodFrom(readableInstant8);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(200L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Period period8 = period5.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period8.toDurationFrom(readableInstant10);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Duration duration18 = minutes17.toStandardDuration();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period23 = period21.minusMonths(0);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Duration duration27 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (short) 100);
        org.joda.time.Duration duration29 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration27, 3);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration34 = duration32.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, readableInstant35);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period41 = period39.minusMonths(0);
        org.joda.time.Minutes minutes42 = period41.toStandardMinutes();
        org.joda.time.Duration duration43 = minutes42.toStandardDuration();
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period48 = period46.minusMonths(0);
        org.joda.time.Minutes minutes49 = period48.toStandardMinutes();
        org.joda.time.Duration duration50 = minutes49.toStandardDuration();
        boolean boolean51 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = new org.joda.time.Duration(readableInstant52, readableInstant53);
        org.joda.time.Duration duration55 = duration43.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration56 = duration43.toDuration();
        boolean boolean57 = duration34.isEqual((org.joda.time.ReadableDuration) duration56);
        long long58 = duration56.getStandardDays();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = duration56.toPeriod(chronology59);
        org.joda.time.Duration duration63 = duration56.withDurationAdded(0L, (int) ' ');
        boolean boolean64 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType66 = periodType65.withMillisRemoved();
        org.joda.time.Period period68 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.months();
        boolean boolean70 = period68.isSupported(durationFieldType69);
        java.lang.String str71 = durationFieldType69.getName();
        int int72 = periodType65.indexOf(durationFieldType69);
        org.joda.time.PeriodType periodType73 = periodType65.withMillisRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((java.lang.Object) duration11, periodType73);
        org.joda.time.Period period75 = duration1.toPeriodFrom(readableInstant2, periodType73);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "months" + "'", str71, "months");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period2 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period3 = period2.toPeriod();
        org.joda.time.Period period5 = period2.plusMinutes(1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period2.toDurationTo(readableInstant6);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Days days12 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withSecondsRemoved();
        org.joda.time.Period period16 = duration10.toPeriodFrom(readableInstant11, periodType13);
        long long17 = duration10.getStandardHours();
        org.joda.time.Duration duration20 = duration10.withDurationAdded(10L, (-36));
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration24 = duration20.withDurationAdded((long) ' ', (int) (byte) 0);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period29 = period27.minusMonths(0);
        org.joda.time.Period period31 = period27.minusSeconds((int) (byte) 100);
        org.joda.time.Days days32 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        org.joda.time.PeriodType periodType34 = periodType33.withHoursRemoved();
        org.joda.time.PeriodType periodType35 = periodType33.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        boolean boolean37 = periodType35.isSupported(durationFieldType36);
        int int38 = period27.get(durationFieldType36);
        org.joda.time.Period period40 = period27.withHours(1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration42 = period27.toDurationTo(readableInstant41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = duration42.toPeriodTo(readableInstant43);
        int int45 = duration24.compareTo((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Days days50 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType51 = days50.getPeriodType();
        org.joda.time.PeriodType periodType52 = periodType51.withHoursRemoved();
        org.joda.time.PeriodType periodType53 = periodType51.withSecondsRemoved();
        org.joda.time.PeriodType periodType54 = periodType51.withMinutesRemoved();
        org.joda.time.PeriodType periodType55 = periodType54.withWeeksRemoved();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period(10L, (long) (byte) -1, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withYearsRemoved();
        boolean boolean59 = periodType47.equals((java.lang.Object) periodType55);
        org.joda.time.Period period60 = duration42.toPeriodTo(readableInstant46, periodType55);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays(1L);
        boolean boolean63 = duration42.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = duration42.toPeriod(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Days days67 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType68 = days67.getPeriodType();
        org.joda.time.PeriodType periodType69 = periodType68.withHoursRemoved();
        org.joda.time.PeriodType periodType70 = periodType68.withYearsRemoved();
        org.joda.time.PeriodType periodType71 = periodType68.withSecondsRemoved();
        org.joda.time.PeriodType periodType72 = periodType68.withHoursRemoved();
        int int73 = periodType72.size();
        org.joda.time.Period period74 = duration42.toPeriodTo(readableInstant66, periodType72);
        org.joda.time.Period period75 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration7, periodType72);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Interval interval77 = duration7.toIntervalTo(readableInstant76);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval77);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Duration duration3 = weeks2.toStandardDuration();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeksIn(readableInterval1);
        boolean boolean3 = weeks0.isLessThan(weeks2);
        org.joda.time.Weeks weeks5 = weeks2.multipliedBy(10);
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.ZERO;
        java.lang.String str7 = weeks6.toString();
        int int8 = weeks6.size();
        org.joda.time.PeriodType periodType9 = weeks6.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod10 = weeks6.toMutablePeriod();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks13 = weeks12.negated();
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksIn(readableInterval15);
        boolean boolean17 = weeks14.isLessThan(weeks16);
        boolean boolean18 = weeks13.isGreaterThan(weeks16);
        org.joda.time.Weeks weeks19 = null;
        org.joda.time.Weeks weeks20 = weeks16.minus(weeks19);
        org.joda.time.DurationFieldType durationFieldType21 = weeks20.getFieldType();
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks25 = weeks24.negated();
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.weeksIn(readableInterval27);
        boolean boolean29 = weeks26.isLessThan(weeks28);
        boolean boolean30 = weeks25.isGreaterThan(weeks28);
        boolean boolean31 = weeks22.isLessThan(weeks25);
        org.joda.time.Weeks weeks32 = weeks20.plus(weeks25);
        org.joda.time.Weeks weeks34 = weeks25.minus(2);
        org.joda.time.Weeks weeks36 = weeks34.dividedBy((-10));
        org.joda.time.Weeks weeks37 = weeks36.negated();
        boolean boolean38 = weeks6.isLessThan(weeks37);
        org.joda.time.Weeks weeks39 = weeks2.minus(weeks37);
        int int40 = weeks37.getWeeks();
        org.joda.time.Weeks weeks42 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks43 = weeks42.negated();
        org.joda.time.Weeks weeks44 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.Weeks weeks46 = org.joda.time.Weeks.weeksIn(readableInterval45);
        boolean boolean47 = weeks44.isLessThan(weeks46);
        boolean boolean48 = weeks43.isGreaterThan(weeks46);
        org.joda.time.Weeks weeks49 = weeks37.minus(weeks46);
        java.lang.String str50 = weeks49.toString();
        org.joda.time.Weeks weeks52 = weeks49.multipliedBy((-8));
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "P0W" + "'", str7, "P0W");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "P0W" + "'", str50, "P0W");
        org.junit.Assert.assertNotNull(weeks52);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Period period8 = period7.normalizedStandard();
        org.joda.time.Period period9 = period8.negated();
        org.joda.time.Period period11 = period8.plusMonths(3);
        org.joda.time.Period period13 = period8.withMinutes((-1680));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        int int2 = weeks0.size();
        org.joda.time.PeriodType periodType3 = weeks0.getPeriodType();
        org.joda.time.Weeks weeks5 = weeks0.minus(7);
        java.lang.String str6 = weeks0.toString();
        java.lang.String str7 = weeks0.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = weeks0.getValue(400);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 400");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P0W" + "'", str6, "P0W");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "P0W" + "'", str7, "P0W");
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        long long4 = duration3.getStandardSeconds();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period9 = period7.minusMonths(0);
        org.joda.time.Minutes minutes10 = period9.toStandardMinutes();
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes10.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration14 = minutes10.toStandardDuration();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        org.joda.time.Period period22 = duration21.toPeriod();
        boolean boolean23 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.Period period26 = duration14.toPeriodTo(readableInstant24, periodType25);
        org.joda.time.Duration duration27 = duration3.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period32 = period30.minusMonths(0);
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period39 = period37.minusMonths(0);
        org.joda.time.Minutes minutes40 = period39.toStandardMinutes();
        org.joda.time.Duration duration41 = minutes40.toStandardDuration();
        boolean boolean42 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, readableInstant43);
        long long45 = duration41.getStandardHours();
        org.joda.time.Duration duration46 = duration14.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) 0);
        java.lang.String str49 = duration48.toString();
        org.joda.time.Duration duration51 = duration48.minus((long) 10);
        org.joda.time.Duration duration53 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration48, (int) 'a');
        boolean boolean55 = duration53.equals((java.lang.Object) "P35W");
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withMinutesRemoved();
        org.joda.time.PeriodType periodType62 = periodType59.withDaysRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, readableInstant56, periodType59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((-2147483L), (long) 3, periodType59, chronology64);
        org.joda.time.Period period68 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period70 = period68.minusMonths(0);
        org.joda.time.Period period72 = period70.minusSeconds(0);
        org.joda.time.Period period73 = period72.normalizedStandard();
        org.joda.time.Period period75 = period72.withDays((int) (byte) 1);
        org.joda.time.Period period77 = period75.plusMonths((-53));
        org.joda.time.Period period79 = period75.minusMonths(105);
        boolean boolean80 = periodType59.equals((java.lang.Object) period75);
        org.joda.time.PeriodType periodType81 = periodType59.withMinutesRemoved();
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-128849018880L) + "'", long4 == (-128849018880L));
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0S" + "'", str49, "PT0S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodType81);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        org.joda.time.Period period15 = period2.withHours(1);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Period period22 = period18.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        java.lang.String str25 = periodType24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) period2, periodType24, chronology26);
        org.joda.time.Period period28 = period2.toPeriod();
        org.joda.time.Period period30 = period28.withMillis(3);
        org.joda.time.Period period31 = period30.toPeriod();
        org.joda.time.Period period33 = period31.withYears(14402);
        int int34 = period31.getMinutes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str25, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) (byte) -1);
        org.joda.time.Period period3 = period1.withYears(268435465);
        org.joda.time.Period period5 = period3.minusMinutes((int) '4');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        org.joda.time.Period period17 = duration16.toPeriod();
        boolean boolean18 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        org.joda.time.Period period21 = duration9.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = duration9.toPeriodFrom(readableInstant22);
        org.joda.time.Period period24 = period23.negated();
        int int25 = period23.getHours();
        org.joda.time.Period period27 = period23.plusHours((int) ' ');
        org.joda.time.Period period29 = period23.minusMillis((-214748364));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        java.lang.Object obj4 = null;
        boolean boolean5 = weeks2.equals(obj4);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks((int) (short) 1);
        org.joda.time.Weeks weeks9 = weeks7.dividedBy(100);
        org.joda.time.Weeks weeks10 = weeks2.minus(weeks9);
        org.joda.time.Weeks weeks12 = weeks9.plus(35);
        org.joda.time.Weeks weeks14 = weeks9.multipliedBy(10);
        org.joda.time.Duration duration15 = weeks9.toStandardDuration();
        org.joda.time.Weeks weeks17 = weeks9.multipliedBy((int) (short) 100);
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks20 = weeks18.dividedBy(1);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.MIN_VALUE;
        boolean boolean22 = weeks20.isGreaterThan(weeks21);
        org.joda.time.Duration duration23 = weeks20.toStandardDuration();
        int int24 = weeks20.getWeeks();
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks20);
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks28 = weeks27.negated();
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.weeksIn(readableInterval30);
        boolean boolean32 = weeks29.isLessThan(weeks31);
        boolean boolean33 = weeks28.isGreaterThan(weeks31);
        org.joda.time.Weeks weeks34 = null;
        org.joda.time.Weeks weeks35 = weeks31.minus(weeks34);
        org.joda.time.DurationFieldType durationFieldType36 = weeks35.getFieldType();
        org.joda.time.Weeks weeks37 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks39 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks40 = weeks39.negated();
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.weeksIn(readableInterval42);
        boolean boolean44 = weeks41.isLessThan(weeks43);
        boolean boolean45 = weeks40.isGreaterThan(weeks43);
        boolean boolean46 = weeks37.isLessThan(weeks40);
        org.joda.time.Weeks weeks47 = weeks35.plus(weeks40);
        org.joda.time.Weeks weeks49 = weeks40.minus(2);
        org.joda.time.Weeks weeks50 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks52 = weeks50.dividedBy(1);
        org.joda.time.Weeks weeks54 = weeks50.dividedBy(8);
        org.joda.time.Weeks weeks55 = weeks49.plus(weeks50);
        org.joda.time.Weeks weeks56 = null;
        boolean boolean57 = weeks55.isLessThan(weeks56);
        org.joda.time.Weeks weeks58 = weeks20.minus(weeks55);
        org.joda.time.Weeks weeks60 = weeks55.dividedBy((-36));
        org.joda.time.Weeks weeks61 = weeks17.minus(weeks55);
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.weeks(3);
        org.joda.time.PeriodType periodType64 = weeks63.getPeriodType();
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.Weeks weeks66 = org.joda.time.Weeks.weeksIn(readableInterval65);
        org.joda.time.Weeks weeks68 = weeks66.plus(11);
        org.joda.time.Weeks weeks70 = weeks66.plus((int) (short) 100);
        org.joda.time.Weeks weeks72 = weeks70.dividedBy((int) (short) 10);
        org.joda.time.Weeks weeks73 = weeks63.plus(weeks70);
        org.joda.time.Weeks weeks74 = weeks17.plus(weeks70);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(weeks66);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertNotNull(weeks70);
        org.junit.Assert.assertNotNull(weeks72);
        org.junit.Assert.assertNotNull(weeks73);
        org.junit.Assert.assertNotNull(weeks74);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 0, (long) 59);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (byte) 0);
        org.joda.time.Period period5 = period1.plusSeconds((int) '4');
        org.joda.time.Period period7 = period5.withSeconds(11);
        org.joda.time.Period period8 = period7.normalizedStandard();
        org.joda.time.Period period10 = period7.minusHours((-49));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Hours hours2 = hours0.negated();
        org.joda.time.Duration duration3 = hours0.toStandardDuration();
        org.joda.time.Duration duration4 = hours0.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours6 = hours0.minus((-207432000));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 207432000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period2.getFieldTypes();
        org.joda.time.Period period9 = period2.withMinutes(13);
        org.joda.time.Period period10 = period9.normalizedStandard();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.Days days3 = period2.toStandardDays();
        org.joda.time.Days days5 = days3.minus(7);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((-128849018880000L));
        org.joda.time.Days days8 = duration7.toStandardDays();
        int int9 = days8.getDays();
        org.joda.time.Days days10 = days5.minus(days8);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1491308) + "'", int9 == (-1491308));
        org.junit.Assert.assertNotNull(days10);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days3 = days0.plus((int) (byte) 100);
        org.joda.time.Days days5 = days0.plus((int) (byte) 10);
        org.joda.time.Days days7 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days9 = days7.multipliedBy((int) (short) 100);
        org.joda.time.Days days10 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.Days days13 = days10.minus(0);
        org.joda.time.Days days14 = days7.minus(days13);
        org.joda.time.Period period16 = org.joda.time.Period.hours((-1));
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration21 = duration19.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Days days27 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        org.joda.time.PeriodType periodType29 = periodType28.withHoursRemoved();
        org.joda.time.PeriodType periodType30 = periodType28.withSecondsRemoved();
        org.joda.time.Period period31 = duration25.toPeriodFrom(readableInstant26, periodType28);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        boolean boolean33 = periodType28.equals((java.lang.Object) durationFieldType32);
        java.lang.String str34 = durationFieldType32.getName();
        org.joda.time.Period period36 = period23.withFieldAdded(durationFieldType32, 8);
        boolean boolean37 = period16.isSupported(durationFieldType32);
        org.joda.time.Chronology chronology38 = null;
        boolean boolean39 = durationFieldType32.isSupported(chronology38);
        boolean boolean40 = days14.isSupported(durationFieldType32);
        org.joda.time.Days days41 = days5.minus(days14);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "minutes" + "'", str34, "minutes");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(days41);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = seconds1.plus(seconds2);
        org.joda.time.PeriodType periodType4 = seconds1.getPeriodType();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 'a', periodType4);
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Seconds seconds7 = period6.toStandardSeconds();
        org.joda.time.Seconds seconds8 = null;
        boolean boolean9 = seconds7.isGreaterThan(seconds8);
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = seconds10.plus(seconds11);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.ONE;
        boolean boolean14 = seconds11.isGreaterThan(seconds13);
        org.joda.time.Duration duration15 = seconds13.toStandardDuration();
        org.joda.time.Seconds seconds16 = seconds13.negated();
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.ONE;
        org.joda.time.Period period18 = seconds17.toPeriod();
        org.joda.time.Seconds seconds20 = seconds17.multipliedBy((int) (byte) -1);
        org.joda.time.Seconds seconds21 = seconds13.plus(seconds20);
        org.joda.time.Seconds seconds22 = seconds7.minus(seconds21);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.withWeeks((-1));
        org.joda.time.Period period6 = period4.minusMillis(0);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period8 = mutablePeriod7.toPeriod();
        org.joda.time.Period period10 = period8.withMonths(0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(52000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withYearsRemoved();
        java.lang.String str12 = periodType11.toString();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter7.withParseType(periodType11);
        org.joda.time.PeriodType periodType14 = periodFormatter13.getParseType();
        java.util.Locale locale15 = periodFormatter13.getLocale();
        java.util.Locale locale16 = periodFormatter13.getLocale();
        org.joda.time.format.PeriodParser periodParser17 = periodFormatter13.getParser();
        boolean boolean18 = periodFormatter13.isParser();
        java.util.Locale locale19 = null;
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter13.withLocale(locale19);
        org.joda.time.PeriodType periodType21 = periodFormatter20.getParseType();
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Duration duration28 = minutes27.toStandardDuration();
        org.joda.time.Minutes minutes30 = minutes27.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes32 = minutes30.multipliedBy(2);
        org.joda.time.Duration duration33 = minutes32.toStandardDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        org.joda.time.Minutes minutes42 = minutes39.multipliedBy((int) (short) 1);
        java.lang.String str43 = minutes42.toString();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration48 = duration46.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration48, readableInstant49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration48.toIntervalFrom(readableInstant51);
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Minutes minutes55 = minutes53.multipliedBy((-95));
        org.joda.time.Minutes minutes56 = minutes42.minus(minutes55);
        boolean boolean57 = minutes32.isGreaterThan(minutes42);
        org.joda.time.Minutes minutes59 = minutes42.minus((-64));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = periodFormatter20.print((org.joda.time.ReadablePeriod) minutes42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[Days]" + "'", str12, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNull(periodParser17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0M" + "'", str43, "PT0M");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(minutes59);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (short) 1);
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period5 = period3.plusHours((int) (short) -1);
        org.joda.time.Period period7 = period3.plusDays(100);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        boolean boolean22 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.Duration duration26 = duration14.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant27);
        org.joda.time.Duration duration30 = duration14.plus((long) 8);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration30.toIntervalFrom(readableInstant31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period37 = period35.minusMonths(0);
        org.joda.time.Minutes minutes38 = period37.toStandardMinutes();
        org.joda.time.Duration duration39 = minutes38.toStandardDuration();
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period44 = period42.minusMonths(0);
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        boolean boolean47 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration49 = duration39.plus((long) (short) 10);
        org.joda.time.Duration duration51 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (byte) 0);
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = duration52.toPeriodFrom(readableInstant53);
        org.joda.time.Period period56 = period54.minusWeeks(7);
        int int57 = period54.getYears();
        org.joda.time.Period period58 = period7.withFields((org.joda.time.ReadablePeriod) period54);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Hours hours3 = duration1.toStandardHours();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Interval interval5 = duration1.toIntervalFrom(readableInstant4);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.multipliedBy((int) (byte) -1);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Days days5 = org.joda.time.Days.ONE;
        org.joda.time.Days days6 = org.joda.time.Days.ONE;
        int int7 = days5.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days6);
        org.joda.time.Days days9 = days6.multipliedBy((int) '#');
        org.joda.time.Days days10 = days4.minus(days6);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration15 = duration13.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, readableInstant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Interval interval19 = duration15.toIntervalFrom(readableInstant18);
        org.joda.time.Days days20 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Days days22 = days20.minus((int) '4');
        org.joda.time.Days days24 = days20.minus((int) 'a');
        org.joda.time.Days days25 = days6.plus(days24);
        org.joda.time.Days days27 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days29 = days27.multipliedBy((int) (short) 100);
        org.joda.time.Days days30 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType31 = days30.getPeriodType();
        org.joda.time.Days days33 = days30.minus(0);
        org.joda.time.Days days34 = days27.minus(days33);
        org.joda.time.Days days35 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days34);
        org.joda.time.Days days37 = days35.minus((-1));
        org.joda.time.Days days38 = days24.plus(days37);
        org.joda.time.Days days40 = days24.plus((-36));
        org.joda.time.Days days41 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType42 = days41.getPeriodType();
        org.joda.time.Days days44 = days41.plus((int) (byte) 100);
        org.joda.time.Days days45 = org.joda.time.Days.FIVE;
        java.lang.String str46 = days45.toString();
        org.joda.time.Days days48 = days45.multipliedBy((int) (byte) -1);
        org.joda.time.Days days49 = days45.negated();
        org.joda.time.Days days50 = org.joda.time.Days.ONE;
        org.joda.time.Days days51 = org.joda.time.Days.ONE;
        int int52 = days50.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days51);
        org.joda.time.Days days54 = days51.multipliedBy((int) '#');
        org.joda.time.Days days55 = days49.minus(days51);
        org.joda.time.DurationFieldType durationFieldType56 = days55.getFieldType();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Days days60 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType61 = days60.getPeriodType();
        org.joda.time.PeriodType periodType62 = periodType61.withHoursRemoved();
        org.joda.time.PeriodType periodType63 = periodType61.withSecondsRemoved();
        org.joda.time.Period period64 = duration58.toPeriodFrom(readableInstant59, periodType61);
        org.joda.time.Days days65 = duration58.toStandardDays();
        org.joda.time.Days days66 = org.joda.time.Days.MIN_VALUE;
        boolean boolean67 = days65.isLessThan(days66);
        org.joda.time.Period period68 = days66.toPeriod();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 35, (long) (byte) 1);
        org.joda.time.Period period72 = period71.toPeriod();
        org.joda.time.Days days73 = period72.toStandardDays();
        int int74 = days66.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days73);
        org.joda.time.Days days75 = days55.plus(days73);
        org.joda.time.Days days76 = days41.plus(days75);
        org.joda.time.Days days78 = days75.dividedBy((-50));
        boolean boolean79 = days24.isLessThan(days78);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P5D" + "'", str46, "P5D");
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(days73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 100, chronology1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Period period5 = period2.plusWeeks(572);
        org.joda.time.Period period7 = period2.minusMillis((-52));
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(0L, (-52876800000L), chronology2);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        java.lang.Object obj4 = null;
        boolean boolean5 = weeks2.equals(obj4);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks((int) (short) 1);
        org.joda.time.Weeks weeks9 = weeks7.dividedBy(100);
        org.joda.time.Weeks weeks10 = weeks2.minus(weeks9);
        org.joda.time.Weeks weeks12 = weeks9.plus(35);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeks(6);
        boolean boolean15 = weeks12.isGreaterThan(weeks14);
        java.lang.String str16 = weeks14.toString();
        int int17 = weeks14.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration18 = new org.joda.time.Duration((java.lang.Object) weeks14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Weeks");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P6W" + "'", str16, "P6W");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = seconds2.plus(seconds3);
        org.joda.time.Seconds seconds6 = seconds2.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds7 = seconds1.plus(seconds2);
        org.joda.time.Seconds seconds9 = seconds1.plus((int) '4');
        org.joda.time.Duration duration10 = seconds9.toStandardDuration();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.Seconds seconds17 = seconds13.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds18 = seconds12.plus(seconds13);
        org.joda.time.Seconds seconds20 = seconds12.plus((int) '4');
        org.joda.time.Duration duration21 = seconds20.toStandardDuration();
        boolean boolean22 = seconds9.isLessThan(seconds20);
        org.joda.time.Seconds seconds23 = seconds9.negated();
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period28 = period26.minusMonths(0);
        org.joda.time.Period period30 = period26.withMillis((int) (short) 0);
        int int31 = period30.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod32 = period30.toMutablePeriod();
        org.joda.time.Duration duration33 = period30.toStandardDuration();
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        org.joda.time.Seconds seconds35 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds36 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds37 = seconds35.plus(seconds36);
        org.joda.time.Seconds seconds39 = seconds35.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds40 = seconds34.minus(seconds39);
        int int41 = seconds40.size();
        org.joda.time.Seconds seconds42 = seconds23.plus(seconds40);
        int int43 = seconds23.getSeconds();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-52) + "'", int43 == (-52));
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalFrom(readableInstant7);
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Seconds seconds12 = seconds10.minus(13);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period15.minusMonths(0);
        org.joda.time.Period period19 = period15.withMillis((int) (short) 0);
        int int20 = period19.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType24 = seconds23.getFieldType();
        org.joda.time.Seconds seconds25 = seconds23.negated();
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.seconds((int) '#');
        int int28 = seconds27.getSeconds();
        org.joda.time.Seconds seconds30 = seconds27.dividedBy((int) (short) 1);
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds33 = seconds31.plus(seconds32);
        java.lang.String str34 = seconds31.toString();
        org.joda.time.DurationFieldType durationFieldType35 = seconds31.getFieldType();
        org.joda.time.Seconds seconds37 = seconds31.multipliedBy(0);
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration39 = seconds38.toStandardDuration();
        boolean boolean40 = seconds37.isGreaterThan(seconds38);
        org.joda.time.DurationFieldType durationFieldType42 = seconds37.getFieldType((int) (short) 0);
        boolean boolean43 = seconds30.isGreaterThan(seconds37);
        org.joda.time.Seconds seconds44 = seconds25.minus(seconds37);
        org.joda.time.Seconds seconds45 = seconds10.plus(seconds37);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT2S" + "'", str34, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds45);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withMinutesRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType4);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Hours hours9 = period8.toStandardHours();
        int int10 = period8.size();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period4.negated();
        int int6 = period4.getHours();
        org.joda.time.Period period8 = org.joda.time.Period.days(10);
        org.joda.time.Period period10 = period8.plusMonths((int) 'a');
        org.joda.time.Period period12 = period8.plusSeconds((int) (short) 100);
        org.joda.time.Period period14 = period12.minusMonths((int) 'a');
        org.joda.time.Period period15 = period4.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Hours hours16 = period4.toStandardHours();
        int int17 = hours16.getHours();
        org.joda.time.Hours hours18 = hours0.plus(hours16);
        org.joda.time.Hours hours19 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours21 = hours19.dividedBy(100);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Period period28 = period26.minusSeconds(0);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Hours hours30 = period29.toStandardHours();
        boolean boolean31 = hours21.isLessThan(hours30);
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) '#');
        int int34 = period33.getYears();
        org.joda.time.Hours hours35 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period33.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours38 = period37.toStandardHours();
        org.joda.time.Hours hours39 = hours21.minus(hours38);
        boolean boolean40 = hours16.isLessThan(hours38);
        org.joda.time.Hours hours41 = org.joda.time.Hours.ONE;
        java.lang.String str42 = hours41.toString();
        org.joda.time.Hours hours43 = hours41.negated();
        org.joda.time.Hours hours44 = hours38.plus(hours41);
        org.joda.time.Hours hours46 = hours38.dividedBy(8);
        java.lang.String str47 = hours38.toString();
        org.joda.time.DurationFieldType durationFieldType48 = hours38.getFieldType();
        org.joda.time.Hours hours50 = hours38.plus((-94));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1H" + "'", str42, "PT1H");
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0H" + "'", str47, "PT0H");
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(hours50);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.dividedBy((int) (byte) -1);
        org.joda.time.Weeks weeks4 = null;
        org.joda.time.Weeks weeks5 = weeks3.minus(weeks4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks3, chronology6);
        org.joda.time.PeriodType periodType8 = period7.getPeriodType();
        int int9 = period7.getYears();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
        org.joda.time.Period period3 = period1.minusMinutes((int) (byte) 0);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType5 = periodType4.withMillisRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.Period period8 = period3.plusMillis((-100));
        int int9 = period8.getSeconds();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str1 = periodType0.getName();
        boolean boolean3 = periodType0.equals((java.lang.Object) true);
        org.joda.time.PeriodType periodType4 = periodType0.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = periodType4.getFieldType((-41));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -41");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YearMonthDay" + "'", str1, "YearMonthDay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType2 = hours0.getFieldType();
        int int3 = hours0.getHours();
        org.joda.time.PeriodType periodType4 = hours0.getPeriodType();
        org.joda.time.Hours hours6 = hours0.plus((-2));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes7 = hours6.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483645 * 60");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (-95), (long) (-95), chronology2);
        org.joda.time.Period period5 = period3.plusMinutes(999);
        org.joda.time.Period period7 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        int int10 = period3.get(durationFieldType8);
        org.joda.time.Minutes minutes11 = period3.toStandardMinutes();
        int int12 = period3.getMillis();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period5 = period2.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period5.toDurationFrom(readableInstant7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) 100);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType15.withMinutesRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType19);
        org.joda.time.Duration duration21 = duration8.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.Duration duration23 = duration21.toDuration();
        org.joda.time.Duration duration25 = duration21.withMillis((long) 87);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) (-63));
        org.joda.time.Duration duration28 = duration25.plus((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType7 = period2.getPeriodType();
        org.joda.time.PeriodType periodType8 = period2.getPeriodType();
        org.joda.time.Period period10 = period2.plusMillis(0);
        org.joda.time.Period period12 = period2.minusHours(100);
        org.joda.time.Period period14 = period2.withSeconds((int) ' ');
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.Period period11 = duration5.toPeriodFrom(readableInstant6, periodType8);
        long long12 = duration5.getStandardHours();
        org.joda.time.Days days13 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = duration5.toPeriod(periodType14, chronology15);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType18 = periodType17.withMillisRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((java.lang.Object) period16, periodType18, chronology19);
        org.joda.time.Period period21 = new org.joda.time.Period((long) ' ', (long) (byte) -1, periodType18);
        org.joda.time.DurationFieldType[] durationFieldTypeArray22 = period21.getFieldTypes();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.forFields(durationFieldTypeArray22);
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period25 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.joda.time.Period period4 = new org.joda.time.Period((int) ' ', (-200), (-200), (int) 'a');
        org.joda.time.Period period5 = period4.toPeriod();
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = seconds2.plus(seconds3);
        org.joda.time.Seconds seconds6 = seconds2.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds7 = seconds1.plus(seconds2);
        org.joda.time.Seconds seconds9 = seconds1.plus((int) '4');
        org.joda.time.Duration duration10 = seconds9.toStandardDuration();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.Seconds seconds17 = seconds13.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds18 = seconds12.plus(seconds13);
        org.joda.time.Seconds seconds20 = seconds12.plus((int) '4');
        org.joda.time.Duration duration21 = seconds20.toStandardDuration();
        boolean boolean22 = seconds9.isLessThan(seconds20);
        org.joda.time.Seconds seconds23 = seconds9.negated();
        java.lang.String str24 = seconds9.toString();
        org.joda.time.Seconds seconds25 = seconds9.negated();
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.seconds(56);
        org.joda.time.Seconds seconds29 = seconds27.plus(11);
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.seconds((int) '#');
        int int32 = seconds31.getSeconds();
        org.joda.time.Seconds seconds34 = seconds31.dividedBy((int) (short) 1);
        int int35 = seconds34.getSeconds();
        boolean boolean36 = seconds27.isLessThan(seconds34);
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds39 = seconds37.plus(seconds38);
        java.lang.String str40 = seconds37.toString();
        org.joda.time.DurationFieldType durationFieldType41 = seconds37.getFieldType();
        java.lang.String str42 = seconds37.toString();
        org.joda.time.Seconds seconds43 = seconds34.minus(seconds37);
        org.joda.time.Seconds seconds44 = seconds9.minus(seconds34);
        org.joda.time.Seconds seconds45 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds46 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds47 = seconds45.plus(seconds46);
        java.lang.String str48 = seconds45.toString();
        org.joda.time.Seconds seconds50 = seconds45.minus(87);
        org.joda.time.Seconds seconds52 = seconds45.plus((int) (byte) 100);
        org.joda.time.Seconds seconds53 = seconds34.plus(seconds52);
        java.lang.String str54 = seconds53.toString();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT52S" + "'", str24, "PT52S");
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT2S" + "'", str40, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT2S" + "'", str42, "PT2S");
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT2S" + "'", str48, "PT2S");
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT137S" + "'", str54, "PT137S");
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        long long8 = duration1.getStandardHours();
        org.joda.time.Duration duration11 = duration1.withDurationAdded(10L, (-36));
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) ' ', (int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant16);
        org.joda.time.Period period19 = period17.withDays((int) (short) 0);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period22.minusMonths(0);
        org.joda.time.Period period26 = period22.minusSeconds((int) (byte) 100);
        org.joda.time.Days days27 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        org.joda.time.PeriodType periodType29 = periodType28.withHoursRemoved();
        org.joda.time.PeriodType periodType30 = periodType28.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        boolean boolean32 = periodType30.isSupported(durationFieldType31);
        int int33 = period22.get(durationFieldType31);
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = durationFieldType31.isSupported(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DurationField durationField37 = durationFieldType31.getField(chronology36);
        org.joda.time.Period period39 = period19.withField(durationFieldType31, (int) (short) 100);
        org.joda.time.Period period41 = period39.withHours((-5));
        int[] intArray42 = period39.getValues();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 100, 0, 1, 39, 640]");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Minutes minutes7 = minutes5.dividedBy((int) (byte) 100);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes16 = minutes13.multipliedBy((int) (short) 1);
        int int17 = minutes16.getMinutes();
        boolean boolean18 = minutes7.isGreaterThan(minutes16);
        int int19 = minutes7.getMinutes();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.Minutes minutes28 = minutes26.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes29 = minutes20.minus(minutes26);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period35 = period33.minusMonths(0);
        org.joda.time.Minutes minutes36 = period35.toStandardMinutes();
        org.joda.time.Minutes minutes38 = minutes36.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes39 = minutes30.minus(minutes36);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period44 = period42.minusMonths(0);
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.Minutes minutes48 = minutes45.multipliedBy((int) (short) 1);
        int int49 = minutes30.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes48);
        org.joda.time.Minutes minutes50 = minutes29.plus(minutes48);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period55 = period53.minusMonths(0);
        org.joda.time.Minutes minutes56 = period55.toStandardMinutes();
        org.joda.time.Duration duration57 = minutes56.toStandardDuration();
        org.joda.time.Minutes minutes59 = minutes56.multipliedBy((int) (short) 1);
        java.lang.String str60 = minutes59.toString();
        org.joda.time.Minutes minutes61 = minutes50.minus(minutes59);
        int int62 = minutes50.size();
        org.joda.time.Minutes minutes63 = minutes7.plus(minutes50);
        org.joda.time.Period period66 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Minutes minutes67 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Period period70 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period72 = period70.minusMonths(0);
        org.joda.time.Minutes minutes73 = period72.toStandardMinutes();
        org.joda.time.Minutes minutes74 = minutes67.minus(minutes73);
        org.joda.time.Minutes minutes76 = minutes73.dividedBy((-2));
        org.joda.time.Minutes minutes77 = minutes63.minus(minutes73);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = minutes63.getValue(2400);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2400");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0M" + "'", str60, "PT0M");
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertNotNull(minutes77);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Period period9 = period5.minusSeconds((int) (byte) 100);
        org.joda.time.Days days10 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        boolean boolean15 = periodType13.isSupported(durationFieldType14);
        int int16 = period5.get(durationFieldType14);
        org.joda.time.Period period18 = period5.withHours(1);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period23 = period21.minusMonths(0);
        org.joda.time.Period period25 = period21.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.PeriodType periodType27 = periodType26.withMinutesRemoved();
        java.lang.String str28 = periodType27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) period5, periodType27, chronology29);
        org.joda.time.PeriodType periodType31 = periodType27.withHoursRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant1, readableInstant2, periodType27);
        org.joda.time.PeriodType periodType33 = periodType27.withSecondsRemoved();
        org.joda.time.PeriodType periodType34 = periodType27.withYearsRemoved();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((-128849018880000L), periodType34, chronology35);
        org.joda.time.PeriodType periodType37 = periodType34.withDaysRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withMonthsRemoved();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str28, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType4 = periodType3.withMillisRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 0, periodType3);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period18 = duration16.toPeriod();
        int int19 = period18.getHours();
        org.joda.time.Period period21 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes22 = period21.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType23 = minutes22.getFieldType();
        int int24 = period18.get(durationFieldType23);
        boolean boolean25 = periodType3.isSupported(durationFieldType23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (-2147483648), (-2147483648L), periodType3);
        org.joda.time.PeriodType periodType27 = period26.getPeriodType();
        org.joda.time.PeriodType periodType28 = periodType27.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((-14399L), 353203200L, periodType2, chronology3);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days3 = days0.plus((int) (byte) 100);
        org.joda.time.Duration duration4 = days3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = duration4.toPeriodFrom(readableInstant5);
        java.lang.String str7 = duration4.toString();
        org.joda.time.Duration duration9 = duration4.plus((long) (short) 0);
        org.joda.time.Days days11 = org.joda.time.Days.days(1);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        boolean boolean13 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((-3600000L));
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration15.toPeriodFrom(readableInstant16, periodType17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes((long) 8);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Period period23 = period21.minusDays(5);
        int[] intArray24 = period21.getValues();
        org.joda.time.DurationFieldType durationFieldType26 = period21.getFieldType(1);
        org.joda.time.Period period28 = period18.withField(durationFieldType26, 999);
        org.joda.time.Period period30 = period18.minusMillis((-4083));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT9072000S" + "'", str7, "PT9072000S");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 8, 0, 0]");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.PeriodType periodType7 = periodType5.withSecondsRemoved();
        org.joda.time.Period period8 = duration2.toPeriodFrom(readableInstant3, periodType5);
        long long9 = duration2.getMillis();
        org.joda.time.Days days12 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withSecondsRemoved();
        org.joda.time.PeriodType periodType16 = periodType13.withMinutesRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(10L, (long) (byte) -1, periodType17, chronology18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2, periodType17);
        org.joda.time.Period period21 = duration2.toPeriod();
        org.joda.time.Period period22 = period21.negated();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period21.toDurationFrom(readableInstant23);
        org.joda.time.Period period26 = period21.plusSeconds((int) (byte) 0);
        java.lang.String str27 = period21.toString();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Period period29 = period21.plus(readablePeriod28);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M40S" + "'", str27, "PT1M40S");
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (byte) 100);
        org.joda.time.Seconds seconds5 = seconds3.dividedBy((int) (byte) 100);
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds10 = seconds8.plus(seconds9);
        org.joda.time.Seconds seconds12 = seconds8.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds13 = seconds7.plus(seconds8);
        org.joda.time.Seconds seconds15 = seconds7.plus((int) '4');
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds18 = seconds16.plus(seconds17);
        org.joda.time.Seconds seconds20 = seconds16.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds21 = seconds7.plus(seconds16);
        org.joda.time.Seconds seconds22 = seconds3.minus(seconds21);
        int int23 = seconds21.getSeconds();
        org.joda.time.Seconds seconds25 = seconds21.minus(65);
        org.joda.time.Seconds seconds27 = seconds21.multipliedBy((-95));
        org.joda.time.Seconds seconds29 = seconds27.multipliedBy(5);
        org.joda.time.Seconds seconds30 = seconds27.negated();
        java.lang.String str31 = seconds30.toString();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT190S" + "'", str31, "PT190S");
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.Period period4 = period2.minusYears(0);
        org.joda.time.Days days5 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Days days7 = org.joda.time.Days.days(0);
        boolean boolean8 = days5.isLessThan(days7);
        org.joda.time.Days days10 = days7.minus(6);
        org.joda.time.Days days11 = org.joda.time.Days.FIVE;
        java.lang.String str12 = days11.toString();
        org.joda.time.Days days14 = days11.multipliedBy((int) (byte) -1);
        org.joda.time.Days days15 = days11.negated();
        org.joda.time.Days days16 = org.joda.time.Days.ONE;
        org.joda.time.Days days17 = org.joda.time.Days.ONE;
        int int18 = days16.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days17);
        org.joda.time.Days days20 = days17.multipliedBy((int) '#');
        org.joda.time.Days days21 = days15.minus(days17);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration26 = duration24.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, readableInstant27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = duration26.toIntervalFrom(readableInstant29);
        org.joda.time.Days days31 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Days days33 = days31.minus((int) '4');
        org.joda.time.Days days35 = days31.minus((int) 'a');
        org.joda.time.MutablePeriod mutablePeriod36 = days35.toMutablePeriod();
        boolean boolean37 = days15.isLessThan(days35);
        org.joda.time.Days days38 = days10.plus(days35);
        int int39 = days10.getDays();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P5D" + "'", str12, "P5D");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-6) + "'", int39 == (-6));
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.Period period2 = new org.joda.time.Period(10L, (long) 7);
        org.joda.time.Period period4 = period2.withHours((int) (short) 0);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        long long7 = duration6.getStandardSeconds();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalFrom(readableInstant7);
        org.joda.time.Days days9 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Days days11 = days9.minus((int) '4');
        org.joda.time.Duration duration12 = days9.toStandardDuration();
        org.joda.time.Days days13 = org.joda.time.Days.FIVE;
        java.lang.String str14 = days13.toString();
        org.joda.time.Days days16 = days13.multipliedBy((int) (byte) -1);
        org.joda.time.Days days17 = days13.negated();
        org.joda.time.Days days18 = org.joda.time.Days.ONE;
        org.joda.time.Days days19 = org.joda.time.Days.ONE;
        int int20 = days18.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days19);
        org.joda.time.Days days22 = days19.multipliedBy((int) '#');
        org.joda.time.Days days23 = days17.minus(days19);
        org.joda.time.MutablePeriod mutablePeriod24 = days17.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod25 = days17.toMutablePeriod();
        boolean boolean26 = days9.isGreaterThan(days17);
        org.joda.time.Period period27 = days9.toPeriod();
        java.lang.String str28 = days9.toString();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P5D" + "'", str14, "P5D");
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P0D" + "'", str28, "P0D");
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        int int5 = period4.getYears();
        org.joda.time.Period period6 = period4.toPeriod();
        org.joda.time.Period period8 = period6.plusMinutes(100);
        org.joda.time.Period period10 = period6.minusMillis(1);
        int int11 = period6.getWeeks();
        int int12 = period6.size();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        org.joda.time.Period period15 = period2.withHours(1);
        org.joda.time.Period period17 = period15.withWeeks(14400);
        org.joda.time.Period period18 = period15.toPeriod();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str22 = periodType21.getName();
        boolean boolean24 = periodType21.equals((java.lang.Object) true);
        org.joda.time.PeriodType periodType25 = periodType21.withMinutesRemoved();
        org.joda.time.PeriodType periodType26 = periodType21.withMonthsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-5), periodType26, chronology27);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        org.joda.time.Period period30 = period15.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period32 = period15.multipliedBy((-5));
        org.joda.time.Period period34 = period32.withDays(35);
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = period32.getFieldTypes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "YearMonthDay" + "'", str22, "YearMonthDay");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period3 = period2.negated();
        org.joda.time.Period period5 = period3.plusMonths((int) (short) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType7 = periodType6.withMillisRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.Period period9 = period3.normalizedStandard(periodType7);
        org.joda.time.Weeks weeks10 = period9.toStandardWeeks();
        java.lang.String str11 = weeks10.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P0W" + "'", str11, "P0W");
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks4 = weeks3.negated();
        org.joda.time.PeriodType periodType5 = weeks3.getPeriodType();
        java.lang.String str6 = periodType5.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Weeks" + "'", str6, "Weeks");
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-5), chronology1);
        org.joda.time.Period period5 = new org.joda.time.Period((long) 35, (long) (byte) 1);
        org.joda.time.Period period6 = period5.toPeriod();
        org.joda.time.Seconds seconds7 = period6.toStandardSeconds();
        org.joda.time.Period period8 = period2.withFields((org.joda.time.ReadablePeriod) seconds7);
        org.joda.time.Seconds seconds10 = seconds7.plus(97);
        org.joda.time.MutablePeriod mutablePeriod11 = seconds10.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = mutablePeriod11.toDurationTo(readableInstant12);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        java.lang.String str5 = periodType4.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PeriodType[Days]" + "'", str5, "PeriodType[Days]");
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = hours0.dividedBy(100);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Period period9 = period7.minusSeconds(0);
        org.joda.time.Period period10 = period9.normalizedStandard();
        org.joda.time.Hours hours11 = period10.toStandardHours();
        boolean boolean12 = hours2.isLessThan(hours11);
        org.joda.time.Period period14 = org.joda.time.Period.millis((int) '#');
        int int15 = period14.getYears();
        org.joda.time.Hours hours16 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period18 = period14.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.Hours hours20 = hours2.minus(hours19);
        org.joda.time.Hours hours21 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours22 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours24 = hours22.dividedBy(100);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period29 = period27.minusMonths(0);
        org.joda.time.Period period31 = period29.minusSeconds(0);
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Hours hours33 = period32.toStandardHours();
        boolean boolean34 = hours24.isLessThan(hours33);
        boolean boolean35 = hours21.isLessThan(hours24);
        org.joda.time.Duration duration36 = hours24.toStandardDuration();
        java.lang.String str37 = hours24.toString();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) '#');
        int int40 = period39.getYears();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Period period42 = period39.withFields(readablePeriod41);
        org.joda.time.Hours hours43 = period39.toStandardHours();
        org.joda.time.Hours hours44 = hours24.minus(hours43);
        org.joda.time.Hours hours45 = hours19.minus(hours24);
        org.joda.time.Hours hours47 = hours45.plus(52);
        org.joda.time.PeriodType periodType48 = hours47.getPeriodType();
        org.joda.time.Hours hours49 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours50 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours51 = hours49.minus(hours50);
        org.joda.time.PeriodType periodType52 = hours50.getPeriodType();
        org.joda.time.Hours hours53 = null;
        org.joda.time.Hours hours54 = hours50.minus(hours53);
        org.joda.time.Hours hours55 = hours47.plus(hours53);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0H" + "'", str37, "PT0H");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertNotNull(hours55);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = period11.getFieldType((int) (short) 1);
        int int15 = periodType8.indexOf(durationFieldType14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) ' ', periodType8);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType8);
        java.util.Locale locale18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter2.withLocale(locale18);
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter2.withLocale(locale20);
        org.joda.time.PeriodType periodType22 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType23 = periodFormatter2.getParseType();
        java.lang.StringBuffer stringBuffer24 = null;
        org.joda.time.Hours hours25 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours26 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours27 = hours25.minus(hours26);
        org.joda.time.Hours hours28 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours29 = hours28.negated();
        org.joda.time.Hours hours30 = hours25.plus(hours29);
        org.joda.time.Hours hours31 = null;
        boolean boolean32 = hours29.isGreaterThan(hours31);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer24, (org.joda.time.ReadablePeriod) hours31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNull(periodType22);
        org.junit.Assert.assertNull(periodType23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType2);
        int int4 = period3.getSeconds();
        org.joda.time.PeriodType periodType5 = period3.getPeriodType();
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        int int11 = period10.getYears();
        org.joda.time.Period period12 = period10.toPeriod();
        org.joda.time.Period period14 = period12.plusMinutes(100);
        org.joda.time.Period period16 = period12.minusMillis(1);
        int int17 = period12.getWeeks();
        int int18 = period12.getYears();
        org.joda.time.Period period20 = period12.plusDays(6);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period12.toDurationTo(readableInstant21);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period27 = period25.minusMonths(0);
        int int28 = period27.getYears();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = period27.get(durationFieldType29);
        int int31 = period12.get(durationFieldType29);
        int int32 = periodType5.indexOf(durationFieldType29);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Days days36 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType37 = days36.getPeriodType();
        org.joda.time.PeriodType periodType38 = periodType37.withHoursRemoved();
        org.joda.time.PeriodType periodType39 = periodType37.withSecondsRemoved();
        org.joda.time.Period period40 = duration34.toPeriodFrom(readableInstant35, periodType37);
        long long41 = duration34.getStandardHours();
        org.joda.time.Duration duration44 = duration34.withDurationAdded(10L, (-36));
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration48 = duration44.withDurationAdded((long) ' ', (int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, readableInstant49);
        org.joda.time.Period period52 = period50.withDays((int) (short) 0);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period57 = period55.minusMonths(0);
        org.joda.time.Period period59 = period55.minusSeconds((int) (byte) 100);
        org.joda.time.Days days60 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType61 = days60.getPeriodType();
        org.joda.time.PeriodType periodType62 = periodType61.withHoursRemoved();
        org.joda.time.PeriodType periodType63 = periodType61.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.days();
        boolean boolean65 = periodType63.isSupported(durationFieldType64);
        int int66 = period55.get(durationFieldType64);
        org.joda.time.Chronology chronology67 = null;
        boolean boolean68 = durationFieldType64.isSupported(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DurationField durationField70 = durationFieldType64.getField(chronology69);
        org.joda.time.Period period72 = period52.withField(durationFieldType64, (int) (short) 100);
        int int73 = periodType5.indexOf(durationFieldType64);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 97);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Minutes minutes10 = minutes7.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes12 = minutes10.multipliedBy(2);
        org.joda.time.PeriodType periodType13 = minutes12.getPeriodType();
        boolean boolean14 = duration1.equals((java.lang.Object) periodType13);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        int int2 = weeks0.size();
        org.joda.time.PeriodType periodType3 = weeks0.getPeriodType();
        org.joda.time.Weeks weeks5 = weeks0.minus(7);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks8 = weeks7.negated();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        boolean boolean13 = weeks8.isGreaterThan(weeks11);
        org.joda.time.Weeks weeks14 = null;
        org.joda.time.Weeks weeks15 = weeks11.minus(weeks14);
        org.joda.time.DurationFieldType durationFieldType16 = weeks15.getFieldType();
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks20 = weeks19.negated();
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeksIn(readableInterval22);
        boolean boolean24 = weeks21.isLessThan(weeks23);
        boolean boolean25 = weeks20.isGreaterThan(weeks23);
        boolean boolean26 = weeks17.isLessThan(weeks20);
        org.joda.time.Weeks weeks27 = weeks15.plus(weeks20);
        org.joda.time.Weeks weeks29 = weeks20.minus(2);
        org.joda.time.Weeks weeks31 = weeks29.dividedBy((-10));
        org.joda.time.Weeks weeks32 = weeks31.negated();
        org.joda.time.Weeks weeks33 = weeks0.plus(weeks31);
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeks((int) (byte) 1);
        boolean boolean36 = weeks33.isLessThan(weeks35);
        org.joda.time.Weeks weeks38 = weeks33.minus((int) (byte) 1);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(weeks38);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = minutes0.minus(2147483645);
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration5 = period4.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant6);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = period11.getFieldType((int) (short) 1);
        int int15 = periodType8.indexOf(durationFieldType14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) ' ', periodType8);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType8);
        boolean boolean18 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType19 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType20 = periodFormatter2.getParseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(periodType19);
        org.junit.Assert.assertNull(periodType20);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Period period14 = period10.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType15 = period10.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withMinutesRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.PeriodType periodType18 = periodType16.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType16.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period((-2147483645), 0, 1491308, 3, (-14370), (-2147483648), (-12), 572, periodType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("StandardNoYearsNoWeeksNoDaysNoMinutesNoSecondsNoMillis");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"StandardNoYearsNoWeeksNoDaysNoMi...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Hours hours5 = hours3.multipliedBy(8);
        org.joda.time.Hours hours6 = hours1.plus(hours3);
        int int7 = hours6.getHours();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = seconds2.plus(seconds3);
        org.joda.time.Seconds seconds6 = seconds2.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds7 = seconds1.plus(seconds2);
        org.joda.time.Duration duration8 = seconds2.toStandardDuration();
        org.joda.time.Period period10 = org.joda.time.Period.hours((int) '#');
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        boolean boolean12 = seconds2.isLessThan(seconds11);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.PeriodType periodType16 = seconds13.getPeriodType();
        int int17 = seconds13.size();
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.seconds((int) (byte) 10);
        boolean boolean21 = seconds19.equals((java.lang.Object) "PeriodType[StandardNoMinutes]");
        org.joda.time.Seconds seconds22 = seconds13.plus(seconds19);
        boolean boolean23 = seconds2.isGreaterThan(seconds13);
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds26 = seconds24.plus(seconds25);
        java.lang.String str27 = seconds24.toString();
        org.joda.time.DurationFieldType durationFieldType28 = seconds24.getFieldType();
        org.joda.time.Seconds seconds30 = seconds24.multipliedBy(0);
        org.joda.time.Seconds seconds32 = seconds24.dividedBy((-1));
        org.joda.time.Seconds seconds33 = seconds2.minus(seconds24);
        org.joda.time.Period period34 = seconds33.toPeriod();
        org.joda.time.DurationFieldType durationFieldType35 = seconds33.getFieldType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT2S" + "'", str27, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = minutes2.plus((int) (byte) -1);
        org.joda.time.Minutes minutes6 = minutes4.minus((-97));
        org.joda.time.Minutes minutes7 = minutes6.negated();
        org.joda.time.Hours hours8 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType9 = hours8.getFieldType();
        org.joda.time.DurationFieldType durationFieldType10 = hours8.getFieldType();
        int int11 = hours8.getHours();
        org.joda.time.PeriodType periodType12 = hours8.getPeriodType();
        org.joda.time.Hours hours13 = hours8.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = minutes7.compareTo((org.joda.time.base.BaseSingleFieldPeriod) hours8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Minutes cannot be compared to class org.joda.time.Hours");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(hours13);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (-97), (-2), 5);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationTo(readableInstant5);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Days days10 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType11 = days10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withSecondsRemoved();
        org.joda.time.Period period14 = duration8.toPeriodFrom(readableInstant9, periodType11);
        long long15 = duration8.getStandardHours();
        org.joda.time.Duration duration18 = duration8.withDurationAdded(10L, (-36));
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = duration18.plus((-1L));
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.Duration duration23 = duration6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period29 = period27.minusMonths(0);
        org.joda.time.Period period30 = period27.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period30.toDurationFrom(readableInstant32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = duration33.toPeriod(chronology34);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) 100);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType40 = days39.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withHoursRemoved();
        org.joda.time.PeriodType periodType42 = periodType40.withSecondsRemoved();
        org.joda.time.PeriodType periodType43 = periodType40.withMinutesRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, readableInstant38, periodType44);
        org.joda.time.Duration duration46 = duration33.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, readableInstant47, periodType48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Period period51 = duration37.toPeriodFrom(readableInstant50);
        org.joda.time.Days days53 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days55 = days53.multipliedBy((int) (short) 100);
        org.joda.time.Days days56 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType57 = days56.getPeriodType();
        org.joda.time.Days days59 = days56.minus(0);
        org.joda.time.Days days60 = days53.minus(days59);
        org.joda.time.Days days62 = days53.minus(35);
        org.joda.time.Days days64 = days53.plus(14400);
        org.joda.time.PeriodType periodType65 = days53.getPeriodType();
        org.joda.time.PeriodType periodType66 = days53.getPeriodType();
        org.joda.time.Period period67 = new org.joda.time.Period(readableInstant24, (org.joda.time.ReadableDuration) duration37, periodType66);
        int int68 = duration6.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days69 = duration6.toStandardDays();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT99.640S" + "'", str19, "PT99.640S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(days69);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period8 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
        org.joda.time.Minutes minutes11 = minutes9.multipliedBy(1);
        boolean boolean12 = minutes5.isGreaterThan(minutes11);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period15.minusMonths(0);
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Duration duration19 = minutes18.toStandardDuration();
        org.joda.time.Minutes minutes21 = minutes18.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes23 = minutes21.dividedBy((-36));
        org.joda.time.Period period25 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType27 = minutes26.getFieldType();
        int int28 = minutes26.getMinutes();
        org.joda.time.Minutes minutes29 = minutes21.minus(minutes26);
        int int30 = minutes29.getMinutes();
        org.joda.time.Minutes minutes31 = minutes5.minus(minutes29);
        org.joda.time.Minutes minutes33 = minutes5.plus((-35));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14400 + "'", int28 == 14400);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-14400) + "'", int30 == (-14400));
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy((int) (byte) 100);
        org.joda.time.Seconds seconds4 = seconds0.multipliedBy((int) (byte) 0);
        org.joda.time.Duration duration5 = seconds0.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, readableInstant6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration5.toPeriodTo(readableInstant8);
        long long10 = duration5.getStandardMinutes();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((java.lang.Object) duration5);
        org.joda.time.Duration duration12 = duration11.toDuration();
        long long13 = duration11.getStandardSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.joda.time.Days days0 = org.joda.time.Days.ONE;
        org.joda.time.Days days2 = days0.dividedBy((int) (byte) 10);
        org.joda.time.Days days4 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days6 = days4.multipliedBy((int) (short) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.Days days10 = days7.minus(0);
        org.joda.time.Days days11 = days4.minus(days10);
        java.lang.String str12 = days11.toString();
        org.joda.time.Days days13 = days11.negated();
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        java.lang.String str15 = days14.toString();
        org.joda.time.Days days17 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days18 = days14.minus(days17);
        org.joda.time.DurationFieldType durationFieldType19 = days14.getFieldType();
        boolean boolean20 = days13.isLessThan(days14);
        org.joda.time.Days days22 = days13.dividedBy(52);
        boolean boolean23 = days2.isLessThan(days22);
        org.joda.time.Days days24 = org.joda.time.Days.FIVE;
        java.lang.String str25 = days24.toString();
        org.joda.time.Days days27 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days28 = days24.minus(days27);
        int int29 = days24.getDays();
        java.lang.String str30 = days24.toString();
        boolean boolean31 = days22.isGreaterThan(days24);
        org.joda.time.Days days32 = org.joda.time.Days.FIVE;
        java.lang.String str33 = days32.toString();
        org.joda.time.Days days35 = days32.multipliedBy((int) (byte) -1);
        org.joda.time.Days days36 = days32.negated();
        org.joda.time.Days days37 = org.joda.time.Days.ONE;
        org.joda.time.Days days38 = org.joda.time.Days.ONE;
        int int39 = days37.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days38);
        org.joda.time.Days days41 = days38.multipliedBy((int) '#');
        org.joda.time.Days days42 = days36.minus(days38);
        org.joda.time.DurationFieldType durationFieldType43 = days42.getFieldType();
        org.joda.time.Duration duration44 = days42.toStandardDuration();
        org.joda.time.Days days45 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days42);
        boolean boolean46 = days22.isGreaterThan(days45);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P0D" + "'", str12, "P0D");
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P5D" + "'", str15, "P5D");
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P5D" + "'", str25, "P5D");
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P5D" + "'", str30, "P5D");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P5D" + "'", str33, "P5D");
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes11 = minutes5.multipliedBy(8);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.minutes((int) (byte) 100);
        boolean boolean14 = minutes5.isGreaterThan(minutes13);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Duration duration28 = minutes27.toStandardDuration();
        boolean boolean29 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Minutes minutes34 = minutes13.minus(minutes33);
        org.joda.time.Minutes minutes36 = minutes34.minus(8);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period41 = period39.minusMonths(0);
        org.joda.time.Minutes minutes42 = period41.toStandardMinutes();
        org.joda.time.Duration duration43 = minutes42.toStandardDuration();
        org.joda.time.Minutes minutes45 = minutes42.multipliedBy((int) (short) 1);
        java.lang.String str46 = minutes45.toString();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration51 = duration49.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, readableInstant52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Interval interval55 = duration51.toIntervalFrom(readableInstant54);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Minutes minutes58 = minutes56.multipliedBy((-95));
        org.joda.time.Minutes minutes59 = minutes45.minus(minutes58);
        org.joda.time.Minutes minutes60 = minutes58.negated();
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period65 = period63.minusMonths(0);
        org.joda.time.Minutes minutes66 = period65.toStandardMinutes();
        org.joda.time.Duration duration67 = minutes66.toStandardDuration();
        org.joda.time.Minutes minutes69 = minutes66.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration70 = minutes66.toStandardDuration();
        org.joda.time.Minutes minutes72 = minutes66.multipliedBy(8);
        org.joda.time.Minutes minutes74 = org.joda.time.Minutes.minutes((int) (byte) 100);
        boolean boolean75 = minutes66.isGreaterThan(minutes74);
        org.joda.time.Minutes minutes76 = minutes58.minus(minutes66);
        boolean boolean77 = minutes34.isLessThan(minutes66);
        org.joda.time.Minutes minutes79 = minutes66.multipliedBy((-31));
        org.joda.time.Minutes minutes81 = minutes79.minus(0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0M" + "'", str46, "PT0M");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertNotNull(minutes81);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 8, (long) (short) 100);
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.Seconds seconds4 = period2.toStandardSeconds();
        java.lang.String str5 = seconds4.toString();
        org.joda.time.Seconds seconds7 = seconds4.minus((-1491308));
        org.joda.time.Seconds seconds9 = seconds7.plus((-50));
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((-94));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMillisRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = new org.joda.time.Period((-64), (int) (short) 0, (-97), (-53), 0, 6, 14405, 6, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        org.joda.time.DurationFieldType durationFieldType4 = weeks2.getFieldType();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        boolean boolean8 = weeks5.isLessThan(weeks7);
        org.joda.time.Weeks weeks10 = weeks7.multipliedBy(10);
        org.joda.time.Weeks weeks11 = weeks2.minus(weeks7);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks7.toMutablePeriod();
        org.joda.time.Weeks weeks14 = weeks7.dividedBy((-31));
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeks(1);
        java.lang.String str17 = weeks16.toString();
        org.joda.time.Weeks weeks18 = weeks16.negated();
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeksIn(readableInterval20);
        boolean boolean22 = weeks19.isLessThan(weeks21);
        org.joda.time.Weeks weeks24 = weeks21.multipliedBy(10);
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.ZERO;
        java.lang.String str26 = weeks25.toString();
        int int27 = weeks25.size();
        org.joda.time.PeriodType periodType28 = weeks25.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod29 = weeks25.toMutablePeriod();
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks32 = weeks31.negated();
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeksIn(readableInterval34);
        boolean boolean36 = weeks33.isLessThan(weeks35);
        boolean boolean37 = weeks32.isGreaterThan(weeks35);
        org.joda.time.Weeks weeks38 = null;
        org.joda.time.Weeks weeks39 = weeks35.minus(weeks38);
        org.joda.time.DurationFieldType durationFieldType40 = weeks39.getFieldType();
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks44 = weeks43.negated();
        org.joda.time.Weeks weeks45 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Weeks weeks47 = org.joda.time.Weeks.weeksIn(readableInterval46);
        boolean boolean48 = weeks45.isLessThan(weeks47);
        boolean boolean49 = weeks44.isGreaterThan(weeks47);
        boolean boolean50 = weeks41.isLessThan(weeks44);
        org.joda.time.Weeks weeks51 = weeks39.plus(weeks44);
        org.joda.time.Weeks weeks53 = weeks44.minus(2);
        org.joda.time.Weeks weeks55 = weeks53.dividedBy((-10));
        org.joda.time.Weeks weeks56 = weeks55.negated();
        boolean boolean57 = weeks25.isLessThan(weeks56);
        org.joda.time.Weeks weeks58 = weeks21.minus(weeks56);
        int int59 = weeks56.getWeeks();
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks62 = weeks61.negated();
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval64 = null;
        org.joda.time.Weeks weeks65 = org.joda.time.Weeks.weeksIn(readableInterval64);
        boolean boolean66 = weeks63.isLessThan(weeks65);
        boolean boolean67 = weeks62.isGreaterThan(weeks65);
        org.joda.time.Weeks weeks68 = weeks56.minus(weeks65);
        int int69 = weeks65.size();
        org.joda.time.Weeks weeks70 = weeks65.negated();
        boolean boolean71 = weeks16.isLessThan(weeks70);
        org.joda.time.DurationFieldType durationFieldType72 = weeks16.getFieldType();
        org.joda.time.Weeks weeks73 = weeks14.minus(weeks16);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P1W" + "'", str17, "P1W");
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P0W" + "'", str26, "P0W");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(weeks70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(weeks73);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
        org.joda.time.Minutes minutes10 = minutes3.minus(minutes9);
        org.joda.time.DurationFieldType durationFieldType11 = minutes9.getFieldType();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Period period18 = period16.minusSeconds(0);
        org.joda.time.Period period20 = period18.minusWeeks(10);
        org.joda.time.MutablePeriod mutablePeriod21 = period18.toMutablePeriod();
        int int23 = period18.getValue((int) (byte) 1);
        org.joda.time.Period period25 = period18.minusMillis((int) '#');
        int int26 = period18.getMonths();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period29 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes30 = period29.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType31 = minutes30.getFieldType();
        int int32 = minutes30.getMinutes();
        boolean boolean33 = minutes27.isLessThan(minutes30);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes36 = minutes34.minus(2147483645);
        org.joda.time.Duration duration37 = minutes36.toStandardDuration();
        boolean boolean38 = minutes30.isLessThan(minutes36);
        org.joda.time.Minutes minutes40 = minutes36.plus(999);
        org.joda.time.Minutes minutes41 = minutes9.minus(minutes40);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period46 = period44.minusMonths(0);
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Duration duration48 = minutes47.toStandardDuration();
        org.joda.time.Period period51 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period53 = period51.minusMonths(0);
        org.joda.time.Minutes minutes54 = period53.toStandardMinutes();
        org.joda.time.Duration duration55 = minutes54.toStandardDuration();
        boolean boolean56 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration55.toPeriod();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Interval interval61 = duration55.toIntervalFrom(readableInstant60);
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Minutes minutes63 = minutes40.minus(minutes62);
        org.joda.time.Minutes minutes65 = minutes40.multipliedBy(0);
        org.joda.time.Minutes minutes66 = minutes40.negated();
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 14400 + "'", int32 == 14400);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(minutes66);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.withMillis((int) (short) 0);
        int int7 = period6.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod8 = period6.toMutablePeriod();
        org.joda.time.Duration duration9 = period6.toStandardDuration();
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds13 = seconds11.plus(seconds12);
        org.joda.time.Seconds seconds15 = seconds11.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds16 = seconds10.minus(seconds15);
        int int17 = seconds16.size();
        org.joda.time.PeriodType periodType18 = seconds16.getPeriodType();
        org.joda.time.Seconds seconds20 = seconds16.plus(100);
        org.joda.time.Seconds seconds22 = seconds20.plus((-95));
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.THREE;
        boolean boolean24 = seconds22.isGreaterThan(seconds23);
        org.joda.time.DurationFieldType durationFieldType25 = seconds22.getFieldType();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str1 = periodType0.getName();
        boolean boolean3 = periodType0.equals((java.lang.Object) true);
        org.joda.time.PeriodType periodType4 = periodType0.withMinutesRemoved();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        boolean boolean6 = periodType4.equals((java.lang.Object) durationFieldType5);
        org.joda.time.PeriodType periodType7 = periodType4.withMillisRemoved();
        org.joda.time.PeriodType periodType8 = periodType4.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YearMonthDay" + "'", str1, "YearMonthDay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("P-10WT8M0.036S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Minutes minutes2 = minutes0.dividedBy((int) (byte) -1);
        org.joda.time.Minutes minutes4 = minutes2.plus((int) (byte) -1);
        org.joda.time.Minutes minutes6 = minutes4.plus(35);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = minutes6.getValue(268435465);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 268435465");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(100L, chronology1);
        org.joda.time.Period period4 = period2.withMillis(14400);
        org.joda.time.Period period6 = period4.minusHours((int) '#');
        int int7 = period6.getMonths();
        int int8 = period6.getYears();
        org.joda.time.Period period9 = period6.toPeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("PeriodType[Hours]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[Hours]\" is malformed at \"eriodType[Hours]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        org.joda.time.Days days8 = duration1.toStandardDays();
        org.joda.time.Days days9 = org.joda.time.Days.MIN_VALUE;
        boolean boolean10 = days8.isLessThan(days9);
        java.lang.String str11 = days9.toString();
        org.joda.time.Days days13 = days9.plus((int) (byte) 100);
        org.joda.time.Duration duration14 = days9.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.Days days16 = duration15.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P-2147483648D" + "'", str11, "P-2147483648D");
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days16);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str3 = periodType2.getName();
        int int4 = periodType2.size();
        org.joda.time.PeriodType periodType5 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType6 = periodType2.withMillisRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(47L, (long) 14400, periodType6, chronology7);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YearMonthDay" + "'", str3, "YearMonthDay");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy(1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MIN_VALUE;
        boolean boolean4 = weeks2.isGreaterThan(weeks3);
        org.joda.time.Duration duration5 = weeks2.toStandardDuration();
        int int6 = weeks2.getWeeks();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks2);
        org.joda.time.Weeks weeks9 = weeks7.minus(2400);
        org.joda.time.base.BaseSingleFieldPeriod baseSingleFieldPeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = weeks9.compareTo(baseSingleFieldPeriod10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.joda.time.Period period1 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        boolean boolean3 = period1.isSupported(durationFieldType2);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = seconds4.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType7 = seconds4.getFieldType();
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds10 = seconds8.plus(seconds9);
        org.joda.time.Seconds seconds12 = seconds8.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds13 = seconds4.plus(seconds8);
        org.joda.time.Period period14 = period1.withFields((org.joda.time.ReadablePeriod) seconds8);
        org.joda.time.Period period16 = period1.plusWeeks((-10));
        int int17 = period1.getMonths();
        org.joda.time.Period period19 = period1.plusMonths((-94));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period4.minusSeconds(0);
        org.joda.time.Period period8 = period6.minusWeeks(10);
        org.joda.time.Period period10 = period8.withMinutes(8);
        int int11 = period8.getMillis();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period14 = period8.withDays((int) (byte) 100);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-36) + "'", int11 == (-36));
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(47L, (long) 35, periodType2);
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.withMillis(13);
        org.joda.time.Period period7 = period4.normalizedStandard();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.Days days1 = org.joda.time.Days.days((int) '4');
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((java.lang.Object) days1, chronology2);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        java.lang.String str5 = days4.toString();
        org.joda.time.Days days7 = days4.multipliedBy((int) (byte) -1);
        org.joda.time.Days days8 = days4.negated();
        org.joda.time.Days days9 = org.joda.time.Days.ONE;
        org.joda.time.Days days10 = org.joda.time.Days.ONE;
        int int11 = days9.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days10);
        org.joda.time.Days days13 = days10.multipliedBy((int) '#');
        org.joda.time.Days days14 = days8.minus(days10);
        org.joda.time.Days days16 = days8.minus((int) 'a');
        java.lang.String str17 = days16.toString();
        org.joda.time.Days days19 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days21 = days19.multipliedBy((int) (short) 100);
        org.joda.time.Days days22 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType23 = days22.getPeriodType();
        org.joda.time.Days days25 = days22.minus(0);
        org.joda.time.Days days26 = days19.minus(days25);
        boolean boolean27 = days16.isGreaterThan(days25);
        org.joda.time.Days days28 = days1.minus(days16);
        org.joda.time.Days days29 = days1.negated();
        org.joda.time.Days days30 = org.joda.time.Days.FIVE;
        java.lang.String str31 = days30.toString();
        org.joda.time.Days days33 = days30.multipliedBy((int) (byte) -1);
        org.joda.time.Days days34 = days30.negated();
        org.joda.time.Days days35 = org.joda.time.Days.ONE;
        org.joda.time.Days days36 = org.joda.time.Days.ONE;
        int int37 = days35.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days36);
        org.joda.time.Days days39 = days36.multipliedBy((int) '#');
        org.joda.time.Days days40 = days34.minus(days36);
        org.joda.time.DurationFieldType durationFieldType41 = days40.getFieldType();
        org.joda.time.Duration duration42 = days40.toStandardDuration();
        org.joda.time.Days days43 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days40);
        org.joda.time.Days days45 = days40.plus(2147483645);
        org.joda.time.Days days46 = days29.plus(days45);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = days46.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P5D" + "'", str5, "P5D");
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P-102D" + "'", str17, "P-102D");
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P5D" + "'", str31, "P5D");
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days46);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days8);
        org.joda.time.Days days11 = days9.minus((-1));
        org.joda.time.PeriodType periodType12 = days11.getPeriodType();
        java.lang.Object obj13 = null;
        boolean boolean14 = periodType12.equals(obj13);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) minutes15, chronology18);
        org.joda.time.Minutes minutes20 = minutes0.minus(minutes15);
        org.joda.time.DurationFieldType durationFieldType22 = minutes20.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType23 = minutes20.getPeriodType();
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period28 = period26.minusMonths(0);
        org.joda.time.Minutes minutes29 = period28.toStandardMinutes();
        org.joda.time.Minutes minutes31 = minutes29.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((java.lang.Object) minutes29, chronology32);
        boolean boolean34 = minutes20.isGreaterThan(minutes29);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period39 = period37.minusMonths(0);
        org.joda.time.Minutes minutes40 = period39.toStandardMinutes();
        org.joda.time.Minutes minutes42 = minutes40.dividedBy((int) (byte) 100);
        org.joda.time.Period period45 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period47 = period45.minusMonths(0);
        org.joda.time.Minutes minutes48 = period47.toStandardMinutes();
        org.joda.time.Duration duration49 = minutes48.toStandardDuration();
        org.joda.time.Minutes minutes51 = minutes48.multipliedBy((int) (short) 1);
        int int52 = minutes51.getMinutes();
        boolean boolean53 = minutes42.isGreaterThan(minutes51);
        int int54 = minutes42.getMinutes();
        org.joda.time.Minutes minutes55 = minutes20.minus(minutes42);
        org.joda.time.Minutes minutes57 = minutes55.multipliedBy((-36));
        org.joda.time.Minutes minutes58 = minutes55.negated();
        org.joda.time.Minutes minutes60 = minutes58.minus(14402);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isParser();
        org.joda.time.Days days5 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withParseType(periodType6);
        boolean boolean9 = periodFormatter8.isPrinter();
        boolean boolean10 = periodFormatter8.isParser();
        org.joda.time.PeriodType periodType11 = periodFormatter8.getParseType();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withDaysRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((-2147483648L), periodType13, chronology15);
        org.joda.time.PeriodType periodType17 = periodType13.withMonthsRemoved();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("YearDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-94), 604800000L);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        java.lang.String str3 = seconds0.toString();
        org.joda.time.DurationFieldType durationFieldType4 = seconds0.getFieldType();
        org.joda.time.Seconds seconds6 = seconds0.multipliedBy(0);
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration8 = seconds7.toStandardDuration();
        boolean boolean9 = seconds6.isGreaterThan(seconds7);
        org.joda.time.DurationFieldType durationFieldType11 = seconds6.getFieldType((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = seconds6.getValue((-200));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -200");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2S" + "'", str3, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 1, periodType9, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType9);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        org.joda.time.PeriodType periodType17 = periodFormatter15.getParseType();
        org.joda.time.format.PeriodParser periodParser18 = periodFormatter15.getParser();
        org.joda.time.PeriodType periodType19 = periodFormatter15.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod21 = periodFormatter15.parseMutablePeriod("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNull(periodParser18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        boolean boolean6 = weeks3.isLessThan(weeks5);
        boolean boolean7 = weeks2.isGreaterThan(weeks5);
        org.joda.time.Weeks weeks8 = null;
        org.joda.time.Weeks weeks9 = weeks5.minus(weeks8);
        org.joda.time.DurationFieldType durationFieldType10 = weeks5.getFieldType();
        org.joda.time.Weeks weeks12 = weeks5.plus(52);
        org.joda.time.Weeks weeks13 = weeks5.negated();
        org.joda.time.Weeks weeks14 = weeks13.negated();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.Period period1 = org.joda.time.Period.hours((-1));
        org.joda.time.Period period3 = period1.minusDays(87);
        int int4 = period3.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 2147483647);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        int int5 = period4.getYears();
        org.joda.time.Period period6 = period4.toPeriod();
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 1);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        int int10 = period6.getHours();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        boolean boolean15 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant16);
        long long18 = duration14.getStandardHours();
        org.joda.time.Duration duration20 = duration14.minus((long) (byte) 100);
        long long21 = duration20.getStandardSeconds();
        org.joda.time.Duration duration24 = duration20.withDurationAdded((long) 59, (int) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration26 = duration20.toDuration();
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period31 = period29.minusMonths(0);
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Duration duration33 = minutes32.toStandardDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        boolean boolean41 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = new org.joda.time.Duration(readableInstant42, readableInstant43);
        org.joda.time.Duration duration45 = duration33.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, readableInstant46);
        org.joda.time.Duration duration49 = duration33.plus((long) 8);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Period period51 = duration33.toPeriodFrom(readableInstant50);
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration53 = minutes52.toStandardDuration();
        long long54 = duration53.getStandardSeconds();
        org.joda.time.Period period57 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period59 = period57.minusMonths(0);
        org.joda.time.Minutes minutes60 = period59.toStandardMinutes();
        org.joda.time.Duration duration61 = minutes60.toStandardDuration();
        org.joda.time.Minutes minutes63 = minutes60.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration64 = minutes60.toStandardDuration();
        org.joda.time.Period period67 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period69 = period67.minusMonths(0);
        org.joda.time.Minutes minutes70 = period69.toStandardMinutes();
        org.joda.time.Duration duration71 = minutes70.toStandardDuration();
        org.joda.time.Period period72 = duration71.toPeriod();
        boolean boolean73 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.days();
        org.joda.time.Period period76 = duration64.toPeriodTo(readableInstant74, periodType75);
        org.joda.time.Duration duration77 = duration53.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = duration64.toPeriod(chronology78);
        boolean boolean80 = duration33.isEqual((org.joda.time.ReadableDuration) duration64);
        java.lang.String str81 = duration33.toString();
        org.joda.time.Minutes minutes82 = duration33.toStandardMinutes();
        boolean boolean83 = duration20.equals((java.lang.Object) duration33);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-128849018880L) + "'", long54 == (-128849018880L));
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0S" + "'", str81, "PT0S");
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period3 = period2.negated();
        int int4 = period2.getHours();
        org.joda.time.Period period6 = org.joda.time.Period.days(10);
        org.joda.time.Period period8 = period6.plusMonths((int) 'a');
        org.joda.time.Period period10 = period6.plusSeconds((int) (short) 100);
        org.joda.time.Period period12 = period10.minusMonths((int) 'a');
        org.joda.time.Period period13 = period2.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Hours hours14 = period2.toStandardHours();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period17.negated();
        org.joda.time.Period period19 = period2.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period21 = period2.withSeconds(0);
        int int22 = period2.getMonths();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.Period period13 = period11.minusYears(0);
        org.joda.time.Days days14 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Days days15 = days7.plus(days14);
        org.joda.time.Period period17 = org.joda.time.Period.days(10);
        org.joda.time.Period period19 = period17.plusMonths((int) 'a');
        org.joda.time.Period period21 = period17.plusSeconds((int) (short) 100);
        org.joda.time.Period period23 = period17.withMinutes(1);
        org.joda.time.Days days24 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant25, readableDuration26);
        org.joda.time.Days days28 = period27.toStandardDays();
        org.joda.time.Days days30 = days28.minus(7);
        org.joda.time.Days days31 = days24.plus(days30);
        org.joda.time.DurationFieldType durationFieldType32 = days31.getFieldType();
        int int33 = days7.get(durationFieldType32);
        int int34 = days7.getDays();
        org.joda.time.Days days35 = org.joda.time.Days.FIVE;
        java.lang.String str36 = days35.toString();
        org.joda.time.Days days38 = days35.multipliedBy((int) (byte) -1);
        int int39 = days35.getDays();
        org.joda.time.Days days40 = org.joda.time.Days.FIVE;
        java.lang.String str41 = days40.toString();
        org.joda.time.Days days43 = days40.multipliedBy((int) (byte) -1);
        org.joda.time.Days days44 = days40.negated();
        org.joda.time.Days days45 = org.joda.time.Days.ONE;
        org.joda.time.Days days46 = org.joda.time.Days.ONE;
        int int47 = days45.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days46);
        org.joda.time.Days days49 = days46.multipliedBy((int) '#');
        org.joda.time.Days days50 = days44.minus(days46);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration55 = duration53.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration55, readableInstant56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalFrom(readableInstant58);
        org.joda.time.Days days60 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Days days62 = days60.minus((int) '4');
        org.joda.time.Days days64 = days60.minus((int) 'a');
        org.joda.time.Days days65 = days46.plus(days64);
        org.joda.time.Duration duration66 = days64.toStandardDuration();
        org.joda.time.Days days68 = org.joda.time.Days.days((int) (byte) 1);
        org.joda.time.Days days70 = days68.minus(999);
        boolean boolean71 = days64.isLessThan(days68);
        boolean boolean72 = days35.isGreaterThan(days64);
        boolean boolean73 = days7.isLessThan(days64);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P5D" + "'", str36, "P5D");
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P5D" + "'", str41, "P5D");
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        long long16 = duration13.getStandardSeconds();
        org.joda.time.Duration duration17 = duration13.toDuration();
        org.joda.time.Duration duration19 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration22 = duration19.plus((org.joda.time.ReadableDuration) duration21);
        long long23 = duration21.getMillis();
        int int24 = duration13.compareTo((org.joda.time.ReadableDuration) duration21);
        long long25 = duration21.getStandardDays();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration30 = duration28.plus((long) (-1));
        org.joda.time.Duration duration31 = duration21.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period36 = period34.minusMonths(0);
        org.joda.time.Minutes minutes37 = period36.toStandardMinutes();
        org.joda.time.Duration duration38 = minutes37.toStandardDuration();
        org.joda.time.Minutes minutes40 = minutes37.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration41 = minutes37.toStandardDuration();
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period46 = period44.minusMonths(0);
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Duration duration48 = minutes47.toStandardDuration();
        org.joda.time.Period period49 = duration48.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration48);
        boolean boolean51 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period52 = duration41.toPeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 6000000L + "'", long23 == 6000000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours(4);
        org.junit.Assert.assertNotNull(hours1);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, readableInstant19);
        org.joda.time.Period period21 = duration6.toPeriod();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = duration6.toPeriodTo(readableInstant22);
        org.joda.time.Period period24 = period23.normalizedStandard();
        org.joda.time.Period period26 = period24.withHours((int) '4');
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((int) (byte) 10);
        org.joda.time.Duration duration2 = seconds1.toStandardDuration();
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.Seconds seconds9 = seconds5.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds10 = seconds4.plus(seconds5);
        org.joda.time.Seconds seconds12 = seconds10.dividedBy(65);
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.seconds(10);
        int int15 = seconds14.getSeconds();
        org.joda.time.Seconds seconds17 = seconds14.plus(59);
        boolean boolean18 = seconds10.isLessThan(seconds14);
        org.joda.time.Seconds seconds19 = seconds1.plus(seconds10);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(seconds19);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.MIN_VALUE;
        boolean boolean5 = weeks2.isGreaterThan(weeks4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks7 = weeks4.multipliedBy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * -1");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn(readableInterval4);
        boolean boolean6 = weeks3.isLessThan(weeks5);
        boolean boolean7 = weeks2.isGreaterThan(weeks5);
        org.joda.time.Weeks weeks8 = null;
        org.joda.time.Weeks weeks9 = weeks5.minus(weeks8);
        org.joda.time.Weeks weeks11 = weeks9.minus(35);
        java.lang.String str12 = weeks11.toString();
        java.lang.String str13 = weeks11.toString();
        int int14 = weeks11.getWeeks();
        org.joda.time.Weeks weeks16 = weeks11.multipliedBy((-2));
        org.joda.time.Weeks weeks18 = weeks11.multipliedBy(36);
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks21 = weeks20.negated();
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksIn(readableInterval23);
        boolean boolean25 = weeks22.isLessThan(weeks24);
        boolean boolean26 = weeks21.isGreaterThan(weeks24);
        org.joda.time.Weeks weeks27 = null;
        org.joda.time.Weeks weeks28 = weeks24.minus(weeks27);
        org.joda.time.Weeks weeks29 = weeks24.negated();
        org.joda.time.Weeks weeks30 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks31 = weeks30.negated();
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks34 = weeks33.negated();
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Weeks weeks37 = org.joda.time.Weeks.weeksIn(readableInterval36);
        boolean boolean38 = weeks35.isLessThan(weeks37);
        boolean boolean39 = weeks34.isGreaterThan(weeks37);
        org.joda.time.Weeks weeks41 = weeks37.plus((int) (short) 100);
        org.joda.time.Weeks weeks42 = weeks30.minus(weeks41);
        org.joda.time.DurationFieldType durationFieldType43 = weeks30.getFieldType();
        org.joda.time.Weeks weeks44 = weeks29.plus(weeks30);
        org.joda.time.Weeks weeks46 = org.joda.time.Weeks.weeks(35);
        org.joda.time.Weeks weeks47 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Weeks weeks49 = org.joda.time.Weeks.weeksIn(readableInterval48);
        boolean boolean50 = weeks47.isLessThan(weeks49);
        org.joda.time.Weeks weeks52 = weeks49.multipliedBy(10);
        org.joda.time.Weeks weeks53 = org.joda.time.Weeks.ZERO;
        java.lang.String str54 = weeks53.toString();
        int int55 = weeks53.size();
        org.joda.time.PeriodType periodType56 = weeks53.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod57 = weeks53.toMutablePeriod();
        org.joda.time.Weeks weeks59 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks60 = weeks59.negated();
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.weeksIn(readableInterval62);
        boolean boolean64 = weeks61.isLessThan(weeks63);
        boolean boolean65 = weeks60.isGreaterThan(weeks63);
        org.joda.time.Weeks weeks66 = null;
        org.joda.time.Weeks weeks67 = weeks63.minus(weeks66);
        org.joda.time.DurationFieldType durationFieldType68 = weeks67.getFieldType();
        org.joda.time.Weeks weeks69 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks71 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks72 = weeks71.negated();
        org.joda.time.Weeks weeks73 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval74 = null;
        org.joda.time.Weeks weeks75 = org.joda.time.Weeks.weeksIn(readableInterval74);
        boolean boolean76 = weeks73.isLessThan(weeks75);
        boolean boolean77 = weeks72.isGreaterThan(weeks75);
        boolean boolean78 = weeks69.isLessThan(weeks72);
        org.joda.time.Weeks weeks79 = weeks67.plus(weeks72);
        org.joda.time.Weeks weeks81 = weeks72.minus(2);
        org.joda.time.Weeks weeks83 = weeks81.dividedBy((-10));
        org.joda.time.Weeks weeks84 = weeks83.negated();
        boolean boolean85 = weeks53.isLessThan(weeks84);
        org.joda.time.Weeks weeks86 = weeks49.minus(weeks84);
        int int87 = weeks84.getWeeks();
        org.joda.time.Weeks weeks88 = weeks46.minus(weeks84);
        org.joda.time.Weeks weeks89 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks84);
        org.joda.time.Weeks weeks90 = weeks84.negated();
        org.joda.time.Weeks weeks91 = weeks30.plus(weeks84);
        org.joda.time.Weeks weeks92 = weeks18.minus(weeks84);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P-35W" + "'", str12, "P-35W");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P-35W" + "'", str13, "P-35W");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-35) + "'", int14 == (-35));
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P0W" + "'", str54, "P0W");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(weeks69);
        org.junit.Assert.assertNotNull(weeks71);
        org.junit.Assert.assertNotNull(weeks72);
        org.junit.Assert.assertNotNull(weeks73);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(weeks81);
        org.junit.Assert.assertNotNull(weeks83);
        org.junit.Assert.assertNotNull(weeks84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(weeks86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(weeks88);
        org.junit.Assert.assertNotNull(weeks89);
        org.junit.Assert.assertNotNull(weeks90);
        org.junit.Assert.assertNotNull(weeks91);
        org.junit.Assert.assertNotNull(weeks92);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-1));
        org.joda.time.Hours hours3 = hours1.multipliedBy((-35791394));
        org.joda.time.Hours hours4 = null;
        org.joda.time.Hours hours5 = hours1.plus(hours4);
        org.joda.time.Hours hours6 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType7 = hours6.getFieldType();
        org.joda.time.Hours hours8 = hours6.negated();
        org.joda.time.Hours hours9 = org.joda.time.Hours.ONE;
        int int10 = hours9.getHours();
        org.joda.time.Hours hours12 = hours9.dividedBy(8);
        org.joda.time.Hours hours14 = hours12.plus((int) 'a');
        boolean boolean15 = hours6.isGreaterThan(hours12);
        org.joda.time.Hours hours16 = hours12.negated();
        org.joda.time.PeriodType periodType17 = hours12.getPeriodType();
        boolean boolean18 = hours1.equals((java.lang.Object) periodType17);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser9 = periodFormatter2.getParser();
        boolean boolean10 = periodFormatter2.isPrinter();
        boolean boolean11 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodParser periodParser12 = periodFormatter2.getParser();
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.Seconds seconds17 = seconds14.plus((int) (byte) 0);
        org.joda.time.Seconds seconds19 = seconds14.minus(8);
        org.joda.time.DurationFieldType durationFieldType20 = seconds19.getFieldType();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds24 = seconds22.multipliedBy(10);
        org.joda.time.Seconds seconds25 = seconds21.minus(seconds22);
        org.joda.time.Seconds seconds26 = seconds19.minus(seconds22);
        org.joda.time.Seconds seconds28 = seconds19.multipliedBy(11);
        org.joda.time.Seconds seconds30 = seconds28.multipliedBy((-1680));
        org.joda.time.MutablePeriod mutablePeriod31 = seconds30.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod31, "P-105D", 1491308);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodPrinter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertNull(periodParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(periodParser12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        int int2 = period1.getYears();
        org.joda.time.Hours hours3 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period1);
        int int4 = hours3.getHours();
        org.joda.time.Hours hours6 = hours3.multipliedBy((int) (short) 1);
        org.joda.time.Hours hours8 = hours3.multipliedBy((int) (short) 100);
        org.joda.time.Hours hours10 = hours3.plus((-2147483648));
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Hours hours12 = org.joda.time.Hours.hoursIn(readableInterval11);
        org.joda.time.Hours hours14 = hours12.multipliedBy(8);
        org.joda.time.Hours hours16 = hours14.multipliedBy((int) ' ');
        org.joda.time.Hours hours17 = org.joda.time.Hours.ONE;
        int int18 = hours17.getHours();
        org.joda.time.Hours hours20 = hours17.multipliedBy((-95));
        boolean boolean21 = hours14.isLessThan(hours17);
        org.joda.time.Hours hours22 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours23 = hours22.negated();
        org.joda.time.Hours hours25 = hours22.dividedBy(1);
        boolean boolean26 = hours14.isGreaterThan(hours25);
        boolean boolean27 = hours10.isGreaterThan(hours25);
        org.joda.time.Duration duration28 = hours10.toStandardDuration();
        java.lang.String str29 = duration28.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT-7730941132800S" + "'", str29, "PT-7730941132800S");
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (byte) 0);
        org.joda.time.Period period5 = period1.plusSeconds((int) '4');
        org.joda.time.Weeks weeks6 = period1.toStandardWeeks();
        org.joda.time.Period period8 = period1.plusMinutes((-4083));
        int int9 = period8.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 1, periodType9, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType9);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.dayTime();
        org.joda.time.format.PeriodPrinter periodPrinter18 = null;
        org.joda.time.format.PeriodParser periodParser19 = null;
        org.joda.time.format.PeriodFormatter periodFormatter20 = new org.joda.time.format.PeriodFormatter(periodPrinter18, periodParser19);
        boolean boolean21 = periodFormatter20.isParser();
        java.util.Locale locale22 = null;
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter20.withLocale(locale22);
        boolean boolean24 = periodFormatter20.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter25 = periodFormatter20.getPrinter();
        boolean boolean26 = periodType17.equals((java.lang.Object) periodPrinter25);
        org.joda.time.PeriodType periodType27 = periodType17.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter15.withParseType(periodType17);
        java.io.Writer writer29 = null;
        org.joda.time.Hours hours30 = org.joda.time.Hours.ONE;
        int int31 = hours30.getHours();
        org.joda.time.Hours hours33 = hours30.multipliedBy((-95));
        org.joda.time.Hours hours35 = hours33.dividedBy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter15.printTo(writer29, (org.joda.time.ReadablePeriod) hours35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(periodPrinter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Period period7 = period3.minusSeconds((int) (byte) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period3.getFieldTypes();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.forFields(durationFieldTypeArray8);
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, periodType10, chronology11);
        org.joda.time.PeriodType periodType13 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-87));
        org.joda.time.Days days2 = org.joda.time.Days.ONE;
        org.joda.time.Days days3 = org.joda.time.Days.ONE;
        int int4 = days2.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days3);
        org.joda.time.Days days6 = days3.multipliedBy((int) '#');
        org.joda.time.Days days7 = org.joda.time.Days.SIX;
        org.joda.time.Days days8 = days6.minus(days7);
        org.joda.time.Days days9 = org.joda.time.Days.FIVE;
        java.lang.String str10 = days9.toString();
        org.joda.time.Days days12 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days13 = days9.minus(days12);
        int int14 = days9.getDays();
        org.joda.time.Days days15 = days6.plus(days9);
        org.joda.time.Duration duration16 = days9.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        boolean boolean18 = duration1.equals((java.lang.Object) duration16);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P5D" + "'", str10, "P5D");
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        java.lang.String str2 = seconds1.toString();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        int int8 = period7.getYears();
        org.joda.time.Period period9 = period7.toPeriod();
        org.joda.time.Seconds seconds10 = period7.toStandardSeconds();
        boolean boolean11 = seconds1.isLessThan(seconds10);
        org.joda.time.Duration duration12 = seconds10.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        long long14 = duration13.getMillis();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        org.joda.time.Days days8 = duration1.toStandardDays();
        org.joda.time.Days days9 = org.joda.time.Days.MIN_VALUE;
        boolean boolean10 = days8.isLessThan(days9);
        java.lang.String str11 = days9.toString();
        org.joda.time.Days days13 = days9.plus((int) (byte) 100);
        org.joda.time.Duration duration14 = days9.toStandardDuration();
        org.joda.time.Duration duration16 = duration14.minus(36L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period17 = duration16.toPeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -51539607552");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P-2147483648D" + "'", str11, "P-2147483648D");
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        org.joda.time.Days days8 = duration1.toStandardDays();
        org.joda.time.Days days9 = org.joda.time.Days.MIN_VALUE;
        boolean boolean10 = days8.isLessThan(days9);
        java.lang.String str11 = days9.toString();
        int int12 = days9.getDays();
        org.joda.time.Period period13 = days9.toPeriod();
        org.joda.time.PeriodType periodType14 = days9.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P-2147483648D" + "'", str11, "P-2147483648D");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2147483648) + "'", int12 == (-2147483648));
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-10));
        org.joda.time.Hours hours2 = org.joda.time.Hours.MIN_VALUE;
        boolean boolean3 = hours1.isLessThan(hours2);
        org.joda.time.Hours hours5 = hours1.multipliedBy(52);
        org.joda.time.Duration duration6 = hours1.toStandardDuration();
        java.lang.String str7 = duration6.toString();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT-36000S" + "'", str7, "PT-36000S");
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        long long8 = duration1.getStandardHours();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Interval interval10 = duration1.toIntervalFrom(readableInstant9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) duration1, chronology13);
        org.joda.time.Duration duration15 = duration1.toDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration19 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration22 = duration19.plus((org.joda.time.ReadableDuration) duration21);
        long long23 = duration21.getMillis();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.Period period27 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        boolean boolean29 = period27.isSupported(durationFieldType28);
        java.lang.String str30 = durationFieldType28.getName();
        int int31 = periodType24.indexOf(durationFieldType28);
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant17, (org.joda.time.ReadableDuration) duration21, periodType24);
        boolean boolean33 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration34 = duration15.toDuration();
        org.joda.time.Duration duration36 = duration34.plus(6000L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 6000000L + "'", long23 == 6000000L);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "months" + "'", str30, "months");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-1680), 0L);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = seconds2.plus(seconds3);
        org.joda.time.Seconds seconds6 = seconds2.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds7 = seconds1.plus(seconds2);
        org.joda.time.Seconds seconds9 = seconds2.multipliedBy((int) (short) 1);
        org.joda.time.Seconds seconds11 = seconds2.plus((int) (byte) 0);
        org.joda.time.PeriodType periodType12 = seconds2.getPeriodType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.withMillis((int) (short) 0);
        int int7 = period6.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod8 = period6.toMutablePeriod();
        org.joda.time.Period period10 = period6.minusDays((int) (byte) -1);
        org.joda.time.Period period12 = period6.multipliedBy((int) (byte) 1);
        org.joda.time.Period period14 = period12.withMonths(65);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.ZERO;
        java.lang.String str3 = weeks2.toString();
        int int4 = weeks2.size();
        org.joda.time.PeriodType periodType5 = weeks2.getPeriodType();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks8 = weeks7.negated();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        boolean boolean13 = weeks8.isGreaterThan(weeks11);
        org.joda.time.Weeks weeks14 = null;
        org.joda.time.Weeks weeks15 = weeks11.minus(weeks14);
        org.joda.time.DurationFieldType durationFieldType16 = weeks11.getFieldType();
        boolean boolean17 = periodType5.isSupported(durationFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "P0W" + "'", str3, "P0W");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Days days2 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType6 = periodType3.withHoursRemoved();
        int int7 = periodType6.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.PeriodType periodType9 = periodType7.withSecondsRemoved();
        org.joda.time.Period period10 = duration4.toPeriodFrom(readableInstant5, periodType7);
        long long11 = duration4.getStandardHours();
        org.joda.time.Days days12 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = duration4.toPeriod(periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) period15, periodType17, chronology18);
        org.joda.time.Period period20 = new org.joda.time.Period((long) ' ', (long) (byte) -1, periodType17);
        org.joda.time.Period period21 = new org.joda.time.Period(660000L, periodType17);
        org.joda.time.PeriodType periodType22 = periodType17.withSecondsRemoved();
        java.lang.String str23 = periodType17.getName();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Days" + "'", str23, "Days");
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes11 = minutes5.multipliedBy(8);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.minutes((int) (byte) 100);
        boolean boolean14 = minutes5.isGreaterThan(minutes13);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Duration duration28 = minutes27.toStandardDuration();
        boolean boolean29 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Interval interval32 = duration28.toIntervalTo(readableInstant31);
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Minutes minutes34 = minutes13.minus(minutes33);
        org.joda.time.Minutes minutes36 = minutes34.minus(8);
        org.joda.time.DurationFieldType durationFieldType37 = minutes34.getFieldType();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Minutes minutes9 = minutes6.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration10 = minutes6.toStandardDuration();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Duration duration17 = minutes16.toStandardDuration();
        org.joda.time.Period period18 = duration17.toPeriod();
        boolean boolean19 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        org.joda.time.Period period22 = duration10.toPeriodTo(readableInstant20, periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, readableInstant23);
        long long25 = duration10.getStandardMinutes();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period29 = period28.negated();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationTo(readableInstant30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = duration31.toPeriod(periodType32, chronology33);
        int int35 = duration10.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration37 = duration10.withMillis((long) 52);
        org.joda.time.Duration duration38 = duration37.toDuration();
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration38);
        long long40 = duration38.getStandardHours();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration44 = new org.joda.time.Duration(1L, (-128849018880000L));
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType46 = periodType45.withMinutesRemoved();
        org.joda.time.PeriodType periodType47 = periodType46.withWeeksRemoved();
        org.joda.time.PeriodType periodType48 = periodType46.withMinutesRemoved();
        org.joda.time.PeriodType periodType49 = periodType46.withMonthsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant41, (org.joda.time.ReadableDuration) duration44, periodType46);
        boolean boolean51 = duration38.equals((java.lang.Object) duration44);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, readableInstant52);
        java.lang.String str54 = duration38.toString();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.052S" + "'", str54, "PT0.052S");
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        java.lang.Object obj0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(obj0);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Minutes minutes10 = minutes7.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration11 = minutes7.toStandardDuration();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Duration duration18 = minutes17.toStandardDuration();
        org.joda.time.Period period19 = duration18.toPeriod();
        boolean boolean20 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.Period period23 = duration11.toPeriodTo(readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration11, readableInstant24);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        long long28 = duration27.getStandardSeconds();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period33 = period31.minusMonths(0);
        org.joda.time.Minutes minutes34 = period33.toStandardMinutes();
        org.joda.time.Duration duration35 = minutes34.toStandardDuration();
        org.joda.time.Minutes minutes37 = minutes34.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration38 = minutes34.toStandardDuration();
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period43 = period41.minusMonths(0);
        org.joda.time.Minutes minutes44 = period43.toStandardMinutes();
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Period period46 = duration45.toPeriod();
        boolean boolean47 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration38.toPeriodTo(readableInstant48, periodType49);
        org.joda.time.Duration duration51 = duration27.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration52 = duration51.toDuration();
        boolean boolean53 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration58 = duration56.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration58, readableInstant59);
        org.joda.time.Duration duration62 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration65 = duration62.plus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration67 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 0);
        boolean boolean68 = duration11.isEqual((org.joda.time.ReadableDuration) duration67);
        int int69 = duration1.compareTo((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration11.toPeriod(chronology70);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-128849018880L) + "'", long28 == (-128849018880L));
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT99.640S");
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Period period8 = period4.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType9 = period4.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        boolean boolean12 = duration1.equals((java.lang.Object) periodType11);
        long long13 = duration1.getMillis();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = duration1.toPeriodTo(readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.format.PeriodPrinter periodPrinter17 = null;
        org.joda.time.format.PeriodParser periodParser18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = new org.joda.time.format.PeriodFormatter(periodPrinter17, periodParser18);
        boolean boolean20 = periodFormatter19.isParser();
        java.util.Locale locale21 = null;
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter19.withLocale(locale21);
        boolean boolean23 = periodFormatter19.isPrinter();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter19.withParseType(periodType24);
        org.joda.time.Period period28 = duration1.toPeriodTo(readableInstant16, periodType24);
        org.joda.time.Period period29 = period28.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 99640L + "'", long13 == 99640L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YearMonthDay" + "'", str25, "YearMonthDay");
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.Period period1 = org.joda.time.Period.years((-207432000));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days2 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType3 = days2.getPeriodType();
        org.joda.time.Days days5 = days2.minus(0);
        boolean boolean6 = days0.isLessThan(days5);
        org.joda.time.Days days7 = org.joda.time.Days.TWO;
        org.joda.time.Days days8 = days7.negated();
        org.joda.time.Days days9 = days7.negated();
        org.joda.time.Days days10 = days5.minus(days7);
        org.joda.time.Days days12 = days5.plus(13);
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.Days days15 = org.joda.time.Days.days(13);
        boolean boolean16 = days12.isLessThan(days15);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str8 = periodType7.getName();
        org.joda.time.PeriodType periodType9 = periodType7.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter2.withParseType(periodType7);
        org.joda.time.format.PeriodPrinter periodPrinter11 = null;
        org.joda.time.format.PeriodParser periodParser12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = new org.joda.time.format.PeriodFormatter(periodPrinter11, periodParser12);
        boolean boolean14 = periodFormatter13.isParser();
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter13.withParseType(periodType16);
        boolean boolean19 = periodFormatter18.isPrinter();
        boolean boolean20 = periodFormatter18.isParser();
        org.joda.time.format.PeriodParser periodParser21 = periodFormatter18.getParser();
        org.joda.time.PeriodType periodType22 = periodFormatter18.getParseType();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter2.withParseType(periodType22);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(0L, (-128849018880L), periodType26, chronology27);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period32 = period31.negated();
        int int33 = period31.getHours();
        org.joda.time.MutablePeriod mutablePeriod34 = period31.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod35 = period31.toMutablePeriod();
        org.joda.time.Period period37 = period31.minusMinutes((int) 'a');
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Period period40 = period31.minus((org.joda.time.ReadablePeriod) days39);
        boolean boolean41 = periodType26.equals((java.lang.Object) period31);
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter2.withParseType(periodType26);
        org.joda.time.PeriodType periodType43 = periodFormatter2.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = periodFormatter2.parseMutablePeriod("P-2147483646Y-10WT-2S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "YearMonthDay" + "'", str8, "YearMonthDay");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(periodParser21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNull(periodType43);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days3 = days0.minus(0);
        org.joda.time.Days days4 = days3.negated();
        java.lang.String str5 = days4.toString();
        org.joda.time.Days days6 = days4.negated();
        org.joda.time.Days days7 = days6.negated();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P-5D" + "'", str5, "P-5D");
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days7);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        boolean boolean9 = periodFormatter2.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = periodFormatter2.parsePeriod("StandardNoMinutesNoSeconds");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 2147483647, (long) '#', chronology2);
        org.joda.time.Period period5 = period3.withYears(268435455);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period3.toDurationTo(readableInstant6);
        org.joda.time.Period period8 = period3.toPeriod();
        int int9 = period8.getHours();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-20) + "'", int9 == (-20));
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.Period period1 = org.joda.time.Period.years(7);
        org.joda.time.Period period2 = period1.normalizedStandard();
        int[] intArray3 = period1.getValues();
        int int4 = period1.getYears();
        org.joda.time.Period period6 = new org.joda.time.Period(100000L);
        org.joda.time.Period period8 = period6.minusYears(100);
        org.joda.time.Period period10 = period6.withHours((-2));
        org.joda.time.Period period12 = period6.minusWeeks((int) (short) 0);
        boolean boolean13 = period1.equals((java.lang.Object) period6);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period6.toDurationFrom(readableInstant14);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[7, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (-2147483648));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant2);
        java.lang.String str4 = period3.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P-244983Y-9M-1W-2DT-8H" + "'", str4, "P-244983Y-9M-1W-2DT-8H");
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 1, periodType9, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType9);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Period period22 = period20.minusSeconds(0);
        org.joda.time.Period period24 = period22.minusWeeks(10);
        org.joda.time.Period period25 = period22.negated();
        org.joda.time.Period period27 = period22.minusMillis((int) (short) 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray28 = period22.getFieldTypes();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.forFields(durationFieldTypeArray28);
        org.joda.time.PeriodType periodType30 = periodType29.withMillisRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter15.withParseType(periodType30);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(100L, periodType33);
        org.joda.time.Period period36 = period34.withYears(1);
        int int37 = period36.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod38 = period36.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = periodFormatter31.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod38, "", 6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldTypeArray28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod38);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        int int14 = period2.getDays();
        org.joda.time.Period period16 = period2.plusHours((int) '#');
        org.joda.time.Period period18 = period16.plusDays((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period16.toDurationTo(readableInstant19);
        org.joda.time.Period period21 = period16.toPeriod();
        int int22 = period21.size();
        org.joda.time.Period period24 = period21.plusSeconds((int) (byte) 100);
        org.joda.time.Days days26 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days28 = days26.multipliedBy((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType29 = days28.getFieldType();
        org.joda.time.Period period31 = period24.withFieldAdded(durationFieldType29, (-35));
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType35 = periodType34.withMinutesRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withWeeksRemoved();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) -1, (long) (short) -1, periodType35, chronology37);
        org.joda.time.PeriodType periodType39 = periodType35.withMinutesRemoved();
        org.joda.time.Period period40 = period31.normalizedStandard(periodType35);
        org.joda.time.Period period42 = period31.plusHours(0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.Period period4 = new org.joda.time.Period(7, 4, 11, (-2147483648));
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DurationFieldType durationFieldType6 = seconds5.getFieldType();
        java.lang.String str7 = seconds5.toString();
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT-2122032S" + "'", str7, "PT-2122032S");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        org.joda.time.DurationFieldType durationFieldType4 = weeks2.getFieldType();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeksIn(readableInterval6);
        boolean boolean8 = weeks5.isLessThan(weeks7);
        org.joda.time.Weeks weeks10 = weeks7.multipliedBy(10);
        org.joda.time.Weeks weeks11 = weeks2.minus(weeks7);
        int int12 = weeks11.getWeeks();
        org.joda.time.Weeks weeks14 = weeks11.multipliedBy(2147483647);
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks17 = weeks15.dividedBy(1);
        org.joda.time.PeriodType periodType18 = weeks17.getPeriodType();
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) weeks14, periodType18);
        org.joda.time.PeriodType periodType20 = periodType18.withSecondsRemoved();
        org.joda.time.PeriodType periodType21 = periodType18.withSecondsRemoved();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = period11.getFieldType((int) (short) 1);
        int int15 = periodType8.indexOf(durationFieldType14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) ' ', periodType8);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType8);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType19 = periodType18.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter2.withParseType(periodType19);
        java.util.Locale locale21 = null;
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withLocale(locale21);
        boolean boolean23 = periodFormatter22.isPrinter();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter22.withParseType(periodType24);
        boolean boolean27 = periodFormatter26.isPrinter();
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds29 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds30 = seconds28.plus(seconds29);
        org.joda.time.PeriodType periodType31 = seconds28.getPeriodType();
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period35 = period34.negated();
        org.joda.time.DurationFieldType durationFieldType37 = period34.getFieldType((int) (short) 1);
        int int38 = periodType31.indexOf(durationFieldType37);
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter26.withParseType(periodType31);
        java.io.Writer writer40 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period45 = period43.minusMonths(0);
        org.joda.time.Period period47 = period43.minusSeconds((int) (byte) 100);
        org.joda.time.Days days48 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType49 = days48.getPeriodType();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.PeriodType periodType51 = periodType49.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        boolean boolean53 = periodType51.isSupported(durationFieldType52);
        int int54 = period43.get(durationFieldType52);
        int int55 = period43.getDays();
        int int56 = period43.getMillis();
        org.joda.time.Period period58 = period43.minusMonths((-1));
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter39.printTo(writer40, (org.joda.time.ReadablePeriod) period43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YearMonthDay" + "'", str25, "YearMonthDay");
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-36) + "'", int56 == (-36));
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period4.negated();
        int int6 = period4.getHours();
        org.joda.time.Period period8 = org.joda.time.Period.days(10);
        org.joda.time.Period period10 = period8.plusMonths((int) 'a');
        org.joda.time.Period period12 = period8.plusSeconds((int) (short) 100);
        org.joda.time.Period period14 = period12.minusMonths((int) 'a');
        org.joda.time.Period period15 = period4.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Hours hours16 = period4.toStandardHours();
        int int17 = hours16.getHours();
        org.joda.time.Hours hours18 = hours0.plus(hours16);
        org.joda.time.Hours hours19 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours21 = hours19.dividedBy(100);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Period period28 = period26.minusSeconds(0);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Hours hours30 = period29.toStandardHours();
        boolean boolean31 = hours21.isLessThan(hours30);
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) '#');
        int int34 = period33.getYears();
        org.joda.time.Hours hours35 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period33.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours38 = period37.toStandardHours();
        org.joda.time.Hours hours39 = hours21.minus(hours38);
        boolean boolean40 = hours16.isLessThan(hours38);
        org.joda.time.Hours hours41 = org.joda.time.Hours.ONE;
        java.lang.String str42 = hours41.toString();
        org.joda.time.Hours hours43 = hours41.negated();
        org.joda.time.Hours hours44 = hours38.plus(hours41);
        org.joda.time.Hours hours46 = hours38.dividedBy(8);
        java.lang.String str47 = hours38.toString();
        org.joda.time.Hours hours49 = hours38.multipliedBy((-207432000));
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1H" + "'", str42, "PT1H");
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0H" + "'", str47, "PT0H");
        org.junit.Assert.assertNotNull(hours49);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.withMillis((int) (short) 0);
        int int7 = period6.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod8 = period6.toMutablePeriod();
        org.joda.time.Duration duration9 = period6.toStandardDuration();
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType11 = seconds10.getFieldType();
        org.joda.time.Seconds seconds13 = seconds10.plus(35);
        org.joda.time.Seconds seconds14 = seconds13.negated();
        org.joda.time.Seconds seconds16 = seconds14.minus((-2147483646));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Minutes minutes7 = minutes5.dividedBy((int) (byte) 100);
        int int8 = minutes7.size();
        org.joda.time.Minutes minutes10 = minutes7.dividedBy((int) (short) 100);
        org.joda.time.Minutes minutes12 = minutes7.plus(0);
        org.joda.time.Minutes minutes13 = minutes7.negated();
        int int14 = minutes7.getMinutes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Period period8 = period4.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType9 = period4.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType10.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withYearsRemoved();
        java.lang.String str12 = periodType11.toString();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter7.withParseType(periodType11);
        org.joda.time.PeriodType periodType14 = periodFormatter13.getParseType();
        org.joda.time.PeriodType periodType15 = periodFormatter13.getParseType();
        java.util.Locale locale16 = periodFormatter13.getLocale();
        org.joda.time.PeriodType periodType17 = periodFormatter13.getParseType();
        org.joda.time.Days days19 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType20 = days19.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withHoursRemoved();
        org.joda.time.PeriodType periodType22 = periodType20.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.days();
        boolean boolean24 = periodType22.isSupported(durationFieldType23);
        org.joda.time.PeriodType periodType25 = periodType22.withMinutesRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((-128849018880L), periodType22);
        org.joda.time.PeriodType periodType27 = periodType22.withDaysRemoved();
        java.lang.String str28 = periodType22.toString();
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter13.withParseType(periodType22);
        java.io.Writer writer30 = null;
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.weeksIn(readableInterval31);
        org.joda.time.Weeks weeks34 = weeks32.dividedBy(11);
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeks(35);
        org.joda.time.Weeks weeks38 = weeks36.multipliedBy(5);
        org.joda.time.Period period39 = weeks38.toPeriod();
        boolean boolean40 = weeks32.isGreaterThan(weeks38);
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks42 = weeks41.negated();
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.ZERO;
        java.lang.String str44 = weeks43.toString();
        int int45 = weeks43.size();
        org.joda.time.PeriodType periodType46 = weeks43.getPeriodType();
        org.joda.time.Weeks weeks48 = weeks43.minus(7);
        java.lang.String str49 = weeks43.toString();
        org.joda.time.Weeks weeks50 = weeks43.negated();
        org.joda.time.Weeks weeks51 = weeks42.minus(weeks50);
        boolean boolean52 = weeks38.isGreaterThan(weeks50);
        org.joda.time.Weeks weeks53 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks55 = weeks53.dividedBy(1);
        org.joda.time.Weeks weeks56 = org.joda.time.Weeks.MIN_VALUE;
        boolean boolean57 = weeks55.isGreaterThan(weeks56);
        org.joda.time.Duration duration58 = weeks55.toStandardDuration();
        org.joda.time.Weeks weeks59 = weeks38.minus(weeks55);
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeks(35);
        org.joda.time.Weeks weeks63 = weeks61.multipliedBy(5);
        org.joda.time.Weeks weeks65 = weeks61.dividedBy((-36));
        org.joda.time.Weeks weeks66 = weeks38.minus(weeks65);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter13.printTo(writer30, (org.joda.time.ReadablePeriod) weeks38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[Days]" + "'", str12, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Days]" + "'", str28, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P0W" + "'", str44, "P0W");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "P0W" + "'", str49, "P0W");
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(weeks66);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (-36));
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Period period8 = period5.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period8.toDurationFrom(readableInstant10);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Duration duration18 = minutes17.toStandardDuration();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period23 = period21.minusMonths(0);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Duration duration25 = minutes24.toStandardDuration();
        org.joda.time.Duration duration27 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration25, (int) (short) 100);
        org.joda.time.Duration duration29 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration27, 3);
        org.joda.time.Duration duration30 = duration2.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period31.toDurationFrom(readableInstant32);
        int int34 = period31.getMinutes();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        boolean boolean15 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration7.plus((long) (short) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period22 = period20.minusMonths(0);
        int int23 = period22.getYears();
        org.joda.time.Period period25 = period22.plusYears((int) ' ');
        boolean boolean26 = duration17.equals((java.lang.Object) period25);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period31 = period29.minusMonths(0);
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Duration duration33 = minutes32.toStandardDuration();
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = duration33.plus((long) (byte) 0);
        org.joda.time.Duration duration38 = duration33.withMillis((long) 1);
        boolean boolean39 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration33);
        java.lang.String str40 = duration17.toString();
        boolean boolean41 = duration0.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration0, readableInstant42);
        org.joda.time.Period period45 = period43.withMonths(999);
        org.joda.time.Period period47 = period43.plusDays((int) (byte) 1);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.010S" + "'", str40, "PT0.010S");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        org.joda.time.Seconds seconds4 = seconds1.plus((int) (byte) 0);
        org.joda.time.Seconds seconds6 = seconds1.minus(8);
        org.joda.time.DurationFieldType durationFieldType7 = seconds1.getFieldType();
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds11 = seconds9.multipliedBy(10);
        org.joda.time.Seconds seconds12 = seconds8.minus(seconds9);
        org.joda.time.Seconds seconds13 = seconds1.plus(seconds12);
        org.joda.time.Seconds seconds15 = seconds13.plus(0);
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds18 = seconds16.plus(seconds17);
        java.lang.String str19 = seconds16.toString();
        org.joda.time.Seconds seconds21 = seconds16.plus(6);
        org.joda.time.PeriodType periodType22 = seconds21.getPeriodType();
        org.joda.time.Seconds seconds23 = seconds15.minus(seconds21);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT2S" + "'", str19, "PT2S");
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(seconds23);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withMinutesRemoved();
        org.joda.time.PeriodType periodType7 = periodType4.withMinutesRemoved();
        org.joda.time.Period period8 = new org.joda.time.Period(10000000L, (long) (byte) -1, periodType4);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType3 = seconds2.getFieldType();
        org.joda.time.Seconds seconds4 = seconds2.negated();
        org.joda.time.DurationFieldType durationFieldType5 = seconds2.getFieldType();
        org.joda.time.Duration duration6 = seconds2.toStandardDuration();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) -1, periodType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 1, (long) 8, periodType6, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(0L, periodType6, chronology10);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-9500));
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        int int3 = seconds1.getSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, readableInstant15);
        java.lang.String str17 = duration13.toString();
        long long18 = duration13.getMillis();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period22.minusMonths(0);
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        org.joda.time.Duration duration26 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes28 = minutes25.multipliedBy((int) (short) 1);
        org.joda.time.PeriodType periodType29 = minutes28.getPeriodType();
        org.joda.time.PeriodType periodType30 = minutes28.getPeriodType();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, readableInstant19, periodType30);
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period32.minusWeeks((-5));
        org.joda.time.Period period36 = period32.plusWeeks(14402);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds37 = period36.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 8710329600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period4.minusSeconds(0);
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.withDays((int) (byte) 1);
        org.joda.time.Period period11 = period9.plusMonths((-53));
        org.joda.time.Period period13 = period11.withDays(1491308);
        org.joda.time.Period period15 = period11.plusMonths((-63));
        org.joda.time.format.PeriodPrinter periodPrinter16 = null;
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatter periodFormatter18 = new org.joda.time.format.PeriodFormatter(periodPrinter16, periodParser17);
        boolean boolean19 = periodFormatter18.isParser();
        org.joda.time.Days days20 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType21 = days20.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter18.withParseType(periodType21);
        boolean boolean24 = periodFormatter23.isPrinter();
        boolean boolean25 = periodFormatter23.isParser();
        boolean boolean26 = periodFormatter23.isPrinter();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter23.withLocale(locale27);
        java.util.Locale locale29 = null;
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter28.withLocale(locale29);
        boolean boolean31 = periodFormatter30.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = period11.toString(periodFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.joda.time.Period period8 = new org.joda.time.Period(2, 1, 572, (-5), 377884, (-100), (-95), (-9500));
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        int[] intArray10 = period8.getValues();
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2, 1, 572, -5, 377884, -100, -95, -9500]");
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration4 = minutes3.toStandardDuration();
        long long5 = duration4.getStandardSeconds();
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Duration duration12 = minutes11.toStandardDuration();
        org.joda.time.Minutes minutes14 = minutes11.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration15 = minutes11.toStandardDuration();
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Minutes minutes21 = period20.toStandardMinutes();
        org.joda.time.Duration duration22 = minutes21.toStandardDuration();
        org.joda.time.Period period23 = duration22.toPeriod();
        boolean boolean24 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.Period period27 = duration15.toPeriodTo(readableInstant25, periodType26);
        org.joda.time.Duration duration28 = duration4.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period33 = period31.minusMonths(0);
        org.joda.time.Minutes minutes34 = period33.toStandardMinutes();
        org.joda.time.Duration duration35 = minutes34.toStandardDuration();
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period40 = period38.minusMonths(0);
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Duration duration42 = minutes41.toStandardDuration();
        boolean boolean43 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, readableInstant44);
        long long46 = duration42.getStandardHours();
        org.joda.time.Duration duration47 = duration15.minus((org.joda.time.ReadableDuration) duration42);
        int int48 = duration2.compareTo((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = duration2.toPeriodFrom(readableInstant49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType52 = periodType51.withMonthsRemoved();
        org.joda.time.Period period53 = duration2.toPeriod(periodType51);
        org.joda.time.Duration duration55 = duration2.plus(0L);
        org.joda.time.Duration duration57 = duration2.minus(432000L);
        org.joda.time.Period period58 = duration2.toPeriod();
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-128849018880L) + "'", long5 == (-128849018880L));
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        java.lang.String str2 = seconds1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = seconds1.getFieldType();
        org.joda.time.Duration duration4 = seconds1.toStandardDuration();
        org.joda.time.Period period5 = new org.joda.time.Period();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Duration duration8 = duration7.toDuration();
        long long9 = duration7.getStandardSeconds();
        long long10 = duration7.getMillis();
        boolean boolean11 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration12 = duration4.toDuration();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) (byte) 0);
        org.joda.time.Duration duration15 = duration4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Interval interval17 = duration14.toIntervalTo(readableInstant16);
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval17);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(seconds18);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType2 = hours0.getFieldType();
        int int3 = hours0.getHours();
        org.joda.time.PeriodType periodType4 = hours0.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks5 = weeks4.negated();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        boolean boolean9 = weeks6.isLessThan(weeks8);
        boolean boolean10 = weeks5.isGreaterThan(weeks8);
        org.joda.time.Weeks weeks11 = null;
        org.joda.time.Weeks weeks12 = weeks8.minus(weeks11);
        org.joda.time.DurationFieldType durationFieldType13 = weeks12.getFieldType();
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks17 = weeks16.negated();
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.weeksIn(readableInterval19);
        boolean boolean21 = weeks18.isLessThan(weeks20);
        boolean boolean22 = weeks17.isGreaterThan(weeks20);
        boolean boolean23 = weeks14.isLessThan(weeks17);
        org.joda.time.Weeks weeks24 = weeks12.plus(weeks17);
        org.joda.time.Duration duration25 = weeks12.toStandardDuration();
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.ZERO;
        java.lang.String str27 = weeks26.toString();
        int int28 = weeks26.size();
        org.joda.time.PeriodType periodType29 = weeks26.getPeriodType();
        org.joda.time.Weeks weeks31 = weeks26.minus(7);
        org.joda.time.PeriodType periodType32 = weeks31.getPeriodType();
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration25, periodType32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P0W" + "'", str27, "P0W");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration4 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration1.minus((long) (-1));
        long long7 = duration6.getStandardHours();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) '#');
        int int12 = period11.getYears();
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period11.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((-1L), periodType14, chronology15);
        org.joda.time.PeriodType periodType17 = periodType14.withWeeksRemoved();
        int int18 = periodType17.size();
        org.joda.time.Period period19 = duration6.toPeriodTo(readableInstant8, periodType17);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod2 = hours1.toMutablePeriod();
        org.joda.time.Period period4 = org.joda.time.Period.weeks((int) (byte) 10);
        org.joda.time.Hours hours5 = period4.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType6 = hours5.getFieldType();
        org.joda.time.Hours hours8 = hours5.plus(59);
        org.joda.time.Hours hours9 = org.joda.time.Hours.EIGHT;
        boolean boolean10 = hours8.isLessThan(hours9);
        org.joda.time.Hours hours11 = hours1.minus(hours9);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period14.negated();
        int int16 = period14.getHours();
        org.joda.time.Period period18 = org.joda.time.Period.days(10);
        org.joda.time.Period period20 = period18.plusMonths((int) 'a');
        org.joda.time.Period period22 = period18.plusSeconds((int) (short) 100);
        org.joda.time.Period period24 = period22.minusMonths((int) 'a');
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Hours hours26 = period14.toStandardHours();
        org.joda.time.Hours hours28 = hours26.minus((int) '#');
        org.joda.time.Hours hours30 = hours26.multipliedBy((int) (short) 100);
        boolean boolean31 = hours11.isGreaterThan(hours26);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Hours hours33 = org.joda.time.Hours.hoursIn(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Hours hours35 = org.joda.time.Hours.hoursIn(readableInterval34);
        org.joda.time.Hours hours37 = hours35.multipliedBy(8);
        org.joda.time.Hours hours38 = hours33.plus(hours35);
        org.joda.time.Duration duration39 = hours38.toStandardDuration();
        org.joda.time.Duration duration40 = hours38.toStandardDuration();
        org.joda.time.Hours hours41 = hours38.negated();
        org.joda.time.Hours hours43 = hours41.multipliedBy(1680);
        boolean boolean44 = hours26.isGreaterThan(hours41);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT1M39.640S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-14400));
        org.joda.time.Period period3 = period1.plusWeeks((-2147483646));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withYearsRemoved();
        java.lang.String str12 = periodType11.toString();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter7.withParseType(periodType11);
        org.joda.time.PeriodType periodType14 = periodFormatter13.getParseType();
        java.util.Locale locale15 = periodFormatter13.getLocale();
        java.util.Locale locale16 = periodFormatter13.getLocale();
        boolean boolean17 = periodFormatter13.isPrinter();
        boolean boolean18 = periodFormatter13.isPrinter();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType24 = days23.getPeriodType();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType26 = periodType24.withSecondsRemoved();
        org.joda.time.Period period27 = duration21.toPeriodFrom(readableInstant22, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) 1, periodType24, chronology28);
        org.joda.time.Period period31 = period29.plusMinutes((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = periodFormatter13.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod32, "PT86400S", (-268435465));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[Days]" + "'", str12, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration0, readableInstant1);
        long long3 = duration0.getStandardHours();
        org.joda.time.Duration duration5 = duration0.withMillis((-60L));
        org.joda.time.Minutes minutes6 = duration5.toStandardMinutes();
        org.joda.time.Period period7 = duration5.toPeriod();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardMinutes((long) (-10));
        org.joda.time.Duration duration4 = duration2.minus((-128849018880000L));
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) 97);
        org.joda.time.Duration duration7 = duration4.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration6);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        java.lang.Object obj4 = null;
        boolean boolean5 = weeks2.equals(obj4);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks((int) (short) 1);
        org.joda.time.Weeks weeks9 = weeks7.dividedBy(100);
        org.joda.time.Weeks weeks10 = weeks2.minus(weeks9);
        org.joda.time.Period period11 = weeks9.toPeriod();
        org.joda.time.Weeks weeks13 = weeks9.multipliedBy((-97));
        // The following exception was thrown during execution in test generation
        try {
            int int15 = weeks13.getValue((-35791394));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -35791394");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(weeks13);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days2 = org.joda.time.Days.ONE;
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean4 = days2.isSupported(durationFieldType3);
        boolean boolean5 = days0.isGreaterThan(days2);
        int int6 = days2.getDays();
        org.joda.time.DurationFieldType durationFieldType7 = days2.getFieldType();
        org.joda.time.Days days8 = null;
        boolean boolean9 = days2.isLessThan(days8);
        org.joda.time.Days days10 = days2.negated();
        org.joda.time.PeriodType periodType11 = days2.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType12 = days2.getFieldType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        int int2 = period1.getYears();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Period period4 = period1.withFields(readablePeriod3);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period7.negated();
        int int9 = period7.getHours();
        org.joda.time.Period period11 = org.joda.time.Period.days(10);
        org.joda.time.Period period13 = period11.plusMonths((int) 'a');
        org.joda.time.Period period15 = period11.plusSeconds((int) (short) 100);
        org.joda.time.Period period17 = period15.minusMonths((int) 'a');
        org.joda.time.Period period18 = period7.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period19 = period1.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period21 = period1.withSeconds(1);
        int int22 = period1.getYears();
        org.joda.time.Period period24 = period1.plusWeeks((-116));
        java.lang.Class<?> wildcardClass25 = period1.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration26 = new org.joda.time.Duration((java.lang.Object) wildcardClass25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period16.minusMonths(0);
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Duration duration20 = minutes19.toStandardDuration();
        boolean boolean21 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration25 = duration13.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration26 = duration13.toDuration();
        boolean boolean27 = duration4.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period32 = period30.minusMonths(0);
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = duration34.plus((long) (byte) 0);
        org.joda.time.Duration duration39 = duration34.withMillis((long) 1);
        boolean boolean40 = duration4.isEqual((org.joda.time.ReadableDuration) duration39);
        java.lang.String str41 = duration39.toString();
        org.joda.time.Period period42 = duration39.toPeriod();
        org.joda.time.Period period43 = duration39.toPeriod();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = duration39.toPeriod(periodType44, chronology45);
        org.joda.time.Period period48 = period46.minusDays(118);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = period48.getValue((-95));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -95");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.001S" + "'", str41, "PT0.001S");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Duration duration3 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration6 = duration3.plus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withMillisRemoved();
        org.joda.time.Period period12 = duration3.toPeriodFrom(readableInstant7, periodType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        org.joda.time.format.PeriodParser periodParser11 = periodFormatter10.getParser();
        org.joda.time.Days days13 = org.joda.time.Days.days((int) '4');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) days13, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = periodFormatter10.print((org.joda.time.ReadablePeriod) days13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNull(periodParser11);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = periodFormatter2.getParseType();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isPrinter();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.Period period17 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period18 = duration16.toPeriod();
        org.joda.time.Period period19 = period18.toPeriod();
        org.joda.time.Period period21 = period19.withHours(999);
        org.joda.time.Period period22 = period21.toPeriod();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = periodFormatter2.print((org.joda.time.ReadablePeriod) period22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) minutes15, chronology18);
        org.joda.time.Minutes minutes20 = minutes0.minus(minutes15);
        org.joda.time.DurationFieldType durationFieldType22 = minutes20.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType23 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes24 = minutes20.negated();
        int int25 = minutes20.size();
        org.joda.time.Minutes minutes26 = minutes20.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(minutes26);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.joda.time.Period period2 = new org.joda.time.Period((-2147483648L), (long) (byte) 0);
        org.joda.time.Period period4 = period2.multipliedBy(52);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        boolean boolean6 = period2.isSupported(durationFieldType5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.ZERO;
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.Minutes minutes11 = duration9.toStandardMinutes();
        org.joda.time.Minutes minutes12 = minutes7.minus(minutes11);
        org.joda.time.DurationFieldType durationFieldType13 = minutes7.getFieldType();
        boolean boolean14 = period2.isSupported(durationFieldType13);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-4083));
        org.joda.time.Minutes minutes2 = weeks1.toStandardMinutes();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '#');
        org.joda.time.Period period3 = period1.withWeeks((int) (byte) 0);
        org.joda.time.Period period5 = period1.plusSeconds((int) '4');
        org.joda.time.Hours hours6 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period5);
        java.lang.String str7 = hours6.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT840H" + "'", str7, "PT840H");
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        org.joda.time.Minutes minutes11 = minutes8.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration12 = minutes8.toStandardDuration();
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period15.minusMonths(0);
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Duration duration19 = minutes18.toStandardDuration();
        org.joda.time.Period period20 = duration19.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.Period period24 = duration12.toPeriodTo(readableInstant22, periodType23);
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = duration12.toPeriod(chronology26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) 7);
        boolean boolean30 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration12.toPeriod();
        org.joda.time.Duration duration33 = new org.joda.time.Duration((long) 36);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) (-1));
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant34, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration43 = duration41.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, readableInstant44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = duration43.toIntervalFrom(readableInstant46);
        org.joda.time.Minutes minutes48 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Minutes minutes50 = minutes49.negated();
        org.joda.time.Minutes minutes52 = minutes50.minus((-97));
        org.joda.time.PeriodType periodType53 = minutes52.getPeriodType();
        org.joda.time.Period period54 = duration36.toPeriodTo(readableInstant38, periodType53);
        org.joda.time.Duration duration55 = duration33.plus((org.joda.time.ReadableDuration) duration36);
        boolean boolean56 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-128849018880L) + "'", long2 == (-128849018880L));
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        boolean boolean8 = periodFormatter7.isPrinter();
        boolean boolean9 = periodFormatter7.isParser();
        org.joda.time.PeriodType periodType10 = periodFormatter7.getParseType();
        boolean boolean11 = periodFormatter7.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatter7.getPrinter();
        org.joda.time.format.PeriodParser periodParser13 = periodFormatter7.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter7.getPrinter();
        java.io.Writer writer15 = null;
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.withDays(8);
        org.joda.time.Period period20 = period16.plusMinutes((int) (byte) 0);
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period23 = period16.withSeconds(100);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter7.printTo(writer15, (org.joda.time.ReadablePeriod) period16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(periodPrinter12);
        org.junit.Assert.assertNull(periodParser13);
        org.junit.Assert.assertNull(periodPrinter14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-10));
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Hours hours5 = org.joda.time.Hours.hoursIn(readableInterval4);
        org.joda.time.Hours hours7 = hours5.multipliedBy(8);
        org.joda.time.Hours hours8 = hours3.plus(hours5);
        org.joda.time.Hours hours9 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours11 = hours9.dividedBy(100);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Period period18 = period16.minusSeconds(0);
        org.joda.time.Period period19 = period18.normalizedStandard();
        org.joda.time.Hours hours20 = period19.toStandardHours();
        boolean boolean21 = hours11.isLessThan(hours20);
        org.joda.time.Period period23 = org.joda.time.Period.millis((int) '#');
        int int24 = period23.getYears();
        org.joda.time.Hours hours25 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period27 = period23.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours28 = period27.toStandardHours();
        org.joda.time.Hours hours29 = hours11.minus(hours28);
        org.joda.time.Hours hours30 = hours3.minus(hours11);
        boolean boolean31 = hours1.isLessThan(hours3);
        org.joda.time.Hours hours32 = hours3.negated();
        java.lang.String str33 = hours3.toString();
        org.joda.time.PeriodType periodType34 = hours3.getPeriodType();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0H" + "'", str33, "PT0H");
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds4 = seconds2.multipliedBy((int) (byte) 100);
        org.joda.time.PeriodType periodType5 = seconds4.getPeriodType();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.parseSeconds("PT0S");
        java.lang.String str8 = seconds7.toString();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period11.minusMonths(0);
        int int14 = period13.getYears();
        org.joda.time.Period period15 = period13.toPeriod();
        org.joda.time.Seconds seconds16 = period13.toStandardSeconds();
        boolean boolean17 = seconds7.isLessThan(seconds16);
        org.joda.time.Seconds seconds18 = seconds4.plus(seconds16);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds21 = seconds19.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType22 = seconds19.getFieldType();
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds25 = seconds23.plus(seconds24);
        org.joda.time.Seconds seconds27 = seconds23.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds28 = seconds19.plus(seconds23);
        org.joda.time.Seconds seconds29 = seconds4.plus(seconds28);
        org.joda.time.Seconds seconds31 = seconds4.minus(11);
        org.joda.time.Seconds seconds33 = seconds4.dividedBy((-53));
        org.joda.time.PeriodType periodType34 = seconds33.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.Hours hours0 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours1 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours2 = hours0.minus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours4 = hours3.negated();
        org.joda.time.Hours hours5 = hours0.plus(hours4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Hours hours7 = org.joda.time.Hours.hoursIn(readableInterval6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Hours hours9 = org.joda.time.Hours.hoursIn(readableInterval8);
        org.joda.time.Hours hours11 = hours9.multipliedBy(8);
        org.joda.time.Hours hours12 = hours7.plus(hours9);
        org.joda.time.Hours hours14 = hours7.multipliedBy((-2147483646));
        boolean boolean15 = hours4.isLessThan(hours7);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        long long4 = duration3.getStandardSeconds();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period9 = period7.minusMonths(0);
        org.joda.time.Minutes minutes10 = period9.toStandardMinutes();
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes10.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration14 = minutes10.toStandardDuration();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        org.joda.time.Period period22 = duration21.toPeriod();
        boolean boolean23 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.Period period26 = duration14.toPeriodTo(readableInstant24, periodType25);
        org.joda.time.Duration duration27 = duration3.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration28 = duration27.toDuration();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType33 = period31.getPeriodType();
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration27, periodType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(111640L, periodType33, chronology35);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-128849018880L) + "'", long4 == (-128849018880L));
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        java.lang.String str3 = seconds0.toString();
        org.joda.time.Seconds seconds5 = seconds0.plus(6);
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) seconds0);
        org.joda.time.Duration duration7 = seconds0.toStandardDuration();
        org.joda.time.Seconds seconds9 = seconds0.minus(1491308);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2S" + "'", str3, "PT2S");
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds9);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        java.lang.String str4 = periodType3.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Hours]" + "'", str4, "PeriodType[Hours]");
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(2147483645);
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        org.joda.time.Period period17 = duration16.toPeriod();
        boolean boolean18 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration21 = duration16.withDurationAdded(11L, (int) (byte) 10);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Duration duration28 = minutes27.toStandardDuration();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period33 = period31.minusMonths(0);
        org.joda.time.Minutes minutes34 = period33.toStandardMinutes();
        org.joda.time.Duration duration35 = minutes34.toStandardDuration();
        boolean boolean36 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration28.plus((long) (short) 10);
        long long39 = duration38.getStandardSeconds();
        org.joda.time.Duration duration40 = duration38.toDuration();
        java.lang.String str41 = duration38.toString();
        boolean boolean42 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration43 = duration38.toDuration();
        org.joda.time.Period period44 = duration43.toPeriod();
        int int45 = period44.getHours();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.010S" + "'", str41, "PT0.010S");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((-110));
        org.joda.time.Weeks weeks2 = seconds1.toStandardWeeks();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days3 = days0.plus((int) (byte) 100);
        org.joda.time.Duration duration4 = days3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = duration4.toPeriodFrom(readableInstant5);
        java.lang.String str7 = duration4.toString();
        long long8 = duration4.getStandardMinutes();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant9, (org.joda.time.ReadableDuration) duration11);
        boolean boolean13 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration4.toPeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 1, (long) (-36), periodType17);
        org.joda.time.PeriodType periodType19 = periodType17.withMinutesRemoved();
        org.joda.time.PeriodType periodType20 = periodType17.withDaysRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.Period period22 = duration4.toPeriod(periodType20);
        long long23 = duration4.getMillis();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT9072000S" + "'", str7, "PT9072000S");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 151200L + "'", long8 == 151200L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9072000000L + "'", long23 == 9072000000L);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 1, periodType9, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType9);
        org.joda.time.Days days16 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter2.withParseType(periodType17);
        org.joda.time.format.PeriodPrinter periodPrinter21 = periodFormatter2.getPrinter();
        java.lang.StringBuffer stringBuffer22 = null;
        org.joda.time.Period period24 = org.joda.time.Period.hours(65);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer22, (org.joda.time.ReadablePeriod) period24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(periodPrinter21);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withParseType(periodType5);
        boolean boolean8 = periodFormatter7.isPrinter();
        boolean boolean9 = periodFormatter7.isParser();
        org.joda.time.PeriodType periodType10 = periodFormatter7.getParseType();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.PeriodType periodType12 = periodType10.withDaysRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withMinutesRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType17 = periodType14.getFieldType((-37));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = duration6.plus((long) (byte) 0);
        org.joda.time.Duration duration11 = duration6.withMillis((long) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Period period13 = period12.toPeriod();
        org.joda.time.Period period15 = period13.withWeeks((-612));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(100);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period2.minusYears((-5));
        org.joda.time.Period period6 = period2.plusMonths((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = period2.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.PeriodType periodType9 = periodType7.withSecondsRemoved();
        org.joda.time.Period period10 = duration4.toPeriodFrom(readableInstant5, periodType7);
        long long11 = duration4.getMillis();
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType15.withMinutesRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(10L, (long) (byte) -1, periodType19, chronology20);
        org.joda.time.Period period22 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration4, periodType19);
        org.joda.time.Duration duration23 = duration4.toDuration();
        org.joda.time.Days days24 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.PeriodType periodType27 = periodType25.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType25.withSecondsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withMinutesRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableDuration) duration4, periodType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = duration4.toPeriod(chronology31);
        org.joda.time.Duration duration35 = duration4.withDurationAdded(0L, 35);
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration4);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy((int) (byte) 100);
        org.joda.time.Seconds seconds4 = seconds0.dividedBy((-95));
        int int5 = seconds0.getSeconds();
        org.joda.time.Seconds seconds7 = seconds0.dividedBy((-10));
        org.joda.time.PeriodType periodType8 = seconds0.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType9 = seconds0.getFieldType();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration14 = duration12.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, readableInstant15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = duration14.toIntervalFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Seconds seconds21 = seconds19.plus(0);
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.seconds((int) '#');
        int int24 = seconds23.getSeconds();
        org.joda.time.Seconds seconds26 = seconds23.dividedBy((int) (short) 1);
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds29 = seconds27.plus(seconds28);
        java.lang.String str30 = seconds27.toString();
        org.joda.time.DurationFieldType durationFieldType31 = seconds27.getFieldType();
        org.joda.time.Seconds seconds33 = seconds27.multipliedBy(0);
        org.joda.time.Seconds seconds34 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration35 = seconds34.toStandardDuration();
        boolean boolean36 = seconds33.isGreaterThan(seconds34);
        org.joda.time.DurationFieldType durationFieldType38 = seconds33.getFieldType((int) (short) 0);
        boolean boolean39 = seconds26.isGreaterThan(seconds33);
        boolean boolean40 = seconds21.isGreaterThan(seconds33);
        org.joda.time.Seconds seconds42 = seconds21.dividedBy(56);
        org.joda.time.Seconds seconds44 = seconds42.plus((int) (short) 10);
        int int45 = seconds42.getSeconds();
        org.joda.time.Seconds seconds47 = seconds42.minus((-268435465));
        boolean boolean48 = seconds0.isGreaterThan(seconds42);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT2S" + "'", str30, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.Period period1 = org.joda.time.Period.millis((-110));
        org.joda.time.Period period3 = period1.withMillis(377884);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) ' ');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        boolean boolean17 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.Duration duration21 = duration9.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant22);
        org.joda.time.Duration duration25 = duration9.plus((long) 8);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period32 = period30.minusMonths(0);
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Duration duration34 = minutes33.toStandardDuration();
        org.joda.time.Minutes minutes36 = minutes33.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration37 = minutes33.toStandardDuration();
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period42 = period40.minusMonths(0);
        org.joda.time.Minutes minutes43 = period42.toStandardMinutes();
        org.joda.time.Duration duration44 = minutes43.toStandardDuration();
        org.joda.time.Period period45 = duration44.toPeriod();
        boolean boolean46 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration44.toIntervalTo(readableInstant47);
        boolean boolean49 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration44);
        int int50 = duration9.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period53);
        org.joda.time.PeriodType periodType55 = period53.getPeriodType();
        org.joda.time.Period period56 = duration27.toPeriod(periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration27);
        boolean boolean58 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration59 = duration27.toDuration();
        org.joda.time.Period period60 = duration59.toPeriod();
        org.joda.time.Period period62 = period60.minusYears((-7));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks63 = period62.toStandardWeeks();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Weeks as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.joda.time.Period period1 = org.joda.time.Period.days((-2147483596));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = seconds2.plus(seconds3);
        org.joda.time.Seconds seconds6 = seconds2.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds7 = seconds1.plus(seconds2);
        org.joda.time.Seconds seconds9 = seconds2.multipliedBy((int) (short) 1);
        org.joda.time.Seconds seconds11 = seconds9.multipliedBy((int) '4');
        org.joda.time.Seconds seconds13 = seconds11.multipliedBy(87);
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds18 = seconds16.plus(seconds17);
        org.joda.time.Seconds seconds20 = seconds16.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds21 = seconds15.plus(seconds16);
        org.joda.time.Seconds seconds23 = seconds16.multipliedBy((int) (short) 1);
        org.joda.time.Seconds seconds25 = seconds23.dividedBy((int) 'a');
        org.joda.time.Seconds seconds26 = seconds25.negated();
        org.joda.time.Seconds seconds27 = seconds11.minus(seconds26);
        org.joda.time.Seconds seconds29 = seconds27.dividedBy(2147483645);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType31 = seconds27.getFieldType(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 18");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.Days days1 = org.joda.time.Days.days(10);
        org.joda.time.Days days3 = days1.dividedBy(87);
        org.joda.time.Duration duration4 = days1.toStandardDuration();
        org.joda.time.Days days6 = days1.multipliedBy((-100));
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(days6);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days8);
        org.joda.time.Days days11 = days9.minus((-1));
        org.joda.time.PeriodType periodType12 = days11.getPeriodType();
        org.joda.time.Days days14 = days11.multipliedBy((int) (byte) -1);
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        java.lang.String str16 = days15.toString();
        org.joda.time.Days days18 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days19 = days15.minus(days18);
        int int20 = days15.getDays();
        org.joda.time.Days days21 = days11.minus(days15);
        org.joda.time.Days days23 = days11.minus((-612));
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P5D" + "'", str16, "P5D");
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days23);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 1, 3, 100, (int) (short) 0, (-10), (int) '4', 0, 10);
        org.joda.time.Period period10 = period8.minusMonths(8);
        org.joda.time.Period period12 = period10.minusDays(4);
        org.joda.time.Period period14 = period10.plusSeconds((-4083));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType16 = period14.getFieldType((-1680));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period4.negated();
        int int6 = period4.getHours();
        org.joda.time.Period period8 = org.joda.time.Period.days(10);
        org.joda.time.Period period10 = period8.plusMonths((int) 'a');
        org.joda.time.Period period12 = period8.plusSeconds((int) (short) 100);
        org.joda.time.Period period14 = period12.minusMonths((int) 'a');
        org.joda.time.Period period15 = period4.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Hours hours16 = period4.toStandardHours();
        int int17 = hours16.getHours();
        org.joda.time.Hours hours18 = hours0.plus(hours16);
        org.joda.time.Hours hours19 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours21 = hours19.dividedBy(100);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.Period period28 = period26.minusSeconds(0);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Hours hours30 = period29.toStandardHours();
        boolean boolean31 = hours21.isLessThan(hours30);
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) '#');
        int int34 = period33.getYears();
        org.joda.time.Hours hours35 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period33.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours38 = period37.toStandardHours();
        org.joda.time.Hours hours39 = hours21.minus(hours38);
        boolean boolean40 = hours16.isLessThan(hours38);
        org.joda.time.Hours hours41 = org.joda.time.Hours.ONE;
        java.lang.String str42 = hours41.toString();
        org.joda.time.Hours hours43 = hours41.negated();
        org.joda.time.Hours hours44 = hours38.plus(hours41);
        org.joda.time.PeriodType periodType45 = hours38.getPeriodType();
        org.joda.time.Hours hours47 = hours38.plus(377884);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1H" + "'", str42, "PT1H");
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(hours47);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.joda.time.Period period4 = period1.minusMonths(100);
        org.joda.time.Period period5 = period1.normalizedStandard();
        org.joda.time.Period period7 = period5.plusSeconds(5);
        org.joda.time.Period period9 = period5.minusYears(35);
        org.joda.time.Period period10 = period9.toPeriod();
        int int11 = period9.getMillis();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) (short) 1);
        org.joda.time.Period period3 = period1.plusDays(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = period3.getValue((-87));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -87");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 2147483647, (long) '#', chronology2);
        org.joda.time.Period period5 = period3.withYears(268435455);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        int int5 = period4.getYears();
        org.joda.time.Period period7 = period4.plusYears((int) ' ');
        org.joda.time.Period period9 = period4.minusSeconds((int) (short) 0);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        org.joda.time.Minutes minutes18 = minutes15.multipliedBy((int) (short) 1);
        org.joda.time.PeriodType periodType19 = minutes18.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType20 = null;
        boolean boolean21 = minutes18.isSupported(durationFieldType20);
        org.joda.time.Period period22 = period9.minus((org.joda.time.ReadablePeriod) minutes18);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 10, (int) (short) 100, 5, (-10));
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        long long13 = duration6.getStandardHours();
        org.joda.time.Duration duration16 = duration6.withDurationAdded(10L, (-36));
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Period period19 = period17.plusSeconds(5);
        org.joda.time.Period period21 = period17.minusMinutes((int) (short) 100);
        org.joda.time.Period period22 = period4.withFields((org.joda.time.ReadablePeriod) period21);
        int int23 = period22.getMinutes();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-99) + "'", int23 == (-99));
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period11.minusMonths(0);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.Duration duration20 = duration8.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, readableInstant21);
        org.joda.time.Duration duration24 = duration8.plus((long) 8);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration24.toIntervalFrom(readableInstant25);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period31 = period29.minusMonths(0);
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Duration duration33 = minutes32.toStandardDuration();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.Duration duration40 = minutes39.toStandardDuration();
        boolean boolean41 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = duration33.plus((long) (short) 10);
        org.joda.time.Duration duration45 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        boolean boolean46 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration48 = minutes47.toStandardDuration();
        long long49 = duration48.getStandardSeconds();
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period54 = period52.minusMonths(0);
        org.joda.time.Minutes minutes55 = period54.toStandardMinutes();
        org.joda.time.Duration duration56 = minutes55.toStandardDuration();
        org.joda.time.Minutes minutes58 = minutes55.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration59 = minutes55.toStandardDuration();
        org.joda.time.Period period62 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period64 = period62.minusMonths(0);
        org.joda.time.Minutes minutes65 = period64.toStandardMinutes();
        org.joda.time.Duration duration66 = minutes65.toStandardDuration();
        org.joda.time.Period period67 = duration66.toPeriod();
        boolean boolean68 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.days();
        org.joda.time.Period period71 = duration59.toPeriodTo(readableInstant69, periodType70);
        org.joda.time.Duration duration72 = duration48.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Period period75 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period77 = period75.minusMonths(0);
        org.joda.time.Minutes minutes78 = period77.toStandardMinutes();
        org.joda.time.Duration duration79 = minutes78.toStandardDuration();
        org.joda.time.Period period82 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period84 = period82.minusMonths(0);
        org.joda.time.Minutes minutes85 = period84.toStandardMinutes();
        org.joda.time.Duration duration86 = minutes85.toStandardDuration();
        boolean boolean87 = duration79.isShorterThan((org.joda.time.ReadableDuration) duration86);
        boolean boolean88 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration79);
        boolean boolean89 = duration1.isEqual((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration90 = new org.joda.time.Duration((java.lang.Object) duration1);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.Period period92 = new org.joda.time.Period((java.lang.Object) duration1, chronology91);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-128849018880L) + "'", long49 == (-128849018880L));
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.Period period12 = duration6.toPeriodFrom(readableInstant7, periodType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (short) 1, periodType9, chronology13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType9);
        org.joda.time.Days days16 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter2.withParseType(periodType17);
        org.joda.time.format.PeriodPrinter periodPrinter21 = periodFormatter2.getPrinter();
        java.util.Locale locale22 = periodFormatter2.getLocale();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period27 = period25.minusMonths(0);
        org.joda.time.Period period29 = period27.minusSeconds(0);
        org.joda.time.Period period31 = period29.minusWeeks(10);
        org.joda.time.MutablePeriod mutablePeriod32 = period29.toMutablePeriod();
        int int34 = period29.getValue((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period29.toDurationTo(readableInstant35);
        org.joda.time.Period period38 = org.joda.time.Period.minutes((int) (short) 10);
        org.joda.time.Period period40 = period38.withHours((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType42 = period40.getFieldType(3);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        int int44 = period40.get(durationFieldType43);
        int int45 = period29.indexOf(durationFieldType43);
        org.joda.time.Period period47 = period29.plusSeconds((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = periodFormatter2.print((org.joda.time.ReadablePeriod) period29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(periodPrinter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((-8));
        java.lang.Class<?> wildcardClass2 = seconds1.getClass();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
        org.joda.time.Minutes minutes2 = minutes0.minus(2147483645);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.plus(52);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes15 = minutes11.plus(8);
        org.joda.time.DurationFieldType durationFieldType16 = minutes15.getFieldType();
        boolean boolean17 = minutes3.isLessThan(minutes15);
        boolean boolean18 = minutes0.isLessThan(minutes15);
        org.joda.time.PeriodType periodType19 = minutes0.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) 'a');
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Period period9 = period5.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType10 = period5.getPeriodType();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        java.lang.String str12 = periodType11.toString();
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 1, periodType11);
        org.joda.time.DurationFieldType durationFieldType15 = periodType11.getFieldType(0);
        boolean boolean16 = minutes1.isSupported(durationFieldType15);
        int int17 = minutes1.size();
        org.joda.time.Days days18 = minutes1.toStandardDays();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str12, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(days18);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationTo(readableInstant14);
        boolean boolean16 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration20 = duration15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = duration20.toIntervalFrom(readableInstant21);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period29 = period27.minusMonths(0);
        org.joda.time.Minutes minutes30 = period29.toStandardMinutes();
        org.joda.time.Duration duration31 = minutes30.toStandardDuration();
        org.joda.time.Minutes minutes33 = minutes30.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes36 = minutes34.plus(52);
        org.joda.time.Minutes minutes37 = minutes30.plus(minutes36);
        int int38 = minutes36.getMinutes();
        org.joda.time.Minutes minutes39 = minutes24.plus(minutes36);
        org.joda.time.Minutes minutes41 = minutes24.multipliedBy((int) '4');
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period46 = period44.minusMonths(0);
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Duration duration48 = minutes47.toStandardDuration();
        org.joda.time.Minutes minutes50 = minutes47.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes52 = minutes47.multipliedBy((-1680));
        boolean boolean53 = minutes24.isLessThan(minutes47);
        int int54 = minutes24.getMinutes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2147483596) + "'", int38 == (-2147483596));
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration1 = seconds0.toStandardDuration();
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.Seconds seconds9 = seconds5.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds10 = seconds4.plus(seconds5);
        org.joda.time.Seconds seconds12 = seconds4.plus((int) '4');
        org.joda.time.Duration duration13 = seconds12.toStandardDuration();
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds18 = seconds16.plus(seconds17);
        org.joda.time.Seconds seconds20 = seconds16.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds21 = seconds15.plus(seconds16);
        org.joda.time.Seconds seconds23 = seconds15.plus((int) '4');
        org.joda.time.Duration duration24 = seconds23.toStandardDuration();
        boolean boolean25 = seconds12.isLessThan(seconds23);
        boolean boolean26 = seconds2.isGreaterThan(seconds12);
        boolean boolean27 = seconds0.isGreaterThan(seconds2);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds30 = seconds28.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType31 = seconds30.getFieldType();
        org.joda.time.Seconds seconds32 = seconds0.minus(seconds30);
        org.joda.time.Seconds seconds34 = seconds32.minus((-5));
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds34);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        org.joda.time.Duration duration2 = weeks0.toStandardDuration();
        org.joda.time.Weeks weeks3 = weeks0.negated();
        org.joda.time.Weeks weeks5 = weeks3.minus(14400);
        org.joda.time.Weeks weeks7 = weeks5.multipliedBy(14405);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeks(1);
        boolean boolean11 = weeks8.isGreaterThan(weeks10);
        java.lang.Object obj12 = null;
        boolean boolean13 = weeks10.equals(obj12);
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeks((int) (short) 1);
        org.joda.time.Weeks weeks17 = weeks15.dividedBy(100);
        org.joda.time.Weeks weeks18 = weeks10.minus(weeks17);
        org.joda.time.Weeks weeks20 = weeks17.plus(35);
        org.joda.time.Weeks weeks22 = weeks17.multipliedBy(10);
        org.joda.time.Duration duration23 = weeks17.toStandardDuration();
        org.joda.time.Weeks weeks25 = weeks17.multipliedBy((int) (short) 100);
        org.joda.time.Weeks weeks27 = weeks25.dividedBy(14400);
        org.joda.time.Weeks weeks29 = weeks25.plus(268435455);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Weeks weeks31 = org.joda.time.Weeks.weeksIn(readableInterval30);
        org.joda.time.Weeks weeks33 = weeks31.plus(11);
        boolean boolean34 = weeks25.isLessThan(weeks33);
        org.joda.time.Weeks weeks35 = weeks7.minus(weeks33);
        org.joda.time.Weeks weeks37 = weeks35.plus(168);
        org.joda.time.Weeks weeks38 = weeks35.negated();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks38);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(70);
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.joda.time.Period period1 = org.joda.time.Period.days((-207432000));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        org.joda.time.Days days8 = duration1.toStandardDays();
        org.joda.time.PeriodType periodType9 = days8.getPeriodType();
        org.joda.time.Days days10 = days8.negated();
        org.joda.time.Days days11 = org.joda.time.Days.FIVE;
        java.lang.String str12 = days11.toString();
        org.joda.time.Days days14 = days11.multipliedBy((int) (byte) -1);
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        java.lang.String str16 = days15.toString();
        org.joda.time.Days days17 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType18 = days17.getPeriodType();
        org.joda.time.Days days20 = days17.minus(0);
        boolean boolean21 = days15.isLessThan(days20);
        boolean boolean22 = days14.isLessThan(days15);
        org.joda.time.Days days24 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days25 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType26 = days25.getPeriodType();
        org.joda.time.Days days27 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType29 = days27.getFieldType();
        boolean boolean30 = days25.isLessThan(days27);
        boolean boolean31 = days24.isGreaterThan(days27);
        org.joda.time.Days days32 = days14.minus(days27);
        boolean boolean33 = days8.isLessThan(days32);
        org.joda.time.Days days35 = days32.plus((-100));
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Days days37 = null;
        org.joda.time.Days days38 = days35.minus(days37);
        java.lang.Class<?> wildcardClass39 = days38.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P5D" + "'", str12, "P5D");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P5D" + "'", str16, "P5D");
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds(100);
        org.joda.time.Period period8 = period2.minusWeeks((-612));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 35);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration12 = duration10.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration12.toIntervalFrom(readableInstant15);
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Seconds seconds19 = seconds17.plus(0);
        org.joda.time.PeriodType periodType20 = seconds17.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period21 = new org.joda.time.Period(0, (-105), 2147483644, 118, (-2147483645), (-1680), (-35), 103, periodType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period4.minusSeconds(0);
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.withDays((int) (byte) 1);
        org.joda.time.Period period11 = period9.plusMonths((-53));
        org.joda.time.Period period13 = period11.withDays(1491308);
        org.joda.time.Period period15 = period11.plusMonths((-63));
        org.joda.time.Days days16 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType17 = days16.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = period11.withPeriodType(periodType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withDaysRemoved();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.Period period6 = new org.joda.time.Period((long) (-100), periodType4);
        org.joda.time.Period period7 = new org.joda.time.Period((-40320L), 490L, periodType4);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "YearMonthDayTimeNoDays" + "'", str5, "YearMonthDayTimeNoDays");
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration6.toPeriod();
        long long20 = duration6.getMillis();
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Period period27 = period23.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period23.toDurationTo(readableInstant29);
        boolean boolean31 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration30);
        java.lang.String str32 = duration6.toString();
        org.joda.time.Duration duration33 = duration6.toDuration();
        long long34 = duration33.getStandardMinutes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        org.joda.time.Duration duration2 = weeks0.toStandardDuration();
        org.joda.time.Duration duration4 = duration2.plus((long) (-95));
        org.joda.time.Duration duration6 = duration4.withMillis((long) 14400);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        org.joda.time.Period period15 = period2.withHours(1);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Period period22 = period18.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        java.lang.String str25 = periodType24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) period2, periodType24, chronology26);
        org.joda.time.PeriodType periodType28 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType29 = periodType24.withMillisRemoved();
        org.joda.time.PeriodType periodType30 = periodType24.withMillisRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withDaysRemoved();
        org.joda.time.format.PeriodPrinter periodPrinter32 = null;
        org.joda.time.format.PeriodParser periodParser33 = null;
        org.joda.time.format.PeriodFormatter periodFormatter34 = new org.joda.time.format.PeriodFormatter(periodPrinter32, periodParser33);
        org.joda.time.format.PeriodPrinter periodPrinter35 = periodFormatter34.getPrinter();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Days days40 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType41 = days40.getPeriodType();
        org.joda.time.PeriodType periodType42 = periodType41.withHoursRemoved();
        org.joda.time.PeriodType periodType43 = periodType41.withSecondsRemoved();
        org.joda.time.Period period44 = duration38.toPeriodFrom(readableInstant39, periodType41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (short) 1, periodType41, chronology45);
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter34.withParseType(periodType41);
        org.joda.time.format.PeriodPrinter periodPrinter48 = periodFormatter47.getPrinter();
        boolean boolean49 = periodType30.equals((java.lang.Object) periodFormatter47);
        org.joda.time.Days days50 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType51 = days50.getPeriodType();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.PeriodType periodType53 = periodType51.withYearsRemoved();
        int int54 = periodType51.size();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter47.withParseType(periodType51);
        java.io.Writer writer56 = null;
        org.joda.time.Hours hours57 = org.joda.time.Hours.ONE;
        int int58 = hours57.getHours();
        org.joda.time.DurationFieldType durationFieldType59 = hours57.getFieldType();
        org.joda.time.Hours hours60 = null;
        org.joda.time.Hours hours61 = hours57.plus(hours60);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period66 = period64.minusMonths(0);
        org.joda.time.Period period68 = period66.minusSeconds(0);
        org.joda.time.Period period69 = period68.normalizedStandard();
        org.joda.time.Period period71 = period68.withHours((int) 'a');
        org.joda.time.Period period73 = period71.minusHours(0);
        org.joda.time.Hours hours74 = period71.toStandardHours();
        org.joda.time.Period period76 = org.joda.time.Period.hours((-1));
        org.joda.time.Hours hours77 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period76);
        boolean boolean78 = hours74.isGreaterThan(hours77);
        org.joda.time.Hours hours80 = org.joda.time.Hours.hours((-10));
        org.joda.time.Hours hours81 = org.joda.time.Hours.MIN_VALUE;
        boolean boolean82 = hours80.isLessThan(hours81);
        org.joda.time.Hours hours84 = hours80.multipliedBy(52);
        org.joda.time.Period period87 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period89 = period87.minusMonths(0);
        org.joda.time.Period period91 = period87.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType92 = period87.getPeriodType();
        org.joda.time.Hours hours93 = period87.toStandardHours();
        org.joda.time.Hours hours94 = hours80.minus(hours93);
        org.joda.time.Hours hours95 = hours74.plus(hours80);
        org.joda.time.Hours hours96 = hours61.minus(hours80);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter55.printTo(writer56, (org.joda.time.ReadablePeriod) hours80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str25, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNull(periodPrinter35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNull(periodPrinter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(hours61);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(hours74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(hours77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(hours80);
        org.junit.Assert.assertNotNull(hours81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(hours84);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(hours93);
        org.junit.Assert.assertNotNull(hours94);
        org.junit.Assert.assertNotNull(hours95);
        org.junit.Assert.assertNotNull(hours96);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Duration duration4 = minutes3.toStandardDuration();
        long long5 = duration4.getStandardSeconds();
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Duration duration12 = minutes11.toStandardDuration();
        org.joda.time.Minutes minutes14 = minutes11.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration15 = minutes11.toStandardDuration();
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Minutes minutes21 = period20.toStandardMinutes();
        org.joda.time.Duration duration22 = minutes21.toStandardDuration();
        org.joda.time.Period period23 = duration22.toPeriod();
        boolean boolean24 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.Period period27 = duration15.toPeriodTo(readableInstant25, periodType26);
        org.joda.time.Duration duration28 = duration4.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period33 = period31.minusMonths(0);
        org.joda.time.Minutes minutes34 = period33.toStandardMinutes();
        org.joda.time.Duration duration35 = minutes34.toStandardDuration();
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period40 = period38.minusMonths(0);
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Duration duration42 = minutes41.toStandardDuration();
        boolean boolean43 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, readableInstant44);
        long long46 = duration42.getStandardHours();
        org.joda.time.Duration duration47 = duration15.minus((org.joda.time.ReadableDuration) duration42);
        int int48 = duration2.compareTo((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration50 = duration42.minus((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Interval interval52 = duration42.toIntervalTo(readableInstant51);
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval52);
        org.joda.time.MutablePeriod mutablePeriod54 = minutes53.toMutablePeriod();
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-128849018880L) + "'", long5 == (-128849018880L));
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isParser();
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds8 = seconds6.plus(seconds7);
        org.joda.time.PeriodType periodType9 = seconds6.getPeriodType();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.DurationFieldType durationFieldType15 = period12.getFieldType((int) (short) 1);
        int int16 = periodType9.indexOf(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) ' ', periodType9);
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter3.withParseType(periodType9);
        org.joda.time.PeriodType periodType19 = periodType9.withDaysRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period(10L, periodType9);
        org.joda.time.Period period21 = period20.normalizedStandard();
        org.joda.time.Period period23 = period21.withWeeks(1);
        org.joda.time.Period period25 = period23.minusMonths((-97));
        org.joda.time.Period period26 = period25.toPeriod();
        int[] intArray27 = period25.getValues();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 97, 1, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy((int) (byte) 100);
        org.joda.time.PeriodType periodType3 = seconds2.getPeriodType();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.parseSeconds("PT0S");
        java.lang.String str6 = seconds5.toString();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        int int12 = period11.getYears();
        org.joda.time.Period period13 = period11.toPeriod();
        org.joda.time.Seconds seconds14 = period11.toStandardSeconds();
        boolean boolean15 = seconds5.isLessThan(seconds14);
        org.joda.time.Seconds seconds16 = seconds2.plus(seconds14);
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds19 = seconds17.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType20 = seconds17.getFieldType();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds23 = seconds21.plus(seconds22);
        org.joda.time.Seconds seconds25 = seconds21.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds26 = seconds17.plus(seconds21);
        org.joda.time.Seconds seconds27 = seconds2.plus(seconds26);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) seconds27);
        int int29 = seconds27.getSeconds();
        org.joda.time.Seconds seconds31 = seconds27.plus(776);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(seconds31);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.ONE;
        boolean boolean4 = seconds1.isGreaterThan(seconds3);
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds7 = null;
        org.joda.time.Seconds seconds8 = seconds6.plus(seconds7);
        boolean boolean9 = seconds3.isLessThan(seconds8);
        org.joda.time.PeriodType periodType10 = seconds8.getPeriodType();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds13 = seconds11.minus((int) 'a');
        org.joda.time.Seconds seconds14 = seconds13.negated();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Period period21 = period17.withMillis((int) (short) 0);
        int int22 = period21.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod23 = period21.toMutablePeriod();
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType26 = seconds25.getFieldType();
        java.lang.String str27 = seconds25.toString();
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds29 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds30 = seconds28.plus(seconds29);
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.ONE;
        boolean boolean32 = seconds29.isGreaterThan(seconds31);
        org.joda.time.Seconds seconds34 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Seconds seconds35 = null;
        org.joda.time.Seconds seconds36 = seconds34.plus(seconds35);
        boolean boolean37 = seconds31.isLessThan(seconds36);
        org.joda.time.PeriodType periodType38 = seconds36.getPeriodType();
        boolean boolean39 = seconds25.isGreaterThan(seconds36);
        boolean boolean40 = seconds13.isGreaterThan(seconds25);
        boolean boolean41 = seconds8.isGreaterThan(seconds13);
        org.joda.time.Seconds seconds43 = seconds8.dividedBy((-2147483596));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType45 = seconds8.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(seconds43);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period11.minusMonths(0);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration8.plus((long) (short) 10);
        org.joda.time.Period period19 = duration8.toPeriod();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.Period period34 = duration30.toPeriod(periodType33);
        boolean boolean35 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period43 = period41.minusMonths(0);
        org.joda.time.Period period45 = period41.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType46 = period41.getPeriodType();
        org.joda.time.PeriodType periodType47 = periodType46.withMinutesRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withHoursRemoved();
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant37, readableInstant38, periodType47);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, readableInstant36, periodType47);
        org.joda.time.PeriodType periodType51 = periodType47.withMonthsRemoved();
        org.joda.time.PeriodType periodType52 = periodType47.withMillisRemoved();
        org.joda.time.PeriodType periodType53 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType54 = periodType47.withHoursRemoved();
        org.joda.time.Period period55 = new org.joda.time.Period(readableDuration0, readableInstant1, periodType54);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration60 = duration58.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, readableInstant61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration60.toIntervalFrom(readableInstant63);
        org.joda.time.Weeks weeks65 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval64);
        org.joda.time.PeriodType periodType66 = weeks65.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) periodType54, periodType66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(periodType66);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableInstant1);
        org.joda.time.Weeks weeks3 = period2.toStandardWeeks();
        org.junit.Assert.assertNotNull(weeks3);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        int int2 = period1.getYears();
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = period1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration4 = new org.joda.time.Duration((java.lang.Object) durationFieldTypeArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: [Lorg.joda.time.DurationFieldType;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period4.minusSeconds(0);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Days days12 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withSecondsRemoved();
        org.joda.time.Period period16 = duration10.toPeriodFrom(readableInstant11, periodType13);
        org.joda.time.Days days17 = duration10.toStandardDays();
        org.joda.time.PeriodType periodType18 = days17.getPeriodType();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (byte) 0, periodType18);
        java.lang.String str20 = periodType18.getName();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.PeriodType periodType27 = periodType25.withSecondsRemoved();
        org.joda.time.Period period28 = duration22.toPeriodFrom(readableInstant23, periodType25);
        long long29 = duration22.getStandardHours();
        org.joda.time.Days days30 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType31 = days30.getPeriodType();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = duration22.toPeriod(periodType31, chronology32);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Period period40 = period36.minusSeconds((int) (byte) 100);
        org.joda.time.Period period42 = period36.multipliedBy((int) '4');
        org.joda.time.DurationFieldType durationFieldType44 = period42.getFieldType(2);
        boolean boolean45 = periodType31.isSupported(durationFieldType44);
        int int46 = periodType18.indexOf(durationFieldType44);
        org.joda.time.Period period48 = period6.withField(durationFieldType44, 70);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Days" + "'", str20, "Days");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period3 = period2.negated();
        int int4 = period2.getHours();
        int int5 = period2.getMonths();
        org.joda.time.Period period7 = period2.withMonths(2147483647);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        boolean boolean11 = weeks8.isLessThan(weeks10);
        org.joda.time.Weeks weeks13 = weeks10.multipliedBy((int) (short) 100);
        org.joda.time.Period period14 = period2.withFields((org.joda.time.ReadablePeriod) weeks13);
        org.joda.time.MutablePeriod mutablePeriod15 = weeks13.toMutablePeriod();
        org.joda.time.Weeks weeks17 = weeks13.minus(100);
        org.joda.time.Weeks weeks19 = weeks13.plus((int) (short) 10);
        org.joda.time.Duration duration20 = weeks19.toStandardDuration();
        java.lang.String str21 = weeks19.toString();
        org.joda.time.Duration duration22 = weeks19.toStandardDuration();
        org.joda.time.Period period24 = org.joda.time.Period.seconds((int) (byte) 100);
        org.joda.time.Period period26 = period24.multipliedBy(87);
        org.joda.time.Period period28 = period24.plusSeconds(7);
        int int29 = period28.getWeeks();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period28.toDurationFrom(readableInstant30);
        boolean boolean32 = duration22.isEqual((org.joda.time.ReadableDuration) duration31);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P10W" + "'", str21, "P10W");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.plus(1);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Duration duration9 = minutes8.toStandardDuration();
        org.joda.time.Minutes minutes11 = minutes8.multipliedBy((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType12 = minutes8.getFieldType();
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod14 = minutes13.toMutablePeriod();
        org.joda.time.Minutes minutes15 = minutes8.plus(minutes13);
        org.joda.time.Minutes minutes16 = minutes0.plus(minutes13);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = minutes13.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        org.joda.time.Period period15 = period2.withHours(1);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Period period22 = period18.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        java.lang.String str25 = periodType24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) period2, periodType24, chronology26);
        org.joda.time.PeriodType periodType28 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType29 = periodType24.withMillisRemoved();
        org.joda.time.PeriodType periodType30 = periodType24.withMillisRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withDaysRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withMinutesRemoved();
        java.lang.String str33 = periodType32.getName();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str25, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "StandardNoMinutesNoMillisNoDays" + "'", str33, "StandardNoMinutesNoMillisNoDays");
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType4 = periodFormatter2.getParseType();
        boolean boolean5 = periodFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod7 = periodFormatter2.parseMutablePeriod("PT-100H");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertNull(periodType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        int int2 = weeks0.size();
        org.joda.time.PeriodType periodType3 = weeks0.getPeriodType();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks6 = weeks5.negated();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        boolean boolean10 = weeks7.isLessThan(weeks9);
        boolean boolean11 = weeks6.isGreaterThan(weeks9);
        org.joda.time.Weeks weeks12 = null;
        org.joda.time.Weeks weeks13 = weeks9.minus(weeks12);
        org.joda.time.DurationFieldType durationFieldType14 = weeks9.getFieldType();
        boolean boolean15 = periodType3.isSupported(durationFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DurationField durationField17 = durationFieldType14.getField(chronology16);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("P104W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P104W\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 13);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT-22605091H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours1 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours3 = hours1.dividedBy(100);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Period period10 = period8.minusSeconds(0);
        org.joda.time.Period period11 = period10.normalizedStandard();
        org.joda.time.Hours hours12 = period11.toStandardHours();
        boolean boolean13 = hours3.isLessThan(hours12);
        boolean boolean14 = hours0.isLessThan(hours3);
        org.joda.time.Duration duration15 = hours3.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-36));
        org.joda.time.Duration duration3 = duration1.plus((long) (-7));
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant4, readableDuration5);
        org.joda.time.Period period8 = period6.minusYears(0);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period6);
        org.joda.time.MutablePeriod mutablePeriod10 = period6.toMutablePeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        boolean boolean12 = duration3.equals((java.lang.Object) periodType11);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType2 = days0.getFieldType();
        org.joda.time.Days days3 = org.joda.time.Days.MAX_VALUE;
        boolean boolean4 = days0.isGreaterThan(days3);
        org.joda.time.Duration duration5 = days0.toStandardDuration();
        org.joda.time.Duration duration6 = days0.toStandardDuration();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.minus((int) 'a');
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds5 = seconds3.plus(seconds4);
        org.joda.time.Seconds seconds7 = seconds3.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds10 = seconds8.plus(seconds9);
        java.lang.String str11 = seconds8.toString();
        org.joda.time.DurationFieldType durationFieldType12 = seconds8.getFieldType();
        java.lang.String str13 = durationFieldType12.getName();
        boolean boolean14 = seconds3.isSupported(durationFieldType12);
        int int15 = seconds2.get(durationFieldType12);
        int int16 = seconds2.getSeconds();
        org.joda.time.PeriodType periodType17 = seconds2.getPeriodType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT2S" + "'", str11, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "seconds" + "'", str13, "seconds");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-95) + "'", int15 == (-95));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-95) + "'", int16 == (-95));
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("PeriodType[DayTime]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[DayTime]\" is malformed at \"eriodType[DayTime]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType2 = hours0.getFieldType();
        int int3 = hours0.getHours();
        org.joda.time.PeriodType periodType4 = hours0.getPeriodType();
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) '#');
        int int7 = period6.getYears();
        org.joda.time.Hours hours8 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period6);
        int int9 = hours8.getHours();
        org.joda.time.Hours hours11 = hours8.multipliedBy((int) (short) 1);
        org.joda.time.Hours hours13 = hours8.multipliedBy((int) (short) 100);
        org.joda.time.Hours hours15 = hours8.plus((-2147483648));
        org.joda.time.Hours hours16 = hours0.plus(hours15);
        int int17 = hours16.size();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period21 = period20.negated();
        int int22 = period20.getHours();
        org.joda.time.Period period24 = org.joda.time.Period.days(10);
        org.joda.time.Period period26 = period24.plusMonths((int) 'a');
        org.joda.time.Period period28 = period24.plusSeconds((int) (short) 100);
        org.joda.time.Period period30 = period28.minusMonths((int) 'a');
        org.joda.time.Period period31 = period20.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Hours hours32 = period20.toStandardHours();
        org.joda.time.Hours hours34 = hours32.minus((int) '#');
        boolean boolean35 = hours16.isGreaterThan(hours32);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks(1);
        boolean boolean3 = weeks0.isGreaterThan(weeks2);
        java.lang.Object obj4 = null;
        boolean boolean5 = weeks2.equals(obj4);
        org.joda.time.Weeks weeks7 = weeks2.minus(0);
        int int8 = weeks7.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = weeks7.getValue((-89));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -89");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = period1.toDurationTo(readableInstant3);
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration4);
        org.joda.time.Days days7 = org.joda.time.Days.days((int) (short) -1);
        org.joda.time.Days days9 = days7.minus((int) '4');
        org.joda.time.Days days11 = days9.dividedBy((int) (short) 10);
        org.joda.time.Days days12 = org.joda.time.Days.FIVE;
        java.lang.String str13 = days12.toString();
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.Days days17 = days14.minus(0);
        boolean boolean18 = days12.isLessThan(days17);
        java.lang.String str19 = days12.toString();
        org.joda.time.DurationFieldType durationFieldType20 = days12.getFieldType();
        org.joda.time.Days days21 = days11.plus(days12);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.Period period26 = period24.minusYears(0);
        org.joda.time.Days days27 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period24);
        boolean boolean28 = days21.isGreaterThan(days27);
        org.joda.time.Days days29 = days21.negated();
        boolean boolean30 = period5.equals((java.lang.Object) days29);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P5D" + "'", str13, "P5D");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P5D" + "'", str19, "P5D");
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.Period period7 = duration1.toPeriodFrom(readableInstant2, periodType4);
        long long8 = duration1.getMillis();
        org.joda.time.Period period9 = duration1.toPeriod();
        org.joda.time.Duration duration10 = duration1.toDuration();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, readableInstant11);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.joda.time.Days days1 = org.joda.time.Days.days((-49));
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.joda.time.Period period1 = org.joda.time.Period.millis(168);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalFrom(readableInstant7);
        org.joda.time.Days days9 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Days days11 = days9.minus((int) '4');
        org.joda.time.Days days12 = days11.negated();
        org.joda.time.Days days14 = days11.plus((int) (byte) 1);
        org.joda.time.Days days15 = org.joda.time.Days.TWO;
        java.lang.String str16 = days15.toString();
        org.joda.time.Days days17 = days15.negated();
        org.joda.time.Days days18 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType19 = days18.getPeriodType();
        org.joda.time.Days days20 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType21 = days20.getPeriodType();
        org.joda.time.Days days23 = days20.minus(0);
        org.joda.time.Days days24 = days23.negated();
        boolean boolean25 = days18.isGreaterThan(days23);
        org.joda.time.Days days26 = days18.negated();
        org.joda.time.DurationFieldType durationFieldType27 = days18.getFieldType();
        org.joda.time.Days days28 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days30 = days28.dividedBy(2147483647);
        org.joda.time.Days days31 = days18.minus(days30);
        org.joda.time.Days days33 = days30.minus((-268435465));
        org.joda.time.Days days34 = days15.plus(days30);
        boolean boolean35 = days11.isGreaterThan(days30);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P2D" + "'", str16, "P2D");
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        int int14 = period2.getDays();
        org.joda.time.Period period16 = period2.plusHours((int) '#');
        org.joda.time.Period period18 = period16.plusMonths((int) (short) 1);
        org.joda.time.Period period20 = period18.minusWeeks((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period18.toDurationTo(readableInstant21);
        org.joda.time.Period period24 = period18.plusMonths((-1));
        org.joda.time.Period period26 = period18.plusMillis(2147483645);
        int int27 = period26.size();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds4 = seconds2.plus(seconds3);
        org.joda.time.Seconds seconds6 = seconds2.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds7 = seconds1.plus(seconds2);
        org.joda.time.Seconds seconds9 = seconds1.plus((int) '4');
        org.joda.time.Duration duration10 = seconds9.toStandardDuration();
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.Seconds seconds17 = seconds13.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds18 = seconds12.plus(seconds13);
        org.joda.time.Seconds seconds20 = seconds12.plus((int) '4');
        org.joda.time.Duration duration21 = seconds20.toStandardDuration();
        boolean boolean22 = seconds9.isLessThan(seconds20);
        org.joda.time.Seconds seconds23 = seconds9.negated();
        java.lang.String str24 = seconds9.toString();
        org.joda.time.Seconds seconds25 = seconds9.negated();
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.seconds(56);
        org.joda.time.Seconds seconds29 = seconds27.plus(11);
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.seconds((int) '#');
        int int32 = seconds31.getSeconds();
        org.joda.time.Seconds seconds34 = seconds31.dividedBy((int) (short) 1);
        int int35 = seconds34.getSeconds();
        boolean boolean36 = seconds27.isLessThan(seconds34);
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds39 = seconds37.plus(seconds38);
        java.lang.String str40 = seconds37.toString();
        org.joda.time.DurationFieldType durationFieldType41 = seconds37.getFieldType();
        java.lang.String str42 = seconds37.toString();
        org.joda.time.Seconds seconds43 = seconds34.minus(seconds37);
        org.joda.time.Seconds seconds44 = seconds9.minus(seconds34);
        org.joda.time.Seconds seconds45 = seconds9.negated();
        org.joda.time.Seconds seconds47 = seconds45.dividedBy((-49));
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT52S" + "'", str24, "PT52S");
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT2S" + "'", str40, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT2S" + "'", str42, "PT2S");
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds47);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.multipliedBy((int) (byte) -1);
        org.joda.time.Days days4 = days0.negated();
        org.joda.time.Duration duration5 = days0.toStandardDuration();
        org.joda.time.Days days6 = duration5.toStandardDays();
        org.joda.time.Days days8 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days10 = days8.multipliedBy((int) (short) 100);
        org.joda.time.Days days11 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType12 = days11.getPeriodType();
        org.joda.time.Days days14 = days11.minus(0);
        org.joda.time.Days days15 = days8.minus(days14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.Period period20 = period18.minusYears(0);
        org.joda.time.Days days21 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Days days22 = days14.plus(days21);
        org.joda.time.Days days23 = days6.plus(days22);
        org.joda.time.Period period25 = org.joda.time.Period.millis((int) (byte) -1);
        org.joda.time.Days days26 = period25.toStandardDays();
        org.joda.time.Days days27 = days22.minus(days26);
        org.joda.time.Days days29 = days22.plus(0);
        org.joda.time.DurationFieldType durationFieldType30 = days29.getFieldType();
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = durationFieldType30.isSupported(chronology31);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes10 = minutes8.dividedBy((-36));
        org.joda.time.Period period12 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType14 = minutes13.getFieldType();
        int int15 = minutes13.getMinutes();
        org.joda.time.Minutes minutes16 = minutes8.minus(minutes13);
        int int17 = minutes16.getMinutes();
        org.joda.time.PeriodType periodType18 = minutes16.getPeriodType();
        org.joda.time.PeriodType periodType19 = periodType18.withMillisRemoved();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14400 + "'", int15 == 14400);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-14400) + "'", int17 == (-14400));
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT0S");
        java.lang.String str2 = seconds1.toString();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period7 = period5.minusMonths(0);
        int int8 = period7.getYears();
        org.joda.time.Period period9 = period7.toPeriod();
        org.joda.time.Seconds seconds10 = period7.toStandardSeconds();
        boolean boolean11 = seconds1.isLessThan(seconds10);
        org.joda.time.Duration duration12 = seconds10.toStandardDuration();
        org.joda.time.PeriodType periodType13 = seconds10.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str15 = durationFieldType14.toString();
        java.lang.String str16 = durationFieldType14.toString();
        boolean boolean17 = seconds10.isSupported(durationFieldType14);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "minutes" + "'", str15, "minutes");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minutes" + "'", str16, "minutes");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes16 = minutes13.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration17 = minutes13.toStandardDuration();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period22 = period20.minusMonths(0);
        org.joda.time.Minutes minutes23 = period22.toStandardMinutes();
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        org.joda.time.Period period25 = duration24.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = duration6.isEqual((org.joda.time.ReadableDuration) duration17);
        long long28 = duration6.getStandardMinutes();
        java.lang.String str29 = duration6.toString();
        org.joda.time.Duration duration31 = duration6.withMillis((-1L));
        java.lang.String str32 = duration6.toString();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Interval interval34 = duration6.toIntervalTo(readableInstant33);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(interval34);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT1S");
        org.joda.time.PeriodType periodType2 = seconds1.getPeriodType();
        org.joda.time.Days days3 = seconds1.toStandardDays();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        int int2 = period1.getYears();
        org.joda.time.Hours hours3 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Period period5 = period1.multipliedBy((int) (byte) 0);
        org.joda.time.Period period7 = period1.plusMonths((-10));
        org.joda.time.Period period9 = period7.withWeeks((-5));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes10 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as months is not precise in the period P-10M-5WT0.035S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.withWeeks((-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period1.toDurationFrom(readableInstant5);
        org.joda.time.Weeks weeks7 = period1.toStandardWeeks();
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeks(1);
        boolean boolean11 = weeks8.isGreaterThan(weeks10);
        org.joda.time.Weeks weeks12 = weeks7.plus(weeks8);
        int int13 = weeks8.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter5.isParser();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        org.joda.time.Period period15 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Minutes minutes18 = minutes16.multipliedBy(1);
        boolean boolean19 = minutes12.isGreaterThan(minutes18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period22.minusMonths(0);
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        org.joda.time.Duration duration26 = minutes25.toStandardDuration();
        org.joda.time.Minutes minutes28 = minutes25.multipliedBy((int) (short) 1);
        org.joda.time.Minutes minutes30 = minutes28.dividedBy((-36));
        org.joda.time.Period period32 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType34 = minutes33.getFieldType();
        int int35 = minutes33.getMinutes();
        org.joda.time.Minutes minutes36 = minutes28.minus(minutes33);
        int int37 = minutes36.getMinutes();
        org.joda.time.Minutes minutes38 = minutes12.minus(minutes36);
        org.joda.time.MutablePeriod mutablePeriod39 = minutes38.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = periodFormatter5.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod39, "PeriodType[StandardNoDays]", 776);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14400 + "'", int35 == 14400);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-14400) + "'", int37 == (-14400));
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration4 = duration2.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration4.toIntervalFrom(readableInstant7);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Period period10 = weeks9.toPeriod();
        org.joda.time.Weeks weeks12 = weeks9.multipliedBy((-36));
        org.joda.time.Weeks weeks13 = weeks12.negated();
        org.joda.time.Period period14 = weeks12.toPeriod();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days3 = days0.minus(0);
        org.joda.time.Days days4 = days3.negated();
        java.lang.String str5 = days3.toString();
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) -1);
        org.joda.time.Days days8 = period7.toStandardDays();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.Days days12 = period11.toStandardDays();
        org.joda.time.Days days14 = days12.minus(7);
        org.joda.time.Days days16 = org.joda.time.Days.days(1);
        org.joda.time.Days days18 = org.joda.time.Days.days((int) (short) 100);
        boolean boolean19 = days16.isLessThan(days18);
        org.joda.time.Days days20 = days12.plus(days18);
        org.joda.time.Days days21 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType22 = days21.getPeriodType();
        org.joda.time.Days days23 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType24 = days23.getPeriodType();
        org.joda.time.Days days26 = days23.minus(0);
        org.joda.time.Days days27 = days26.negated();
        boolean boolean28 = days21.isGreaterThan(days26);
        org.joda.time.Days days30 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days32 = days30.multipliedBy((int) (short) 100);
        org.joda.time.Days days33 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType34 = days33.getPeriodType();
        org.joda.time.Days days36 = days33.minus(0);
        org.joda.time.Days days37 = days30.minus(days36);
        org.joda.time.Days days38 = days26.minus(days30);
        org.joda.time.Days days39 = days12.plus(days38);
        boolean boolean40 = days8.isGreaterThan(days38);
        org.joda.time.Days days41 = days3.minus(days8);
        org.joda.time.Days days43 = days41.plus((-2147483596));
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Days days47 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType48 = days47.getPeriodType();
        org.joda.time.PeriodType periodType49 = periodType48.withHoursRemoved();
        org.joda.time.PeriodType periodType50 = periodType48.withSecondsRemoved();
        org.joda.time.Period period51 = duration45.toPeriodFrom(readableInstant46, periodType48);
        org.joda.time.Days days52 = duration45.toStandardDays();
        org.joda.time.Days days53 = org.joda.time.Days.MIN_VALUE;
        boolean boolean54 = days52.isLessThan(days53);
        org.joda.time.Period period55 = days53.toPeriod();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 35, (long) (byte) 1);
        org.joda.time.Period period59 = period58.toPeriod();
        org.joda.time.Days days60 = period59.toStandardDays();
        int int61 = days53.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days60);
        boolean boolean62 = days41.isGreaterThan(days53);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P5D" + "'", str5, "P5D");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        int int14 = period2.getDays();
        org.joda.time.Period period16 = period2.plusHours((int) '#');
        org.joda.time.Period period18 = period16.plusDays((int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period16.toDurationTo(readableInstant19);
        org.joda.time.Period period21 = period16.toPeriod();
        int int22 = period21.size();
        org.joda.time.Period period24 = period21.plusSeconds((int) (byte) 100);
        org.joda.time.Days days26 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days28 = days26.multipliedBy((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType29 = days28.getFieldType();
        org.joda.time.Period period31 = period24.withFieldAdded(durationFieldType29, (-35));
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period5 = period2.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period5.toDurationFrom(readableInstant7);
        org.joda.time.Period period9 = period5.normalizedStandard();
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds12 = seconds10.plus(seconds11);
        java.lang.String str13 = seconds10.toString();
        org.joda.time.DurationFieldType durationFieldType14 = seconds10.getFieldType();
        org.joda.time.Period period16 = period9.withField(durationFieldType14, (int) (short) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration21 = duration19.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalFrom(readableInstant24);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.seconds(7);
        org.joda.time.Seconds seconds29 = seconds26.plus(seconds28);
        org.joda.time.Period period30 = seconds29.toPeriod();
        org.joda.time.Seconds seconds31 = seconds29.negated();
        org.joda.time.Duration duration32 = seconds29.toStandardDuration();
        org.joda.time.Seconds seconds34 = seconds29.minus((-4083));
        org.joda.time.Duration duration35 = seconds29.toStandardDuration();
        org.joda.time.Period period36 = period9.plus((org.joda.time.ReadablePeriod) seconds29);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Days days40 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType41 = days40.getPeriodType();
        org.joda.time.PeriodType periodType42 = periodType41.withHoursRemoved();
        org.joda.time.PeriodType periodType43 = periodType41.withSecondsRemoved();
        org.joda.time.PeriodType periodType44 = periodType41.withMinutesRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(10L, (long) (byte) -1, periodType45, chronology46);
        org.joda.time.PeriodType periodType48 = periodType45.withYearsRemoved();
        boolean boolean49 = periodType37.equals((java.lang.Object) periodType45);
        org.joda.time.Chronology chronology50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period51 = new org.joda.time.Period((java.lang.Object) seconds29, periodType37, chronology50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT2S" + "'", str13, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.dividedBy((int) (byte) -1);
        org.joda.time.Weeks weeks4 = null;
        org.joda.time.Weeks weeks5 = weeks3.minus(weeks4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((java.lang.Object) weeks3, chronology6);
        org.joda.time.Duration duration8 = weeks3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, readableInstant9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = period10.toDurationFrom(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) duration12, chronology13);
        org.joda.time.Period period15 = duration12.toPeriod();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(6000L, (long) (byte) 100, chronology2);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = period11.getFieldType((int) (short) 1);
        int int15 = periodType8.indexOf(durationFieldType14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) ' ', periodType8);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType8);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType19 = periodType18.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter2.withParseType(periodType19);
        java.util.Locale locale21 = null;
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter2.withLocale(locale21);
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatter22.getPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter24 = periodFormatter22.getPrinter();
        java.util.Locale locale25 = periodFormatter22.getLocale();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(periodPrinter23);
        org.junit.Assert.assertNull(periodPrinter24);
        org.junit.Assert.assertNull(locale25);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(6000L);
        org.joda.time.Duration duration5 = duration2.withDurationAdded(10L, 100);
        org.joda.time.Period period6 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration5);
        long long7 = duration5.getStandardDays();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.joda.time.Period period1 = org.joda.time.Period.days(32);
        org.joda.time.Period period3 = period1.withMillis(268435465);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration6.plus((long) (short) 10);
        long long17 = duration16.getStandardSeconds();
        org.joda.time.Duration duration18 = duration16.toDuration();
        java.lang.String str19 = duration16.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.millis((long) (short) 0);
        boolean boolean22 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration21);
        long long23 = duration16.getStandardDays();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.010S" + "'", str19, "PT0.010S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) '4');
        org.joda.time.Days days3 = duration2.toStandardDays();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Period period10 = period6.minusSeconds((int) (byte) 100);
        org.joda.time.Period period12 = period10.plusSeconds(8);
        org.joda.time.Duration duration14 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration17 = duration14.plus((org.joda.time.ReadableDuration) duration16);
        boolean boolean18 = period10.equals((java.lang.Object) duration14);
        boolean boolean19 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) 0);
        java.lang.String str22 = duration21.toString();
        org.joda.time.Duration duration24 = duration21.minus((long) 10);
        org.joda.time.Duration duration27 = duration21.withDurationAdded((long) (-95), (int) (short) 1);
        boolean boolean28 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Days days32 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType33 = days32.getPeriodType();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.PeriodType periodType35 = periodType33.withYearsRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((long) (short) 10, (long) 5, periodType35);
        org.joda.time.PeriodType periodType37 = periodType35.withMillisRemoved();
        org.joda.time.PeriodType periodType38 = periodType35.withMonthsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, readableInstant29, periodType38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((-3600000L), periodType38, chronology40);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        boolean boolean5 = periodFormatter4.isParser();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = seconds7.plus(seconds8);
        org.joda.time.PeriodType periodType10 = seconds7.getPeriodType();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period13.negated();
        org.joda.time.DurationFieldType durationFieldType16 = period13.getFieldType((int) (short) 1);
        int int17 = periodType10.indexOf(durationFieldType16);
        org.joda.time.Period period18 = new org.joda.time.Period((long) ' ', periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter4.withParseType(periodType10);
        org.joda.time.PeriodType periodType20 = periodType10.withDaysRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period(10L, periodType10);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 118, periodType22, chronology23);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationTo(readableInstant14);
        boolean boolean16 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration20 = duration15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Period period27 = period23.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = duration15.toPeriod(periodType28, chronology29);
        org.joda.time.DurationFieldType durationFieldType32 = periodType28.getFieldType(2);
        java.lang.String str33 = periodType28.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[Standard]" + "'", str33, "PeriodType[Standard]");
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(480000L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period5 = period2.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period5.toDurationFrom(readableInstant7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) 100);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType15.withMinutesRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType19);
        org.joda.time.Duration duration21 = duration8.minus((org.joda.time.ReadableDuration) duration12);
        long long22 = duration12.getStandardDays();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Interval interval24 = duration12.toIntervalFrom(readableInstant23);
        java.lang.String str25 = duration12.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.100S" + "'", str25, "PT0.100S");
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration6.plus((long) (short) 10);
        long long17 = duration16.getStandardSeconds();
        org.joda.time.Duration duration18 = duration16.toDuration();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = duration18.toPeriodTo(readableInstant21);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period3 = period2.negated();
        int int4 = period2.getHours();
        int int5 = period2.getMonths();
        org.joda.time.Period period7 = period2.withMonths(2147483647);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        boolean boolean11 = weeks8.isLessThan(weeks10);
        org.joda.time.Weeks weeks13 = weeks10.multipliedBy((int) (short) 100);
        org.joda.time.Period period14 = period2.withFields((org.joda.time.ReadablePeriod) weeks13);
        org.joda.time.MutablePeriod mutablePeriod15 = weeks13.toMutablePeriod();
        org.joda.time.Weeks weeks17 = weeks13.minus(100);
        org.joda.time.Weeks weeks19 = weeks13.plus((int) (short) 10);
        org.joda.time.Duration duration20 = weeks19.toStandardDuration();
        org.joda.time.Weeks weeks22 = weeks19.multipliedBy(7);
        org.joda.time.Weeks weeks24 = weeks19.minus(14400);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.Period period1 = new org.joda.time.Period((-1491308L));
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(0L, (long) (-10), chronology4);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Period period12 = period8.minusSeconds((int) (byte) 100);
        org.joda.time.Days days13 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType14 = days13.getPeriodType();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType14.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        boolean boolean18 = periodType16.isSupported(durationFieldType17);
        int int19 = period8.get(durationFieldType17);
        org.joda.time.Period period21 = period8.withHours(1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        boolean boolean23 = period21.equals((java.lang.Object) periodType22);
        int int24 = period21.getHours();
        org.joda.time.Days days25 = org.joda.time.Days.FIVE;
        java.lang.String str26 = days25.toString();
        org.joda.time.Days days28 = days25.multipliedBy((int) (byte) -1);
        org.joda.time.Days days29 = days25.negated();
        org.joda.time.Days days30 = org.joda.time.Days.ONE;
        org.joda.time.Days days31 = org.joda.time.Days.ONE;
        int int32 = days30.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days31);
        org.joda.time.Days days34 = days31.multipliedBy((int) '#');
        org.joda.time.Days days35 = days29.minus(days31);
        org.joda.time.Days days37 = days29.minus((int) 'a');
        org.joda.time.DurationFieldType durationFieldType38 = days29.getFieldType();
        java.lang.String str39 = durationFieldType38.toString();
        boolean boolean40 = period21.isSupported(durationFieldType38);
        java.lang.String str41 = durationFieldType38.getName();
        org.joda.time.Period period43 = period5.withFieldAdded(durationFieldType38, 14402);
        org.joda.time.Period period44 = period1.plus((org.joda.time.ReadablePeriod) period43);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P5D" + "'", str26, "P5D");
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "days" + "'", str39, "days");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "days" + "'", str41, "days");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Period period7 = period4.withYears((int) '#');
        org.joda.time.Period period9 = period4.minusMinutes(0);
        int int10 = period4.getWeeks();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period16.minusMonths(0);
        org.joda.time.Period period20 = period16.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.PeriodType periodType22 = periodType21.withMinutesRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withHoursRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant12, readableInstant13, periodType22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (-1), periodType22, chronology25);
        org.joda.time.PeriodType periodType27 = periodType22.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = new org.joda.time.Period((java.lang.Object) int10, periodType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.joda.time.Period period1 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        boolean boolean3 = period1.isSupported(durationFieldType2);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = seconds4.multipliedBy(10);
        org.joda.time.DurationFieldType durationFieldType7 = seconds4.getFieldType();
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds10 = seconds8.plus(seconds9);
        org.joda.time.Seconds seconds12 = seconds8.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds13 = seconds4.plus(seconds8);
        org.joda.time.Period period14 = period1.withFields((org.joda.time.ReadablePeriod) seconds8);
        org.joda.time.Period period16 = period1.plusWeeks((-10));
        org.joda.time.Period period17 = period16.normalizedStandard();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        java.lang.Class<?> wildcardClass20 = period17.getClass();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        int int4 = minutes2.getMinutes();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes14 = minutes5.minus(minutes11);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Minutes minutes22 = minutes20.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((java.lang.Object) minutes20, chronology23);
        org.joda.time.Minutes minutes25 = minutes5.minus(minutes20);
        org.joda.time.DurationFieldType durationFieldType27 = minutes25.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType28 = minutes25.getPeriodType();
        org.joda.time.Minutes minutes29 = minutes25.negated();
        org.joda.time.Minutes minutes30 = minutes2.minus(minutes29);
        org.joda.time.Minutes minutes32 = minutes30.minus(7);
        org.joda.time.Minutes minutes34 = minutes30.minus(0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14400 + "'", int4 == 14400);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, readableInstant1, periodType2);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (-100), (long) (short) 100, chronology2);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = seconds4.plus(seconds5);
        java.lang.String str7 = seconds4.toString();
        org.joda.time.DurationFieldType durationFieldType8 = seconds4.getFieldType();
        org.joda.time.Seconds seconds10 = seconds4.multipliedBy(0);
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration12 = seconds11.toStandardDuration();
        boolean boolean13 = seconds10.isGreaterThan(seconds11);
        org.joda.time.DurationFieldType durationFieldType15 = seconds10.getFieldType((int) (short) 0);
        org.joda.time.Seconds seconds16 = seconds10.negated();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration21 = duration19.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Interval interval25 = duration21.toIntervalFrom(readableInstant24);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.seconds(7);
        org.joda.time.Seconds seconds29 = seconds26.plus(seconds28);
        boolean boolean30 = seconds10.isGreaterThan(seconds29);
        java.lang.String str31 = seconds29.toString();
        org.joda.time.Period period32 = period3.minus((org.joda.time.ReadablePeriod) seconds29);
        int[] intArray33 = period32.getValues();
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2S" + "'", str7, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT7S" + "'", str31, "PT7S");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, -7, 200]");
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 3);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = duration1.toPeriodFrom(readableInstant2);
        org.joda.time.Period period4 = new org.joda.time.Period((java.lang.Object) readableInstant2);
        org.joda.time.PeriodType periodType5 = period4.getPeriodType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Minutes minutes9 = minutes6.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration10 = minutes6.toStandardDuration();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Duration duration17 = minutes16.toStandardDuration();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period22 = period20.minusMonths(0);
        org.joda.time.Minutes minutes23 = period22.toStandardMinutes();
        org.joda.time.Duration duration24 = minutes23.toStandardDuration();
        boolean boolean25 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        org.joda.time.Duration duration29 = duration17.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration30 = duration17.toDuration();
        org.joda.time.Duration duration31 = duration10.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period37 = period35.minusMonths(0);
        org.joda.time.Minutes minutes38 = period37.toStandardMinutes();
        org.joda.time.Duration duration39 = minutes38.toStandardDuration();
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = duration39.plus((long) (byte) 0);
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant32, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration10.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Interval interval46 = duration44.toIntervalTo(readableInstant45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, readableInstant47);
        org.joda.time.PeriodType periodType49 = period48.getPeriodType();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 6, periodType49, chronology50);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        boolean boolean4 = periodFormatter3.isParser();
        org.joda.time.Days days5 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType6 = days5.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withParseType(periodType6);
        boolean boolean9 = periodFormatter8.isPrinter();
        boolean boolean10 = periodFormatter8.isParser();
        org.joda.time.PeriodType periodType11 = periodFormatter8.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = org.joda.time.Period.parse("PT0.037S", periodFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (byte) -1, (int) ' ', (int) '4', (int) (short) -1, 10, (int) 'a', (-1), (int) '4');
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P-1Y32M52W-1DT10H97M0.948S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) minutes15, chronology18);
        org.joda.time.Minutes minutes20 = minutes0.minus(minutes15);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period23.negated();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period24.toDurationTo(readableInstant25);
        org.joda.time.Minutes minutes27 = period24.toStandardMinutes();
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        boolean boolean29 = minutes15.isLessThan(minutes27);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period34 = period32.minusMonths(0);
        org.joda.time.Minutes minutes35 = period34.toStandardMinutes();
        org.joda.time.Duration duration36 = minutes35.toStandardDuration();
        org.joda.time.Minutes minutes38 = minutes35.multipliedBy((int) (short) 1);
        int int39 = minutes38.getMinutes();
        boolean boolean40 = minutes15.isLessThan(minutes38);
        org.joda.time.Minutes minutes41 = null;
        org.joda.time.Minutes minutes42 = minutes38.minus(minutes41);
        org.joda.time.Period period45 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period47 = period45.minusMonths(0);
        org.joda.time.Minutes minutes48 = period47.toStandardMinutes();
        org.joda.time.Duration duration49 = minutes48.toStandardDuration();
        org.joda.time.Minutes minutes51 = minutes48.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration52 = minutes48.toStandardDuration();
        org.joda.time.Minutes minutes54 = minutes48.multipliedBy(8);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.minutes((int) (byte) 100);
        boolean boolean57 = minutes48.isGreaterThan(minutes56);
        org.joda.time.Minutes minutes58 = minutes38.minus(minutes56);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.plus((int) (short) 10);
        org.joda.time.Duration duration62 = org.joda.time.Duration.ZERO;
        org.joda.time.Minutes minutes63 = duration62.toStandardMinutes();
        org.joda.time.Minutes minutes65 = minutes63.plus(3);
        java.lang.Object obj66 = null;
        boolean boolean67 = minutes65.equals(obj66);
        org.joda.time.Minutes minutes68 = minutes61.plus(minutes65);
        org.joda.time.PeriodType periodType69 = minutes61.getPeriodType();
        org.joda.time.Minutes minutes70 = minutes58.minus(minutes61);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(minutes70);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period4.minusSeconds(0);
        org.joda.time.Period period8 = period6.minusWeeks(10);
        org.joda.time.MutablePeriod mutablePeriod9 = period6.toMutablePeriod();
        int int11 = period6.getValue((int) (byte) 1);
        org.joda.time.Period period13 = period6.minusMillis((int) '#');
        org.joda.time.Period period15 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) 0);
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant18, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period28 = period26.minusMonths(0);
        org.joda.time.Minutes minutes29 = period28.toStandardMinutes();
        org.joda.time.Duration duration30 = minutes29.toStandardDuration();
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant23, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.minutes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration33, periodType35, chronology36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, readableInstant22, periodType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) ' ', (long) 2147483645, periodType35, chronology39);
        org.joda.time.PeriodType periodType41 = periodType35.withHoursRemoved();
        org.joda.time.Period period42 = period15.normalizedStandard(periodType41);
        org.joda.time.Period period44 = period15.minusHours(10);
        org.joda.time.Period period45 = period13.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period47 = period45.multipliedBy((-105));
        org.joda.time.Period period48 = period45.negated();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(36);
        org.joda.time.Seconds seconds2 = minutes1.toStandardSeconds();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.Days days10 = days1.minus(35);
        org.joda.time.Days days12 = days1.plus(14400);
        org.joda.time.Days days14 = days1.plus((int) (short) 1);
        org.joda.time.Days days16 = days1.minus((-4083));
        org.joda.time.Days days18 = org.joda.time.Days.days((int) (short) -1);
        org.joda.time.Days days20 = days18.minus((int) '4');
        org.joda.time.Days days22 = days20.dividedBy((int) (short) 10);
        org.joda.time.Days days24 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days26 = days24.multipliedBy((int) (short) 100);
        org.joda.time.Days days27 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        org.joda.time.Days days30 = days27.minus(0);
        org.joda.time.Days days31 = days24.minus(days30);
        org.joda.time.PeriodType periodType32 = days24.getPeriodType();
        org.joda.time.Days days34 = days24.dividedBy((int) 'a');
        boolean boolean35 = days20.isLessThan(days34);
        org.joda.time.Days days36 = days1.plus(days20);
        java.lang.String str37 = days1.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P5D" + "'", str37, "P5D");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 100);
        org.joda.time.Hours hours2 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours4 = hours2.multipliedBy((int) 'a');
        boolean boolean5 = hours1.isGreaterThan(hours2);
        org.joda.time.Hours hours7 = hours1.plus((int) 'a');
        org.joda.time.Hours hours8 = hours1.negated();
        org.joda.time.PeriodType periodType9 = hours8.getPeriodType();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT0H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT0H\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.PeriodType periodType4 = days3.getPeriodType();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        int int6 = periodType4.size();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(86400L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("P-1W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.Days days7 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType8 = days7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        int int13 = period2.get(durationFieldType11);
        org.joda.time.Period period15 = period2.withHours(1);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period20 = period18.minusMonths(0);
        org.joda.time.Period period22 = period18.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.PeriodType periodType24 = periodType23.withMinutesRemoved();
        java.lang.String str25 = periodType24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) period2, periodType24, chronology26);
        org.joda.time.Period period28 = period2.toPeriod();
        org.joda.time.Period period30 = period28.withMillis(3);
        int int31 = period28.getMonths();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period28.toDurationFrom(readableInstant32);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[StandardNoMinutes]" + "'", str25, "PeriodType[StandardNoMinutes]");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 56);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = org.joda.time.Period.days((-1));
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration9 = duration7.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Interval interval13 = duration9.toIntervalFrom(readableInstant12);
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Seconds seconds16 = seconds14.plus(0);
        org.joda.time.DurationFieldType durationFieldType17 = seconds16.getFieldType();
        int int18 = period4.indexOf(durationFieldType17);
        java.lang.String str19 = durationFieldType17.toString();
        org.joda.time.Period period21 = period2.withFieldAdded(durationFieldType17, (-10));
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "seconds" + "'", str19, "seconds");
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period3 = period2.negated();
        int int4 = period2.getHours();
        int int5 = period2.getMonths();
        org.joda.time.Period period7 = period2.withMonths(2147483647);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn(readableInterval9);
        boolean boolean11 = weeks8.isLessThan(weeks10);
        org.joda.time.Weeks weeks13 = weeks10.multipliedBy((int) (short) 100);
        org.joda.time.Period period14 = period2.withFields((org.joda.time.ReadablePeriod) weeks13);
        org.joda.time.MutablePeriod mutablePeriod15 = weeks13.toMutablePeriod();
        org.joda.time.Weeks weeks17 = weeks13.minus(100);
        org.joda.time.Weeks weeks18 = null;
        org.joda.time.Weeks weeks19 = weeks17.plus(weeks18);
        java.lang.String str20 = weeks17.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P-100W" + "'", str20, "P-100W");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("P5W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period5 = period2.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period5.toDurationFrom(readableInstant7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = duration8.toPeriod(chronology9);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Duration duration17 = minutes16.toStandardDuration();
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.plus((long) (byte) 0);
        org.joda.time.Duration duration22 = duration17.withMillis((long) 1);
        org.joda.time.Minutes minutes23 = duration17.toStandardMinutes();
        org.joda.time.Duration duration25 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration17, 10);
        org.joda.time.Duration duration27 = duration8.plus((long) 268435465);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = duration27.toPeriod(chronology28);
        org.joda.time.Period period31 = period29.withHours(0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 1);
        long long2 = duration1.getStandardHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes(151200L);
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks8 = weeks7.negated();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        boolean boolean12 = weeks9.isLessThan(weeks11);
        boolean boolean13 = weeks8.isGreaterThan(weeks11);
        boolean boolean14 = weeks5.isLessThan(weeks8);
        org.joda.time.Duration duration15 = weeks5.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, readableInstant16);
        boolean boolean18 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration20 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration23 = duration20.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration20.plus((long) 2147483647);
        org.joda.time.Duration duration26 = duration20.toDuration();
        long long27 = duration20.getStandardDays();
        long long28 = duration20.getStandardHours();
        boolean boolean29 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration20);
        boolean boolean30 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration4);
        java.lang.String str31 = duration4.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT9072000S" + "'", str31, "PT9072000S");
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Period period6 = period2.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType7 = period2.getPeriodType();
        org.joda.time.Hours hours8 = period2.toStandardHours();
        org.joda.time.Period period10 = org.joda.time.Period.millis((int) '#');
        int int11 = period10.getYears();
        org.joda.time.Hours hours12 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period10);
        boolean boolean13 = hours8.isLessThan(hours12);
        org.joda.time.Hours hours15 = hours12.plus(2147483645);
        int int16 = hours15.size();
        org.joda.time.Hours hours17 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours19 = hours17.multipliedBy((int) 'a');
        org.joda.time.Hours hours21 = hours19.minus((int) (short) 10);
        int int22 = hours21.getHours();
        org.joda.time.Hours hours24 = hours21.minus(10);
        org.joda.time.PeriodType periodType25 = hours24.getPeriodType();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Hours hours27 = org.joda.time.Hours.hoursIn(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Hours hours29 = org.joda.time.Hours.hoursIn(readableInterval28);
        org.joda.time.Hours hours31 = hours29.multipliedBy(8);
        org.joda.time.Hours hours32 = hours27.plus(hours29);
        org.joda.time.Period period34 = org.joda.time.Period.millis((int) '#');
        int int35 = period34.getYears();
        org.joda.time.Period period37 = period34.multipliedBy((int) (byte) 100);
        org.joda.time.Hours hours38 = period34.toStandardHours();
        int int39 = hours38.size();
        org.joda.time.Hours hours41 = hours38.multipliedBy(10);
        org.joda.time.Hours hours42 = hours27.minus(hours38);
        org.joda.time.Period period43 = hours38.toPeriod();
        org.joda.time.Hours hours44 = hours24.minus(hours38);
        boolean boolean45 = hours15.isLessThan(hours44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds46 = hours15.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483645 * 3600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87 + "'", int22 == 87);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.PeriodType periodType7 = periodType5.withSecondsRemoved();
        org.joda.time.Period period8 = duration2.toPeriodFrom(readableInstant3, periodType5);
        long long9 = duration2.getMillis();
        org.joda.time.Days days12 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType13 = days12.getPeriodType();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withSecondsRemoved();
        org.joda.time.PeriodType periodType16 = periodType13.withMinutesRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(10L, (long) (byte) -1, periodType17, chronology18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2, periodType17);
        long long21 = duration2.getMillis();
        org.joda.time.Duration duration22 = duration2.toDuration();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100000L + "'", long21 == 100000L);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType2 = hours0.getFieldType();
        int int3 = hours0.getHours();
        org.joda.time.PeriodType periodType4 = hours0.getPeriodType();
        org.joda.time.Hours hours6 = hours0.plus((-2));
        org.joda.time.Hours hours7 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours8 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours9 = hours7.minus(hours8);
        org.joda.time.Hours hours10 = hours0.minus(hours7);
        org.joda.time.Hours hours11 = hours0.negated();
        int int12 = hours0.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(2);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT-2147483644M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Minutes minutes8 = minutes5.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration9 = minutes5.toStandardDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period12.negated();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationTo(readableInstant14);
        boolean boolean16 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration20 = duration15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = duration20.toPeriodTo(readableInstant21);
        org.joda.time.Period period23 = period22.normalizedStandard();
        org.joda.time.Period period25 = org.joda.time.Period.millis((int) '#');
        int int26 = period25.getYears();
        org.joda.time.Period period28 = period25.multipliedBy((int) (byte) 100);
        org.joda.time.Period period29 = period23.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Duration duration30 = period28.toStandardDuration();
        org.joda.time.Minutes minutes31 = duration30.toStandardMinutes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(minutes31);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 1);
        org.joda.time.Period period3 = period1.withMillis((int) '4');
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
        org.joda.time.Duration duration10 = minutes9.toStandardDuration();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
        org.joda.time.Duration duration17 = minutes16.toStandardDuration();
        org.joda.time.Duration duration19 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) (short) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration10.toPeriod(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = duration10.toPeriodTo(readableInstant22);
        org.joda.time.Period period25 = period23.minusMillis(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) period23, chronology26);
        org.joda.time.Period period29 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        boolean boolean31 = period29.isSupported(durationFieldType30);
        java.lang.String str32 = durationFieldType30.getName();
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = durationFieldType30.isSupported(chronology33);
        java.lang.String str35 = durationFieldType30.toString();
        int int36 = period27.get(durationFieldType30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DurationField durationField38 = durationFieldType30.getField(chronology37);
        org.joda.time.Period period40 = period1.withField(durationFieldType30, 572);
        org.joda.time.Period period42 = period40.minusDays(44);
        java.lang.String str43 = period40.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "months" + "'", str32, "months");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "months" + "'", str35, "months");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P572MT0.001S" + "'", str43, "P572MT0.001S");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (-100));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, readableInstant2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 0, (-1L), chronology6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period10 = period7.withFieldAdded(durationFieldType8, (-1));
        java.lang.String str11 = durationFieldType8.getName();
        org.joda.time.Period period13 = period3.withFieldAdded(durationFieldType8, (-200));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millis" + "'", str11, "millis");
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(11L, (-1491308L), chronology2);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
        org.joda.time.Duration duration10 = minutes9.toStandardDuration();
        org.joda.time.Minutes minutes12 = minutes9.multipliedBy((int) (short) 1);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period15.minusMonths(0);
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Minutes minutes20 = minutes18.dividedBy((int) (byte) 100);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Minutes minutes29 = minutes26.multipliedBy((int) (short) 1);
        int int30 = minutes29.getMinutes();
        boolean boolean31 = minutes20.isGreaterThan(minutes29);
        int int32 = minutes20.getMinutes();
        org.joda.time.Minutes minutes33 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period38 = period36.minusMonths(0);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.Minutes minutes41 = minutes39.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes42 = minutes33.minus(minutes39);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period48 = period46.minusMonths(0);
        org.joda.time.Minutes minutes49 = period48.toStandardMinutes();
        org.joda.time.Minutes minutes51 = minutes49.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes52 = minutes43.minus(minutes49);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period57 = period55.minusMonths(0);
        org.joda.time.Minutes minutes58 = period57.toStandardMinutes();
        org.joda.time.Duration duration59 = minutes58.toStandardDuration();
        org.joda.time.Minutes minutes61 = minutes58.multipliedBy((int) (short) 1);
        int int62 = minutes43.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes61);
        org.joda.time.Minutes minutes63 = minutes42.plus(minutes61);
        org.joda.time.Period period66 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period68 = period66.minusMonths(0);
        org.joda.time.Minutes minutes69 = period68.toStandardMinutes();
        org.joda.time.Duration duration70 = minutes69.toStandardDuration();
        org.joda.time.Minutes minutes72 = minutes69.multipliedBy((int) (short) 1);
        java.lang.String str73 = minutes72.toString();
        org.joda.time.Minutes minutes74 = minutes63.minus(minutes72);
        int int75 = minutes63.size();
        org.joda.time.Minutes minutes76 = minutes20.plus(minutes63);
        boolean boolean77 = minutes9.isGreaterThan(minutes63);
        org.joda.time.DurationFieldType durationFieldType78 = minutes9.getFieldType();
        java.lang.String str79 = durationFieldType78.toString();
        int int80 = period3.indexOf(durationFieldType78);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT0M" + "'", str73, "PT0M");
        org.junit.Assert.assertNotNull(minutes74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "minutes" + "'", str79, "minutes");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 0, 7, 103, (int) (short) 10);
        org.joda.time.Period period6 = period4.minusWeeks((-99));
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.PeriodType periodType7 = periodType5.withSecondsRemoved();
        org.joda.time.Period period8 = duration2.toPeriodFrom(readableInstant3, periodType5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 1, periodType5, chronology9);
        org.joda.time.Period period12 = period10.plusMinutes((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.format.PeriodPrinter periodPrinter14 = null;
        org.joda.time.format.PeriodParser periodParser15 = null;
        org.joda.time.format.PeriodFormatter periodFormatter16 = new org.joda.time.format.PeriodFormatter(periodPrinter14, periodParser15);
        boolean boolean17 = periodFormatter16.isParser();
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds21 = seconds19.plus(seconds20);
        org.joda.time.PeriodType periodType22 = seconds19.getPeriodType();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period25.negated();
        org.joda.time.DurationFieldType durationFieldType28 = period25.getFieldType((int) (short) 1);
        int int29 = periodType22.indexOf(durationFieldType28);
        org.joda.time.Period period30 = new org.joda.time.Period((long) ' ', periodType22);
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter16.withParseType(periodType22);
        java.util.Locale locale32 = null;
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter16.withLocale(locale32);
        java.util.Locale locale34 = periodFormatter33.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = period12.toString(periodFormatter33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNull(locale34);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks5 = weeks4.negated();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn(readableInterval7);
        boolean boolean9 = weeks6.isLessThan(weeks8);
        boolean boolean10 = weeks5.isGreaterThan(weeks8);
        boolean boolean11 = weeks2.isLessThan(weeks5);
        int int12 = weeks5.getWeeks();
        org.joda.time.PeriodType periodType13 = weeks5.getPeriodType();
        org.joda.time.Period period14 = period1.minus((org.joda.time.ReadablePeriod) weeks5);
        org.joda.time.DurationFieldType durationFieldType15 = weeks5.getFieldType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-95));
        org.joda.time.Hours hours3 = hours1.plus((-41));
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        org.joda.time.Seconds seconds4 = seconds1.plus((int) (byte) 0);
        org.joda.time.Seconds seconds6 = seconds1.minus(8);
        org.joda.time.DurationFieldType durationFieldType7 = seconds1.getFieldType();
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds11 = seconds9.multipliedBy(10);
        org.joda.time.Seconds seconds12 = seconds8.minus(seconds9);
        org.joda.time.Seconds seconds13 = seconds1.plus(seconds12);
        org.joda.time.Seconds seconds15 = seconds13.multipliedBy(10);
        org.joda.time.Seconds seconds16 = seconds15.negated();
        org.joda.time.Seconds seconds18 = seconds16.plus(0);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds18);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("P-1Y32M52W-1DT10H97M58.052S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P-1Y32M52W-1DT10H97M58.052S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((int) '#');
        int int2 = seconds1.getSeconds();
        org.joda.time.Seconds seconds4 = seconds1.dividedBy((int) (short) 1);
        org.joda.time.Seconds seconds6 = seconds1.minus(105);
        org.joda.time.Seconds seconds8 = seconds6.dividedBy((-2147483645));
        org.joda.time.DurationFieldType durationFieldType9 = seconds6.getFieldType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter2.getParser();
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter2.withLocale(locale8);
        java.util.Locale locale10 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod12 = periodFormatter2.parseMutablePeriod("PT100M");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNull(locale10);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(71582L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        org.joda.time.Duration duration2 = weeks0.toStandardDuration();
        int int3 = weeks0.getWeeks();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.ONE;
        boolean boolean7 = periodType4.equals((java.lang.Object) weeks6);
        org.joda.time.Weeks weeks9 = weeks6.plus((int) (byte) 100);
        org.joda.time.Weeks weeks10 = weeks0.plus(weeks9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn(readableInterval11);
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) -1);
        org.joda.time.Weeks weeks15 = null;
        org.joda.time.Weeks weeks16 = weeks14.minus(weeks15);
        org.joda.time.Weeks weeks18 = weeks14.dividedBy(2147483647);
        org.joda.time.Weeks weeks20 = weeks14.minus(8);
        boolean boolean21 = weeks9.isLessThan(weeks14);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "YearMonthDay" + "'", str5, "YearMonthDay");
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((-2160000L));
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period8 = period6.minusMonths(0);
        org.joda.time.Minutes minutes9 = period8.toStandardMinutes();
        org.joda.time.Minutes minutes10 = minutes3.minus(minutes9);
        org.joda.time.Minutes minutes12 = minutes9.minus((-36));
        org.joda.time.Duration duration13 = minutes9.toStandardDuration();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period18 = period16.minusMonths(0);
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Duration duration20 = minutes19.toStandardDuration();
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        boolean boolean28 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        org.joda.time.Duration duration32 = duration20.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, readableInstant33);
        org.joda.time.Duration duration36 = duration20.plus((long) 8);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period43 = period41.minusMonths(0);
        org.joda.time.Minutes minutes44 = period43.toStandardMinutes();
        org.joda.time.Duration duration45 = minutes44.toStandardDuration();
        org.joda.time.Minutes minutes47 = minutes44.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration48 = minutes44.toStandardDuration();
        org.joda.time.Period period51 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period53 = period51.minusMonths(0);
        org.joda.time.Minutes minutes54 = period53.toStandardMinutes();
        org.joda.time.Duration duration55 = minutes54.toStandardDuration();
        org.joda.time.Period period56 = duration55.toPeriod();
        boolean boolean57 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Interval interval59 = duration55.toIntervalTo(readableInstant58);
        boolean boolean60 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration55);
        int int61 = duration20.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Minutes minutes62 = duration20.toStandardMinutes();
        org.joda.time.PeriodType periodType63 = minutes62.getPeriodType();
        org.joda.time.Period period65 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes66 = period65.toStandardMinutes();
        org.joda.time.Minutes minutes68 = minutes66.multipliedBy(1);
        org.joda.time.Minutes minutes70 = minutes66.minus((int) (byte) 0);
        org.joda.time.Minutes minutes71 = minutes62.minus(minutes70);
        boolean boolean72 = minutes9.isGreaterThan(minutes62);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = seconds0.plus(seconds1);
        org.joda.time.PeriodType periodType3 = seconds0.getPeriodType();
        int int4 = seconds0.size();
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.seconds((int) (byte) 10);
        boolean boolean8 = seconds6.equals((java.lang.Object) "PeriodType[StandardNoMinutes]");
        org.joda.time.Seconds seconds9 = seconds0.plus(seconds6);
        org.joda.time.Seconds seconds11 = seconds9.plus((int) (short) 0);
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = seconds12.minus((int) 'a');
        int int15 = seconds12.size();
        int int16 = seconds12.getSeconds();
        org.joda.time.Seconds seconds17 = seconds9.plus(seconds12);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds22 = seconds20.plus(seconds21);
        org.joda.time.Seconds seconds24 = seconds20.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds25 = seconds19.plus(seconds20);
        org.joda.time.Seconds seconds27 = seconds19.plus((int) '4');
        org.joda.time.Duration duration28 = seconds27.toStandardDuration();
        org.joda.time.Seconds seconds30 = org.joda.time.Seconds.parseSeconds("PT0S");
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds33 = seconds31.plus(seconds32);
        org.joda.time.Seconds seconds35 = seconds31.multipliedBy((int) ' ');
        org.joda.time.Seconds seconds36 = seconds30.plus(seconds31);
        org.joda.time.Seconds seconds38 = seconds30.plus((int) '4');
        org.joda.time.Duration duration39 = seconds38.toStandardDuration();
        boolean boolean40 = seconds27.isLessThan(seconds38);
        org.joda.time.Seconds seconds41 = seconds27.negated();
        org.joda.time.Seconds seconds42 = seconds17.plus(seconds41);
        org.joda.time.DurationFieldType durationFieldType43 = seconds17.getFieldType();
        java.lang.String str44 = durationFieldType43.getName();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "seconds" + "'", str44, "seconds");
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Duration duration16 = minutes15.toStandardDuration();
        org.joda.time.Minutes minutes18 = minutes15.multipliedBy((int) (short) 1);
        int int19 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes18);
        org.joda.time.PeriodType periodType20 = minutes18.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration6.toDuration();
        org.joda.time.Period period20 = duration6.toPeriod();
        org.joda.time.DurationFieldType durationFieldType22 = period20.getFieldType(0);
        org.joda.time.MutablePeriod mutablePeriod23 = period20.toMutablePeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(10);
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Duration duration3 = weeks1.toStandardDuration();
        org.joda.time.Duration duration4 = weeks1.toStandardDuration();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType3 = minutes2.getFieldType();
        int int4 = minutes2.getMinutes();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period10 = period8.minusMonths(0);
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Minutes minutes13 = minutes11.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes14 = minutes5.minus(minutes11);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period19 = period17.minusMonths(0);
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Minutes minutes22 = minutes20.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((java.lang.Object) minutes20, chronology23);
        org.joda.time.Minutes minutes25 = minutes5.minus(minutes20);
        org.joda.time.DurationFieldType durationFieldType27 = minutes25.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType28 = minutes25.getPeriodType();
        org.joda.time.Minutes minutes29 = minutes25.negated();
        org.joda.time.Minutes minutes30 = minutes2.minus(minutes29);
        org.joda.time.Minutes minutes32 = minutes30.dividedBy(52);
        org.joda.time.Minutes minutes34 = minutes30.multipliedBy((-95));
        int int35 = minutes30.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14400 + "'", int4 == 14400);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P0D");
        org.joda.time.Period period3 = period1.plusMillis(65);
        org.joda.time.MutablePeriod mutablePeriod4 = period1.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration1 = seconds0.toStandardDuration();
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.seconds((int) '#');
        int int4 = seconds3.getSeconds();
        org.joda.time.Seconds seconds6 = seconds3.dividedBy((int) (short) 1);
        org.joda.time.Seconds seconds7 = seconds0.plus(seconds6);
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.parseSeconds("PT0S");
        java.lang.String str10 = seconds9.toString();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period15 = period13.minusMonths(0);
        int int16 = period15.getYears();
        org.joda.time.Period period17 = period15.toPeriod();
        org.joda.time.Seconds seconds18 = period15.toStandardSeconds();
        boolean boolean19 = seconds9.isLessThan(seconds18);
        java.lang.String str20 = seconds18.toString();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds23 = seconds21.plus(seconds22);
        java.lang.String str24 = seconds21.toString();
        org.joda.time.DurationFieldType durationFieldType25 = seconds21.getFieldType();
        org.joda.time.Seconds seconds27 = seconds21.multipliedBy(0);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.THREE;
        org.joda.time.Duration duration29 = seconds28.toStandardDuration();
        boolean boolean30 = seconds27.isGreaterThan(seconds28);
        org.joda.time.Seconds seconds31 = seconds18.plus(seconds28);
        boolean boolean32 = seconds0.isGreaterThan(seconds31);
        org.joda.time.Duration duration33 = seconds0.toStandardDuration();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT2S" + "'", str24, "PT2S");
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Days days3 = days0.multipliedBy((int) (byte) -1);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        java.lang.String str5 = days4.toString();
        org.joda.time.Days days6 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.Days days9 = days6.minus(0);
        boolean boolean10 = days4.isLessThan(days9);
        boolean boolean11 = days3.isLessThan(days4);
        org.joda.time.Days days13 = days3.plus(8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = days3.getFieldType((-110));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -110");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P5D" + "'", str1, "P5D");
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P5D" + "'", str5, "P5D");
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (-2));
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MIN_VALUE;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeks(1);
        org.joda.time.Weeks weeks6 = weeks5.negated();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        boolean boolean10 = weeks7.isLessThan(weeks9);
        boolean boolean11 = weeks6.isGreaterThan(weeks9);
        boolean boolean12 = weeks3.isLessThan(weeks6);
        org.joda.time.Duration duration13 = weeks3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, readableInstant14);
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant2, (org.joda.time.ReadableDuration) duration13);
        boolean boolean17 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration13);
        java.lang.String str18 = duration13.toString();
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT-1298798110310400S" + "'", str18, "PT-1298798110310400S");
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 36);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration6 = duration4.plus((long) (-1));
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, readableInstant7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes(100L);
        org.joda.time.Duration duration13 = duration10.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration13, (int) (byte) 0);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.THREE;
        org.joda.time.Duration duration18 = weeks17.toStandardDuration();
        org.joda.time.Duration duration19 = duration15.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration22 = duration19.withDurationAdded(1L, (-5));
        boolean boolean23 = duration1.isEqual((org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType25 = periodType24.withMillisRemoved();
        org.joda.time.PeriodType periodType26 = periodType24.withDaysRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration22.toPeriod(periodType26, chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = duration22.toIntervalFrom(readableInstant29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.joda.time.Days days0 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType1 = days0.getPeriodType();
        org.joda.time.Days days3 = days0.plus((int) (byte) 100);
        org.joda.time.Duration duration4 = days3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = duration4.toPeriodFrom(readableInstant5);
        java.lang.String str7 = duration4.toString();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodFrom(readableInstant8);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period9.getFieldTypes();
        int int11 = period9.getYears();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT9072000S" + "'", str7, "PT9072000S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        int int1 = periodType0.size();
        org.joda.time.Days days3 = org.joda.time.Days.days((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType4 = days3.getFieldType();
        boolean boolean5 = periodType0.isSupported(durationFieldType4);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((-3600000L));
        org.joda.time.Period period2 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatter2.getPrinter();
        boolean boolean4 = periodFormatter2.isParser();
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period21 = period19.minusMonths(0);
        org.joda.time.Period period23 = period19.minusSeconds((int) (byte) 100);
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.PeriodType periodType25 = periodType24.withMinutesRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant15, readableInstant16, periodType25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (-1), periodType25, chronology28);
        org.joda.time.Period period30 = new org.joda.time.Period((int) '#', (int) (short) 10, 14400, 2, (int) (short) 1, 0, (int) (short) 1, (int) ' ', periodType25);
        java.lang.String str31 = periodType25.getName();
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter2.withParseType(periodType25);
        boolean boolean33 = periodFormatter2.isParser();
        boolean boolean34 = periodFormatter2.isParser();
        java.lang.StringBuffer stringBuffer35 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period40 = period38.minusMonths(0);
        org.joda.time.Period period42 = period38.withMillis((int) (short) 0);
        int int43 = period42.getSeconds();
        java.lang.Object obj44 = null;
        boolean boolean45 = period42.equals(obj44);
        org.joda.time.Period period47 = period42.withWeeks((int) '#');
        org.joda.time.Period period48 = period42.negated();
        org.joda.time.Period period50 = period42.plusMonths((-14400));
        int int51 = period42.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer35, (org.joda.time.ReadablePeriod) period42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "StandardNoMinutes" + "'", str31, "StandardNoMinutes");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.joda.time.Period period1 = org.joda.time.Period.hours(2147483645);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period1);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeks(1);
        boolean boolean6 = weeks3.isGreaterThan(weeks5);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.MIN_VALUE;
        boolean boolean8 = weeks5.isGreaterThan(weeks7);
        org.joda.time.Weeks weeks10 = weeks5.multipliedBy(0);
        boolean boolean11 = weeks2.isGreaterThan(weeks5);
        org.joda.time.DurationFieldType durationFieldType12 = weeks5.getFieldType();
        org.joda.time.Weeks weeks14 = weeks5.multipliedBy((-1491308));
        org.joda.time.Weeks weeks16 = weeks5.multipliedBy((int) (short) 1);
        java.lang.String str17 = weeks16.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P1W" + "'", str17, "P1W");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.joda.time.Days days1 = org.joda.time.Days.days(10);
        java.lang.String str2 = days1.toString();
        org.joda.time.Seconds seconds3 = days1.toStandardSeconds();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P10D" + "'", str2, "P10D");
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale4);
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        boolean boolean7 = periodFormatter2.isParser();
        boolean boolean8 = periodFormatter2.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatter2.getPrinter();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter2.getParser();
        org.joda.time.Duration duration12 = org.joda.time.Duration.parse("PT0S");
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType15 = days14.getPeriodType();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withYearsRemoved();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        boolean boolean19 = periodType17.isSupported(durationFieldType18);
        org.joda.time.PeriodType periodType20 = periodType17.withMinutesRemoved();
        int int21 = periodType17.size();
        org.joda.time.Period period22 = duration12.toPeriodFrom(readableInstant13, periodType17);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType25 = days24.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.PeriodType periodType27 = periodType25.withYearsRemoved();
        java.lang.String str28 = periodType27.toString();
        org.joda.time.PeriodType periodType29 = periodType27.withHoursRemoved();
        java.lang.String str30 = periodType29.toString();
        org.joda.time.Period period31 = duration12.toPeriodTo(readableInstant23, periodType29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Days days35 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        org.joda.time.PeriodType periodType38 = periodType36.withSecondsRemoved();
        org.joda.time.PeriodType periodType39 = periodType36.withMinutesRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((long) (short) 1, (long) (short) 10, periodType40);
        org.joda.time.Period period42 = duration12.toPeriodTo(readableInstant32, periodType40);
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter2.withParseType(periodType40);
        org.joda.time.ReadWritablePeriod readWritablePeriod44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int47 = periodFormatter2.parseInto(readWritablePeriod44, "PT1032695166.990S", (-2147483646));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(periodPrinter9);
        org.junit.Assert.assertNull(periodParser10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Days]" + "'", str28, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[Days]" + "'", str30, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodFormatter43);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT10M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Days days4 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.minus(0);
        org.joda.time.Days days8 = days1.minus(days7);
        org.joda.time.Days days9 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days8);
        org.joda.time.Days days11 = days9.minus((-1));
        java.lang.String str12 = days11.toString();
        org.joda.time.Days days14 = days11.dividedBy((-2));
        org.joda.time.Days days15 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType16 = days15.getPeriodType();
        org.joda.time.Days days18 = days15.minus(0);
        org.joda.time.Days days20 = days15.minus((int) (byte) 0);
        org.joda.time.Days days21 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType22 = days21.getPeriodType();
        org.joda.time.Days days23 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType24 = days23.getPeriodType();
        org.joda.time.Days days26 = days23.minus(0);
        org.joda.time.Days days27 = days26.negated();
        boolean boolean28 = days21.isGreaterThan(days26);
        org.joda.time.Days days30 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days32 = days30.multipliedBy((int) (short) 100);
        org.joda.time.Days days33 = org.joda.time.Days.FIVE;
        org.joda.time.PeriodType periodType34 = days33.getPeriodType();
        org.joda.time.Days days36 = days33.minus(0);
        org.joda.time.Days days37 = days30.minus(days36);
        org.joda.time.Days days38 = days26.minus(days30);
        org.joda.time.Days days39 = days38.negated();
        org.joda.time.Days days40 = days15.minus(days39);
        org.joda.time.Days days41 = days11.minus(days15);
        org.joda.time.Days days43 = days15.plus(268435465);
        int int45 = days43.getValue(0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P1D" + "'", str12, "P1D");
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 268435470 + "'", int45 == 268435470);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) minutes15, chronology18);
        org.joda.time.Minutes minutes20 = minutes0.minus(minutes15);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period24 = period23.negated();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period24.toDurationTo(readableInstant25);
        org.joda.time.Minutes minutes27 = period24.toStandardMinutes();
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        boolean boolean29 = minutes15.isLessThan(minutes27);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period34 = period32.minusMonths(0);
        org.joda.time.Minutes minutes35 = period34.toStandardMinutes();
        org.joda.time.Duration duration36 = minutes35.toStandardDuration();
        org.joda.time.Minutes minutes38 = minutes35.multipliedBy((int) (short) 1);
        int int39 = minutes38.getMinutes();
        boolean boolean40 = minutes15.isLessThan(minutes38);
        org.joda.time.Minutes minutes41 = null;
        org.joda.time.Minutes minutes42 = minutes38.minus(minutes41);
        org.joda.time.Minutes minutes44 = minutes38.multipliedBy(14405);
        org.joda.time.DurationFieldType durationFieldType45 = minutes44.getFieldType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds7 = seconds5.plus(seconds6);
        org.joda.time.PeriodType periodType8 = seconds5.getPeriodType();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.DurationFieldType durationFieldType14 = period11.getFieldType((int) (short) 1);
        int int15 = periodType8.indexOf(durationFieldType14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) ' ', periodType8);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType8);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType19 = periodType18.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter2.withParseType(periodType19);
        org.joda.time.format.PeriodPrinter periodPrinter21 = periodFormatter20.getPrinter();
        java.util.Locale locale22 = periodFormatter20.getLocale();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(periodPrinter21);
        org.junit.Assert.assertNull(locale22);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (-7));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.joda.time.Days days1 = org.joda.time.Days.parseDays("P5D");
        org.joda.time.Days days3 = days1.multipliedBy((int) (short) 100);
        org.joda.time.Duration duration4 = days1.toStandardDuration();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) -1);
        long long7 = duration6.getMillis();
        int int8 = duration4.compareTo((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = duration6.plus((long) 59);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period16 = period14.minusMonths(0);
        org.joda.time.Period period18 = period16.minusSeconds(0);
        org.joda.time.Period period20 = period18.minusWeeks(10);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = period18.minusMillis((int) (short) 0);
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = period18.getFieldTypes();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.forFields(durationFieldTypeArray24);
        org.joda.time.Period period26 = duration10.toPeriodTo(readableInstant11, periodType25);
        org.joda.time.Period period28 = period26.minusDays((-53));
        java.lang.String str29 = period26.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.058S" + "'", str29, "PT0.058S");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("P35M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period1.withWeeks((-1));
        int int5 = period4.size();
        org.joda.time.Period period7 = period4.plusYears((-35));
        org.joda.time.Period period9 = period7.plusSeconds(6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes19 = minutes15.plus(8);
        org.joda.time.Minutes minutes21 = minutes19.dividedBy((int) (short) 1);
        org.joda.time.Period period23 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.DurationFieldType durationFieldType25 = minutes24.getFieldType();
        int int26 = minutes24.getMinutes();
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period32 = period30.minusMonths(0);
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Minutes minutes35 = minutes33.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes36 = minutes27.minus(minutes33);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period41 = period39.minusMonths(0);
        org.joda.time.Minutes minutes42 = period41.toStandardMinutes();
        org.joda.time.Minutes minutes44 = minutes42.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((java.lang.Object) minutes42, chronology45);
        org.joda.time.Minutes minutes47 = minutes27.minus(minutes42);
        org.joda.time.DurationFieldType durationFieldType49 = minutes47.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType50 = minutes47.getPeriodType();
        org.joda.time.Minutes minutes51 = minutes47.negated();
        org.joda.time.Minutes minutes52 = minutes24.minus(minutes51);
        org.joda.time.Minutes minutes53 = minutes52.negated();
        org.joda.time.Minutes minutes54 = minutes19.plus(minutes53);
        org.joda.time.MutablePeriod mutablePeriod55 = minutes19.toMutablePeriod();
        org.joda.time.Minutes minutes57 = minutes19.plus(87);
        org.joda.time.PeriodType periodType58 = minutes19.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType59 = minutes19.getFieldType();
        int int60 = period7.indexOf(durationFieldType59);
        java.lang.String str61 = durationFieldType59.getName();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 14400 + "'", int26 == 14400);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "minutes" + "'", str61, "minutes");
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.dividedBy((int) (byte) 100);
        org.joda.time.Minutes minutes9 = minutes0.minus(minutes6);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period14 = period12.minusMonths(0);
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Minutes minutes17 = minutes15.dividedBy((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) minutes15, chronology18);
        org.joda.time.Minutes minutes20 = minutes0.minus(minutes15);
        org.joda.time.DurationFieldType durationFieldType22 = minutes20.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType23 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes24 = minutes20.negated();
        org.joda.time.DurationFieldType durationFieldType25 = minutes20.getFieldType();
        org.joda.time.PeriodType periodType26 = minutes20.getPeriodType();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 10, (int) (short) 100, 5, (-10));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-2147483646), chronology6);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period12 = period10.minusMonths(0);
        org.joda.time.Minutes minutes13 = period12.toStandardMinutes();
        org.joda.time.Duration duration14 = minutes13.toStandardDuration();
        org.joda.time.Minutes minutes16 = minutes13.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration17 = minutes13.toStandardDuration();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period21 = period20.negated();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationTo(readableInstant22);
        boolean boolean24 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration28 = duration23.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, readableInstant29);
        org.joda.time.Period period32 = org.joda.time.Period.millis(0);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        int int35 = period30.get(durationFieldType33);
        org.joda.time.Period period37 = period7.withField(durationFieldType33, 2);
        org.joda.time.Period period39 = period37.minusDays(35);
        org.joda.time.Period period41 = period39.multipliedBy(97);
        boolean boolean42 = period4.equals((java.lang.Object) period39);
        int int43 = period39.size();
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1491308);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
        org.joda.time.Period period4 = period1.minusMonths(100);
        org.joda.time.Period period5 = period1.normalizedStandard();
        org.joda.time.Period period7 = org.joda.time.Period.days(3);
        boolean boolean8 = period1.equals((java.lang.Object) period7);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus(seconds14);
        org.joda.time.PeriodType periodType16 = seconds13.getPeriodType();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 'a', periodType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((-2147483648L), periodType16, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (-2147483646), 52000L, periodType16, chronology20);
        org.joda.time.PeriodType periodType22 = periodType16.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period23 = period7.withPeriodType(periodType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period5 = period3.minusMonths(0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Duration duration7 = minutes6.toStandardDuration();
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.Period period11 = duration7.toPeriod();
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period17 = period15.minusMonths(0);
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Duration duration19 = minutes18.toStandardDuration();
        org.joda.time.Minutes minutes21 = minutes18.multipliedBy((int) (short) 1);
        org.joda.time.Duration duration22 = minutes18.toStandardDuration();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period26 = period25.negated();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationTo(readableInstant27);
        boolean boolean29 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) -1, (long) (byte) 10);
        org.joda.time.Duration duration33 = duration28.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, readableInstant34);
        boolean boolean36 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration32);
        long long37 = duration7.getMillis();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration7.toPeriod(chronology38);
        org.joda.time.Period period41 = period39.minusMillis((-1));
        int int42 = period41.getMonths();
        org.joda.time.format.PeriodPrinter periodPrinter43 = null;
        org.joda.time.format.PeriodParser periodParser44 = null;
        org.joda.time.format.PeriodFormatter periodFormatter45 = new org.joda.time.format.PeriodFormatter(periodPrinter43, periodParser44);
        boolean boolean46 = periodFormatter45.isParser();
        java.util.Locale locale47 = null;
        org.joda.time.format.PeriodFormatter periodFormatter48 = periodFormatter45.withLocale(locale47);
        boolean boolean49 = periodFormatter45.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter50 = periodFormatter45.getPrinter();
        java.util.Locale locale51 = null;
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter45.withLocale(locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = period41.toString(periodFormatter52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(periodPrinter50);
        org.junit.Assert.assertNotNull(periodFormatter52);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.Period period2 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period4 = period2.minusMonths(0);
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.joda.time.Duration duration6 = minutes5.toStandardDuration();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period11 = period9.minusMonths(0);
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        boolean boolean14 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration18 = duration6.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration6.toDuration();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, readableInstant20);
        org.joda.time.Period period23 = period21.withHours((int) (byte) -1);
        org.joda.time.Period period24 = period23.negated();
        org.joda.time.Period period26 = period23.minusMonths(2);
        org.joda.time.Period period28 = period26.plusWeeks(11);
        org.joda.time.Period period30 = period26.plusDays(0);
        org.joda.time.Period period32 = period26.minusMillis(7);
        org.joda.time.Period period34 = period32.plusMillis((-9500));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(12000L);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period6 = period4.minusMonths(0);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period13 = period11.minusMonths(0);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration8.plus((long) (short) 10);
        org.joda.time.Period period19 = duration8.toPeriod();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period25 = period23.minusMonths(0);
        org.joda.time.Minutes minutes26 = period25.toStandardMinutes();
        org.joda.time.Duration duration27 = minutes26.toStandardDuration();
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.Period period34 = duration30.toPeriod(periodType33);
        boolean boolean35 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration36 = duration1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 1);
        boolean boolean39 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#', (long) (-1));
        org.joda.time.Period period44 = period42.minusMonths(0);
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Duration duration46 = minutes45.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Interval interval48 = duration46.toIntervalFrom(readableInstant47);
        org.joda.time.Duration duration49 = duration1.minus((org.joda.time.ReadableDuration) duration46);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) '#');
        int int2 = period1.getYears();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Period period4 = period1.withFields(readablePeriod3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period1.toDurationTo(readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration6.toIntervalFrom(readableInstant7);
        org.joda.time.Hours hours9 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Hours hours10 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval8);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.DurationFieldType durationFieldType1 = hours0.getFieldType();
        int int2 = hours0.size();
        org.joda.time.Hours hours3 = org.joda.time.Hours.EIGHT;
        int int4 = hours3.getHours();
        org.joda.time.Hours hours5 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours6 = hours3.minus(hours5);
        int int7 = hours6.size();
        org.joda.time.Hours hours9 = org.joda.time.Hours.hours((int) (byte) 100);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours12 = hours10.multipliedBy((int) 'a');
        boolean boolean13 = hours9.isGreaterThan(hours10);
        org.joda.time.Hours hours15 = hours9.plus((int) 'a');
        org.joda.time.Hours hours17 = hours15.minus(13);
        boolean boolean18 = hours6.isLessThan(hours17);
        boolean boolean19 = hours0.isGreaterThan(hours6);
        org.joda.time.Hours hours20 = hours6.negated();
        org.joda.time.Hours hours21 = org.joda.time.Hours.ONE;
        org.joda.time.Hours hours23 = hours21.multipliedBy((int) 'a');
        org.joda.time.Hours hours25 = hours23.minus((int) (short) 10);
        int int26 = hours25.getHours();
        org.joda.time.Hours hours27 = hours6.plus(hours25);
        org.joda.time.PeriodType periodType28 = hours6.getPeriodType();
        org.joda.time.Hours hours29 = hours6.negated();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 87 + "'", int26 == 87);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(hours29);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds3 = seconds1.plus(seconds2);
        org.joda.time.PeriodType periodType4 = seconds1.getPeriodType();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 'a', periodType4);
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Seconds seconds7 = period6.toStandardSeconds();
        java.lang.Object obj8 = null;
        boolean boolean9 = seconds7.equals(obj8);
        org.joda.time.Seconds seconds11 = seconds7.dividedBy(36);
        org.joda.time.Seconds seconds13 = seconds11.plus(0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds13);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(377884);
        org.junit.Assert.assertNotNull(period1);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        java.util.Date date5 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        long long6 = date5.getTime();
        date5.setSeconds((int) 'u');
        date5.setSeconds((int) (byte) 100);
        java.lang.Object obj11 = date5.clone();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 05 00:11:40 UTC 4630");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 83968099800000L + "'", long6 == 83968099800000L);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "Fri Nov 05 00:11:40 UTC 4630");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "Fri Nov 05 00:11:40 UTC 4630");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "Fri Nov 05 00:11:40 UTC 4630");
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        java.lang.String str13 = calendar12.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar12.setWeekDate(24, 0, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 28");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((java.lang.Object) property7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property17.getFieldType();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.withDayOfYear(100);
        org.joda.time.LocalDate.Property property31 = localDate28.dayOfMonth();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate34 = property31.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate35 = property31.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.LocalDate localDate37 = property31.getLocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.withYear((int) ' ');
        org.joda.time.LocalDate localDate41 = localDate39.plusMonths(59);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime48.hourOfDay();
        org.joda.time.DateTime dateTime51 = dateTime48.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology56 = chronology52.withZone(dateTimeZone55);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(chronology56);
        org.joda.time.DurationField durationField58 = chronology56.seconds();
        boolean boolean59 = durationFieldType42.isSupported(chronology56);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) localDate39, chronology56);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType25.getField(chronology56);
        // The following exception was thrown during execution in test generation
        try {
            long long67 = chronology56.getDateTimeMillis(1644572109112L, 32770, 227, 122, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "days" + "'", str43, "days");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime4.withWeekOfWeekyear(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate17 = localDate14.plusDays((int) 'a');
        int int18 = localDate17.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        java.util.Date date5 = new java.util.Date(32772, 1439, 21, (int) (short) 0, 59);
        int int6 = date5.getMonth();
        int int7 = date5.getMonth();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology22 = chronology18.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology22);
        boolean boolean24 = durationFieldType9.isSupported(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate8, chronology22);
        java.util.Date date26 = localDate25.toDate();
        boolean boolean27 = date5.before(date26);
        java.lang.Object obj28 = date26.clone();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 21 00:59:00 UTC 34791");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 13 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "Sun Feb 13 00:00:00 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "Sun Feb 13 00:00:00 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "Sun Feb 13 00:00:00 UTC 2022");
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(0L);
        java.lang.String str8 = monthDay7.toString();
        org.joda.time.Chronology chronology9 = monthDay7.getChronology();
        org.joda.time.Chronology chronology10 = monthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfDay();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology10);
        org.joda.time.Chronology chronology13 = monthDay12.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(30, 30, 32772, 92, 2111, 239, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--01-03" + "'", str8, "--01-03");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(1644572109112L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property6 = monthDay5.monthOfYear();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = locale7.getDisplayScript(locale8);
        int int11 = property6.getMaximumTextLength(locale7);
        java.lang.String str12 = property6.getAsString();
        java.lang.String str13 = property6.getAsShortText();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        int int15 = property6.getMaximumTextLength(locale14);
        java.lang.String str16 = monthDay1.toString("--01-01", locale14);
        java.util.Locale.setDefault(locale14);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--02-13" + "'", str2, "--02-13");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it" + "'", str9, "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "janv." + "'", str13, "janv.");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "--01-01" + "'", str16, "--01-01");
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale3 = new java.util.Locale("de-DE", "30 Nov 3874 00:00:00 GMT");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("fra");
        java.lang.String[] strArray35 = new java.lang.String[] { "11 f\351vr. 2022 09:35:18", "2022-08-11", "ISOChronology[Etc/UTC]", "23", "1-gen-1970 0.00.00", "en", "de-DE", "en", "11 f\351vr. 2022 09:35:17", "--02-13", "10", "1969-12-31T23:59:59.999Z", "fr", "0052-01-03T03:59:59.999+52:00", "millisOfDay", "February", "11 f\351vr. 2022 09:35:18", "year", "\u4e00\u6708", "Sat Dec 21 00:59:00 UTC 34791", "2022-02-13", "2022-08-13", "35", "11-feb-2022 9.35.23", "4", "2022-08-13", "+00:00:00.010", "+97:01" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strList36, filteringMode38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet4, filteringMode38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "de-de_30 NOV 3874 00:00:00 GMT");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        long long30 = dateTimeField4.roundHalfFloor(2678400000L);
        long long32 = dateTimeField4.roundHalfFloor(292278994L);
        long long35 = dateTimeField4.getDifferenceAsLong((-14399996L), (long) 20);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2678400000L + "'", long30 == 2678400000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromDateFields(date9);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property13 = monthDay12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.DurationField durationField15 = property13.getRangeDurationField();
        org.joda.time.MonthDay monthDay17 = property13.addWrapFieldToCopy((int) ' ');
        int int18 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay17.plus(readablePeriod19);
        java.lang.String str22 = monthDay17.toString("--01-04");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572214799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=54,MILLISECOND=799,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:36:54 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--01-04" + "'", str22, "--01-04");
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setExtension('#', "halfdays");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.setMinimalDaysInFirstWeek(2730);
        calendar1.clear();
        int int9 = calendar1.getFirstDayOfWeek();
        calendar1.setMinimalDaysInFirstWeek(19);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar1.getWeeksInWeekYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=19,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfSecond();
        java.lang.String str22 = dateTimeField21.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfSecond" + "'", str22, "millisOfSecond");
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((-1848), 227);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1848 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setWeekDate(70, 16, 2730);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder2.setWeekDefinition(22, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.year();
        java.lang.String str17 = dateTimeField16.getName();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.lang.String str20 = locale18.getCountry();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = monthDay30.getField((int) (byte) 0);
        java.util.Locale locale36 = new java.util.Locale("", "", "hi!");
        int int37 = dateTimeField32.getMaximumTextLength(locale36);
        long long40 = dateTimeField32.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay41.minus(readablePeriod44);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField50 = monthDay48.getField((int) (byte) 0);
        java.util.Locale locale54 = new java.util.Locale("", "", "hi!");
        int int55 = dateTimeField50.getMaximumTextLength(locale54);
        java.lang.String str56 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) monthDay41, locale54);
        int int57 = property26.getMaximumTextLength(locale54);
        java.lang.String str58 = locale18.getDisplayVariant(locale54);
        java.util.Locale locale60 = new java.util.Locale("en-US");
        java.lang.String str61 = locale54.getDisplayLanguage(locale60);
        int int62 = dateTimeField16.getMaximumTextLength(locale54);
        java.lang.String str63 = locale54.getDisplayName();
        java.lang.String str65 = locale54.getExtension('u');
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572215027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3" + "'", str27, "3");
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9L + "'", long40 == 9L);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Feb" + "'", str56, "Feb");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals(locale60.toString(), "en-us");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(32770, 5, 16804056, 7, 14400, 34608860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14400 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        calendar1.setFirstDayOfWeek(19);
        calendar1.setLenient(false);
        java.util.Date date12 = calendar1.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572215134,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=19,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=134,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:36:55 UTC 2022");
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.year();
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.millisOfDay();
        int int11 = dateTimeField9.getMinimumValue(26L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone11);
        boolean boolean17 = dateTimeZone11.isFixed();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62180539199983L) + "'", long15 == (-62180539199983L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(31928L, dateTimeZone5);
        java.lang.String str10 = dateTimeZone5.getName(2730L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        java.lang.Appendable appendable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(appendable18, (long) 57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        boolean boolean13 = dateTime10.isBeforeNow();
        boolean boolean14 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime10);
        java.util.Date date18 = new java.util.Date(0, (int) '#', 292278994);
        boolean boolean19 = dateTime2.equals((java.lang.Object) '#');
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime2.minus(readableDuration20);
        int int22 = dateTime21.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 14 00:00:00 UTC 802135");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate7 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate8 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property5.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronology();
        boolean boolean24 = dateTimeFormatter22.isParser();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        long long44 = dateTimeField36.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay45.minus(readablePeriod48);
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay52 = monthDay50.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField54 = monthDay52.getField((int) (byte) 0);
        java.util.Locale locale58 = new java.util.Locale("", "", "hi!");
        int int59 = dateTimeField54.getMaximumTextLength(locale58);
        java.lang.String str60 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) monthDay45, locale58);
        int int61 = property30.getMaximumTextLength(locale58);
        org.joda.time.DateTimeField dateTimeField62 = property30.getField();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(locale63);
        int int65 = property30.getMaximumTextLength(locale63);
        boolean boolean66 = locale63.hasExtensions();
        java.lang.String str67 = locale63.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter22.withLocale(locale63);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeFormatter22.getZone();
        boolean boolean70 = dateTimeFormatter22.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter22.withZone(dateTimeZone73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter22.withPivotYear(32770);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = dateTime19.toString(dateTimeFormatter76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "3" + "'", str31, "3");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 9L + "'", long44 == 9L);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Feb" + "'", str60, "Feb");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644572215344,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=344,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        java.util.Date date6 = new java.util.Date(11279, 30, 10799999, 141, 16804056, 8);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Nov 08 08:36:08 UTC 42782");
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setRegion("2021-12-28");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2021-12-28 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField8 = property2.getDurationField();
        int int9 = property2.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property2.getField();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayScript(locale13);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale13);
        java.lang.String str17 = locale13.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property2.setCopy("292278993-02-10T00:00:00.000+52:00", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"292278993-02-10T00:00:00.000+52:00\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572215388,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=388,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ita" + "'", str17, "ita");
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 23, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572215402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(13);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        java.util.Date date23 = dateTime22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime26.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime26.minusMinutes(52);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime45 = dateTime26.withZone(dateTimeZone40);
        int int46 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology47 = dateTime26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime53.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime53.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology61 = chronology57.withZone(dateTimeZone60);
        org.joda.time.DurationField durationField62 = chronology57.weeks();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.dayOfYear();
        org.joda.time.DurationField durationField65 = chronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = chronology57.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime48.toMutableDateTime(chronology57);
        org.joda.time.DateTime dateTime68 = dateTime14.withChronology(chronology57);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-187199990L) + "'", long44 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withChronology(chronology30);
        boolean boolean36 = dateTimeFormatter12.isOffsetParsed();
        java.lang.Appendable appendable37 = null;
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfYear(100);
        int int43 = localDate40.size();
        org.joda.time.LocalDate localDate45 = localDate40.plusMonths(6);
        org.joda.time.LocalTime localTime46 = null;
        org.joda.time.DateTime dateTime47 = localDate40.toDateTime(localTime46);
        org.joda.time.LocalDate.Property property48 = localDate40.dayOfWeek();
        org.joda.time.LocalDate localDate50 = localDate40.withYearOfEra(2730);
        org.joda.time.LocalDate.Property property51 = localDate40.monthOfYear();
        org.joda.time.LocalDate localDate53 = property51.addWrapFieldToCopy(19);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(appendable37, (org.joda.time.ReadablePartial) localDate53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate((int) '4', 16, 3);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.DateTime dateTime30 = dateTime26.withFieldAdded(durationFieldType27, (int) 'u');
        int int31 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        java.util.TimeZone timeZone32 = dateTimeZone19.toTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        java.util.Calendar.Builder builder34 = builder6.setTimeZone(timeZone32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder34.setInstant((long) (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "days" + "'", str28, "days");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 349260000 + "'", int31 == 349260000);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572215571,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=571,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        boolean boolean11 = calendar1.isWeekDateSupported();
        int int13 = calendar1.getLeastMaximum(5);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar1.get(816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 816");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572215593,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=593,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 28 + "'", int13 == 28);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        long long6 = java.util.Date.UTC(2021, (int) (short) 100, 14, 2730, 1439, (-16812840));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 61824656700000L + "'", long6 == 61824656700000L);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        org.joda.time.MonthDay monthDay9 = property2.getMonthDay();
        org.joda.time.MonthDay monthDay11 = monthDay9.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = monthDay9.getFields();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDate2.getField(39659999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 39659999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.set(14399, 141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate2.withWeekyear(10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        long long18 = dateTimeZone13.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        java.lang.String str23 = locale21.getCountry();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale21.getDisplayVariant(locale24);
        java.lang.String str26 = dateTimeZone13.getShortName((long) 20, locale21);
        java.lang.String str27 = localDate2.toString("3", locale21);
        int int28 = localDate2.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-187199996L) + "'", long18 == (-187199996L));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572215692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=692,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3" + "'", str27, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 13 + "'", int28 == 13);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology19 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField20 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.clockhourOfDay();
        long long26 = chronology15.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int[] intArray56 = monthDay40.getValues();
        int[] intArray58 = chronology15.get((org.joda.time.ReadablePartial) monthDay40, (long) 4);
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay(chronology15);
        boolean boolean60 = dateTimeFieldType6.isSupported(chronology15);
        int int61 = monthDay0.get(dateTimeFieldType6);
        java.lang.String str62 = dateTimeFieldType6.toString();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62180539199983L) + "'", long26 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 3]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "monthOfYear" + "'", str62, "monthOfYear");
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getDisplayCountry();
        boolean boolean53 = locale48.hasExtensions();
        int int54 = property6.getMaximumShortTextLength(locale48);
        org.joda.time.DurationField durationField55 = property6.getDurationField();
        java.lang.String str56 = property6.getAsText();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572215775,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=775,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(durationField55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "3" + "'", str56, "3");
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime4.plusWeeks(37);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = dateTime11.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime11.toMutableDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = chronology22.eras();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((-10), 31, (int) '4', 0, 71, 2175, (int) (byte) 100, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate.Property property10 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property10.setCopy(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property19.setCopy("0001-01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0001-01-01\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfDay" + "'", str21, "secondOfDay");
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        java.util.TimeZone timeZone11 = calendar1.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.lang.String str16 = calendar15.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572215949,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572215949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.util.GregorianCalendar[time=1644572215949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str16, "java.util.GregorianCalendar[time=1644572215949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("de-DE");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setVariant("\u30d5\u30e9\u30f3\u30b9)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: fra (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("2022");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay3 = monthDay1.withMonthOfYear((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfWeek();
        org.joda.time.LocalDate.Property property11 = localDate2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.minusDays((int) 'u');
        int int22 = property11.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate24 = property11.addToCopy(3);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str30 = locale27.getExtension('a');
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale locale32 = locale27.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = property11.setCopy("\uc6d4", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1???\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        int int13 = calendar1.getActualMinimum(6);
        calendar1.setMinimalDaysInFirstWeek(0);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(365, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=-1,MONTH=0,WEEK_OF_YEAR=39,WEEK_OF_MONTH=5,DAY_OF_MONTH=32770,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=66,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        java.util.Date date10 = java.util.Date.from(instant8);
        java.util.Date date11 = java.util.Date.from(instant8);
        java.util.Date date12 = java.util.Date.from(instant8);
        java.lang.String str13 = date12.toGMTString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572216140,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=56,MILLISECOND=140,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:36:56 UTC 2022");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:36:56 UTC 2022");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:36:56 UTC 2022");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:36:56 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11 Feb 2022 09:36:56 GMT" + "'", str13, "11 Feb 2022 09:36:56 GMT");
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology31 = dateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime10.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        org.joda.time.DurationField durationField46 = chronology41.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.dayOfYear();
        org.joda.time.DurationField durationField49 = chronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = chronology41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime32.toMutableDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField52 = chronology41.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset((-62180539199983L), true);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(dateTimeZone11);
        org.joda.time.LocalDate localDate18 = monthDay16.toLocalDate(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = monthDay16.withMonthOfYear(251);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 251 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62180539199983L) + "'", long15 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        boolean boolean13 = dateTime10.isBeforeNow();
        boolean boolean14 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = dateTime2.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime2.withWeekyear(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'yearOfEra' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        java.util.Date date5 = new java.util.Date((int) (short) 100, 100, 11, 0, (int) (byte) 10);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.LocalDate localDate14 = property11.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate14.getFields();
        org.joda.time.LocalDate localDate17 = localDate14.minusYears(2730);
        int int18 = localDate14.getMonthOfYear();
        java.util.Date date19 = localDate14.toDate();
        int int20 = date19.getHours();
        java.lang.String str21 = date19.toLocaleString();
        boolean boolean22 = date5.after(date19);
        int int23 = date19.getDay();
        org.junit.Assert.assertEquals(date5.toString(), "Sun May 11 00:10:00 UTC 2008");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 13 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "13 f\351vr. 2022 00:00:00" + "'", str21, "13 f\351vr. 2022 00:00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str6 = dateTimeFieldType5.getName();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType5.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyear();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        boolean boolean26 = durationFieldType7.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DurationField durationField45 = durationFieldType7.getField(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((int) 'u', 339, 49006181, (int) (short) -1, 10799999, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "era" + "'", str6, "era");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter13.parseDateTime("35");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.PRC;
        int int8 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.DurationField durationField10 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = property18.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDate21.getFields();
        boolean boolean23 = localDate12.equals((java.lang.Object) localDate21);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = property24.setCopy((-1970));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        int int19 = dateTimeField16.getLeapAmount((long) (-16812840));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime2.withYearOfEra(364);
        org.joda.time.DateTime dateTime8 = dateTime2.minusHours(70);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withPivotYear(73);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = monthDay54.getField((int) (byte) 0);
        java.util.Locale locale60 = new java.util.Locale("", "", "hi!");
        int int61 = dateTimeField56.getMaximumTextLength(locale60);
        long long64 = dateTimeField56.add((long) 9, (long) (short) 0);
        int int66 = dateTimeField56.get((-187199987L));
        long long68 = dateTimeField56.remainder((long) 'a');
        long long70 = dateTimeField56.roundFloor(0L);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("");
        int int73 = dateTimeField56.getMaximumShortTextLength(locale72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter2.withLocale(locale72);
        boolean boolean75 = dateTimeFormatter74.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeFormatter74.parseMillis("21 d\351c. 34791 00:59:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572216722,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=56,MILLISECOND=722,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 9L + "'", long64 == 9L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 97L + "'", long68 == 97L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfCentury(16);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        java.lang.String str16 = monthDay12.toString("23");
        int int17 = monthDay12.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDate11.compareTo((org.joda.time.ReadablePartial) monthDay12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23" + "'", str16, "23");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.DateTimeField dateTimeField9 = monthDay7.getField((int) (byte) 0);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = monthDay7.toString("30 Nov 3874 00:00:00 GMT", locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: N");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        java.time.Instant instant20 = calendar13.toInstant();
        int int22 = calendar13.getActualMaximum(7);
        int int23 = calendar13.getWeeksInWeekYear();
        java.util.Date date27 = new java.util.Date(0, 0, (int) '4');
        date27.setDate(12);
        date27.setHours(2922789);
        date27.setTime(9L);
        java.util.Date date37 = new java.util.Date(0, 0, (int) '4');
        int int38 = date37.getHours();
        int int39 = date37.getDate();
        boolean boolean40 = date27.after(date37);
        java.util.Date date44 = new java.util.Date(0, 0, (int) '4');
        date44.setDate(12);
        date44.setHours(2922789);
        date44.setTime(9L);
        java.util.Date date54 = new java.util.Date(0, 0, (int) '4');
        int int55 = date54.getHours();
        int int56 = date54.getDate();
        boolean boolean57 = date44.after(date54);
        boolean boolean58 = date27.before(date54);
        int int59 = date54.getDay();
        calendar13.setTime(date54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder61 = builder11.setInstant(date54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-2204582400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1900,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date54.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter12.withChronology(chronology30);
        boolean boolean36 = dateTimeFormatter12.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = dateTimeFormatter12.print(84084257400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        java.util.Date date6 = new java.util.Date((-1970), 8, (int) (short) 1, 0, 10, (int) 'u');
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromDateFields(date6);
        int int8 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 01 00:11:57 UTC 71");
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("fr");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray17 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strList18);
        boolean boolean22 = calendar1.before((java.lang.Object) strList18);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(240, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=56,MILLISECOND=998,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.ReadWritableInstant readWritableInstant7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = dateTimeFormatter6.parseInto(readWritableInstant7, "en-US", 14403);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(576, 52, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withWeekyear(6);
        org.joda.time.LocalDate.Property property17 = localDate14.year();
        org.joda.time.LocalDate localDate18 = property17.withMaximumValue();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        java.lang.String str20 = durationFieldType19.getName();
        java.lang.String str21 = durationFieldType19.toString();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(0L);
        java.lang.String str24 = monthDay23.toString();
        org.joda.time.Chronology chronology25 = monthDay23.getChronology();
        org.joda.time.Chronology chronology26 = monthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.year();
        boolean boolean29 = durationFieldType19.isSupported(chronology26);
        java.lang.String str30 = durationFieldType19.getName();
        java.lang.String str31 = durationFieldType19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = localDate18.withFieldAdded(durationFieldType19, 48998496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 341277489 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "years" + "'", str20, "years");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "years" + "'", str21, "years");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "--01-03" + "'", str24, "--01-03");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "years" + "'", str30, "years");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "years" + "'", str31, "years");
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime7.minusDays((int) 'u');
        int int13 = dateTime7.getYearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime7.plusMillis(4);
        java.util.Date date16 = dateTime7.toDate();
        java.util.Calendar.Builder builder17 = builder2.setInstant(date16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder20 = builder17.setWeekDefinition(14402, (-1848));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        java.lang.String str15 = chronology10.toString();
        org.joda.time.DurationField durationField16 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology19 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.era();
        java.lang.String str21 = chronology19.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay(23, (int) (byte) 100, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+52:00]" + "'", str15, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int11 = dateTime4.get(dateTimeFieldType10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime4.toString(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0052-01-03T03:59:59.999+52:00" + "'", str13, "0052-01-03T03:59:59.999+52:00");
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime2.withYearOfEra(364);
        java.lang.String str7 = dateTime2.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str7, "1970-01-03T03:59:59.999+52:00");
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(187200000, 3659999, 311, 51, 187200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 26);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        long long9 = chronology5.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        boolean boolean11 = dateTime10.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 7092L + "'", long9 == 7092L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean13 = calendar12.isWeekDateSupported();
        long long14 = calendar12.getTimeInMillis();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.roll(9, false);
        calendar16.setFirstDayOfWeek((int) (byte) 1);
        int int22 = calendar16.getWeekYear();
        int int23 = calendar16.getFirstDayOfWeek();
        calendar16.setMinimalDaysInFirstWeek(8);
        boolean boolean26 = calendar16.isWeekDateSupported();
        int int27 = calendar12.compareTo(calendar16);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 392358211200000L + "'", long14 == 392358211200000L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644615417564,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=36,SECOND=57,MILLISECOND=564,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        int int4 = date3.getHours();
        int int5 = date3.getMinutes();
        java.util.Date date9 = new java.util.Date(0, 0, (int) '4');
        date9.setDate(12);
        date9.setTime(1L);
        boolean boolean14 = date3.after(date9);
        int int15 = date9.getMinutes();
        date9.setSeconds(5);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:05 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        java.lang.String str5 = monthDay0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay0.getFieldType(57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = dateTimeFormatter23.parseLocalDateTime("11 f\351vr. 2022 09:35:43");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfCentury(5);
        int int18 = dateTime4.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate.Property property10 = localDate4.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int[] intArray41 = monthDay25.getValues();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay44 = monthDay25.withPeriodAdded(readablePeriod42, 59);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology57 = chronology53.withZone(dateTimeZone56);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.now(chronology53);
        org.joda.time.DateTimeField dateTimeField59 = chronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = chronology53.year();
        org.joda.time.DateTimeField dateTimeField61 = chronology53.minuteOfDay();
        org.joda.time.MonthDay monthDay62 = monthDay44.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MonthDay monthDay65 = monthDay62.withPeriodAdded(readablePeriod63, 52);
        org.joda.time.MonthDay monthDay67 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay69 = monthDay67.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField71 = monthDay69.getField((int) (byte) 0);
        java.util.Locale locale75 = new java.util.Locale("", "", "hi!");
        int int76 = dateTimeField71.getMaximumTextLength(locale75);
        long long79 = dateTimeField71.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay80 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay82 = monthDay80.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay80.minus(readablePeriod83);
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay87 = monthDay85.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField89 = monthDay87.getField((int) (byte) 0);
        java.util.Locale locale93 = new java.util.Locale("", "", "hi!");
        int int94 = dateTimeField89.getMaximumTextLength(locale93);
        java.lang.String str95 = dateTimeField71.getAsShortText((org.joda.time.ReadablePartial) monthDay80, locale93);
        int[] intArray96 = monthDay80.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) monthDay65, (-1970), intArray96, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 9L + "'", long79 == 9L);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Feb" + "'", str95, "Feb");
        org.junit.Assert.assertNotNull(intArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[2, 13]");
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(239);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        long long20 = dateTimeZone16.adjustOffset((-62180539199983L), true);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.now(dateTimeZone16);
        org.joda.time.MonthDay.Property property22 = monthDay21.dayOfMonth();
        boolean boolean23 = dateTime2.equals((java.lang.Object) monthDay21);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = monthDay21.getValue(37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62180539199983L) + "'", long20 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears(17);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(dateTimeZone4);
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay7.minus(readablePeriod10);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        java.lang.String str13 = property12.toString();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumShortTextLength(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField27 = monthDay25.getField((int) (byte) 0);
        java.util.Locale locale31 = new java.util.Locale("", "", "hi!");
        int int32 = dateTimeField27.getMaximumTextLength(locale31);
        long long35 = dateTimeField27.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay36.minus(readablePeriod39);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField45 = monthDay43.getField((int) (byte) 0);
        java.util.Locale locale49 = new java.util.Locale("", "", "hi!");
        int int50 = dateTimeField45.getMaximumTextLength(locale49);
        java.lang.String str51 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) monthDay36, locale49);
        int int52 = property21.getMaximumTextLength(locale49);
        org.joda.time.DateTimeField dateTimeField53 = property21.getField();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        int int56 = property21.getMaximumTextLength(locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = locale54.getDisplayCountry();
        boolean boolean59 = locale54.hasExtensions();
        int int60 = property12.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property12.getFieldType();
        boolean boolean62 = monthDay5.isSupported(dateTimeFieldType61);
        int int63 = dateTime1.get(dateTimeFieldType61);
        int int64 = dateTime1.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[dayOfMonth]" + "'", str13, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3" + "'", str22, "3");
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9L + "'", long35 == 9L);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Feb" + "'", str51, "Feb");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1644572217752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=57,MILLISECOND=752,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 86399 + "'", int64 == 86399);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromDateFields(date9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.minus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay15 = monthDay10.withPeriodAdded(readablePeriod13, 999);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay15.getFieldType(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572217780,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=57,MILLISECOND=780,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:36:57 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.MonthDay monthDay17 = monthDay7.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-26569157), 14400, 29, 24, (-1970), 0, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("anglais (Etats-Unis)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        int[] intArray33 = monthDay13.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay13.getFieldType(71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 71");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2, 13]");
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(49006181, 576, 45, 292278993, 1970, 225, 48998496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTime(localTime7);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        int int10 = dateTime8.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMonths(364);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis((-1));
        boolean boolean24 = dateTime22.isAfter(5907399684280970126L);
        boolean boolean25 = dateTime12.equals((java.lang.Object) 5907399684280970126L);
        org.joda.time.DateTime dateTime26 = dateTime12.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.MonthDay monthDay17 = monthDay7.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        boolean boolean20 = durationFieldType5.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Chronology chronology23 = chronology16.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((int) (byte) 10, (int) 'x', 22, 43199999, 24, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43199999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 0);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.lang.String str15 = locale13.getCountry();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale13.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category11, locale16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology32 = chronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.weekyearOfCentury();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(83968099800000L, chronology28);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(100);
        org.joda.time.LocalDate.Property property45 = localDate42.dayOfMonth();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime47 = null;
        org.joda.time.DateTime dateTime48 = localDate42.toDateTime(localTime47);
        boolean boolean49 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays((int) '#');
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime52.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime64 = dateTime52.plusWeeks(5);
        org.joda.time.Chronology chronology65 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekyear();
        org.joda.time.DateTime dateTime67 = dateTime39.toDateTime(chronology65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime70 = dateTime39.withPeriodAdded(readablePeriod68, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str72 = dateTimeFieldType71.getName();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property79 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime81 = dateTime78.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology82 = dateTime81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology86 = chronology82.withZone(dateTimeZone85);
        org.joda.time.DurationField durationField87 = chronology82.weeks();
        org.joda.time.DateTimeField dateTimeField88 = chronology82.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology82.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType71.getField(chronology82);
        org.joda.time.DateTimeField dateTimeField91 = chronology82.yearOfCentury();
        java.util.Locale locale94 = java.util.Locale.forLanguageTag("1970-01-03T03:59:59.999+52:00");
        java.lang.String str95 = dateTimeField91.getAsShortText(45, locale94);
        java.util.Calendar calendar96 = dateTime39.toCalendar(locale94);
        java.util.Locale.setDefault(category11, locale94);
        java.util.Calendar calendar98 = dateTime10.toCalendar(locale94);
        java.util.Calendar calendar99 = java.util.Calendar.getInstance(locale94);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572218296,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=58,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "era" + "'", str72, "era");
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "45" + "'", str95, "45");
        org.junit.Assert.assertNotNull(calendar96);
// flaky:         org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=83968084800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4630,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar98);
// flaky:         org.junit.Assert.assertEquals(calendar98.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar99);
// flaky:         org.junit.Assert.assertEquals(calendar99.toString(), "java.util.GregorianCalendar[time=1644572218296,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=58,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        long long20 = chronology8.add(187217756L, (long) 10799999, 52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 748817704L + "'", long20 == 748817704L);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        int int6 = localDate4.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("fran\347ais", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=franc?ais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("--02-13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=--02-13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(9);
        org.joda.time.LocalDate localDate10 = localDate6.withYearOfEra(39659999);
        org.joda.time.DateMidnight dateMidnight11 = localDate6.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(9);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime17 = dateTime13.withFieldAdded(durationFieldType14, (int) 'u');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate8.withCenturyOfEra(14402021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14402021 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "days" + "'", str15, "days");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        java.lang.String str18 = localDate7.toString();
        org.joda.time.LocalDate localDate20 = localDate7.minusYears(4);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate.Property property22 = localDate20.dayOfMonth();
        int int23 = property22.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-08-13" + "'", str18, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime19.withFieldAdded(durationFieldType20, (int) 'u');
        int int24 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime19);
        java.util.TimeZone timeZone25 = dateTimeZone12.toTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        boolean boolean27 = calendar26.isWeekDateSupported();
        java.lang.String str28 = calendar26.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 349260000 + "'", int24 == 349260000);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572218647,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=58,MILLISECOND=647,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.util.GregorianCalendar[time=1644572218647,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=58,MILLISECOND=647,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str28, "java.util.GregorianCalendar[time=1644572218647,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=58,MILLISECOND=647,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.MonthDay monthDay18 = monthDay8.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField21 = chronology17.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(487, (int) (short) 10, 0, (-16812840), 32769, (int) '4', (-292275055), chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16812840 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField17.getType();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        org.joda.time.LocalDate localDate25 = localDate23.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra(9);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDate25, 21, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        int int14 = localDate4.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) localDate4);
        int int16 = localDate4.getEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter19.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = localDate4.toString(dateTimeFormatter23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        int int7 = localDate2.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField8 = property2.getDurationField();
        int int9 = property2.getMinimumValue();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale10.getDisplayVariant();
        boolean boolean13 = property2.equals((java.lang.Object) str12);
        int int14 = property2.getMinimumValueOverall();
        int int15 = property2.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.DateTime dateTime23 = dateTime20.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(0);
        int int27 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        java.lang.String str41 = chronology36.toString();
        boolean boolean42 = dateTime20.equals((java.lang.Object) str41);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar44 = dateTime20.toCalendar(locale43);
        java.lang.String str45 = locale43.getLanguage();
        java.lang.String str46 = property2.getAsShortText(locale43);
        java.lang.Object obj47 = locale43.clone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 239 + "'", int27 == 239);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+52:00]" + "'", str41, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ja" + "'", str45, "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "ja");
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfMonth(23);
        int int14 = localDate11.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate11.getValue(73);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 73");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar1.getMaximum(2175);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2175");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = chronology15.get(readablePeriod19, 262L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime4.withYearOfCentury(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime4.withDayOfWeek(2111);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2111 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property8.addToCopy(141);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        calendar6.setLenient(true);
        calendar6.roll((int) (short) 100, 0);
        int int13 = calendar6.getGreatestMinimum(0);
        calendar6.clear();
        calendar6.clear(0);
        calendar6.set(8, 0, (int) 'a', 2021, 3);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(97L);
        java.lang.String str31 = property28.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime36.withYearOfCentury(1);
        int int41 = property28.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime43 = dateTime36.withWeekyear((int) 'u');
        boolean boolean44 = calendar6.before((java.lang.Object) dateTime43);
        long long45 = dateTime43.getMillis();
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(29, 32772, 14340, 1, 0, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[hourOfDay]" + "'", str31, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-58474483200001L) + "'", long45 == (-58474483200001L));
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay4 = monthDay2.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay2.minus(readablePeriod5);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        java.lang.String str8 = property7.toString();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        int int47 = property16.getMaximumTextLength(locale44);
        org.joda.time.DateTimeField dateTimeField48 = property16.getField();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        int int51 = property16.getMaximumTextLength(locale49);
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale49.getDisplayCountry();
        boolean boolean54 = locale49.hasExtensions();
        int int55 = property7.getMaximumShortTextLength(locale49);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale49);
        java.util.Locale.Builder builder58 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder0.setLanguage("2022-08-15");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-08-15 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572218960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=58,MILLISECOND=960,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        java.lang.String str22 = dateTimeField20.getAsShortText((long) (-292275054));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53324946" + "'", str22, "53324946");
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(999);
        boolean boolean14 = dateTimeFormatter2.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTimeFormatter2.print(2678400010L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        java.lang.Object obj5 = null;
        boolean boolean6 = calendar1.after(obj5);
        calendar1.setLenient(false);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('u', "en-US");
        java.util.Locale.Builder builder16 = builder14.setLanguage("gregory");
        java.util.Locale locale17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = calendar1.getDisplayName(14400, 29, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=59,MILLISECOND=245,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "gregory__#u-en-us");
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology23 = chronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.weekyearOfCentury();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(83968099800000L, chronology19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays((int) '#');
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime32.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = dateTime32.plusWeeks(5);
        int int45 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate48 = localDate46.plusYears(2022);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DurationField durationField50 = durationFieldType6.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfDay();
        java.lang.String str53 = dateTimeField51.getAsText((long) 719571);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 187200000 + "'", int45 == 187200000);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "719571" + "'", str53, "719571");
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getDisplayCountry();
        boolean boolean53 = locale48.hasExtensions();
        int int54 = property6.getMaximumShortTextLength(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property6.getFieldType();
        int int56 = property6.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay(0L);
        java.lang.String str60 = monthDay59.toString();
        org.joda.time.Chronology chronology61 = monthDay59.getChronology();
        org.joda.time.Chronology chronology62 = monthDay59.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.minuteOfDay();
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = dateTimeField63.getAsShortText(365L, locale65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay67 = property6.setCopy("2022-02-13", locale65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-13\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572219357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=59,MILLISECOND=357,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "--01-03" + "'", str60, "--01-03");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DurationField durationField7 = chronology4.weeks();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfWeek();
        org.joda.time.LocalDate.Property property11 = localDate2.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.minusDays((int) 'u');
        int int22 = property11.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate24 = property11.addToCopy(3);
        boolean boolean25 = property11.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(2022);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.plusWeeks(5);
        org.joda.time.Chronology chronology36 = dateTime23.getChronology();
        org.joda.time.Chronology chronology37 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime20.withChronology(chronology37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907399684280970662L, chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        int int41 = dateTime40.getYearOfCentury();
        long long42 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime40.plusMonths(11);
        boolean boolean47 = dateTime45.isAfter((long) 364);
        java.lang.String str48 = dateTime45.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11" + "'", str11, "11");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 89L + "'", long42 == 89L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2023-01-13T13:36:59.417+52:00" + "'", str48, "2023-01-13T13:36:59.417+52:00");
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField35 = monthDay33.getField((int) (byte) 0);
        java.util.Locale locale39 = new java.util.Locale("", "", "hi!");
        int int40 = dateTimeField35.getMaximumTextLength(locale39);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale42);
        java.lang.String str44 = dateTimeField35.getAsShortText((long) 10, locale42);
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.util.Locale locale46 = locale42.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = calendar28.getDisplayName(0, (int) '4', locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+52:00]" + "'", str25, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "janv." + "'", str44, "janv.");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fran\347ais" + "'", str45, "fran\347ais");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("java.util.GregorianCalendar[time=1644572215949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=55,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]", (double) 449322160675265000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.4932216067526502E17");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime8.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        boolean boolean27 = dateTime24.isBeforeNow();
        boolean boolean28 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean29 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime30 = dateTime13.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--01-03" + "'", str11, "--01-03");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        int int7 = dateTime4.getDayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        long long14 = dateTimeZone9.convertLocalToUTC((long) 4, false, (long) 5);
        int int16 = dateTimeZone9.getStandardOffset(83968099800000L);
        boolean boolean18 = dateTimeZone9.isStandardOffset((long) 365);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime22.plusWeeks(5);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) dateTime34);
        boolean boolean36 = dateTimeZone9.equals((java.lang.Object) dateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187199996L) + "'", long14 == (-187199996L));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        int int8 = dateTimeFormatter2.getDefaultYear();
        java.io.Writer writer9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.DateTime dateTime19 = property15.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        int int29 = dateTime26.getWeekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateTime26.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property32 = dateTime26.property(dateTimeFieldType31);
        org.joda.time.DateTime.Property property33 = dateTime26.centuryOfEra();
        org.joda.time.DateTime dateTime35 = dateTime26.withCenturyOfEra(20);
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime37 = dateTime19.toDateTime(dateTimeZone22);
        int int38 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime.Property property39 = dateTime19.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer9, (org.joda.time.ReadableInstant) dateTime19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 349260000 + "'", int36 == 349260000);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 999 + "'", int38 == 999);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(227, 28);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime6.toMutableDateTime(dateTimeZone10);
        int int13 = dateTimeZone10.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 10, dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone10, (long) 16);
        java.lang.String str19 = dateTimeZone10.getShortName((long) 2021);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 631680016L + "'", long17 == 631680016L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        int int18 = dateTime16.getMillisOfSecond();
        int int19 = dateTime16.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        int int9 = calendar1.getWeeksInWeekYear();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        calendar11.roll(9, false);
        calendar11.setFirstDayOfWeek((int) (byte) 1);
        int int17 = calendar11.getWeekYear();
        int int18 = calendar11.getFirstDayOfWeek();
        int int19 = calendar11.getWeeksInWeekYear();
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        calendar1.setTimeZone(timeZone20);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = calendar1.getGreatestMinimum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615419890,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=36,SECOND=59,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644615419890,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=36,SECOND=59,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime15.plusWeeks(5);
        org.joda.time.Chronology chronology28 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyear();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime12.toDateTime(chronology28);
        org.joda.time.DateTime dateTime33 = dateTime31.plusWeeks(59);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfMonth();
        java.lang.String str8 = chronology4.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.weekyear();
        org.joda.time.ReadablePartial readablePartial10 = null;
        int int11 = dateTimeField9.getMinimumValue(readablePartial10);
        org.joda.time.DurationField durationField12 = dateTimeField9.getLeapDurationField();
        org.joda.time.DurationField durationField13 = dateTimeField9.getLeapDurationField();
        long long16 = dateTimeField9.getDifferenceAsLong(1644572217010L, 5177746124946L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-111L) + "'", long16 == (-111L));
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(19005, 16804056, 36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16804056 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        boolean boolean16 = durationFieldType1.isSupported(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) localDate0, chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = localDate0.getField(349260000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 349260000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, 14, (int) 'u');
        java.util.Calendar.Builder builder19 = builder15.setTimeOfDay(0, 0, 6);
        java.util.Calendar.Builder builder23 = builder19.setDate(14, 44, 54);
        java.util.Calendar.Builder builder27 = builder19.setWeekDate(43199999, 39659999, 46);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime30.toDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = dateTime30.plusWeeks(5);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) dateTime42);
        int int44 = dateTime43.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays((int) '#');
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime47.toDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime59 = dateTime47.plusWeeks(5);
        org.joda.time.Chronology chronology60 = dateTime47.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime47.minus(readablePeriod61);
        int int63 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime62);
        java.util.Date date64 = dateTime62.toDate();
        int int65 = date64.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder66 = builder19.setInstant(date64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 70 + "'", int44 == 70);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = dateTime10.toString("--02-01", locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--02-01" + "'", str13, "--02-01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charSet15);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromDateFields(date9);
        java.lang.String str11 = date9.toGMTString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572220192,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=0,MILLISECOND=192,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:37:00 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11 Feb 2022 09:37:00 GMT" + "'", str11, "11 Feb 2022 09:37:00 GMT");
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDate2.getValue(796387);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 796387");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        calendar1.setMinimalDaysInFirstWeek(8);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar1.getGreatestMinimum(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615420229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=0,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField35 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology26.hourOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(100);
        org.joda.time.Interval interval42 = localDate41.toInterval();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate.Property property47 = localDate41.weekyear();
        org.joda.time.LocalDate localDate49 = localDate41.withYearOfCentury(9);
        org.joda.time.LocalDate localDate51 = localDate49.minusYears(365);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.LocalDate localDate57 = localDate55.withDayOfYear(100);
        int int58 = localDate55.size();
        org.joda.time.LocalDate localDate60 = localDate55.plusMonths(6);
        org.joda.time.LocalTime localTime61 = null;
        org.joda.time.DateTime dateTime62 = localDate55.toDateTime(localTime61);
        org.joda.time.LocalDate.Property property63 = localDate55.weekyear();
        org.joda.time.LocalDate localDate64 = property63.roundCeilingCopy();
        int[] intArray65 = localDate64.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = dateTimeField36.set((org.joda.time.ReadablePartial) localDate51, 999, intArray65, 583);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 583 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[2023, 1, 2]");
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        int int7 = dateTime6.getSecondOfMinute();
        boolean boolean8 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime10 = dateTime6.withMillisOfSecond(36);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        java.util.Locale locale11 = new java.util.Locale("", "", "hi!");
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime14 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(576, 4, 11127);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11127 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfDay();
        long long16 = dateTimeField14.roundCeiling(14399L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 14399L + "'", long16 == 14399L);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime2.withChronology(chronology42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = chronology42.get(readablePeriod45, 3599999L, (-14400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("millis", (double) 2175);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2175.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.now(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfDay();
        org.joda.time.MonthDay monthDay50 = monthDay32.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeField dateTimeField51 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField52 = chronology41.secondOfMinute();
        boolean boolean53 = dateTimeField52.isSupported();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-349259990L));
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology19 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField20 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.clockhourOfDay();
        long long26 = chronology15.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int[] intArray56 = monthDay40.getValues();
        int[] intArray58 = chronology15.get((org.joda.time.ReadablePartial) monthDay40, (long) 4);
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay(chronology15);
        boolean boolean60 = dateTimeFieldType6.isSupported(chronology15);
        int int61 = monthDay0.get(dateTimeFieldType6);
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay64 = monthDay62.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField66 = monthDay64.getField((int) (byte) 0);
        java.util.Locale locale70 = new java.util.Locale("", "", "hi!");
        int int71 = dateTimeField66.getMaximumTextLength(locale70);
        long long74 = dateTimeField66.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay75 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay77 = monthDay75.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay75.minus(readablePeriod78);
        org.joda.time.MonthDay monthDay80 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay82 = monthDay80.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField84 = monthDay82.getField((int) (byte) 0);
        java.util.Locale locale88 = new java.util.Locale("", "", "hi!");
        int int89 = dateTimeField84.getMaximumTextLength(locale88);
        java.lang.String str90 = dateTimeField66.getAsShortText((org.joda.time.ReadablePartial) monthDay75, locale88);
        java.lang.String str92 = dateTimeField66.getAsText(250635459969000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = dateTimeField66.getType();
        org.joda.time.MonthDay.Property property94 = monthDay0.property(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62180539199983L) + "'", long26 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 3]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 9L + "'", long74 == 9L);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Feb" + "'", str90, "Feb");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "avril" + "'", str92, "avril");
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 576);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 576");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = dateTimeFormatter2.parseLocalDateTime("secondOfMinute");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572220677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=0,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        int int12 = calendar1.getGreatestMinimum(8);
        java.lang.Object obj13 = calendar1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("fr");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray17 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strList18);
        boolean boolean22 = calendar1.before((java.lang.Object) strList18);
        java.util.Locale locale27 = new java.util.Locale("de-DE", "30 Nov 3874 00:00:00 GMT");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap28 = calendar1.getDisplayNames(251, 14403, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=0,MILLISECOND=733,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals(locale27.toString(), "de-de_30 NOV 3874 00:00:00 GMT");
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.year();
        java.lang.String str17 = dateTimeField16.getName();
        int int19 = dateTimeField16.getLeapAmount((long) 100);
        long long21 = dateTimeField16.roundHalfFloor((long) 48);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-187200000L) + "'", long21 == (-187200000L));
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        int int23 = localDate20.size();
        int int24 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate.Property property25 = localDate20.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = localDate20.getField(187200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 187200000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.MonthDay monthDay5 = property2.getMonthDay();
        java.util.Locale locale9 = new java.util.Locale("Nov", "ja", "2 Apr 2104 08:59:23 GMT");
        java.lang.String str10 = property2.getAsShortText(locale9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = property2.setCopy("20");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"20\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertEquals(locale9.toString(), "nov_JA_2 Apr 2104 08:59:23 GMT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan" + "'", str10, "Jan");
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(2175);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTimeFormatter2.parseDateTime("days");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime21 = dateTime9.plusWeeks(5);
        org.joda.time.Chronology chronology22 = dateTime9.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime9.minus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean26 = dateTime9.isSupported(dateTimeFieldType25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        int int32 = localDate29.size();
        org.joda.time.LocalDate localDate34 = localDate29.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays((int) '#');
        int int40 = dateTime37.getWeekyear();
        org.joda.time.DateMidnight dateMidnight41 = dateTime37.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property43 = dateTime37.property(dateTimeFieldType42);
        org.joda.time.LocalDate.Property property44 = localDate34.property(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType42.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime50.hourOfDay();
        org.joda.time.DateTime dateTime53 = dateTime50.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology58 = chronology54.withZone(dateTimeZone57);
        java.lang.String str59 = chronology54.toString();
        org.joda.time.DurationField durationField60 = chronology54.seconds();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.yearOfCentury();
        boolean boolean62 = dateTimeFieldType42.isSupported(chronology54);
        boolean boolean63 = dateTimeFieldType25.isSupported(chronology54);
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property71 = dateTime70.hourOfDay();
        org.joda.time.DateTime dateTime73 = dateTime70.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology78 = chronology74.withZone(dateTimeZone77);
        java.lang.String str79 = chronology74.toString();
        org.joda.time.DurationField durationField80 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField82 = chronology74.weekyearOfCentury();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) '4', chronology74);
        org.joda.time.DateTimeField dateTimeField84 = chronology74.weekOfWeekyear();
        org.joda.time.DurationField durationField85 = durationFieldType64.getField(chronology74);
        org.joda.time.DurationField durationField86 = chronology74.seconds();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(chronology74);
        org.joda.time.DateTimeField dateTimeField88 = chronology74.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((int) (byte) 100, 14399999, 311, (-292275054), (int) (byte) 1, 96684, 999, chronology74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+52:00]" + "'", str59, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ISOChronology[+52:00]" + "'", str79, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        org.joda.time.DateTime dateTime25 = localDate24.toDateTimeAtMidnight();
        int int26 = dateTime25.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTimeFormatter2.parseDateTime("2022-02-15");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property6 = localDate2.era();
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = dateTimeField8.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField8.add((long) 41, 2022L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter6.print(819277L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        int int15 = dateTime12.getWeekyear();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property18 = dateTime12.property(dateTimeFieldType17);
        boolean boolean19 = localDate4.isSupported(dateTimeFieldType17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        org.joda.time.LocalDate.Property property25 = localDate22.dayOfMonth();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.LocalDate localDate28 = property25.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate29 = property25.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        boolean boolean31 = localDate4.equals((java.lang.Object) property25);
        org.joda.time.LocalDate localDate32 = property25.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = property25.setCopy("--02-13");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-13\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean13 = calendar12.isWeekDateSupported();
        java.util.Date date14 = calendar12.getTime();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder15.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder22 = builder15.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder26 = builder15.setDate(14399, 52, 4);
        java.util.Calendar calendar27 = builder26.build();
        boolean boolean28 = calendar27.isWeekDateSupported();
        java.util.Date date29 = calendar27.getTime();
        int int30 = date14.compareTo(date29);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun May 04 00:00:00 UTC 14403");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun May 04 00:00:00 UTC 14403");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        int int10 = dateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) '#');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime13.plusWeeks(5);
        org.joda.time.Chronology chronology26 = dateTime13.getChronology();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime13.minus(readablePeriod27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean30 = dateTime13.isSupported(dateTimeFieldType29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(100);
        int int36 = localDate33.size();
        org.joda.time.LocalDate localDate38 = localDate33.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        int int44 = dateTime41.getWeekyear();
        org.joda.time.DateMidnight dateMidnight45 = dateTime41.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property47 = dateTime41.property(dateTimeFieldType46);
        org.joda.time.LocalDate.Property property48 = localDate38.property(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology62 = chronology58.withZone(dateTimeZone61);
        java.lang.String str63 = chronology58.toString();
        org.joda.time.DurationField durationField64 = chronology58.seconds();
        org.joda.time.DateTimeField dateTimeField65 = chronology58.yearOfCentury();
        boolean boolean66 = dateTimeFieldType46.isSupported(chronology58);
        boolean boolean67 = dateTimeFieldType29.isSupported(chronology58);
        int int68 = dateTime9.get(dateTimeFieldType29);
        java.lang.String str70 = dateTime9.toString("2022-02-13");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ISOChronology[+52:00]" + "'", str63, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-13" + "'", str70, "2022-02-13");
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        boolean boolean15 = date3.before(date13);
        java.lang.String str16 = date3.toLocaleString();
        java.lang.Object obj17 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1 janv. 1970 00:00:00" + "'", str16, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("de-DE");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setScript("311");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 311 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter9.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) '#');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime13.plusWeeks(5);
        org.joda.time.Chronology chronology26 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter9.withChronology(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        boolean boolean29 = localDate2.equals((java.lang.Object) dateTimeFormatter28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.Interval interval35 = localDate34.toInterval();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate.Property property40 = localDate34.weekOfWeekyear();
        org.joda.time.LocalDate localDate42 = property40.addToCopy(311);
        int int43 = localDate42.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("13 f\351vr. 2022 00:00:00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=13fe?vr.202200:00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.MonthDay.Property property8 = monthDay5.dayOfMonth();
        java.util.Locale locale10 = java.util.Locale.UK;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = property8.setCopy("en_US", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en_US\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeZone3.getShortName((long) 0, locale6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) calendar8);
        // The following exception was thrown during execution in test generation
        try {
            calendar8.set(323, 323);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 323");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572221704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=1,MILLISECOND=704,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        int int6 = date3.getMinutes();
        int int7 = date3.getMinutes();
        int int8 = date3.getMonth();
        java.lang.Object obj9 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 12 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "Mon Feb 12 00:00:00 UTC 1900");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Mon Feb 12 00:00:00 UTC 1900");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Mon Feb 12 00:00:00 UTC 1900");
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.DateTime dateTime13 = dateTime4.minus((long) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds(14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(51);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.plusWeeks(5);
        org.joda.time.Chronology chronology37 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter20.withChronology(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter38.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeFormatter38.getZone();
        boolean boolean41 = dateTimeFormatter38.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = dateTime17.toString(dateTimeFormatter38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        int int14 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property13.addToCopy((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = property13.addToCopy((long) 16);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond(9);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        calendar1.set(1439, (int) ' ', 7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = calendar1.isSet(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1439,MONTH=32,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=7,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        long long6 = java.util.Date.UTC(2000, 29, 0, 73, 187200000, 227);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 72213210227000L + "'", long6 == 72213210227000L);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.minusYears(29);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime13.minus(readableDuration21);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField28 = monthDay26.getField((int) (byte) 0);
        java.util.Locale locale32 = new java.util.Locale("", "", "hi!");
        int int33 = dateTimeField28.getMaximumTextLength(locale32);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = dateTimeField28.getAsShortText((long) 10, locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = dateTime13.toString("centuryOfEra", locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "janv." + "'", str37, "janv.");
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        org.joda.time.LocalDate localDate28 = localDate23.plusMonths(6);
        int int30 = localDate28.getValue(0);
        java.lang.String str31 = localDate28.toString();
        org.joda.time.LocalDate localDate33 = localDate28.withWeekyear(1);
        org.joda.time.LocalDate localDate35 = localDate28.withDayOfYear((int) (byte) 1);
        int int36 = localDate28.getYear();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(100);
        int int42 = localDate39.size();
        org.joda.time.LocalDate localDate44 = localDate39.plusMonths(6);
        int int46 = localDate44.getValue(0);
        boolean boolean47 = localDate28.equals((java.lang.Object) int46);
        org.joda.time.LocalDate localDate49 = localDate28.withDayOfYear((int) (short) 100);
        int int50 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDate49);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-08-13" + "'", str31, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        int int4 = date3.getHours();
        java.lang.Object obj5 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "Wed Feb 21 00:00:00 UTC 1900");
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.millisOfSecond();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology8.get(readablePeriod19, (long) (-292275055), (long) 2111);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(15);
        int int10 = dateTime7.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime7.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.plus(readablePeriod7);
        long long9 = dateTime4.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        int int29 = localDate7.size();
        org.joda.time.LocalDate.Property property30 = localDate7.era();
        org.joda.time.LocalDate localDate31 = property30.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property30.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate32.getFieldType(2730);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2730");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        int int19 = monthDay18.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime22.plusWeeks(5);
        int int35 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime22);
        int int36 = dateTime22.getWeekyear();
        int int37 = dateTime22.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 187200000 + "'", int35 == 187200000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        int int7 = dateTimeField4.getDifference((long) (short) 1, (-60494601600001L));
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(52);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate.Property property12 = localDate10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int24 = dateTime17.get(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate10.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate27 = localDate10.withWeekyear(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getRangeDurationType();
        int int30 = localDate27.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (byte) 0);
        int int36 = localDate35.getYearOfCentury();
        boolean boolean38 = localDate35.equals((java.lang.Object) 32762L);
        org.joda.time.Chronology chronology39 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(239);
        int[] intArray47 = chronology39.get((org.joda.time.ReadablePartial) localDate43, 392358211200000L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = dateTimeField4.addWrapField((org.joda.time.ReadablePartial) localDate27, 69, intArray47, 2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16804056 + "'", int7 == 16804056);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[14403, 5, 4]");
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay7 = monthDay1.withFieldAdded(durationFieldType5, (-1));
        org.joda.time.MonthDay monthDay9 = monthDay7.plusDays((int) '4');
        java.lang.String str10 = monthDay7.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay7.plus(readablePeriod11);
        org.joda.time.MonthDay.Property property13 = monthDay12.dayOfMonth();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        int int23 = localDate21.getValue(0);
        java.lang.String str24 = localDate21.toString();
        org.joda.time.LocalDate localDate26 = localDate21.withWeekyear(1);
        org.joda.time.LocalDate localDate28 = localDate21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        int int34 = dateTime33.getWeekyear();
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property38 = monthDay12.property(dateTimeFieldType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--12-03" + "'", str10, "--12-03");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-08-13" + "'", str24, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2021 + "'", int34 == 2021);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay1.minus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = monthDay1.getValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.setMinimalDaysInFirstWeek(2730);
        calendar1.clear();
        calendar1.set(15, 0, (int) (byte) 1, 5, 2021, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.DateTime dateTime23 = dateTime20.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(0);
        int int27 = dateTime20.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime20.toMutableDateTimeISO();
        java.lang.String str30 = dateTime20.toString("1");
        java.util.GregorianCalendar gregorianCalendar31 = dateTime20.toGregorianCalendar();
        int int32 = calendar1.compareTo((java.util.Calendar) gregorianCalendar31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2730,ERA=?,YEAR=15,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=5,MINUTE=2021,SECOND=32,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 239 + "'", int27 == 239);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate2.withWeekyear(10);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks(0);
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronology();
        boolean boolean17 = dateTimeFormatter15.isParser();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        long long37 = dateTimeField29.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay45 = monthDay43.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField47 = monthDay45.getField((int) (byte) 0);
        java.util.Locale locale51 = new java.util.Locale("", "", "hi!");
        int int52 = dateTimeField47.getMaximumTextLength(locale51);
        java.lang.String str53 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) monthDay38, locale51);
        int int54 = property23.getMaximumTextLength(locale51);
        org.joda.time.DateTimeField dateTimeField55 = property23.getField();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        int int58 = property23.getMaximumTextLength(locale56);
        boolean boolean59 = locale56.hasExtensions();
        java.lang.String str60 = locale56.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter15.withLocale(locale56);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeFormatter15.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeFormatter15.getZone();
        org.joda.time.Chronology chronology64 = dateTimeFormatter15.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = localDate11.toString(dateTimeFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "3" + "'", str24, "3");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9L + "'", long37 == 9L);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Feb" + "'", str53, "Feb");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644572222995,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=2,MILLISECOND=995,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(dateTimeZone62);
        org.junit.Assert.assertNull(dateTimeZone63);
        org.junit.Assert.assertNull(chronology64);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate2.withWeekyear(10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        long long18 = dateTimeZone13.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        java.lang.String str23 = locale21.getCountry();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale21.getDisplayVariant(locale24);
        java.lang.String str26 = dateTimeZone13.getShortName((long) 20, locale21);
        java.lang.String str27 = localDate2.toString("3", locale21);
        java.lang.String str28 = locale21.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-187199996L) + "'", long18 == (-187199996L));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572223022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=3,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:00" + "'", str26, "+52:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3" + "'", str27, "3");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais" + "'", str28, "fran\347ais");
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) '#');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(5);
        int int17 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(83968099800000L, chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        int int53 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime4.toMutableDateTime(dateTimeZone36);
        long long56 = dateTimeZone1.getMillisKeepLocal(dateTimeZone36, (long) 365);
        java.lang.String str58 = dateTimeZone1.getNameKey(83652552000000L);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int60 = localDate59.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 187200000 + "'", int53 == 187200000);
        org.junit.Assert.assertNotNull(mutableDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 365L + "'", long56 == 365L);
// flaky:         org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = chronology8.get(readablePeriod16, (-5907399684280970322L), 250635459969000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        int int18 = dateTime16.getMonthOfYear();
        java.lang.String str19 = dateTime16.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-09-08T03:07:59.999+52:00" + "'", str19, "1969-09-08T03:07:59.999+52:00");
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfDay();
        boolean boolean15 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.Chronology chronology17 = chronology11.withUTC();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField35 = chronology26.minutes();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 28);
        org.joda.time.DateTime.Property property40 = dateTime36.era();
        int int41 = dateTime36.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 44 + "'", int41 == 44);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(83968099800000L, chronology14);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((int) (short) 1, 15, 0, 14340, 2022, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate((int) '4', 16, 3);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.DateTime dateTime30 = dateTime26.withFieldAdded(durationFieldType27, (int) 'u');
        int int31 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        java.util.TimeZone timeZone32 = dateTimeZone19.toTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        java.util.Calendar.Builder builder34 = builder6.setTimeZone(timeZone32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder37 = builder6.set(999, 34608860);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "days" + "'", str28, "days");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 349260000 + "'", int31 == 349260000);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572223312,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=3,MILLISECOND=312,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Calendar.Builder builder15 = builder3.setWeekDate((int) (byte) 1, 187200000, 1);
        java.util.Calendar.Builder builder19 = builder15.setWeekDate((int) (byte) 100, (int) '#', 1439);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        org.joda.time.DateTimeField dateTimeField57 = property25.getField();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        int int60 = property25.getMaximumTextLength(locale58);
        java.lang.String str61 = locale58.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale62.toLanguageTag();
        java.lang.String str64 = locale58.getDisplayName(locale62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime69.hourOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology73 = dateTime72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology77 = chronology73.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology73.weekyearOfCentury();
        org.joda.time.MonthDay monthDay79 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay81 = monthDay79.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField83 = monthDay81.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.era();
        int int85 = monthDay81.indexOf(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.MonthDay monthDay88 = monthDay81.withPeriodAdded(readablePeriod86, (-1));
        java.util.Locale locale90 = java.util.Locale.CANADA;
        java.lang.String str91 = dateTimeField78.getAsShortText((org.joda.time.ReadablePartial) monthDay81, (int) '#', locale90);
        java.lang.String str92 = locale58.getDisplayName(locale90);
        java.util.Calendar.Builder builder93 = builder15.setLocale(locale90);
        java.util.Calendar.Builder builder95 = builder15.setLenient(false);
        java.util.Calendar.Builder builder99 = builder95.setTimeOfDay(48949, 187200000, 12);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644572223389,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=3,MILLISECOND=389,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-US" + "'", str63, "en-US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "French" + "'", str64, "French");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "35" + "'", str91, "35");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "French" + "'", str92, "French");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology31 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime10.withMillis(31608000000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime33.withEra(6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime32 = dateTime10.withMillisOfSecond(12);
        org.joda.time.DateTime.Property property33 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime35 = property33.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        boolean boolean18 = dateTimeFormatter17.isParser();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology33 = chronology29.withZone(dateTimeZone32);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology33);
        org.joda.time.DurationField durationField35 = chronology33.seconds();
        boolean boolean36 = durationFieldType19.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFormatter17, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay(0L);
        java.lang.String str5 = monthDay4.toString();
        org.joda.time.Chronology chronology6 = monthDay4.getChronology();
        org.joda.time.Chronology chronology7 = monthDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType2.getField(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.weeks();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((int) ' ', 1439, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--01-03" + "'", str5, "--01-03");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime.Property property7 = dateTime6.weekyear();
        java.util.Locale locale11 = new java.util.Locale("", "", "hi!");
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.DateTime dateTime13 = property7.withMaximumValue();
        long long14 = property7.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property7.setCopy("21 d\351c. 34791 00:59:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21 de?c. 34791 00:59:00\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3542400000L + "'", long14 == 3542400000L);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        org.joda.time.LocalDate.Property property10 = localDate9.centuryOfEra();
        java.lang.String str11 = localDate9.toString();
        org.joda.time.LocalDate.Property property12 = localDate9.weekyear();
        int int13 = localDate9.getEra();
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long21 = dateTimeZone17.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj14, dateTimeZone17);
        boolean boolean24 = dateTimeZone17.isStandardOffset((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight25 = localDate9.toDateMidnight(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(69, 796387, 46, (int) (byte) 100, 43199999, (-16812840), 0, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11" + "'", str11, "2022-02-11");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-187199987L) + "'", long21 == (-187199987L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(583, 18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 583 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay4 = monthDay2.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField6 = monthDay4.getField((int) (byte) 0);
        java.util.Locale locale10 = new java.util.Locale("", "", "hi!");
        int int11 = dateTimeField6.getMaximumTextLength(locale10);
        long long14 = dateTimeField6.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay17 = monthDay15.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay15.minus(readablePeriod18);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        java.lang.String str30 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) monthDay15, locale28);
        int[] intArray31 = monthDay15.getValues();
        boolean boolean32 = calendar1.before((java.lang.Object) intArray31);
        boolean boolean33 = calendar1.isWeekDateSupported();
        java.util.Date date34 = calendar1.getTime();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str40 = locale37.getExtension('a');
        java.lang.String str42 = locale37.getExtension('a');
        java.lang.String str43 = locale37.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = calendar1.getDisplayName((int) 'a', 60, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572223801,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=3,MILLISECOND=801,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9L + "'", long14 == 9L);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Feb" + "'", str30, "Feb");
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2, 13]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Fri Feb 11 09:37:03 UTC 2022");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ita" + "'", str43, "ita");
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = property5.setCopy(487);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 487 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        java.util.Locale locale11 = new java.util.Locale("fra", "fr");
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.DateTime dateTime13 = property8.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = property8.getDifference(readableInstant14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = property8.setCopy("dimanche");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dimanche\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "fra_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "52" + "'", str12, "52");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1970) + "'", int15 == (-1970));
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(1644572109112L);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        calendar3.setLenient(true);
        calendar3.setMinimalDaysInFirstWeek(1970);
        int int9 = calendar3.getGreatestMinimum(10);
        java.time.Instant instant10 = calendar3.toInstant();
        java.util.Date date11 = java.util.Date.from(instant10);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.fromDateFields(date11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.minus(readablePeriod13);
        boolean boolean15 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = monthDay1.withMonthOfYear(14400004);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14400004 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572224027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=4,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:37:04 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        long long15 = dateTimeField12.add((long) '4', (long) (byte) 0);
        java.lang.String str17 = dateTimeField12.getAsShortText((long) 'u');
        long long20 = dateTimeField12.add(1644572116406L, 9L);
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay24 = monthDay22.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField26 = monthDay24.getField((int) (byte) 0);
        java.util.Locale locale30 = new java.util.Locale("", "", "hi!");
        int int31 = dateTimeField26.getMaximumTextLength(locale30);
        long long34 = dateTimeField26.add((long) 9, (long) (short) 0);
        org.joda.time.DurationField durationField35 = dateTimeField26.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime41.yearOfCentury();
        java.util.Locale locale48 = new java.util.Locale("fra", "fr");
        java.lang.String str49 = property45.getAsShortText(locale48);
        java.lang.String str50 = dateTimeField26.getAsShortText(83968099800000L, locale48);
        java.lang.String str51 = dateTimeField12.getAsText((int) (short) 10, locale48);
        long long53 = dateTimeField12.roundHalfFloor(5907399684280970126L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644604516406L + "'", long20 == 1644604516406L);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 9L + "'", long34 == 9L);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals(locale48.toString(), "fra_FR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "52" + "'", str49, "52");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Nov" + "'", str50, "Nov");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10" + "'", str51, "10");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5907399684282000000L + "'", long53 == 5907399684282000000L);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZoneUTC();
        java.util.Locale locale11 = dateTimeFormatter6.getLocale();
        java.lang.Appendable appendable12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = dateTime17.toLocalDateTime();
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) 'a');
        org.joda.time.DateTime dateTime32 = dateTime27.withTime(2, 24, 0, 16);
        int int33 = dateTime27.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable12, (org.joda.time.ReadableInstant) dateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 14432);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 14432");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        long long17 = mutableDateTime16.getMillis();
        long long18 = mutableDateTime16.getMillis();
        int int19 = mutableDateTime16.getMinuteOfHour();
        boolean boolean20 = mutableDateTime16.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60526224000001L) + "'", long17 == (-60526224000001L));
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60526224000001L) + "'", long18 == (-60526224000001L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        int int23 = localDate20.size();
        int int24 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology25.getDateTimeMillis(46, (int) (short) 0, 86399, 96684);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(32772, 14399, 36000000, 25, (int) (byte) 10, dateTimeZone5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setTime(1L);
        date3.setHours(32770);
        int int10 = date3.getYear();
        java.util.Date date16 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        long long17 = date16.getTime();
        int int18 = date3.compareTo(date16);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Sep 27 10:00:00 UTC 1973");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 73 + "'", int10 == 73);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Nov 05 00:10:00 UTC 4630");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 83968099800000L + "'", long17 == 83968099800000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        long long9 = dateTimeZone4.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        int int11 = localDate10.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = monthDay1.isBefore((org.joda.time.ReadablePartial) localDate10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-187199996L) + "'", long9 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime.Property property11 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        boolean boolean15 = date3.before(date13);
        int int16 = date3.getDay();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.fromDateFields(date3);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        int int24 = monthDay20.indexOf(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) '#');
        int int30 = dateTime27.getWeekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property33 = dateTime27.property(dateTimeFieldType32);
        boolean boolean34 = monthDay20.isSupported(dateTimeFieldType32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property35 = monthDay17.property(dateTimeFieldType32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(22, 6, 32, 43199999);
        java.util.Calendar.Builder builder12 = builder0.setTimeOfDay(815, 0, 13, 21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder0.setInstant(748817704L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        java.lang.Integer int22 = dateTimeFormatter20.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter20.getPrinter();
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(writer24, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(dateTimePrinter23);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.minusYears(29);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime13.minus(readableDuration21);
        int int23 = dateTime13.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14399 + "'", int23 == 14399);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology11.millis();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(obj2, chronology11);
        org.joda.time.DateTimeField dateTimeField20 = chronology11.centuryOfEra();
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(7, 23, chronology11);
        org.joda.time.DurationField durationField22 = chronology11.hours();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        long long9 = chronology5.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withDayOfMonth(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 7092L + "'", long9 == 7092L);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.TimeZone timeZone12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder0.setTimeZone(timeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        int int15 = dateTime12.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime12.minusMillis((int) (short) 0);
        java.lang.String str18 = dateTime12.toString();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer9, (org.joda.time.ReadableInstant) dateTime12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str18, "1970-01-03T03:59:59.999+52:00");
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology23);
        java.lang.Appendable appendable28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(100);
        int int34 = localDate31.size();
        org.joda.time.LocalDate localDate36 = localDate31.plusMonths(6);
        int int38 = localDate36.getValue(0);
        java.lang.String str39 = localDate36.toString();
        org.joda.time.LocalDate localDate41 = localDate36.withWeekyear(1);
        org.joda.time.LocalDate localDate43 = localDate36.withDayOfYear((int) (byte) 1);
        int int44 = localDate36.getYear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(100);
        int int50 = localDate47.size();
        org.joda.time.LocalDate localDate52 = localDate47.plusMonths(6);
        int int54 = localDate52.getValue(0);
        boolean boolean55 = localDate36.equals((java.lang.Object) int54);
        org.joda.time.LocalDate localDate57 = localDate36.withDayOfYear((int) (short) 100);
        int int58 = localDate36.size();
        org.joda.time.LocalDate.Property property59 = localDate36.era();
        org.joda.time.LocalDate localDate60 = property59.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(appendable28, (org.joda.time.ReadablePartial) localDate60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-08-13" + "'", str39, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property5.setCopy((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean13 = calendar12.isWeekDateSupported();
        java.util.Date date14 = calendar12.getTime();
        java.lang.String str15 = date14.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun May 04 00:00:00 UTC 14403");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Sun May 04 00:00:00 UTC 14403" + "'", str15, "Sun May 04 00:00:00 UTC 14403");
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay12.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay12);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        int int14 = localDate4.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) localDate4);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        java.lang.Class<?> wildcardClass17 = property16.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone7);
        int int11 = localDate10.getDayOfWeek();
        int int12 = localDate10.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        calendar1.set(1439, (int) ' ', 7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.setLenient(true);
        calendar16.setMinimalDaysInFirstWeek(1970);
        int int21 = calendar16.getWeeksInWeekYear();
        int int22 = calendar1.compareTo(calendar16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1439,MONTH=32,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=7,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572225151,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=5,MILLISECOND=151,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay7 = monthDay1.withFieldAdded(durationFieldType5, (-1));
        org.joda.time.MonthDay monthDay9 = monthDay7.plusDays((int) '4');
        java.lang.String str10 = monthDay7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay7.getFieldType(41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 41");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--12-03" + "'", str10, "--12-03");
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay((java.lang.Object) dateTime7, chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfDay();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(5907399684280970035L, chronology16);
        org.joda.time.DurationField durationField24 = chronology16.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(225, 2111, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 225 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        boolean boolean15 = dateTimeField13.isLeap((long) 8);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = dateTime21.toLocalDateTime();
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfYear();
        int int25 = property24.getMinimumValue();
        java.util.Locale locale29 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str30 = property24.getAsText(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTimeField13.getAsShortText(readablePartial16, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals(locale29.toString(), "fra_--01-01_monthOfYear");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "3" + "'", str30, "3");
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths(14402021);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 29);
        java.lang.String str9 = dateTimeZone7.getName(342850000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(292278993, 11, 86399, 55, 43199999, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:29" + "'", str9, "+01:29");
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar calendar8 = builder0.build();
        boolean boolean9 = calendar8.isWeekDateSupported();
        java.lang.Object obj10 = calendar8.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-60128179200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=227,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "java.util.GregorianCalendar[time=-60128179200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=227,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "java.util.GregorianCalendar[time=-60128179200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=227,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "java.util.GregorianCalendar[time=-60128179200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=227,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        int int14 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property13.addToCopy((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = property13.addToCopy((long) 16);
        org.joda.time.DateTime dateTime19 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.addUnicodeLocaleAttribute("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        int int29 = localDate27.getValue(0);
        java.lang.String str30 = localDate27.toString();
        org.joda.time.LocalDate localDate32 = localDate27.withWeekyear(1);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate32.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = dateTime18.toDateTime(dateTimeZone37);
        java.lang.String str43 = dateTimeZone37.getShortName((long) 2175);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone37);
        long long46 = dateTimeZone9.getMillisKeepLocal(dateTimeZone37, 17L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-08-13" + "'", str30, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+52:00" + "'", str43, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-187199983L) + "'", long46 == (-187199983L));
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property8.addToCopy(1644572116406L);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology15 = dateTimeFormatter14.getChronology();
        boolean boolean16 = dateTimeFormatter14.isParser();
        org.joda.time.Chronology chronology17 = dateTimeFormatter14.getChronology();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayScript(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter14.withLocale(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter14.withDefaultYear(1970);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTime11.toString(dateTimeFormatter14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        long long6 = java.util.Date.UTC(26, 39659999, 19, 576, 14399, 16804056);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 104294356487196000L + "'", long6 == 104294356487196000L);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset((-62180539199983L), true);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(dateTimeZone11);
        org.joda.time.MonthDay.Property property17 = monthDay16.dayOfMonth();
        int[] intArray18 = monthDay16.getValues();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay16.minus(readablePeriod19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = monthDay16.withMonthOfYear(71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62180539199983L) + "'", long15 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2, 15]");
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(52, 52, 292278994);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder2.setWeekDefinition(17, (-1848));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        java.lang.String str19 = dateTimeField18.getName();
        java.util.Locale locale25 = new java.util.Locale("DateTimeField[clockhourOfHalfday]", "ISOChronology[+97:01]", "57599");
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField18.set(5907399684280970320L, "years", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"years\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "era" + "'", str19, "era");
        org.junit.Assert.assertEquals(locale25.toString(), "datetimefield[clockhourofhalfday]_ISOCHRONOLOGY[+97:01]_57599");
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(83968099800000L, chronology16);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        org.joda.time.LocalDate.Property property33 = localDate30.dayOfMonth();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTime dateTime36 = localDate30.toDateTime(localTime35);
        boolean boolean37 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        org.joda.time.Chronology chronology53 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyear();
        org.joda.time.DateTime dateTime55 = dateTime27.toDateTime(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime27.withPeriodAdded(readablePeriod56, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str60 = dateTimeFieldType59.getName();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime69 = dateTime66.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology74 = chronology70.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField75 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType59.getField(chronology70);
        org.joda.time.DateTimeField dateTimeField79 = chronology70.yearOfCentury();
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("1970-01-03T03:59:59.999+52:00");
        java.lang.String str83 = dateTimeField79.getAsShortText(45, locale82);
        java.util.Calendar calendar84 = dateTime27.toCalendar(locale82);
        java.util.Locale.Builder builder85 = builder4.setLocale(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder87 = builder4.setRegion("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=2022,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2922789,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=3,MINUTE=11,SECOND=32772,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=2022,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2922789,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=3,MINUTE=11,SECOND=32772,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "era" + "'", str60, "era");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "45" + "'", str83, "45");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=83968084800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4630,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        long long16 = chronology12.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(70, 95307, (int) ' ', (int) 'u', 583, 815, 53, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 7092L + "'", long16 == 7092L);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        int int41 = property5.getLeapAmount();
        int int42 = property5.get();
        org.joda.time.DateTime dateTime44 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTime dateTime45 = property5.withMinimumValue();
        long long46 = property5.remainder();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572225972,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=5,MILLISECOND=972,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3599999L + "'", long46 == 3599999L);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withPivotYear(73);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = monthDay54.getField((int) (byte) 0);
        java.util.Locale locale60 = new java.util.Locale("", "", "hi!");
        int int61 = dateTimeField56.getMaximumTextLength(locale60);
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale63);
        java.lang.String str65 = dateTimeField56.getAsShortText((long) 10, locale63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale63);
        java.io.Writer writer67 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property73 = dateTime72.hourOfDay();
        org.joda.time.DateTime dateTime75 = dateTime72.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime77 = dateTime72.minusDays((int) 'u');
        int int78 = dateTime72.getYearOfEra();
        org.joda.time.DateTime dateTime80 = dateTime72.plusMillis(4);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(dateTimeZone82);
        org.joda.time.LocalDate localDate85 = localDate83.withDayOfYear(100);
        org.joda.time.LocalDate.Property property86 = localDate83.dayOfMonth();
        org.joda.time.LocalDate localDate87 = property86.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime88 = dateTime80.withFields((org.joda.time.ReadablePartial) localDate87);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer67, (org.joda.time.ReadablePartial) localDate87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572225999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=5,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "janv." + "'", str65, "janv.");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay4 = monthDay2.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay2.minus(readablePeriod5);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        java.lang.String str8 = property7.toString();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        int int47 = property16.getMaximumTextLength(locale44);
        org.joda.time.DateTimeField dateTimeField48 = property16.getField();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        int int51 = property16.getMaximumTextLength(locale49);
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale49.getDisplayCountry();
        boolean boolean54 = locale49.hasExtensions();
        int int55 = property7.getMaximumShortTextLength(locale49);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder58 = builder56.removeUnicodeLocaleAttribute("0010-02-14");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0010-02-14 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572226024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=6,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property10.getFieldType();
        java.util.Date date16 = new java.util.Date(10, 43199999, 815);
        boolean boolean17 = property10.equals((java.lang.Object) date16);
        java.util.Date date21 = new java.util.Date(0, 0, (int) '4');
        date21.setDate(12);
        date21.setHours(2922789);
        date21.setTime(9L);
        java.util.Date date31 = new java.util.Date(0, 0, (int) '4');
        int int32 = date31.getHours();
        boolean boolean33 = date21.before(date31);
        java.lang.String str34 = date21.toLocaleString();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.fromDateFields(date21);
        boolean boolean36 = date16.after(date21);
        java.util.Date date37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = date21.after(date37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 23 00:00:00 UTC 3601912");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date31.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1 janv. 1970 00:00:00" + "'", str34, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        boolean boolean17 = durationFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.year();
        org.joda.time.DurationField durationField19 = chronology14.millis();
        org.joda.time.DurationField durationField20 = chronology14.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay((java.lang.Object) chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "days" + "'", str1, "days");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        int int11 = dateTime8.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime8.withDayOfWeek(37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 45 + "'", int11 == 45);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime4.toTimeOfDay();
        org.joda.time.DateTime dateTime12 = dateTime4.plusYears((int) 'u');
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime.Property property14 = dateTime12.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        org.joda.time.LocalDate localDate9 = property3.setCopy("3", locale5);
        org.joda.time.LocalDate localDate10 = property3.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        int int5 = dateTimeField4.getMinimumValue();
        int int6 = dateTimeField4.getMinimumValue();
        int int7 = dateTimeField4.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeField4.set((long) 5, "Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[weekyear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate.Property property11 = localDate10.centuryOfEra();
        java.lang.String str12 = localDate10.toString();
        org.joda.time.LocalDate.Property property13 = localDate10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = monthDay5.compareTo((org.joda.time.ReadablePartial) localDate10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11" + "'", str12, "2022-02-11");
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate12 = property5.roundFloorCopy();
        java.lang.String str13 = localDate12.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property18 = dateTime16.dayOfWeek();
        boolean boolean19 = property18.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-13" + "'", str13, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer6, (long) 816);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(dateTimeParser5);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        org.joda.time.MonthDay monthDay11 = property2.addToCopy(2);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = dateTime16.plusWeeks(5);
        org.joda.time.Chronology chronology29 = dateTime16.getChronology();
        org.joda.time.Chronology chronology30 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime16.plusHours((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean34 = dateTime32.isSupported(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property35 = monthDay13.property(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Jan" + "'", str9, "Jan");
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(0L);
        java.lang.String str4 = monthDay3.toString();
        org.joda.time.Chronology chronology5 = monthDay3.getChronology();
        org.joda.time.Chronology chronology6 = monthDay3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.minuteOfDay();
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now(chronology6);
        long long12 = chronology6.add((long) 239, 1L, 23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(10799999, 15, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10799999 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "--01-03" + "'", str4, "--01-03");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 262L + "'", long12 == 262L);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 817, (int) (short) 10, 817, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 817 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.Chronology chronology3 = monthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfDay();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long6 = dateTimeZone2.nextTransition(31525804800035L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 31525804800035L + "'", long6 == 31525804800035L);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) ' ');
        org.joda.time.LocalDate localDate15 = localDate13.plusMonths(59);
        int int16 = localDate15.getWeekOfWeekyear();
        int int17 = localDate15.getYear();
        org.joda.time.LocalDate.Property property18 = localDate15.yearOfCentury();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronology();
        boolean boolean23 = dateTimeFormatter21.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter25.withZoneUTC();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(0L);
        java.lang.String str31 = monthDay30.toString();
        org.joda.time.Chronology chronology32 = monthDay30.getChronology();
        org.joda.time.Chronology chronology33 = monthDay30.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter28.withChronology(chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withOffsetParsed();
        boolean boolean37 = dateTimeFormatter36.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = localDate15.toString(dateTimeFormatter36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37 + "'", int17 == 37);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "--01-05" + "'", str31, "--01-05");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 239);
        int int2 = monthDay1.getDayOfMonth();
        java.lang.String str3 = monthDay1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--01-05" + "'", str3, "--01-05");
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfMonth();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate23.toDateTime(localTime28);
        boolean boolean30 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        org.joda.time.Chronology chronology46 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyear();
        org.joda.time.DateTime dateTime48 = dateTime20.toDateTime(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime20.withPeriodAdded(readablePeriod49, 0);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfEra(48949);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = dateTimeZone1.getShortName((long) (byte) 100);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(dateTimeZone1);
        java.util.TimeZone timeZone18 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        calendar19.roll(815, 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology37 = chronology33.withZone(dateTimeZone36);
        java.lang.String str38 = chronology33.toString();
        org.joda.time.DurationField durationField39 = chronology33.seconds();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology33.weekyearOfCentury();
        org.joda.time.Chronology chronology42 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.yearOfCentury();
        long long48 = dateTimeField45.add(52L, 0L);
        boolean boolean50 = dateTimeField45.isLeap(1451L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime56.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology64 = chronology60.withZone(dateTimeZone63);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.now(chronology60);
        org.joda.time.DateTimeField dateTimeField66 = chronology60.dayOfMonth();
        java.util.Locale locale67 = java.util.Locale.CHINA;
        int int68 = dateTimeField66.getMaximumTextLength(locale67);
        java.lang.String str69 = dateTimeField45.getAsText(100, locale67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap70 = calendar19.getDisplayNames(20, 5, locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-187199987L) + "'", long11 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572226884,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=6,MILLISECOND=894,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[+97:01]" + "'", str38, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime32 = dateTime10.withMillisOfSecond(12);
        java.util.Date date33 = dateTime10.toDate();
        long long34 = date33.getTime();
        int int35 = date33.getMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 22:59:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-349259990L) + "'", long28 == (-349259990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withPivotYear(73);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = monthDay54.getField((int) (byte) 0);
        java.util.Locale locale60 = new java.util.Locale("", "", "hi!");
        int int61 = dateTimeField56.getMaximumTextLength(locale60);
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale63);
        java.lang.String str65 = dateTimeField56.getAsShortText((long) 10, locale63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter2.withLocale(locale63);
        org.joda.time.Chronology chronology67 = dateTimeFormatter2.getChronology();
        java.io.Writer writer68 = null;
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone70);
        org.joda.time.LocalDate localDate73 = localDate71.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property74 = localDate73.weekOfWeekyear();
        org.joda.time.LocalDate localDate76 = localDate73.withYearOfEra(20);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDate localDate79 = localDate76.withPeriodAdded(readablePeriod77, 100);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer68, (org.joda.time.ReadablePartial) localDate79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572227380,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=7,MILLISECOND=380,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "janv." + "'", str65, "janv.");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate79);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfMinute();
        java.util.Date date15 = new java.util.Date(0, 0, (int) '4');
        date15.setDate(2730);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date15);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology43 = chronology39.withZone(dateTimeZone42);
        java.lang.String str44 = chronology39.toString();
        org.joda.time.DurationField durationField45 = chronology39.seconds();
        boolean boolean46 = durationFieldType27.isSupported(chronology39);
        org.joda.time.LocalDate localDate48 = localDate18.withFieldAdded(durationFieldType27, 22);
        org.joda.time.LocalDate localDate50 = localDate18.withYear(21);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.Chronology chronology54 = dateTimeFormatter53.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser55 = dateTimeFormatter53.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 10);
        int int58 = dateTimeFormatter57.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeFormatter57.getZone();
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay62 = monthDay60.minusDays((int) (short) 10);
        java.util.Locale.Category category64 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category64, locale66);
        java.lang.String str68 = monthDay62.toString("35", locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter57.withLocale(locale66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDate18, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Jul 24 00:00:00 UTC 1907");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "days" + "'", str28, "days");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+97:01]" + "'", str44, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNull(dateTimeParser55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2000 + "'", int58 == 2000);
        org.junit.Assert.assertNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category64.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "35" + "'", str68, "35");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        int int22 = localDate20.getValue(0);
        java.lang.String str23 = localDate20.toString();
        org.joda.time.LocalDate localDate25 = localDate20.withWeekyear(1);
        org.joda.time.LocalDate localDate27 = localDate20.withDayOfYear((int) (byte) 1);
        int int28 = localDate20.getYear();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        long long35 = dateTimeZone30.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime36 = localDate20.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime7.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime.Property property38 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime40 = property38.addToCopy(2730);
        org.joda.time.DateTime dateTime41 = property38.roundCeilingCopy();
        boolean boolean42 = dateTime41.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-08-15" + "'", str23, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-349259996L) + "'", long35 == (-349259996L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        int int10 = calendar1.getGreatestMinimum(3);
        calendar1.set(187200000, (int) 'u', 1439, 1439, 70, 1970);
        long long18 = calendar1.getTimeInMillis();
        int int19 = calendar1.getWeeksInWeekYear();
        int int20 = calendar1.getMinimalDaysInFirstWeek();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str25 = locale24.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = calendar1.getDisplayName(1970, 22, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=5907399684280970585,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=187200013,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=42,SECOND=50,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5907399684280970585L + "'", long18 == 5907399684280970585L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "French" + "'", str25, "French");
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra((int) ' ');
        int int17 = dateTime16.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean21 = dateTimeZone19.isStandardOffset(10L);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer6, (org.joda.time.ReadableInstant) dateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(100);
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.LocalDate localDate12 = property9.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property9.getFieldType();
        org.joda.time.LocalDate localDate15 = property9.roundHalfFloorCopy();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        org.joda.time.Interval interval21 = localDate20.toInterval();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate20.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        int int27 = localDate20.get(dateTimeFieldType26);
        boolean boolean28 = localDate15.isSupported(dateTimeFieldType26);
        int int29 = property3.compareTo((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate30 = property3.withMinimumValue();
        org.joda.time.LocalDate.Property property31 = localDate30.centuryOfEra();
        java.lang.String str32 = property31.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = property31.setCopy("--02-03");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-03\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.lang.String str5 = dateTimeField4.getName();
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay8 = monthDay6.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay6.minus(readablePeriod9);
        java.lang.String str11 = monthDay6.toString();
        org.joda.time.MonthDay.Property property12 = monthDay6.monthOfYear();
        int[] intArray19 = new int[] { 2730, 2022, 'x', (byte) -1, 7, 17 };
        int int20 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) monthDay6, intArray19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay6.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = monthDay6.minusDays(14399);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = monthDay6.withFieldAdded(durationFieldType26, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--02-15" + "'", str11, "--02-15");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2730, 2022, 120, -1, 7, 17]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2023-01-02");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.minus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology51 = chronology47.withZone(dateTimeZone50);
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DurationField durationField53 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.yearOfCentury();
        boolean boolean55 = dateTimeFieldType35.isSupported(chronology47);
        boolean boolean56 = dateTimeFieldType18.isSupported(chronology47);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        java.lang.String str72 = chronology67.toString();
        org.joda.time.DurationField durationField73 = chronology67.seconds();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = durationFieldType57.getField(chronology67);
        org.joda.time.DurationField durationField79 = chronology67.seconds();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTimeField dateTimeField81 = chronology67.millisOfDay();
        org.joda.time.DurationField durationField82 = dateTimeField81.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+97:01]" + "'", str52, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+97:01]" + "'", str72, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        int int9 = dateTime7.getSecondOfDay();
        java.lang.String str11 = dateTime7.toString("14399");
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime7.withZoneRetainFields(dateTimeZone12);
        long long14 = dateTime7.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3659 + "'", int9 == 3659);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "14399" + "'", str11, "14399");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readablePeriod10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime15.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.minusMinutes(52);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        long long37 = dateTimeZone33.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime38 = dateTime19.withZone(dateTimeZone33);
        org.joda.time.Instant instant39 = dateTime19.toInstant();
        int int40 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) instant39);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime16, "2021", 96684);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-349259990L) + "'", long37 == (-349259990L));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.lang.String str5 = dateTimeField4.getName();
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay8 = monthDay6.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay6.minus(readablePeriod9);
        java.lang.String str11 = monthDay6.toString();
        org.joda.time.MonthDay.Property property12 = monthDay6.monthOfYear();
        int[] intArray19 = new int[] { 2730, 2022, 'x', (byte) -1, 7, 17 };
        int int20 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) monthDay6, intArray19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay6.plus(readablePeriod21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = monthDay6.getField(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--02-15" + "'", str11, "--02-15");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2730, 2022, 120, -1, 7, 17]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean8 = dateTimeZone6.isStandardOffset(10L);
        java.lang.Object obj9 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long16 = dateTimeZone12.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj9, dateTimeZone12);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        int int19 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime17);
        long long23 = dateTimeZone6.convertLocalToUTC((long) 32772, false, (long) 292278994);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((int) '4', 0, 15, 32, (-46800000), dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-187199987L) + "'", long16 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32762L + "'", long23 == 32762L);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime14.plusWeeks(5);
        org.joda.time.Chronology chronology27 = dateTime14.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime14.minus(readablePeriod28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = dateTime14.isSupported(dateTimeFieldType30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(100);
        int int37 = localDate34.size();
        org.joda.time.LocalDate localDate39 = localDate34.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays((int) '#');
        int int45 = dateTime42.getWeekyear();
        org.joda.time.DateMidnight dateMidnight46 = dateTime42.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property48 = dateTime42.property(dateTimeFieldType47);
        org.joda.time.LocalDate.Property property49 = localDate39.property(dateTimeFieldType47);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType47.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology63 = chronology59.withZone(dateTimeZone62);
        java.lang.String str64 = chronology59.toString();
        org.joda.time.DurationField durationField65 = chronology59.seconds();
        org.joda.time.DateTimeField dateTimeField66 = chronology59.yearOfCentury();
        boolean boolean67 = dateTimeFieldType47.isSupported(chronology59);
        boolean boolean68 = dateTimeFieldType30.isSupported(chronology59);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType30.getDurationType();
        int int70 = dateTime10.get(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[+97:01]" + "'", str64, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 68 + "'", int70 == 68);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        java.lang.String str10 = dateTime9.toString();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Calendar calendar14 = dateTime9.toCalendar(locale11);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        int int26 = localDate24.getValue(0);
        java.lang.String str27 = localDate24.toString();
        org.joda.time.LocalDate.Property property28 = localDate24.weekyear();
        org.joda.time.LocalDate localDate29 = property28.roundHalfCeilingCopy();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale30.getDisplayScript(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale31);
        java.lang.String str35 = locale31.getISO3Language();
        java.lang.String str36 = property28.getAsShortText(locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap37 = calendar14.getDisplayNames(227, 46, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0052-01-05T01:01:00.051+97:01" + "'", str10, "0052-01-05T01:01:00.051+97:01");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-60526223999949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-08-15" + "'", str27, "2022-08-15");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572228174,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=8,MILLISECOND=174,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ita" + "'", str35, "ita");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate10.withPeriodAdded(readablePeriod11, (int) (byte) 0);
        org.joda.time.LocalDate.Property property14 = localDate10.year();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 4, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        java.lang.Object obj21 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj21, dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone24);
        java.io.Writer writer33 = null;
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay37 = monthDay35.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = monthDay39.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter32.printTo(writer33, (org.joda.time.ReadablePartial) monthDay39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199987L) + "'", long28 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(70, 19, 122, (int) '4', (-17269665));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("--02-03");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(25, 323, 32, 48, 0, 57, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setUnicodeLocaleKeyword("11 f\351vr. 2022 09:35:17 (UND,2022)", "2022-08-13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 11 fe?vr. 2022 09:35:17 (UND,2022) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime4.withFieldAdded(durationFieldType5, (int) 'u');
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime8.toYearMonthDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded(readableDuration12, 32769);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime17.plusMinutes((int) '4');
        int int25 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "days" + "'", str6, "days");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 13 + "'", int10 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withPivotYear(52);
        org.joda.time.Chronology chronology14 = dateTimeFormatter13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = dateTime20.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime20.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = chronology31.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter13.withChronology(chronology31);
        org.joda.time.Chronology chronology37 = dateTimeFormatter13.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.parse("FR", dateTimeFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(chronology37);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfCentury(1);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (byte) 0);
        org.joda.time.LocalDate.Property property13 = localDate9.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 4, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        java.lang.Object obj20 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj20, dateTimeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime18.toMutableDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime4, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 4, dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.minus(readablePeriod38);
        int int40 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-187199987L) + "'", long27 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 187200000 + "'", int40 == 187200000);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        org.joda.time.Chronology chronology29 = monthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = monthDay13.getField(0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) '#');
        int int38 = dateTime35.getDayOfWeek();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(100);
        int int44 = localDate41.size();
        org.joda.time.LocalDate localDate46 = localDate41.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        int int52 = dateTime49.getWeekyear();
        org.joda.time.DateMidnight dateMidnight53 = dateTime49.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property55 = dateTime49.property(dateTimeFieldType54);
        org.joda.time.LocalDate.Property property56 = localDate46.property(dateTimeFieldType54);
        boolean boolean57 = dateTime35.equals((java.lang.Object) property56);
        org.joda.time.DurationField durationField58 = property56.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField59 = property56.getField();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDate localDate63 = localDate60.withPeriodAdded(readablePeriod61, (int) (byte) 0);
        org.joda.time.LocalDate.Property property64 = localDate60.year();
        java.util.Locale locale67 = new java.util.Locale("fra", "fr");
        java.lang.String str68 = property64.getAsShortText(locale67);
        int int69 = property56.getMaximumTextLength(locale67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeField31.getAsText(37, locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals(locale67.toString(), "fra_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022" + "'", str68, "2022");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int9 = calendar1.getWeekYear();
        calendar1.setMinimalDaysInFirstWeek(8);
        int int12 = calendar1.getWeeksInWeekYear();
        org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property17 = monthDay16.monthOfYear();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayScript(locale19);
        int int22 = property17.getMaximumTextLength(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = calendar1.getDisplayName((-1970), 14399, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572228478,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=8,MILLISECOND=478,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        boolean boolean3 = calendar1.equals((java.lang.Object) locale2);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime3.minusMinutes(52);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        long long21 = dateTimeZone17.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime22 = dateTime3.withZone(dateTimeZone17);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 16, dateTimeZone17);
        int int24 = localDate23.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.LocalDate.Property property27 = localDate23.property(dateTimeFieldType25);
        int int28 = property27.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-187199990L) + "'", long21 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTimeFormatter10.parseDateTime("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(100);
        org.joda.time.LocalDate.Property property10 = localDate7.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate localDate13 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate14 = property10.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        org.joda.time.LocalDate localDate16 = property10.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYear((int) ' ');
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(59);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology35 = chronology31.withZone(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology35);
        org.joda.time.DurationField durationField37 = chronology35.seconds();
        boolean boolean38 = durationFieldType21.isSupported(chronology35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) localDate18, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((int) 'a', 53, 24, 187200013, (-292275055), chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 187200013 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "days" + "'", str22, "days");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsText();
        int int4 = property2.get();
        int int5 = property2.getMaximumValueOverall();
        boolean boolean7 = property2.equals((java.lang.Object) (-2608L));
        java.lang.String str8 = property2.getAsShortText();
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField14 = monthDay12.getField((int) (byte) 0);
        java.util.Locale locale18 = new java.util.Locale("", "", "hi!");
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        long long22 = dateTimeField14.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay23.minus(readablePeriod26);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = monthDay30.getField((int) (byte) 0);
        java.util.Locale locale36 = new java.util.Locale("", "", "hi!");
        int int37 = dateTimeField32.getMaximumTextLength(locale36);
        java.lang.String str38 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) monthDay23, locale36);
        int[] intArray39 = monthDay23.getValues();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay23.withPeriodAdded(readablePeriod40, 59);
        int int43 = monthDay23.getDayOfMonth();
        org.joda.time.Chronology chronology44 = monthDay23.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) durationField9, chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "January" + "'", str3, "January");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jan" + "'", str8, "Jan");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9L + "'", long22 == 9L);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Feb" + "'", str38, "Feb");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 13 + "'", int43 == 13);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.lang.String str5 = dateTimeField4.getName();
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay8 = monthDay6.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay6.minus(readablePeriod9);
        java.lang.String str11 = monthDay6.toString();
        org.joda.time.MonthDay.Property property12 = monthDay6.monthOfYear();
        int[] intArray19 = new int[] { 2730, 2022, 'x', (byte) -1, 7, 17 };
        int int20 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) monthDay6, intArray19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((-62180539199983L), dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        long long34 = dateTimeZone29.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        java.lang.String str39 = locale37.getCountry();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = locale37.getDisplayVariant(locale40);
        java.lang.String str42 = dateTimeZone29.getShortName((long) 20, locale37);
        java.lang.String str43 = locale37.getDisplayScript();
        java.lang.String str44 = property26.getAsText(locale37);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = dateTimeField4.set((-187199999L), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=2022,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2922789,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=3,MINUTE=11,SECOND=32772,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=2022,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2922789,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=3,MINUTE=11,SECOND=32772,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--02-13" + "'", str11, "--02-13");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2730, 2022, 120, -1, 7, 17]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187199996L) + "'", long34 == (-187199996L));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644572228717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=8,MILLISECOND=717,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+52:00" + "'", str42, "+52:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ao\373t" + "'", str44, "ao\373t");
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("--02-13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime5.toMutableDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(187200000L, chronology16);
        int int20 = dateTime19.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate9.toDateTime(readableInstant11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra(52);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str21 = locale18.getExtension('a');
        org.joda.time.LocalDate localDate22 = property16.setCopy("3", locale18);
        int int23 = localDate22.getDayOfMonth();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = property29.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate33 = property29.withMaximumValue();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths(349260000);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = localDate35.toDateMidnight(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = localDate22.toDateMidnight(dateTimeZone38);
        org.joda.time.LocalDate localDate42 = localDate9.withFields((org.joda.time.ReadablePartial) localDate22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDate42.getFieldType(92);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 92");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        java.util.Date date8 = localDate7.toDate();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate7.withPeriodAdded(readablePeriod9, 292278994);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime24.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyearOfCentury();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(83968099800000L, chronology36);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime49 = dateTime47.minusYears((int) (short) 10);
        int int50 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean52 = dateTime26.isSupported(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType51.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property54 = localDate11.property(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = property18.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDate21.getFields();
        boolean boolean23 = localDate12.equals((java.lang.Object) localDate21);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        int int26 = property24.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(9);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.days();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime17 = dateTime13.withFieldAdded(durationFieldType14, (int) 'u');
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime13.withDate(48998496, 2175, 815);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2175 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "days" + "'", str15, "days");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        int int11 = property2.getMaximumTextLength(locale10);
        int int12 = property2.getMaximumValueOverall();
        int int13 = property2.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Jan" + "'", str9, "Jan");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime4.toTimeOfDay();
        org.joda.time.DateTime dateTime12 = dateTime4.plusYears((int) 'u');
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        int int14 = property13.getMinimumValueOverall();
        org.joda.time.DateTime dateTime15 = property13.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTime dateTime36 = dateTime33.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.MonthDay monthDay38 = monthDay28.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay44 = monthDay42.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay42.minus(readablePeriod45);
        org.joda.time.MonthDay.Property property47 = monthDay42.dayOfMonth();
        java.lang.String str48 = property47.toString();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        java.lang.String str57 = property56.getAsShortText();
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay60 = monthDay58.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField62 = monthDay60.getField((int) (byte) 0);
        java.util.Locale locale66 = new java.util.Locale("", "", "hi!");
        int int67 = dateTimeField62.getMaximumTextLength(locale66);
        long long70 = dateTimeField62.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay73 = monthDay71.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay71.minus(readablePeriod74);
        org.joda.time.MonthDay monthDay76 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay78 = monthDay76.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField80 = monthDay78.getField((int) (byte) 0);
        java.util.Locale locale84 = new java.util.Locale("", "", "hi!");
        int int85 = dateTimeField80.getMaximumTextLength(locale84);
        java.lang.String str86 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) monthDay71, locale84);
        int int87 = property56.getMaximumTextLength(locale84);
        org.joda.time.DateTimeField dateTimeField88 = property56.getField();
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(locale89);
        int int91 = property56.getMaximumTextLength(locale89);
        boolean boolean92 = locale89.hasExtensions();
        java.lang.String str93 = locale89.getDisplayCountry();
        boolean boolean94 = locale89.hasExtensions();
        int int95 = property47.getMaximumShortTextLength(locale89);
        int int96 = dateTimeField40.getMaximumShortTextLength(locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap97 = calendar24.getDisplayNames((int) '#', 14399999, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572229416,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=9,MILLISECOND=416,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[dayOfMonth]" + "'", str48, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "3" + "'", str57, "3");
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 9L + "'", long70 == 9L);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Feb" + "'", str86, "Feb");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=1644572229416,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=9,MILLISECOND=416,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        int[] intArray33 = monthDay13.getValues();
        int[] intArray34 = monthDay13.getValues();
        int int35 = monthDay13.getMonthOfYear();
        org.joda.time.MonthDay monthDay37 = monthDay13.plusMonths(51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay37.getFieldType(48949);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48949");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2, 13]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(monthDay37);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.setMinimalDaysInFirstWeek(2730);
        calendar1.clear();
        calendar1.set(15, 0, (int) (byte) 1, 5, 2021, (int) ' ');
        long long16 = calendar1.getTimeInMillis();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = calendar1.isSet(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61693867108000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2730,ERA=1,YEAR=15,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=41,SECOND=32,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61693867108000L) + "'", long16 == (-61693867108000L));
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay13 = monthDay11.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        java.util.Locale locale22 = new java.util.Locale("", "", "hi!");
        int int23 = dateTimeField18.getMaximumTextLength(locale22);
        long long26 = dateTimeField18.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay27.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) monthDay27, locale40);
        int[] intArray43 = monthDay27.getValues();
        int int44 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) monthDay11, intArray43);
        long long46 = dateTimeField4.roundHalfCeiling(83966285400000L);
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('u', "en-US");
        java.util.Locale.Builder builder52 = builder48.clear();
        java.util.Locale.Builder builder54 = builder52.setVariant("anglais");
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = dateTimeField4.getAsShortText((long) 122, locale55);
        org.joda.time.DurationField durationField57 = dateTimeField4.getLeapDurationField();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Feb" + "'", str42, "Feb");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2, 13]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 83965075200000L + "'", long46 == 83965075200000L);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Jan" + "'", str56, "Jan");
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("de-DE");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setScript("months");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: months [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        java.lang.StringBuffer stringBuffer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(stringBuffer15, (-111L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths(32769);
        org.joda.time.LocalDate localDate4 = localDate0.withYear(9);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology19 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(83968099800000L, chronology15);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate21.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfMonth();
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTime dateTime35 = localDate29.toDateTime(localTime34);
        boolean boolean36 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime39.plusWeeks(5);
        org.joda.time.Chronology chronology52 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekyear();
        org.joda.time.DateTime dateTime54 = dateTime26.toDateTime(chronology52);
        boolean boolean55 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = dateTime54.withHourOfDay(12);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.DurationField durationField13 = dateTimeField4.getLeapDurationField();
        int int14 = dateTimeField4.getMaximumValue();
        int int15 = dateTimeField4.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeField13.getAsShortText(2678399999L, locale15);
        boolean boolean17 = dateTimeField13.isLenient();
        long long20 = dateTimeField13.getDifferenceAsLong(948571L, (long) 323);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "14399" + "'", str16, "14399");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 948L + "'", long20 == 948L);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(6);
        org.joda.time.DateTime dateTime12 = property9.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth(37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar1.getMaximum(25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615430221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=10,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(100);
        org.joda.time.LocalDate.Property property20 = localDate17.dayOfMonth();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int25 = localDate23.get(dateTimeFieldType24);
        java.util.Locale locale29 = new java.util.Locale("hi!", "1969-12-31T23:59:59.999Z", "11");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDate23, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_1969-12-31T23:59:59.999Z_11");
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(100);
        java.io.Writer writer11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        int int17 = dateTime14.getWeekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateTime14.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property20 = dateTime14.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime14.centuryOfEra();
        org.joda.time.LocalTime localTime22 = dateTime14.toLocalTime();
        org.joda.time.DateTime dateTime23 = dateTime14.toDateTimeISO();
        int int24 = dateTime14.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer11, (org.joda.time.ReadableInstant) dateTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setVariant("11 f\351vr. 2022 09:36:08");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 11 fe?vr. 2022 09:36:08 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        int int16 = dateTimeField15.getMaximumValue();
        int int17 = dateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(83968099800000L, chronology16);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        org.joda.time.LocalDate.Property property33 = localDate30.dayOfMonth();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTime dateTime36 = localDate30.toDateTime(localTime35);
        boolean boolean37 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        org.joda.time.Chronology chronology53 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyear();
        org.joda.time.DateTime dateTime55 = dateTime27.toDateTime(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime27.withPeriodAdded(readablePeriod56, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str60 = dateTimeFieldType59.getName();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime69 = dateTime66.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology74 = chronology70.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField75 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType59.getField(chronology70);
        org.joda.time.DateTimeField dateTimeField79 = chronology70.yearOfCentury();
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("1970-01-03T03:59:59.999+52:00");
        java.lang.String str83 = dateTimeField79.getAsShortText(45, locale82);
        java.util.Calendar calendar84 = dateTime27.toCalendar(locale82);
        java.util.Locale.Builder builder85 = builder4.setLocale(locale82);
        java.util.Locale locale86 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale87 = java.util.Locale.ITALY;
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.lang.String str89 = locale88.getLanguage();
        java.lang.String str90 = locale87.getDisplayScript(locale88);
        java.lang.String str91 = locale86.getDisplayCountry(locale87);
        java.lang.String str92 = locale87.getDisplayLanguage();
        java.lang.String str93 = locale82.getDisplayLanguage(locale87);
        java.lang.String str94 = locale82.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "era" + "'", str60, "era");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "45" + "'", str83, "45");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=83968084800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4630,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "it" + "'", str89, "it");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Cina" + "'", str91, "Cina");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "italiano" + "'", str92, "italiano");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology33 = chronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.weekyearOfCentury();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(83968099800000L, chronology29);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        long long40 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        java.util.Date date44 = new java.util.Date(0, 0, (int) '4');
        date44.setDate(12);
        date44.setHours(2922789);
        date44.setTime(9L);
        java.util.Date date54 = new java.util.Date(0, 0, (int) '4');
        int int55 = date54.getHours();
        boolean boolean56 = date44.before(date54);
        java.lang.String str57 = date44.toLocaleString();
        date44.setMonth(187200000);
        date44.setDate((-1));
        boolean boolean62 = property19.equals((java.lang.Object) date44);
        java.lang.String str63 = date44.toGMTString();
        boolean boolean64 = localDate11.equals((java.lang.Object) date44);
        java.lang.Object obj65 = date44.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-2608L) + "'", long40 == (-2608L));
        org.junit.Assert.assertEquals(date44.toString(), "Tue Dec 30 00:00:00 UTC 15601969");
        org.junit.Assert.assertEquals(date54.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str57, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "30 Dec 15601969 00:00:00 GMT" + "'", str63, "30 Dec 15601969 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "Tue Dec 30 00:00:00 UTC 15601969");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "Tue Dec 30 00:00:00 UTC 15601969");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "Tue Dec 30 00:00:00 UTC 15601969");
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4480738534038L);
        java.util.Date date6 = new java.util.Date(0, 0, (int) '4');
        date6.setDate(12);
        date6.setHours(2922789);
        date6.setTime(9L);
        java.util.Date date16 = new java.util.Date(0, 0, (int) '4');
        int int17 = date16.getHours();
        int int18 = date16.getDate();
        boolean boolean19 = date6.after(date16);
        java.util.Date date23 = new java.util.Date(0, 0, (int) '4');
        date23.setDate(12);
        date23.setHours(2922789);
        date23.setTime(9L);
        java.util.Date date33 = new java.util.Date(0, 0, (int) '4');
        int int34 = date33.getHours();
        int int35 = date33.getDate();
        boolean boolean36 = date23.after(date33);
        boolean boolean37 = date6.before(date33);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.fromDateFields(date33);
        java.util.Calendar.Builder builder39 = builder2.setInstant(date33);
        java.util.Calendar.Builder builder43 = builder2.setWeekDate(18, 20, 10799999);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder46 = builder2.set(1969, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date33.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = dateTimeFormatter2.parseLocalDateTime("23");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime32 = dateTime10.withYear(365);
        java.util.Date date33 = dateTime10.toDate();
        int int34 = date33.getTimezoneOffset();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateMidnight dateMidnight41 = dateTime39.toDateMidnight();
        int int42 = dateTime39.getDayOfYear();
        boolean boolean43 = date33.equals((java.lang.Object) int42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = property17.roundCeilingCopy();
        int int19 = localDate18.getDayOfYear();
        org.joda.time.LocalDate localDate21 = localDate18.plusMonths(0);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        int int25 = dateTimeField24.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 229 + "'", int19 == 229);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 10);
        int int17 = dateTimeFormatter16.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter16.getZone();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay21 = monthDay19.minusDays((int) (short) 10);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category23, locale25);
        java.lang.String str27 = monthDay21.toString("35", locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter16.withLocale(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTime2.toString(dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2000 + "'", int17 == 2000);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "35" + "'", str27, "35");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean14 = dateTimeZone12.isStandardOffset(10L);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime9.plusSeconds(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay4 = monthDay2.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay2.minus(readablePeriod5);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        java.lang.String str8 = property7.toString();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        int int47 = property16.getMaximumTextLength(locale44);
        org.joda.time.DateTimeField dateTimeField48 = property16.getField();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        int int51 = property16.getMaximumTextLength(locale49);
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale49.getDisplayCountry();
        boolean boolean54 = locale49.hasExtensions();
        int int55 = property7.getMaximumShortTextLength(locale49);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale49);
        java.util.Locale.Builder builder58 = builder0.setScript("");
        java.util.Locale locale59 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder0.setRegion("+52:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: +52:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572230680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=10,MILLISECOND=680,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMillis((-1));
        org.joda.time.DateTime dateTime11 = dateTime6.withYearOfEra(59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime6.withDayOfYear(11127);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11127 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        java.io.Writer writer10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate17.minusDays(12);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer10, (org.joda.time.ReadablePartial) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.Date date26 = new java.util.Date(0, 0, (int) '4');
        date26.setDate(12);
        date26.setHours(2922789);
        date26.setTime(9L);
        java.util.Date date36 = new java.util.Date(0, 0, (int) '4');
        int int37 = date36.getHours();
        boolean boolean38 = date26.before(date36);
        calendar1.setTime(date26);
        java.time.Instant instant40 = date26.toInstant();
        java.util.Date date41 = java.util.Date.from(instant40);
        java.util.Date date42 = java.util.Date.from(instant40);
        java.util.Date date43 = java.util.Date.from(instant40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((java.lang.Object) instant40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=9,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date36.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDate localDate30 = localDate7.plusYears((int) ' ');
        org.joda.time.LocalDate localDate32 = localDate7.plusDays(57);
        int int33 = localDate7.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Zone must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setTimeInMillis((long) 32769);
        calendar1.setMinimalDaysInFirstWeek(2022);
        int int9 = calendar1.getActualMaximum(1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(1969, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=32769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2022,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278994 + "'", int9 == 292278994);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hourOfDay");
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(100);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        java.lang.String str10 = durationFieldType9.getName();
        org.joda.time.LocalDate localDate12 = localDate7.withFieldAdded(durationFieldType9, 32770);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        int int18 = dateTime15.getWeekyear();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property21 = dateTime15.property(dateTimeFieldType20);
        boolean boolean22 = localDate7.isSupported(dateTimeFieldType20);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(100);
        org.joda.time.LocalDate.Property property28 = localDate25.dayOfMonth();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.LocalDate localDate31 = property28.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate32 = property28.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property28.getFieldType();
        boolean boolean34 = localDate7.equals((java.lang.Object) property28);
        org.joda.time.LocalDate localDate35 = property28.roundHalfFloorCopy();
        boolean boolean36 = locale1.equals((java.lang.Object) property28);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "days" + "'", str10, "days");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis(2022);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime15.plusWeeks(5);
        org.joda.time.Chronology chronology28 = dateTime15.getChronology();
        org.joda.time.Chronology chronology29 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime12.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(229, 24, 37, 816, 14402, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 816 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        int int15 = dateTime12.getWeekyear();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property18 = dateTime12.property(dateTimeFieldType17);
        boolean boolean19 = localDate4.isSupported(dateTimeFieldType17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        org.joda.time.LocalDate.Property property25 = localDate22.dayOfMonth();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.LocalDate localDate28 = property25.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate29 = property25.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        boolean boolean31 = localDate4.equals((java.lang.Object) property25);
        org.joda.time.LocalDate localDate33 = property25.addToCopy(3);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.withYear(364);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfEra();
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime9.withYearOfCentury(239);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 239 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay11 = monthDay9.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField13 = monthDay11.getField((int) (byte) 0);
        java.util.Locale locale17 = new java.util.Locale("", "", "hi!");
        int int18 = dateTimeField13.getMaximumTextLength(locale17);
        long long21 = dateTimeField13.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay24 = monthDay22.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay22.minus(readablePeriod25);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        java.lang.String str37 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) monthDay22, locale35);
        int int38 = property7.getMaximumTextLength(locale35);
        java.lang.String str39 = monthDay0.toString("--02-11", locale35);
        org.joda.time.MonthDay.Property property40 = monthDay0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 4, dateTimeZone44);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = dateTimeZone44.getShortName((long) 0, locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        boolean boolean50 = property40.equals((java.lang.Object) locale47);
        int int51 = property40.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3" + "'", str8, "3");
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9L + "'", long21 == 9L);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Feb" + "'", str37, "Feb");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "--02-11" + "'", str39, "--02-11");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+52:00" + "'", str48, "+52:00");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 29 + "'", int51 == 29);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.Date date13 = dateTime4.toDate();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((java.lang.Object) dateTime4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = monthDay14.withDayOfMonth(2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 02 23:59:59 UTC 52");
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime6.plusYears(2);
        org.joda.time.DateTime dateTime11 = dateTime6.plusYears(18);
        int int12 = dateTime6.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        java.lang.String str3 = monthDay2.toString();
        org.joda.time.Chronology chronology4 = monthDay2.getChronology();
        org.joda.time.Chronology chronology5 = monthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfDay();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.now(chronology5);
        org.joda.time.Chronology chronology8 = monthDay7.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((long) 49006181, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology8.getDateTimeMillis((long) 576, (-17269665), 19005, 30, 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17269665 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--01-03" + "'", str3, "--01-03");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime10 = property5.roundFloorCopy();
        org.joda.time.ReadablePartial readablePartial11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = property5.compareTo(readablePartial11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        java.lang.StringBuffer stringBuffer17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime20.plusWeeks(5);
        org.joda.time.Chronology chronology33 = dateTime20.getChronology();
        org.joda.time.Chronology chronology34 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime20.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime20.withYearOfEra(19);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(stringBuffer17, (org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int10 = calendar1.getActualMaximum(7);
        int int12 = calendar1.getGreatestMinimum(15);
        java.time.Instant instant13 = calendar1.toInstant();
        java.lang.String str14 = calendar1.getCalendarType();
        calendar1.setMinimalDaysInFirstWeek(225);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add((int) 'x', 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572231593,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=225,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=11,MILLISECOND=593,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-46800000) + "'", int12 == (-46800000));
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        java.lang.String str51 = locale48.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.US;
        java.lang.String str53 = locale52.toLanguageTag();
        java.lang.String str54 = locale48.getDisplayName(locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter6.withLocale(locale48);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(100);
        int int61 = localDate58.size();
        org.joda.time.LocalDate localDate63 = localDate58.plusMonths(6);
        int int65 = localDate63.getValue(0);
        java.lang.String str66 = localDate63.toString();
        org.joda.time.LocalDate localDate68 = localDate63.withWeekyear(1);
        org.joda.time.LocalDate localDate70 = localDate63.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate74 = org.joda.time.LocalDate.now(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = localDate70.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.DateTime dateTime77 = dateTime75.minusMinutes(100);
        org.joda.time.DateTime dateTime79 = dateTime75.withYearOfEra(26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTimeFormatter6.print((org.joda.time.ReadableInstant) dateTime75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572231630,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=11,MILLISECOND=630,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en-US" + "'", str53, "en-US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "French" + "'", str54, "French");
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-08-13" + "'", str66, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.secondOfDay();
        long long20 = dateTimeField17.addWrapField((long) 719571, 229);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay23 = monthDay21.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField25 = monthDay23.getField((int) (byte) 0);
        java.util.Locale locale29 = new java.util.Locale("", "", "hi!");
        int int30 = dateTimeField25.getMaximumTextLength(locale29);
        long long33 = dateTimeField25.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay34.minus(readablePeriod37);
        org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay41 = monthDay39.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField43 = monthDay41.getField((int) (byte) 0);
        java.util.Locale locale47 = new java.util.Locale("", "", "hi!");
        int int48 = dateTimeField43.getMaximumTextLength(locale47);
        java.lang.String str49 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) monthDay34, locale47);
        int[] intArray50 = monthDay34.getValues();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay53 = monthDay34.withPeriodAdded(readablePeriod51, 59);
        org.joda.time.MonthDay monthDay55 = monthDay34.plusMonths(2);
        org.joda.time.MonthDay monthDay57 = monthDay55.minusMonths(2922789);
        int int58 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) monthDay57);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 948571L + "'", long20 == 948571L);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9L + "'", long33 == 9L);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Feb" + "'", str49, "Feb");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField17 = monthDay15.getField((int) (byte) 0);
        java.util.Locale locale21 = new java.util.Locale("", "", "hi!");
        int int22 = dateTimeField17.getMaximumTextLength(locale21);
        long long25 = dateTimeField17.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay26.minus(readablePeriod29);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField35 = monthDay33.getField((int) (byte) 0);
        java.util.Locale locale39 = new java.util.Locale("", "", "hi!");
        int int40 = dateTimeField35.getMaximumTextLength(locale39);
        java.lang.String str41 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) monthDay26, locale39);
        int int42 = property11.getMaximumTextLength(locale39);
        org.joda.time.DateTimeField dateTimeField43 = property11.getField();
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        int int46 = property11.getMaximumTextLength(locale44);
        boolean boolean47 = locale44.hasExtensions();
        java.lang.String str48 = locale44.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter3.withLocale(locale44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter3.getZone();
        boolean boolean51 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter3.withZone(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter3.withPivotYear(32770);
        boolean boolean58 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.parse("janv.", dateTimeFormatter59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3" + "'", str12, "3");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 9L + "'", long25 == 9L);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Feb" + "'", str41, "Feb");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572231737,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=11,MILLISECOND=737,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder5 = builder0.set(37, 2175);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        java.lang.String str8 = dateTimeZone7.toString();
        long long11 = dateTimeZone7.convertLocalToUTC((-58474483200001L), true);
        boolean boolean13 = dateTimeZone7.isStandardOffset((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(14400004, 49021102, 48, 21, 14402021, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14402021 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:01" + "'", str8, "+97:01");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-58474832460001L) + "'", long11 == (-58474832460001L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime10 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property5.addToCopy((long) 2730);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMinutes((int) (short) 10);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(583, 3, 19);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate3.withDayOfWeek(21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology12);
        long long17 = chronology12.add((long) 24, (-187200001L), 229);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-42868800205L) + "'", long17 == (-42868800205L));
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.MonthDay monthDay34 = monthDay13.plusMonths(2);
        org.joda.time.MonthDay monthDay36 = monthDay34.minusMonths(2922789);
        java.lang.String str37 = monthDay36.toString();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--07-13" + "'", str37, "--07-13");
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        java.lang.String str16 = dateTime15.toString();
        java.lang.String str17 = dateTime15.toString();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        int int23 = localDate20.size();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        int int31 = dateTime28.getWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property34 = dateTime28.property(dateTimeFieldType33);
        org.joda.time.LocalDate.Property property35 = localDate25.property(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39);
        int int41 = property35.compareTo((org.joda.time.ReadableInstant) dateTime40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(100);
        int int47 = localDate44.size();
        org.joda.time.LocalDate localDate49 = localDate44.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays((int) '#');
        int int55 = dateTime52.getWeekyear();
        org.joda.time.DateMidnight dateMidnight56 = dateTime52.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property58 = dateTime52.property(dateTimeFieldType57);
        org.joda.time.LocalDate.Property property59 = localDate49.property(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType57.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property66 = dateTime65.hourOfDay();
        org.joda.time.DateTime dateTime68 = dateTime65.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology73 = chronology69.withZone(dateTimeZone72);
        java.lang.String str74 = chronology69.toString();
        org.joda.time.DurationField durationField75 = chronology69.seconds();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.yearOfCentury();
        boolean boolean77 = dateTimeFieldType57.isSupported(chronology69);
        org.joda.time.DateTime.Property property78 = dateTime40.property(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = dateTime15.withField(dateTimeFieldType57, 21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-01-01T00:00:00.000+52:00" + "'", str16, "2022-01-01T00:00:00.000+52:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-01T00:00:00.000+52:00" + "'", str17, "2022-01-01T00:00:00.000+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ISOChronology[+52:00]" + "'", str74, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        java.lang.String str4 = monthDay0.toString("23");
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology14.millis();
        org.joda.time.MonthDay monthDay22 = monthDay0.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay24 = monthDay22.plusDays(45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = monthDay22.toString("21-feb-1900 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23" + "'", str4, "23");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 364);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 0);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.lang.String str15 = locale13.getCountry();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale13.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category11, locale16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology32 = chronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.weekyearOfCentury();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(83968099800000L, chronology28);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(100);
        org.joda.time.LocalDate.Property property45 = localDate42.dayOfMonth();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime47 = null;
        org.joda.time.DateTime dateTime48 = localDate42.toDateTime(localTime47);
        boolean boolean49 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays((int) '#');
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime52.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime64 = dateTime52.plusWeeks(5);
        org.joda.time.Chronology chronology65 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekyear();
        org.joda.time.DateTime dateTime67 = dateTime39.toDateTime(chronology65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime70 = dateTime39.withPeriodAdded(readablePeriod68, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str72 = dateTimeFieldType71.getName();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property79 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime81 = dateTime78.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology82 = dateTime81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology86 = chronology82.withZone(dateTimeZone85);
        org.joda.time.DurationField durationField87 = chronology82.weeks();
        org.joda.time.DateTimeField dateTimeField88 = chronology82.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology82.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType71.getField(chronology82);
        org.joda.time.DateTimeField dateTimeField91 = chronology82.yearOfCentury();
        java.util.Locale locale94 = java.util.Locale.forLanguageTag("1970-01-03T03:59:59.999+52:00");
        java.lang.String str95 = dateTimeField91.getAsShortText(45, locale94);
        java.util.Calendar calendar96 = dateTime39.toCalendar(locale94);
        java.util.Locale.setDefault(category11, locale94);
        java.util.Calendar calendar98 = dateTime10.toCalendar(locale94);
        java.lang.Object obj99 = locale94.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572232485,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=12,MILLISECOND=485,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "era" + "'", str72, "era");
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "45" + "'", str95, "45");
        org.junit.Assert.assertNotNull(calendar96);
        org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=83968084800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4630,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar98);
        org.junit.Assert.assertEquals(calendar98.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj99);
        org.junit.Assert.assertEquals(obj99.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj99), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj99), "");
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withYear((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight17 = localDate16.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate7.getValue(32770);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32770");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        java.util.Date date10 = java.util.Date.from(instant8);
        java.util.Date date11 = java.util.Date.from(instant8);
        java.util.Date date12 = java.util.Date.from(instant8);
        java.lang.String str13 = date12.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572232762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=12,MILLISECOND=762,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:37:12 UTC 2022");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:37:12 UTC 2022");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:37:12 UTC 2022");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:37:12 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Fri Feb 11 09:37:12 UTC 2022" + "'", str13, "Fri Feb 11 09:37:12 UTC 2022");
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        int int21 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 23, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone23);
        java.util.TimeZone timeZone27 = dateTimeZone23.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZone(dateTimeZone23);
        java.io.Writer writer29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.plus(readablePeriod33);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer29, (org.joda.time.ReadableInstant) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.MonthDay.Property property6 = monthDay0.monthOfYear();
        org.joda.time.MonthDay monthDay8 = monthDay0.minusMonths(817);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        int int9 = calendar1.getWeeksInWeekYear();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        calendar11.roll(9, false);
        calendar11.setFirstDayOfWeek((int) (byte) 1);
        int int17 = calendar11.getWeekYear();
        int int18 = calendar11.getFirstDayOfWeek();
        int int19 = calendar11.getWeeksInWeekYear();
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        calendar1.setTimeZone(timeZone20);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = calendar1.getActualMaximum((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615432836,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=12,MILLISECOND=836,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644615432836,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=12,MILLISECOND=836,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay7 = monthDay1.withFieldAdded(durationFieldType5, (-1));
        org.joda.time.MonthDay monthDay9 = monthDay7.plusDays((int) '4');
        java.lang.String str10 = monthDay7.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay7.plus(readablePeriod11);
        org.joda.time.MonthDay.Property property13 = monthDay12.dayOfMonth();
        java.lang.String str14 = property13.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property13.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--12-03" + "'", str10, "--12-03");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3" + "'", str14, "3");
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDate22.getFields();
        org.joda.time.LocalDate localDate25 = localDate22.minusYears(2730);
        int int26 = localDate22.getMonthOfYear();
        java.util.Date date27 = localDate22.toDate();
        org.joda.time.LocalDate localDate28 = localDate13.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTime dateTime29 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval30 = localDate13.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField16 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.centuryOfEra();
        int int18 = dateTimeField17.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2922789 + "'", int18 == 2922789);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setWeekDate((int) '4', 323, 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar8 = builder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = property22.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDate25.getFields();
        int int27 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate localDate29 = localDate25.withWeekyear(1);
        org.joda.time.DateTime dateTime30 = dateTime14.withFields((org.joda.time.ReadablePartial) localDate25);
        int int31 = dateTime14.getYear();
        org.joda.time.DateTime dateTime33 = dateTime14.plusYears(48949);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay8 = property2.setCopy("15 Feb 2022 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"15 Feb 2022 00:00:00 GMT\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfMonth();
        org.joda.time.DurationField durationField8 = chronology4.weekyears();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        org.joda.time.MonthDay monthDay9 = property2.getMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = property2.setCopy(48949);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48949 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField17 = monthDay15.getField((int) (byte) 0);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        java.lang.String str47 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) monthDay15, locale44);
        long long49 = dateTimeField4.roundHalfFloor((long) (short) 100);
        boolean boolean50 = dateTimeField4.isSupported();
        java.lang.String str52 = dateTimeField4.getAsShortText((long) 14402);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "February" + "'", str47, "February");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "janv." + "'", str52, "janv.");
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property14.setCopy("janv.");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"janv.\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField35 = chronology26.minutes();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DurationField durationField37 = chronology26.weekyears();
        org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay(0L);
        java.lang.String str40 = monthDay39.toString();
        org.joda.time.Chronology chronology41 = monthDay39.getChronology();
        org.joda.time.Chronology chronology42 = monthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.minuteOfDay();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DurationField durationField45 = chronology42.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) durationField37, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "--01-03" + "'", str40, "--01-03");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11 f\351vr. 2022 09:35:43");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"11 fe?vr. 2022 09:35:43\" is malformed at \" fe?vr. 2022 09:35:43\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        long long16 = dateTimeField13.add(17756L, (int) (short) 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 17756L + "'", long16 == 17756L);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.era();
        int int18 = dateTimeField17.getMaximumValue();
        int int20 = dateTimeField17.getMaximumValue(227L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("2022");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = monthDay1.toString("DateTimeField[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property11 = monthDay10.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addToCopy((int) ' ');
        int int14 = property11.get();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        java.lang.String str20 = property11.getAsShortText(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone8, locale15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = calendar21.isSet(366);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 366");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572233433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=13,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "janv." + "'", str20, "janv.");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572233433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=13,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        java.lang.String str4 = monthDay0.toString("23");
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology14.millis();
        org.joda.time.MonthDay monthDay22 = monthDay0.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay23.minus(readablePeriod26);
        java.lang.String str28 = monthDay23.toString();
        org.joda.time.MonthDay.Property property29 = monthDay23.monthOfYear();
        int int30 = monthDay23.getMonthOfYear();
        org.joda.time.MonthDay monthDay32 = monthDay23.minusDays(59);
        boolean boolean33 = monthDay22.isAfter((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime43 = dateTime38.minusDays((int) 'u');
        int int44 = dateTime38.getYearOfEra();
        org.joda.time.DateTime dateTime46 = dateTime38.plusMillis(4);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.LocalDate localDate51 = localDate49.withDayOfYear(100);
        org.joda.time.LocalDate.Property property52 = localDate49.dayOfMonth();
        org.joda.time.LocalDate localDate53 = property52.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime54 = dateTime46.withFields((org.joda.time.ReadablePartial) localDate53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfYear(100);
        org.joda.time.Interval interval60 = localDate59.toInterval();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        java.lang.String str62 = durationFieldType61.getName();
        org.joda.time.LocalDate localDate64 = localDate59.withFieldAdded(durationFieldType61, 32770);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDate localDate66 = localDate59.plus(readablePeriod65);
        int int67 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate59);
        org.joda.time.LocalDate.Property property68 = localDate59.weekyear();
        org.joda.time.LocalDate localDate69 = property68.roundCeilingCopy();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.util.Locale locale72 = java.util.Locale.ITALIAN;
        java.lang.String str73 = locale72.getLanguage();
        java.lang.String str74 = locale71.getDisplayScript(locale72);
        java.lang.String str75 = locale70.getDisplayCountry(locale71);
        java.lang.String str76 = locale71.getDisplayLanguage();
        java.lang.String str77 = property68.getAsText(locale71);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property68.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property79 = monthDay32.property(dateTimeFieldType78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23" + "'", str4, "23");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "--02-13" + "'", str28, "--02-13");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "days" + "'", str62, "days");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "it" + "'", str73, "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Cina" + "'", str75, "Cina");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italian" + "'", str76, "Italian");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022" + "'", str77, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.lang.Class<?> wildcardClass5 = dateTimeField4.getClass();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setRegion("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ISOChronology[Etc/UTC] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        org.joda.time.MonthDay monthDay11 = property2.addToCopy(2);
        org.joda.time.MonthDay monthDay13 = monthDay11.minusDays((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = dateTime17.toDateMidnight();
        org.joda.time.DateTime.Property property22 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        int int27 = property22.getMaximumTextLength(locale24);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = monthDay11.toString("janv.", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644572233579,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=13,MILLISECOND=579,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        java.lang.String str19 = property18.getAsString();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property18.getAsText(locale20);
        org.joda.time.DateTime dateTime22 = property18.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "20" + "'", str19, "20");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "20" + "'", str21, "20");
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        long long9 = chronology5.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DurationField durationField10 = chronology5.months();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, (int) (byte) 0);
        int int15 = localDate11.getYearOfEra();
        int int16 = localDate11.getDayOfWeek();
        long long18 = chronology5.set((org.joda.time.ReadablePartial) localDate11, (long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = localDate11.get(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate23 = property21.addWrapFieldToCopy(187200013);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 7092L + "'", long9 == 7092L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644537600032L + "'", long18 == 1644537600032L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(15);
        boolean boolean11 = dateTime7.isAfter((-184277211L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        int int12 = dateTime9.getDayOfWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        int int26 = dateTime23.getWeekyear();
        org.joda.time.DateMidnight dateMidnight27 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property29 = dateTime23.property(dateTimeFieldType28);
        org.joda.time.LocalDate.Property property30 = localDate20.property(dateTimeFieldType28);
        boolean boolean31 = dateTime9.equals((java.lang.Object) property30);
        java.lang.String str32 = dateTime9.toString();
        boolean boolean33 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str32, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.PRC;
        int int8 = property2.getMaximumShortTextLength(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay10 = property2.setCopy(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        int int29 = localDate7.size();
        org.joda.time.LocalDate.Property property30 = localDate7.era();
        org.joda.time.LocalDate localDate31 = property30.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property30.roundCeilingCopy();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(100);
        int int38 = localDate35.size();
        org.joda.time.Chronology chronology39 = localDate35.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = localDate35.toDateMidnight();
        int int41 = localDate32.compareTo((org.joda.time.ReadablePartial) localDate35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate43 = localDate35.withEra(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.LocalDate localDate6 = localDate3.plusYears(20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.DurationField durationField13 = dateTimeField4.getLeapDurationField();
        boolean boolean14 = dateTimeField4.isLenient();
        boolean boolean15 = dateTimeField4.isSupported();
        long long17 = dateTimeField4.remainder(0L);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        calendar1.set(3, 16, 0);
        calendar1.setFirstDayOfWeek((int) 'u');
        boolean boolean17 = calendar1.isWeekDateSupported();
        java.lang.String str18 = calendar1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str18, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay1.minus(readablePeriod8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra(20);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = monthDay1.compareTo((org.joda.time.ReadablePartial) localDate17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        int int17 = dateTime14.getSecondOfMinute();
        java.util.Locale locale18 = null;
        java.util.Calendar calendar19 = dateTime14.toCalendar(locale18);
        // The following exception was thrown during execution in test generation
        try {
            calendar19.set(19005, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19005");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField18 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology15.getDateTimeMillis(92, 364, (-1), 52, 49021102, 817, 45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = monthDay11.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-59367263820601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=88,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=267,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=22,SECOND=59,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay11);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime5.toMutableDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(187200000L, chronology16);
        boolean boolean21 = dateTime19.isAfter((long) 32);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate.Property property21 = localDate12.dayOfYear();
        org.joda.time.LocalDate.Property property22 = localDate12.era();
        java.lang.String str23 = property22.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "era" + "'", str23, "era");
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("property[dayofmonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(2592L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = monthDay1.toString("11-feb-2022 9.35.31");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        int int13 = calendar1.getMinimum((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology23.withZone(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        java.lang.String str35 = durationFieldType34.getName();
        org.joda.time.DateTime dateTime37 = dateTime33.withFieldAdded(durationFieldType34, (int) 'u');
        int int38 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime33);
        java.util.TimeZone timeZone39 = dateTimeZone26.toTimeZone();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone39);
        int int41 = calendar1.compareTo(calendar40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=32770,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "days" + "'", str35, "days");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 349260000 + "'", int38 == 349260000);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644572234736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=14,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        int int21 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime24.toMutableDateTime(dateTimeZone28);
        int int31 = dateTimeZone28.getStandardOffset((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        java.lang.String str39 = property38.getAsShortText();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.DateTime dateTime42 = property38.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        int int52 = dateTime49.getWeekyear();
        org.joda.time.DateMidnight dateMidnight53 = dateTime49.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property55 = dateTime49.property(dateTimeFieldType54);
        org.joda.time.DateTime.Property property56 = dateTime49.centuryOfEra();
        org.joda.time.DateTime dateTime58 = dateTime49.withCenturyOfEra(20);
        int int59 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime60 = dateTime42.toDateTime(dateTimeZone45);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime60.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = dateTimeFormatter32.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime62, "366", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3" + "'", str39, "3");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 349260000 + "'", int59 == 349260000);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        org.joda.time.MonthDay monthDay6 = property2.addToCopy((-1));
        java.lang.String str7 = property2.getAsShortText();
        int int8 = property2.getMinimumValueOverall();
        java.lang.Class<?> wildcardClass9 = property2.getClass();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "janv." + "'", str7, "janv.");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        int int8 = property5.getMaximumValue();
        org.joda.time.DateTime dateTime9 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime10 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property5.withMinimumValue();
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = locale13.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property5.setCopy("2022-04-10T13:35:58.105+52:00", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-04-10T13:35:58.105+52:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u82f1\u6587" + "'", str14, "\u82f1\u6587");
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        long long10 = dateTime4.getMillis();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        java.lang.String str18 = durationFieldType17.getName();
        org.joda.time.LocalDate localDate20 = localDate15.withFieldAdded(durationFieldType17, 32770);
        org.joda.time.DateTime dateTime22 = dateTime4.withFieldAdded(durationFieldType17, 3);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(2000);
        int int25 = dateTime24.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60526224000001L) + "'", long10 == (-60526224000001L));
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "days" + "'", str18, "days");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.LocalDate localDate25 = property23.roundFloorCopy();
        int int26 = property23.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfDay();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(0L);
        java.lang.String str18 = monthDay17.toString();
        org.joda.time.MonthDay monthDay20 = monthDay17.plusMonths((int) (byte) 10);
        int[] intArray21 = monthDay17.getValues();
        org.joda.time.MonthDay.Property property22 = monthDay17.monthOfYear();
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(0L);
        java.lang.String str26 = monthDay25.toString();
        org.joda.time.Chronology chronology27 = monthDay25.getChronology();
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.millisOfDay();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay(0L);
        java.lang.String str33 = monthDay32.toString();
        org.joda.time.Chronology chronology34 = monthDay32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = monthDay32.getField((int) (byte) 1);
        int[] intArray38 = chronology28.get((org.joda.time.ReadablePartial) monthDay32, (long) 349260000);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = dateTimeField15.set((org.joda.time.ReadablePartial) monthDay17, 365, intArray38, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--01-03" + "'", str18, "--01-03");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 3]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--01-03" + "'", str26, "--01-03");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "--01-03" + "'", str33, "--01-03");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 5]");
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'ISOChronology[UTC]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay4 = monthDay2.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay2.minus(readablePeriod5);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        java.lang.String str8 = property7.toString();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        int int47 = property16.getMaximumTextLength(locale44);
        org.joda.time.DateTimeField dateTimeField48 = property16.getField();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        int int51 = property16.getMaximumTextLength(locale49);
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale49.getDisplayCountry();
        boolean boolean54 = locale49.hasExtensions();
        int int55 = property7.getMaximumShortTextLength(locale49);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale49);
        java.util.Locale.Builder builder57 = builder0.clear();
        java.util.Locale.Builder builder58 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder58.setVariant("Sun May 04 00:00:00 UTC 14403");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Sun May 04 00:00:00 UTC 14403 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3" + "'", str17, "3");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572235064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=15,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        java.lang.String str16 = dateTime15.toString();
        java.lang.String str17 = dateTime15.toString();
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = property18.setCopy("Sunday", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Sunday\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-01-01T00:00:00.000+52:00" + "'", str16, "2022-01-01T00:00:00.000+52:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-01T00:00:00.000+52:00" + "'", str17, "2022-01-01T00:00:00.000+52:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekOfWeekyear((int) (byte) 1);
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate6.minus(readablePeriod8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        org.joda.time.Interval interval15 = localDate14.toInterval();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        int int21 = localDate14.get(dateTimeFieldType20);
        org.joda.time.LocalDate localDate23 = localDate14.minusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean25 = localDate14.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate localDate27 = localDate9.withField(dateTimeFieldType24, 54);
        org.joda.time.LocalDate localDate29 = localDate9.plusYears(60);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.Interval interval35 = localDate34.toInterval();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        java.lang.String str37 = durationFieldType36.getName();
        org.joda.time.LocalDate localDate39 = localDate34.withFieldAdded(durationFieldType36, 32770);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology52 = chronology48.withZone(dateTimeZone51);
        java.lang.String str53 = chronology48.toString();
        org.joda.time.DurationField durationField54 = chronology48.seconds();
        boolean boolean55 = durationFieldType36.isSupported(chronology48);
        boolean boolean56 = localDate9.isSupported(durationFieldType36);
        java.lang.String str57 = durationFieldType36.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "days" + "'", str37, "days");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[+52:00]" + "'", str53, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "days" + "'", str57, "days");
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        org.joda.time.DateTime dateTime9 = property5.addWrapFieldToCopy(21);
        int int10 = dateTime9.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.MonthDay monthDay34 = monthDay13.minusDays(59);
        java.util.Date date40 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        long long41 = date40.getTime();
        long long42 = date40.getTime();
        boolean boolean43 = monthDay13.equals((java.lang.Object) date40);
        org.joda.time.Chronology chronology44 = monthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = chronology44.get(readablePeriod46, (long) 96684, 1644572116406L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Nov 05 00:10:00 UTC 4630");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 83968099800000L + "'", long41 == 83968099800000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 83968099800000L + "'", long42 == 83968099800000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField16 = dateTimeField15.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = dateTimeField15.getDifference((long) ' ', 5907399684280970035L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -98456661404682");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        int int5 = dateTimeField4.getMinimumValue();
        int int6 = dateTimeField4.getMinimumValue();
        boolean boolean8 = dateTimeField4.isLeap((long) 'a');
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str12 = locale11.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = dateTimeField4.getAsShortText((-10), locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u6cd5\u6587" + "'", str12, "\u6cd5\u6587");
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField35 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology26.hourOfDay();
        long long38 = dateTimeField36.roundHalfEven(83966356800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 83966356800000L + "'", long38 == 83966356800000L);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        int int41 = property5.getLeapAmount();
        int int42 = property5.get();
        org.joda.time.DateTime dateTime44 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusDays((int) '#');
        long long50 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime51 = property5.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = property5.setCopy("11 Feb 2022 09:37:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11 Feb 2022 09:37:00 GMT\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572235542,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=15,MILLISECOND=542,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-16812840L) + "'", long50 == (-16812840L));
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(22, 6, 32, 43199999);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.MonthDay monthDay12 = monthDay9.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay15 = monthDay9.withFieldAdded(durationFieldType13, (-1));
        org.joda.time.MonthDay monthDay17 = monthDay15.plusDays((int) '4');
        java.lang.String str18 = monthDay15.toString();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay15.plus(readablePeriod19);
        org.joda.time.MonthDay.Property property21 = monthDay20.dayOfMonth();
        int[] intArray22 = monthDay20.getValues();
        java.util.Calendar.Builder builder23 = builder7.setFields(intArray22);
        java.util.Calendar.Builder builder27 = builder23.setWeekDate((int) '#', 49006181, 46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder29 = builder27.setCalendarType("14340");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 14340");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--01-03" + "'", str10, "--01-03");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--12-03" + "'", str18, "--12-03");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[12, 3]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate9 = dateTime8.toLocalDate();
        org.joda.time.DateTime dateTime10 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear(365);
        java.lang.String str13 = dateTime9.toString("+97:01");
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        org.joda.time.Interval interval23 = localDate22.toInterval();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        java.lang.String str25 = durationFieldType24.getName();
        org.joda.time.LocalDate localDate27 = localDate22.withFieldAdded(durationFieldType24, 32770);
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate27.dayOfYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.Interval interval35 = localDate34.toInterval();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        java.lang.String str37 = durationFieldType36.getName();
        org.joda.time.LocalDate localDate39 = localDate34.withFieldAdded(durationFieldType36, 32770);
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        java.lang.String str41 = property40.getAsText();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.plus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis(2022);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays((int) '#');
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localDate58.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime53.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = dateTime53.plusWeeks(5);
        org.joda.time.Chronology chronology66 = dateTime53.getChronology();
        org.joda.time.Chronology chronology67 = dateTime53.getChronology();
        org.joda.time.DateTime dateTime68 = dateTime50.withChronology(chronology67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(5907399684280970662L, chronology67);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology67);
        int int71 = dateTime70.getYearOfCentury();
        long long72 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(dateTimeZone74);
        org.joda.time.LocalDate localDate77 = localDate75.withDayOfYear(100);
        int int78 = localDate75.size();
        org.joda.time.LocalDate localDate80 = localDate75.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusDays((int) '#');
        int int86 = dateTime83.getWeekyear();
        org.joda.time.DateMidnight dateMidnight87 = dateTime83.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property89 = dateTime83.property(dateTimeFieldType88);
        org.joda.time.LocalDate.Property property90 = localDate80.property(dateTimeFieldType88);
        org.joda.time.DateTime.Property property91 = dateTime70.property(dateTimeFieldType88);
        boolean boolean92 = localDate27.isSupported(dateTimeFieldType88);
        boolean boolean93 = localDate17.isSupported(dateTimeFieldType88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = dateTime9.withField(dateTimeFieldType88, 14340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14340 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+97:01" + "'", str13, "+97:01");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "days" + "'", str25, "days");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "days" + "'", str37, "days");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "11" + "'", str41, "11");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 89L + "'", long72 == 89L);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1970 + "'", int86 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.Date date13 = dateTime4.toDate();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((java.lang.Object) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime17.plusWeeks(5);
        org.joda.time.Chronology chronology30 = dateTime17.getChronology();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime17.minus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean34 = dateTime17.isSupported(dateTimeFieldType33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.withDayOfYear(100);
        int int40 = localDate37.size();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusDays((int) '#');
        int int48 = dateTime45.getWeekyear();
        org.joda.time.DateMidnight dateMidnight49 = dateTime45.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property51 = dateTime45.property(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate42.property(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        java.lang.String str67 = chronology62.toString();
        org.joda.time.DurationField durationField68 = chronology62.seconds();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.yearOfCentury();
        boolean boolean70 = dateTimeFieldType50.isSupported(chronology62);
        boolean boolean71 = dateTimeFieldType33.isSupported(chronology62);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType33.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = monthDay14.get(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[+52:00]" + "'", str67, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(durationFieldType72);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        long long19 = chronology8.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        long long32 = dateTimeField24.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay33.minus(readablePeriod36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 0);
        java.util.Locale locale46 = new java.util.Locale("", "", "hi!");
        int int47 = dateTimeField42.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) monthDay33, locale46);
        int[] intArray49 = monthDay33.getValues();
        int[] intArray51 = chronology8.get((org.joda.time.ReadablePartial) monthDay33, (long) 4);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.Chronology chronology53 = monthDay52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.DurationField durationField55 = chronology53.days();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62180539199983L) + "'", long19 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9L + "'", long32 == 9L);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb" + "'", str48, "Feb");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 3]");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property5 = monthDay4.monthOfYear();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale6.getDisplayScript(locale7);
        int int10 = property5.getMaximumTextLength(locale6);
        org.joda.time.DurationField durationField11 = property5.getDurationField();
        int int12 = property5.getMinimumValue();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale13);
        java.lang.String str15 = locale13.getDisplayVariant();
        boolean boolean16 = property5.equals((java.lang.Object) str15);
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.util.Locale.setDefault(locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        int int21 = property5.getMaximumTextLength(locale18);
        java.util.Locale locale25 = new java.util.Locale("Property[dayOfMonth]", "fr", "10");
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale26.getDisplayScript(locale27);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale27);
        java.lang.String str32 = locale25.getDisplayCountry(locale27);
        java.lang.String str33 = locale18.getDisplayName(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = monthDay1.toString("francese", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "it" + "'", str8, "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals(locale25.toString(), "property[dayofmonth]_FR_10");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572235832,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=15,MILLISECOND=832,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572235832,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=15,MILLISECOND=832,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Francia" + "'", str32, "Francia");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "French" + "'", str33, "French");
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTimeFormatter2.parseDateTime("Nov");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.LocalDate localDate14 = property11.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate15 = property11.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property11.getFieldType();
        org.joda.time.LocalDate.Property property17 = localDate2.property(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = property17.setCopy("11 f\351vr. 2022 09:35:18");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11 fe?vr. 2022 09:35:18\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean13 = calendar12.isWeekDateSupported();
        long long14 = calendar12.getTimeInMillis();
        boolean boolean15 = calendar12.isWeekDateSupported();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 392358211200000L + "'", long14 == 392358211200000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3659999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("7", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateTime dateTime35 = dateTime30.minusMillis((int) (short) 0);
        int int36 = dateTime35.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        int int42 = dateTime39.getWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime39.minusMillis((int) (short) 0);
        boolean boolean45 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime44.getMillisOfDay();
        org.joda.time.DateTime.Property property47 = dateTime44.secondOfDay();
        boolean boolean48 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 14399999 + "'", int46 == 14399999);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        java.lang.Integer int22 = dateTimeFormatter20.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter20.getPrinter();
        java.lang.Appendable appendable24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(100);
        org.joda.time.LocalDate.Property property30 = localDate27.dayOfMonth();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.LocalDate localDate33 = property30.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate34 = property30.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property30.getFieldType();
        org.joda.time.LocalDate localDate36 = property30.getLocalDate();
        org.joda.time.LocalDate localDate37 = property30.roundCeilingCopy();
        int int38 = localDate37.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(appendable24, (org.joda.time.ReadablePartial) localDate37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay();
        int int11 = dateTime10.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.lang.String str25 = calendar24.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar24.getActualMaximum(816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 816");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572236261,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=16,MILLISECOND=261,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusWeeks(17);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfSecond();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(667680016L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.withDayOfYear(100);
        org.joda.time.Interval interval7 = localDate6.toInterval();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        int int13 = localDate6.get(dateTimeFieldType12);
        org.joda.time.LocalDate localDate15 = localDate6.minusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = monthDay1.isBefore((org.joda.time.ReadablePartial) localDate15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 52);
        org.joda.time.LocalDate localDate32 = localDate27.plusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDate27.getFieldType(14399995);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 14399995");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        int int13 = calendar1.getActualMinimum(6);
        calendar1.setMinimalDaysInFirstWeek(0);
        calendar1.setLenient(true);
        boolean boolean18 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=-1,MONTH=0,WEEK_OF_YEAR=39,WEEK_OF_MONTH=5,DAY_OF_MONTH=32770,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=489,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        java.lang.String str3 = monthDay2.toString();
        org.joda.time.Chronology chronology4 = monthDay2.getChronology();
        org.joda.time.Chronology chronology5 = monthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology5);
        long long9 = dateTimeField7.roundHalfCeiling(5907461382864000000L);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(1644572109112L);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        java.time.Instant instant20 = calendar13.toInstant();
        java.util.Date date21 = java.util.Date.from(instant20);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.fromDateFields(date21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.minus(readablePeriod23);
        boolean boolean25 = monthDay11.isAfter((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronology();
        boolean boolean30 = dateTimeFormatter28.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = dateTimeFormatter32.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser34 = dateTimeFormatter32.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withZoneUTC();
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay(0L);
        java.lang.String str38 = monthDay37.toString();
        org.joda.time.Chronology chronology39 = monthDay37.getChronology();
        org.joda.time.Chronology chronology40 = monthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter35.withChronology(chronology40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter42.withOffsetParsed();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.lang.String str45 = locale44.toLanguageTag();
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("");
        java.lang.String str49 = locale44.getDisplayScript(locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter43.withLocale(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) monthDay22, locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--01-03" + "'", str3, "--01-03");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 5907461382864000000L + "'", long9 == 5907461382864000000L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572236500,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=16,MILLISECOND=500,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 09:37:16 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimePrinter33);
        org.junit.Assert.assertNull(dateTimeParser34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "--01-03" + "'", str38, "--01-03");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "de-DE" + "'", str45, "de-DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Allemagne" + "'", str46, "Allemagne");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 1970);
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.MonthDay monthDay6 = monthDay4.minusDays(20);
        java.lang.String str8 = monthDay6.toString("2022-08-11");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-08-11" + "'", str8, "2022-08-11");
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer8, 17756L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        java.lang.String str12 = dateTime4.toString();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay18 = monthDay13.withPeriodAdded(readablePeriod16, 239);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        java.lang.String str29 = durationFieldType28.getName();
        org.joda.time.DateTime dateTime31 = dateTime27.withFieldAdded(durationFieldType28, (int) 'u');
        java.lang.String str32 = durationFieldType28.getName();
        org.joda.time.MonthDay monthDay34 = monthDay20.withFieldAdded(durationFieldType28, 1970);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime45.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology53 = chronology49.withZone(dateTimeZone52);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay((java.lang.Object) dateTime40, chronology49);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.secondOfDay();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(5907399684280970035L, chronology49);
        boolean boolean57 = durationFieldType28.isSupported(chronology49);
        org.joda.time.DateTime dateTime59 = dateTime4.withFieldAdded(durationFieldType28, 17);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTime4.withField(dateTimeFieldType60, 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0052-01-03T03:59:59.999+52:00" + "'", str12, "0052-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "days" + "'", str29, "days");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "days" + "'", str32, "days");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = dateTimeFormatter11.print(2018L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset(10L);
        long long7 = dateTimeZone2.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 187200000, dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.minusSeconds(69);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-58474832460001L) + "'", long7 == (-58474832460001L));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        int int11 = property2.getMaximumTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay21 = monthDay19.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = monthDay21.getField((int) (byte) 0);
        java.util.Locale locale27 = new java.util.Locale("", "", "hi!");
        int int28 = dateTimeField23.getMaximumTextLength(locale27);
        long long31 = dateTimeField23.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay32.minus(readablePeriod35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay39 = monthDay37.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField41 = monthDay39.getField((int) (byte) 0);
        java.util.Locale locale45 = new java.util.Locale("", "", "hi!");
        int int46 = dateTimeField41.getMaximumTextLength(locale45);
        java.lang.String str47 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) monthDay32, locale45);
        int int48 = property17.getMaximumTextLength(locale45);
        org.joda.time.DateTimeField dateTimeField49 = property17.getField();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        int int52 = property17.getMaximumTextLength(locale50);
        java.lang.String str53 = locale50.getDisplayVariant();
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayName(locale54);
        java.lang.String str57 = locale50.getDisplayName();
        int int58 = property2.getMaximumTextLength(locale50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay60 = property2.setCopy("0010-02-14");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0010-02-14\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9L + "'", long31 == 9L);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Feb" + "'", str47, "Feb");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644572236835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=16,MILLISECOND=835,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-US" + "'", str55, "en-US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "French" + "'", str56, "French");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fran\347ais" + "'", str57, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTime dateTime14 = dateTime4.withDurationAdded(35L, 45);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) 10L);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(100);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.LocalDate localDate14 = localDate9.withFieldAdded(durationFieldType11, 32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean16 = localDate9.isSupported(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property17 = monthDay4.property(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder11.setWeekDefinition((int) 'a', 311);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay18.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.MonthDay monthDay25 = monthDay23.plusMonths(32770);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.plus(readablePeriod26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = monthDay25.toString("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, 14, (int) 'u');
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay(5, 11, 1439, (int) '#');
        java.util.Calendar.Builder builder24 = builder20.setTimeOfDay((int) (short) 1, 5, (int) 'x');
        java.util.Calendar.Builder builder28 = builder24.setWeekDate((int) (byte) 100, 14, 32770);
        java.util.Calendar.Builder builder32 = builder28.setWeekDate(44, 227, 14402021);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder35 = builder28.setWeekDefinition(92, 54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("2022-02-15", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add((-1970), 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=10,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35,MINUTE=13,SECOND=17,MILLISECOND=23,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.addUnicodeLocaleAttribute("14400097");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setUnicodeLocaleKeyword("", "Taiwan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        java.lang.String str16 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField17.set((-1480510777000L), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=2022,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2922789,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=3,MINUTE=11,SECOND=32772,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=2022,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2922789,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=3,MINUTE=11,SECOND=32772,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+52:00]" + "'", str16, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar13);
        int[] intArray21 = monthDay20.getValues();
        java.util.Calendar.Builder builder22 = builder3.setFields(intArray21);
        java.util.Calendar calendar23 = builder22.build();
        calendar23.setTimeInMillis((-54625103999941L));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572237223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=17,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 11]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-54625103999941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=239,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=59,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField17 = monthDay15.getField((int) (byte) 0);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        java.lang.String str47 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) monthDay15, locale44);
        long long49 = dateTimeField4.roundHalfFloor((long) (short) 100);
        boolean boolean50 = dateTimeField4.isSupported();
        boolean boolean51 = dateTimeField4.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField4.getType();
        org.joda.time.DurationField durationField53 = dateTimeField4.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "February" + "'", str47, "February");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("d\351cembre");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=de?cembre");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime7.toMutableDateTime(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(dateTimeZone11);
        int int15 = dateTimeZone11.getOffsetFromLocal((-60494601600001L));
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(dateTimeZone11);
        long long19 = dateTimeZone11.convertLocalToUTC(32769L, false);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.lang.String str24 = locale22.getCountry();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        long long44 = dateTimeField36.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay45.minus(readablePeriod48);
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay52 = monthDay50.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField54 = monthDay52.getField((int) (byte) 0);
        java.util.Locale locale58 = new java.util.Locale("", "", "hi!");
        int int59 = dateTimeField54.getMaximumTextLength(locale58);
        java.lang.String str60 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) monthDay45, locale58);
        int int61 = property30.getMaximumTextLength(locale58);
        java.lang.String str62 = locale22.getDisplayVariant(locale58);
        java.util.Locale locale64 = new java.util.Locale("en-US");
        java.lang.String str65 = locale58.getDisplayLanguage(locale64);
        java.lang.String str66 = locale58.getISO3Country();
        java.lang.String str67 = dateTimeZone11.getName((long) 41, locale58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(292278993, 2021, 9, 999, 36, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 187200000 + "'", int15 == 187200000);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-187167231L) + "'", long19 == (-187167231L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572237279,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=17,MILLISECOND=279,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "3" + "'", str31, "3");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 9L + "'", long44 == 9L);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Feb" + "'", str60, "Feb");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale64.toString(), "en-us");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+52:00" + "'", str67, "+52:00");
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay18 = monthDay16.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField20 = monthDay18.getField((int) (byte) 0);
        java.util.Locale locale24 = new java.util.Locale("", "", "hi!");
        int int25 = dateTimeField20.getMaximumTextLength(locale24);
        long long28 = dateTimeField20.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay29.minus(readablePeriod32);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField38 = monthDay36.getField((int) (byte) 0);
        java.util.Locale locale42 = new java.util.Locale("", "", "hi!");
        int int43 = dateTimeField38.getMaximumTextLength(locale42);
        java.lang.String str44 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) monthDay29, locale42);
        int int45 = property14.getMaximumTextLength(locale42);
        org.joda.time.DateTimeField dateTimeField46 = property14.getField();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        int int49 = property14.getMaximumTextLength(locale47);
        java.lang.String str50 = locale47.getDisplayVariant();
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale51.toLanguageTag();
        java.lang.String str53 = locale47.getDisplayName(locale51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyearOfCentury();
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay70 = monthDay68.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField72 = monthDay70.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.era();
        int int74 = monthDay70.indexOf(dateTimeFieldType73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MonthDay monthDay77 = monthDay70.withPeriodAdded(readablePeriod75, (-1));
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.lang.String str80 = dateTimeField67.getAsShortText((org.joda.time.ReadablePartial) monthDay70, (int) '#', locale79);
        java.lang.String str81 = locale47.getDisplayName(locale79);
        java.util.Locale locale85 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str86 = locale79.getDisplayLanguage(locale85);
        java.lang.String str87 = dateTime4.toString("2022", locale79);
        java.util.Locale.setDefault(locale79);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3" + "'", str15, "3");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 9L + "'", long28 == 9L);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Feb" + "'", str44, "Feb");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572237322,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=17,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en-US" + "'", str52, "en-US");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "French" + "'", str53, "French");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "35" + "'", str80, "35");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "French" + "'", str81, "French");
        org.junit.Assert.assertEquals(locale85.toString(), "fra_--01-01_monthOfYear");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English" + "'", str86, "English");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022" + "'", str87, "2022");
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        calendar1.set(3, 16, 0);
        calendar1.setFirstDayOfWeek((int) 'u');
        boolean boolean17 = calendar1.isWeekDateSupported();
        java.lang.String str18 = calendar1.getCalendarType();
        java.lang.String str19 = calendar1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gregory" + "'", str18, "gregory");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str19, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=377,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.DateTime dateTime13 = dateTime4.minus((long) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        boolean boolean15 = dateTime13.equals((java.lang.Object) dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.withCenturyOfEra(24);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        java.lang.String str31 = chronology26.toString();
        org.joda.time.DurationField durationField32 = chronology26.days();
        org.joda.time.DateTime dateTime33 = dateTime13.toDateTime(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology26.getDateTimeMillis((long) 'a', 19005, (int) (byte) 100, 68, 10799999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19005 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[+52:00]" + "'", str31, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate8.minusDays(51);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay13 = monthDay11.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay16 = monthDay11.withPeriodAdded(readablePeriod14, 239);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.plus(readablePeriod17);
        org.joda.time.MonthDay.Property property19 = monthDay16.dayOfMonth();
        org.joda.time.MonthDay monthDay21 = monthDay16.plusMonths(2922789);
        org.joda.time.MonthDay monthDay23 = monthDay16.minusDays(22);
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays(46);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDate10.compareTo((org.joda.time.ReadablePartial) monthDay25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str4 = locale2.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getUnicodeLocaleType("-16812840");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: -16812840");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        int int7 = property5.get();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology36 = chronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyearOfCentury();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(83968099800000L, chronology32);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate38.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime43.minusYears((int) (short) 10);
        int int46 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = dateTime45.isAfter(89L);
        org.joda.time.DateTime.Property property49 = dateTime45.year();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime45.plus(readablePeriod50);
        org.joda.time.DateTime dateTime53 = dateTime45.plusWeeks(3659999);
        int int54 = property5.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        java.lang.String str61 = durationFieldType60.getName();
        org.joda.time.DateTime dateTime63 = dateTime59.withFieldAdded(durationFieldType60, (int) 'u');
        org.joda.time.DateTime.Property property64 = dateTime63.millisOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.minusMillis(1970);
        boolean boolean67 = dateTime53.isBefore((org.joda.time.ReadableInstant) dateTime66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = dateTime53.toString("Cina");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-26569157) + "'", int54 == (-26569157));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate8.minusDays(51);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight12 = localDate10.toDateMidnight();
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("+01:29");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(239);
        boolean boolean6 = dateTime4.isEqual((long) 576);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.lang.String str25 = calendar24.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar24.getMinimum(487);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 487");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572237671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=17,MILLISECOND=671,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay(0L);
        java.lang.String str5 = monthDay4.toString();
        org.joda.time.Chronology chronology6 = monthDay4.getChronology();
        org.joda.time.Chronology chronology7 = monthDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(365, (int) (byte) 100, 14402, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--01-03" + "'", str5, "--01-03");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime2.minusMinutes(18);
        org.joda.time.DateTime dateTime27 = dateTime2.withDurationAdded(10L, 45);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateMidnight dateMidnight34 = dateTime32.toDateMidnight();
        int int35 = dateTime32.getDayOfYear();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        long long42 = dateTimeZone37.convertLocalToUTC((long) 4, false, (long) 5);
        int int44 = dateTimeZone37.getStandardOffset(83968099800000L);
        boolean boolean46 = dateTimeZone37.isStandardOffset((long) 365);
        org.joda.time.DateTime dateTime47 = dateTime32.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime48 = dateTime27.toDateTime(dateTimeZone37);
        long long50 = dateTimeZone37.convertUTCToLocal(48999000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-187199996L) + "'", long42 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 187200000 + "'", int44 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 236199000L + "'", long50 == 236199000L);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        java.util.Date date7 = dateTime4.toDate();
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays(32770);
        int int10 = dateTime4.getYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        org.joda.time.DateTime.Property property13 = dateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = dateTime4.toLocalDateTime();
        int int15 = dateTime4.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = dateTime5.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime5.toMutableDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(187200000L, chronology16);
        org.joda.time.DurationField durationField20 = chronology16.minutes();
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay23 = monthDay21.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField25 = monthDay23.getField((int) (byte) 0);
        java.util.Locale locale29 = new java.util.Locale("", "", "hi!");
        int int30 = dateTimeField25.getMaximumTextLength(locale29);
        long long33 = dateTimeField25.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay34.minus(readablePeriod37);
        org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay41 = monthDay39.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField43 = monthDay41.getField((int) (byte) 0);
        java.util.Locale locale47 = new java.util.Locale("", "", "hi!");
        int int48 = dateTimeField43.getMaximumTextLength(locale47);
        java.lang.String str49 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) monthDay34, locale47);
        int[] intArray50 = monthDay34.getValues();
        java.lang.Object obj51 = null;
        boolean boolean52 = monthDay34.equals(obj51);
        org.joda.time.MonthDay monthDay54 = monthDay34.withMonthOfYear((int) (byte) 10);
        org.joda.time.MonthDay monthDay56 = monthDay34.minusDays(51);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay34.plus(readablePeriod57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate61.withDayOfYear(100);
        int int64 = localDate61.size();
        org.joda.time.LocalDate localDate66 = localDate61.plusMonths(6);
        int int68 = localDate66.getValue(0);
        org.joda.time.LocalDate localDate70 = localDate66.plusMonths(52);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone72);
        int int74 = localDate70.compareTo((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean76 = localDate70.isSupported(durationFieldType75);
        int[] intArray77 = localDate70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology16.validate((org.joda.time.ReadablePartial) monthDay58, intArray77);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2026 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9L + "'", long33 == 9L);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Feb" + "'", str49, "Feb");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 13]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[2026, 12, 13]");
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        java.lang.Object obj10 = calendar1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615438024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=18,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "java.util.GregorianCalendar[time=1644615438024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=18,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "java.util.GregorianCalendar[time=1644615438024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=18,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "java.util.GregorianCalendar[time=1644615438024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=37,SECOND=18,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        boolean boolean13 = dateTime10.isBeforeNow();
        boolean boolean14 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime.Property property30 = dateTime19.centuryOfEra();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays((int) '#');
        int int37 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime34.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime34.plus(readablePeriod40);
        int int42 = property30.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = property30.addToCopy((long) 11);
        int int45 = dateTime44.getEra();
        org.joda.time.DateTime dateTime47 = dateTime44.withMinuteOfHour(0);
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime47.toYearMonthDay();
        org.joda.time.DateTime.Property property49 = dateTime47.dayOfMonth();
        int int50 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime47.withEra(96684);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96684 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "19" + "'", str31, "19");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology10);
        org.joda.time.MonthDay.Property property13 = monthDay12.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property13.setCopy("15 f\351vr. 2022 00:00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"15 fe?vr. 2022 00:00:00\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfDay();
        int int16 = dateTimeField14.get((-187167242L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 24 + "'", int16 == 24);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime19.withTime(21, 0, 4, 0);
        int int25 = dateTime24.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateMidnight dateMidnight32 = dateTime30.toDateMidnight();
        int int33 = dateTime30.getDayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        long long40 = dateTimeZone35.convertLocalToUTC((long) 4, false, (long) 5);
        int int42 = dateTimeZone35.getStandardOffset(83968099800000L);
        boolean boolean44 = dateTimeZone35.isStandardOffset((long) 365);
        org.joda.time.DateTime dateTime45 = dateTime30.withZoneRetainFields(dateTimeZone35);
        boolean boolean46 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime47 = dateTime24.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-187199996L) + "'", long40 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 187200000 + "'", int42 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale.Builder builder8 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguage("--01-05");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: --01-05 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        calendar13.setLenient(true);
        calendar13.setMinimalDaysInFirstWeek(1970);
        int int19 = calendar13.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar13);
        int[] intArray21 = monthDay20.getValues();
        java.util.Calendar.Builder builder22 = builder3.setFields(intArray21);
        java.util.Calendar calendar23 = builder22.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder22.setInstant((-60526227120001L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572238273,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=18,MILLISECOND=273,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2, 11]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-61184071680000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=31,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }
}

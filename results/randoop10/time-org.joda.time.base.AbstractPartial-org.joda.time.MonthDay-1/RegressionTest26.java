import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(251);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Calendar.Builder builder15 = builder3.setWeekDate((int) (byte) 1, 187200000, 1);
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay(36, (int) (short) 10, 311, 14402);
        java.util.Calendar.Builder builder25 = builder15.setTimeOfDay(122, 54, 1439, 323);
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder29 = builder26.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder33 = builder29.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder37 = builder29.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        calendar39.setLenient(true);
        calendar39.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar39.setMinimalDaysInFirstWeek(2730);
        calendar39.clear();
        int int47 = calendar39.getFirstDayOfWeek();
        java.lang.Object obj48 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long55 = dateTimeZone51.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj48, dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime56.getZone();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        calendar39.setTimeZone(timeZone59);
        java.util.Calendar.Builder builder62 = builder37.setTimeZone(timeZone59);
        java.util.Calendar.Builder builder63 = builder25.setTimeZone(timeZone59);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("30 nov. 1907 09:42:00");
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone59, locale65);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2730,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-187199987L) + "'", long55 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572589133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=9,MILLISECOND=133,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        calendar1.set(1439, (int) ' ', 7);
        java.util.Date date15 = new java.util.Date();
        calendar1.setTime(date15);
        calendar1.setMinimalDaysInFirstWeek(48999197);
        calendar1.setFirstDayOfWeek(41);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.withMaximumValue();
        org.joda.time.LocalDate localDate29 = property26.addWrapFieldToCopy((-16812840));
        org.joda.time.LocalDate localDate30 = property26.roundFloorCopy();
        boolean boolean31 = calendar1.equals((java.lang.Object) property26);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572589160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=41,minimalDaysInFirstWeek=48999197,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=9,MILLISECOND=160,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 09:43:09 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField17 = monthDay15.getField((int) (byte) 0);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        java.lang.String str47 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) monthDay15, locale44);
        long long49 = dateTimeField4.roundHalfFloor((long) (short) 100);
        int int51 = dateTimeField4.getMinimumValue(1L);
        long long53 = dateTimeField4.roundFloor(83966285400000L);
        long long56 = dateTimeField4.getDifferenceAsLong(292279000L, (long) 14399);
        long long58 = dateTimeField4.roundCeiling(1251546483501361000L);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "February" + "'", str47, "February");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 83965075200000L + "'", long53 == 83965075200000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1251546483571200000L + "'", long58 == 1251546483571200000L);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDate2.getFieldTypes();
        java.lang.String str7 = localDate2.toString();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate15 = localDate10.withDayOfMonth(21);
        boolean boolean16 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        org.joda.time.DateTime dateTime28 = localDate2.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        java.lang.String str35 = property34.getAsShortText();
        org.joda.time.DurationField durationField36 = property34.getDurationField();
        org.joda.time.DateTime dateTime38 = property34.addToCopy((long) 239);
        org.joda.time.DateTime dateTime39 = property34.roundFloorCopy();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(100);
        int int45 = localDate42.size();
        org.joda.time.LocalDate localDate47 = localDate42.plusMonths(6);
        org.joda.time.LocalTime localTime48 = null;
        org.joda.time.DateTime dateTime49 = localDate42.toDateTime(localTime48);
        int int50 = dateTime49.getEra();
        org.joda.time.DateTime dateTime52 = dateTime49.plusMonths((int) 'x');
        int int53 = dateTime49.getMonthOfYear();
        boolean boolean54 = property34.equals((java.lang.Object) dateTime49);
        int int55 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDate localDate56 = dateTime49.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-13" + "'", str7, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "3" + "'", str35, "3");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localDate56);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        int int10 = localDate9.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615789320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=9,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) ' ', 49159149, 43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49159149 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale1);
        java.lang.String str6 = locale1.getCountry();
        java.lang.String str7 = locale1.getDisplayScript();
        java.lang.String str8 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572589339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=9,MILLISECOND=339,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572589339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=9,MILLISECOND=339,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "it" + "'", str8, "it");
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime13 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra(52);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str22 = locale19.getExtension('a');
        org.joda.time.LocalDate localDate23 = property17.setCopy("3", locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean25 = localDate23.isSupported(dateTimeFieldType24);
        int int26 = dateTime4.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime28 = dateTime4.minusMonths(297);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime13 = dateTime4.withFieldAdded(durationFieldType11, (int) 'a');
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes((-292275054));
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime15.plus(58187427725795L);
        org.joda.time.DateTime dateTime20 = dateTime15.minusDays(115200000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.secondOfDay();
        java.lang.String str21 = dateTimeField20.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfDay" + "'", str21, "secondOfDay");
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtStartOfDay(dateTimeZone5);
        long long9 = dateTimeZone5.convertUTCToLocal((-187199738L));
        long long12 = dateTimeZone5.adjustOffset((-29044792908L), true);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(187223628L, dateTimeZone5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((-53));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -53 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 262L + "'", long9 == 262L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-29044792908L) + "'", long12 == (-29044792908L));
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[weekyear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.secondOfDay();
        boolean boolean19 = dateTimeField17.isLeap((long) 10799999);
        org.joda.time.DurationField durationField20 = dateTimeField17.getRangeDurationField();
        org.joda.time.DurationField durationField21 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = dateTime2.toString();
        int int15 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property16 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.DateTime dateTime19 = property16.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str14, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(14400004);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale2.getDisplayLanguage();
        boolean boolean5 = dateTimeZone1.equals((java.lang.Object) locale2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology14.getZone();
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone21, 3659999L);
        java.lang.String str25 = dateTimeZone21.getName(2022L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italien" + "'", str4, "italien");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-169139997L) + "'", long23 == (-169139997L));
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+52:00" + "'", str25, "+52:00");
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField16 = chronology8.seconds();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology36 = chronology32.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField37 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.dayOfYear();
        org.joda.time.DurationField durationField40 = chronology32.seconds();
        org.joda.time.DurationField durationField41 = chronology32.minutes();
        org.joda.time.DateTime dateTime42 = dateTime22.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField43 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime46.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay50 = dateTime46.toYearMonthDay();
        org.joda.time.DateTime dateTime53 = dateTime46.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        boolean boolean59 = dateTime46.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology60 = dateTime58.getChronology();
        int int61 = dateTime58.getSecondOfMinute();
        org.joda.time.DateTime dateTime63 = dateTime58.minusHours(0);
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime58.toYearMonthDay();
        org.joda.time.LocalDate localDate65 = dateTime58.toLocalDate();
        int[] intArray67 = chronology32.get((org.joda.time.ReadablePartial) localDate65, (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField18.set(readablePartial19, 1199, intArray67, 70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1970, 1, 3]");
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 23, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays((int) '#');
        int int10 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime16 = property13.addToCopy(1644572116406L);
        org.joda.time.DateTime dateTime17 = property13.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury(5);
        int int21 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 187200000 + "'", int21 == 187200000);
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        org.joda.time.LocalDate localDate9 = property3.setCopy("3", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtStartOfDay(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) 4, false, (long) 5);
        int int8 = dateTimeZone1.getStandardOffset(83968099800000L);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) 365);
        long long12 = dateTimeZone1.nextTransition((long) (short) -1);
        java.lang.String str14 = dateTimeZone1.getName(124243200100L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-187199996L) + "'", long6 == (-187199996L));
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfMinute();
        org.joda.time.DateTime dateTime4 = property3.roundCeilingCopy();
        boolean boolean6 = dateTime4.equals((java.lang.Object) "\u5fb7\u6587");
        org.joda.time.DateTime dateTime8 = dateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime4.withWeekyear(30);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.minus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology51 = chronology47.withZone(dateTimeZone50);
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DurationField durationField53 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.yearOfCentury();
        boolean boolean55 = dateTimeFieldType35.isSupported(chronology47);
        boolean boolean56 = dateTimeFieldType18.isSupported(chronology47);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        java.lang.String str72 = chronology67.toString();
        org.joda.time.DurationField durationField73 = chronology67.seconds();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = durationFieldType57.getField(chronology67);
        org.joda.time.DurationField durationField79 = chronology67.seconds();
        org.joda.time.DurationField durationField80 = chronology67.minutes();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology67);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+52:00]" + "'", str52, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+52:00]" + "'", str72, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        calendar1.setMinimalDaysInFirstWeek(719571);
        calendar1.set(339, 11, 49073203, (int) (short) 100, (int) (short) 10, 211);
        int int19 = calendar1.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(364, 14432);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=719571,ERA=1,YEAR=339,MONTH=11,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=49073203,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=100,MINUTE=10,SECOND=211,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 719571 + "'", int19 == 719571);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime14 = dateTime4.plus(32762L);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime4.toGregorianCalendar();
        java.lang.Object obj16 = null;
        boolean boolean17 = gregorianCalendar15.equals(obj16);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        int int17 = dateTime14.getWeekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateTime14.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property20 = dateTime14.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = dateTime14.minusWeeks(17);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        int int24 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property25 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime9.plusMonths(12);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean33 = dateTimeZone31.isStandardOffset(10L);
        java.lang.Object obj34 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long41 = dateTimeZone37.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(obj34, dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        int int44 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime42);
        long long48 = dateTimeZone31.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone31);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        long long55 = dateTimeZone51.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime56 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(5907399684280970662L, dateTimeZone51);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra(323);
        boolean boolean60 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0053-01-13T02:59:59.999+52:00" + "'", str28, "0053-01-13T02:59:59.999+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-187199987L) + "'", long41 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 32762L + "'", long48 == 32762L);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-187199990L) + "'", long55 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        java.util.Locale locale14 = dateTimeFormatter12.getLocale();
        java.util.Locale locale15 = dateTimeFormatter12.getLocale();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNull(locale15);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset(10L);
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj16, dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime24);
        long long30 = dateTimeZone13.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone13);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = locale33.getDisplayVariant();
        java.lang.String str36 = dateTimeZone13.getName((long) 2175, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(349260000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withPivotYear(14);
        java.lang.Integer int42 = dateTimeFormatter37.getPivotYear();
        java.lang.StringBuffer stringBuffer43 = null;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.withDayOfYear(100);
        int int49 = localDate46.size();
        org.joda.time.LocalDate localDate51 = localDate46.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays((int) '#');
        int int57 = dateTime54.getWeekyear();
        org.joda.time.DateMidnight dateMidnight58 = dateTime54.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property60 = dateTime54.property(dateTimeFieldType59);
        org.joda.time.LocalDate.Property property61 = localDate51.property(dateTimeFieldType59);
        org.joda.time.LocalDate localDate62 = property61.roundCeilingCopy();
        int int63 = localDate62.getDayOfYear();
        int int64 = localDate62.getEra();
        int int65 = localDate62.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter37.printTo(stringBuffer43, (org.joda.time.ReadablePartial) localDate62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-187199987L) + "'", long23 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32762L + "'", long30 == 32762L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 229 + "'", int63 == 229);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2922789 + "'", int65 == 2922789);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        java.lang.String str14 = chronology9.toString();
        org.joda.time.DurationField durationField15 = chronology9.seconds();
        org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay(chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.centuryOfEra();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField19 = chronology9.hourOfHalfday();
        boolean boolean20 = durationFieldType0.isSupported(chronology9);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+52:00]" + "'", str14, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField8 = property2.getDurationField();
        int int9 = property2.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property2.getField();
        org.joda.time.DateTimeField dateTimeField11 = property2.getField();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        java.lang.String str41 = property2.getAsText(locale38);
        java.lang.String str42 = locale38.getISO3Country();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "January" + "'", str41, "January");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(100);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.days();
        java.lang.String str11 = durationFieldType10.getName();
        org.joda.time.LocalDate localDate13 = localDate8.withFieldAdded(durationFieldType10, 32770);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.Interval interval19 = localDate18.toInterval();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.LocalDate localDate23 = localDate18.withFieldAdded(durationFieldType20, 32770);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        int int29 = dateTime26.getWeekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateTime26.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property32 = dateTime26.property(dateTimeFieldType31);
        boolean boolean33 = localDate18.isSupported(dateTimeFieldType31);
        boolean boolean34 = localDate8.isSupported(dateTimeFieldType31);
        boolean boolean35 = localDate3.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate.Property property36 = localDate3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        org.joda.time.LocalDate.Property property39 = localDate3.property(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        org.joda.time.MonthDay monthDay6 = property2.addToCopy((-1));
        int int7 = property2.get();
        int int8 = property2.get();
        org.joda.time.DateTimeField dateTimeField9 = property2.getField();
        org.joda.time.DateTimeField dateTimeField10 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DurationField durationField22 = chronology11.millis();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(chronology11);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology11.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(8640000, 366, 0, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(1644572109112L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.minusMonths(48998496);
        org.joda.time.MonthDay monthDay6 = monthDay1.minusMonths((-1970));
        org.joda.time.MonthDay monthDay8 = monthDay1.plusDays(0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--02-13" + "'", str2, "--02-13");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        int int20 = dateTime19.getWeekyear();
        boolean boolean21 = dateTime19.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime19.withMinuteOfHour(160);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 160 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2021 + "'", int20 == 2021);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField51 = monthDay49.getField((int) (byte) 0);
        java.util.Locale locale55 = new java.util.Locale("", "", "hi!");
        int int56 = dateTimeField51.getMaximumTextLength(locale55);
        long long59 = dateTimeField51.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay62 = monthDay60.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay60.minus(readablePeriod63);
        org.joda.time.MonthDay monthDay65 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay67 = monthDay65.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField69 = monthDay67.getField((int) (byte) 0);
        java.util.Locale locale73 = new java.util.Locale("", "", "hi!");
        int int74 = dateTimeField69.getMaximumTextLength(locale73);
        java.lang.String str75 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) monthDay60, locale73);
        int int76 = property45.getMaximumTextLength(locale73);
        java.lang.String str77 = monthDay38.toString("--02-11", locale73);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(locale73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = property5.setCopy("1970-04-10T03:59:59.999+52:00", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-04-10T03:59:59.999+52:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "3" + "'", str46, "3");
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 9L + "'", long59 == 9L);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Feb" + "'", str75, "Feb");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "--02-11" + "'", str77, "--02-11");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1644572590147,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=10,MILLISECOND=147,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        int int20 = monthDay16.indexOf(dateTimeFieldType19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay16.withPeriodAdded(readablePeriod21, (-1));
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) monthDay16, (int) '#', locale25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = monthDay16.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = monthDay16.getFieldTypes();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay29.minus(readablePeriod32);
        java.lang.String str34 = monthDay29.toString();
        org.joda.time.MonthDay.Property property35 = monthDay29.monthOfYear();
        int[] intArray36 = monthDay29.getValues();
        int int37 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay29);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "35" + "'", str26, "35");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "--02-13" + "'", str34, "--02-13");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2, 13]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        int int10 = property2.compareTo((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = property2.getAsText(locale11);
        int int13 = property2.getMaximumValueOverall();
        org.joda.time.DurationField durationField14 = property2.getDurationField();
        org.joda.time.MonthDay monthDay15 = property2.getMonthDay();
        java.util.Locale locale17 = new java.util.Locale("francese");
        java.lang.String str18 = property2.getAsShortText(locale17);
        org.joda.time.DurationField durationField19 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e00\u6708" + "'", str12, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertEquals(locale17.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Jan" + "'", str18, "Jan");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Locale locale6 = new java.util.Locale("hi!", "1969-12-31T23:59:59.999Z", "11");
        java.util.Locale.setDefault(locale6);
        java.util.Calendar.Builder builder8 = builder0.setLocale(locale6);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(0, 0, 32);
        java.util.Calendar.Builder builder14 = builder8.setLenient(true);
        java.util.Calendar.Builder builder16 = builder8.setLenient(false);
        java.util.Calendar.Builder builder21 = builder16.setTimeOfDay((-700535), 982, 302, 32770);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_1969-12-31T23:59:59.999Z_11");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        long long14 = dateTimeZone10.nextTransition(279072362L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 279072362L + "'", long14 == 279072362L);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        java.util.Locale locale18 = dateTimeFormatter16.getLocale();
        boolean boolean19 = dateTimeFormatter16.isParser();
        boolean boolean20 = dateTimeFormatter16.isPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime.Property property8 = dateTime6.weekOfWeekyear();
        boolean boolean9 = dateTime6.isEqualNow();
        org.joda.time.DateTime.Property property10 = dateTime6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) '#');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime13.plusWeeks(5);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfDay();
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfMinute();
        int int31 = property10.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-26971783) + "'", int31 == (-26971783));
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        int int12 = property10.getMaximumValueOverall();
        org.joda.time.DateTime dateTime13 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property10.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        int int16 = dateTimeField14.getMaximumValue((-62180539199983L));
        long long18 = dateTimeField14.roundHalfEven(5907399684280970418L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 24 + "'", int16 == 24);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5907399684282000000L + "'", long18 == 5907399684282000000L);
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property16 = dateTime2.dayOfWeek();
        org.joda.time.DateTime.Property property17 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime20.plusWeeks(5);
        org.joda.time.Chronology chronology33 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.lang.String str41 = dateTimeField37.getAsShortText(2021, locale39);
        java.lang.String str42 = locale39.getDisplayCountry();
        java.util.Calendar calendar43 = dateTime2.toCalendar(locale39);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2021" + "'", str41, "2021");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(97L);
        java.lang.String str26 = property23.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury(1);
        int int36 = property23.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.withWeekyear((int) 'u');
        boolean boolean39 = calendar1.before((java.lang.Object) dateTime38);
        long long40 = dateTime38.getMillis();
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.DateTime.Property property42 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime44 = dateTime38.withYearOfCentury(9);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime38.toMutableDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[hourOfDay]" + "'", str26, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-58474483200001L) + "'", long40 == (-58474483200001L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(14400004);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale17.getDisplayLanguage();
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) locale17);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone16, (-60526223999903L));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) '#');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = dateTime25.plusWeeks(5);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime37);
        int int39 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italian" + "'", str19, "Italian");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60526238399907L) + "'", long22 == (-60526238399907L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate4.withCenturyOfEra((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime12.withYearOfEra((int) ' ');
        int int18 = dateTime12.getYearOfCentury();
        org.joda.time.DateTime dateTime20 = dateTime12.withWeekOfWeekyear(9);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfMonth();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate localDate35 = property32.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate36 = property32.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        org.joda.time.LocalDate.Property property38 = localDate23.property(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        java.lang.String str40 = dateTimeFieldType37.getName();
        boolean boolean41 = dateTime20.isSupported(dateTimeFieldType37);
        boolean boolean42 = localDate7.isSupported(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "dayOfMonth" + "'", str40, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.set((int) (byte) 10, 51, 16804056);
        int int14 = calendar1.getMinimum((int) (byte) 0);
        boolean boolean15 = calendar1.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=10,MONTH=51,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=16804056,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=10,MILLISECOND=466,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusWeeks(17);
        org.joda.time.DateTime.Property property11 = dateTime2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        int int21 = property11.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.plus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property29 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime31 = property29.setCopy(8);
        org.joda.time.DateTime dateTime32 = property29.roundCeilingCopy();
        boolean boolean33 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays((int) '#');
        int int39 = dateTime36.getWeekyear();
        org.joda.time.DateMidnight dateMidnight40 = dateTime36.toDateMidnight();
        org.joda.time.DateTime.Property property41 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime42 = property41.withMaximumValue();
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        int int46 = property41.getMaximumTextLength(locale43);
        java.lang.String str47 = property41.getName();
        org.joda.time.DateTime dateTime48 = property41.withMinimumValue();
        int int49 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "yearOfEra" + "'", str47, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.DateTime dateTime23 = dateTime20.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(0);
        int int27 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        java.lang.String str41 = chronology36.toString();
        boolean boolean42 = dateTime20.equals((java.lang.Object) str41);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar44 = dateTime20.toCalendar(locale43);
        java.lang.String str45 = locale43.getLanguage();
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField50 = monthDay48.getField((int) (byte) 0);
        java.util.Locale locale54 = new java.util.Locale("", "", "hi!");
        int int55 = dateTimeField50.getMaximumTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = dateTimeField50.getAsShortText((long) 10, locale57);
        java.lang.String str60 = locale57.getDisplayLanguage();
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale43.getDisplayCountry(locale57);
        int int63 = dateTimeField15.getMaximumTextLength(locale43);
        java.lang.String str64 = dateTimeField15.getName();
        boolean boolean65 = dateTimeField15.isSupported();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 239 + "'", int27 == 239);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+52:00]" + "'", str41, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ja" + "'", str45, "ja");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "janv." + "'", str59, "janv.");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fran\347ais" + "'", str60, "fran\347ais");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "year" + "'", str64, "year");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        boolean boolean9 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withDefaultYear(4);
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withPivotYear((-46800000));
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale6.getDisplayScript(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(1970);
        boolean boolean13 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((-292275054));
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long24 = dateTimeZone20.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj17, dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.lang.String str28 = dateTimeZone20.getShortName((long) 12);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.now(dateTimeZone20);
        int int31 = dateTimeZone20.getOffsetFromLocal(365L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        long long34 = dateTimeZone20.nextTransition(5907399684280970341L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter14.withZone(dateTimeZone20);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "it" + "'", str8, "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-187199987L) + "'", long24 == (-187199987L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:00" + "'", str28, "+52:00");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5907399684280970341L + "'", long34 == 5907399684280970341L);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology13);
        boolean boolean15 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField17 = chronology13.minutes();
        org.joda.time.DurationField durationField18 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekyear();
        org.joda.time.DurationField durationField20 = dateTimeField19.getLeapDurationField();
        java.lang.String str21 = dateTimeField19.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyear" + "'", str21, "weekyear");
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(2592L);
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology31 = dateTime10.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfDay();
        int int35 = dateTimeField33.get((long) 49021102);
        int int37 = dateTimeField33.getMaximumValue(392347396800000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+52:00]" + "'", str32, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 63421 + "'", int35 == 63421);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 86399 + "'", int37 == 86399);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.MonthDay.Property property8 = monthDay5.dayOfMonth();
        org.joda.time.MonthDay monthDay10 = monthDay5.plusMonths(2922789);
        org.joda.time.MonthDay monthDay12 = monthDay5.minusDays(22);
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays(46);
        org.joda.time.MonthDay monthDay16 = monthDay14.plusMonths(2035);
        org.joda.time.MonthDay monthDay18 = monthDay14.plusDays(95307);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        java.lang.String str21 = monthDay20.toString();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "--01-20" + "'", str21, "--01-20");
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTime dateTime30 = localDate7.toDateTime(localTime29);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfMonth(8);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        java.lang.String str35 = dateTime32.toString("--01-04");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime32.withYearOfCentury(323);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 323 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "--01-04" + "'", str35, "--01-04");
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMinuteOfHour(31);
        org.joda.time.DateTime dateTime9 = dateTime5.plusHours(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTime dateTime12 = monthDay2.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = monthDay2.toString("2 Apr 2104 08:59:50 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-03T13:59:59.999+52:00" + "'", str11, "1970-01-03T13:59:59.999+52:00");
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        long long16 = dateTimeField13.addWrapField(5097600339L, 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5097600339L + "'", long16 == 5097600339L);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(100);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        java.lang.String str10 = durationFieldType9.getName();
        org.joda.time.LocalDate localDate12 = localDate7.withFieldAdded(durationFieldType9, 32770);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(83968099800000L, chronology22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) '#');
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = dateTime35.plusWeeks(5);
        int int48 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate51 = localDate49.plusYears(2022);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType9.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(49034491, (-50), 71, chronology52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -50 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "days" + "'", str10, "days");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 187200000 + "'", int48 == 187200000);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter11.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 10);
        int int16 = dateTimeFormatter15.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter15.getZone();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category22, locale24);
        java.lang.String str26 = monthDay20.toString("35", locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter15.withLocale(locale24);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 4, dateTimeZone31);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = dateTimeZone31.getShortName((long) 0, locale34);
        java.lang.String str36 = locale34.getDisplayLanguage();
        java.lang.String str37 = locale24.getDisplayLanguage(locale34);
        java.lang.String str38 = dateTimeField7.getAsText((-292275055), locale24);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNull(dateTimeParser13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2000 + "'", int16 == 2000);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "35" + "'", str26, "35");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+52:00" + "'", str35, "+52:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Italian" + "'", str36, "Italian");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-292275055" + "'", str38, "-292275055");
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        int int17 = dateTimeField16.getMaximumValue();
        java.util.Locale locale19 = new java.util.Locale("DateTimeField[year]");
        int int20 = dateTimeField16.getMaximumTextLength(locale19);
        java.lang.Object obj21 = locale19.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 99 + "'", int17 == 99);
        org.junit.Assert.assertEquals(locale19.toString(), "datetimefield[year]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "datetimefield[year]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "datetimefield[year]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "datetimefield[year]");
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 4, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        int int13 = property11.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime23 = dateTime18.withYearOfEra((int) ' ');
        int int24 = dateTime18.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime18.withDurationAdded(readableDuration25, (int) (byte) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours(229);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        boolean boolean32 = property11.equals((java.lang.Object) chronology31);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localDate2.compareTo(readablePartial7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime10 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property5.addToCopy((long) 2730);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property5.setCopy(1051);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1051 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = dateTime10.toString("--02-01", locale12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime10.getZone();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.plus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis(211);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--02-01" + "'", str13, "--02-01");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        int int15 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property13.addWrapFieldToCopy(10);
        boolean boolean19 = dateTime17.isAfter(83968099800000L);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime17.minuteOfDay();
        int int22 = dateTime17.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.minus(readablePeriod23);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.LocalDate localDate25 = property23.roundFloorCopy();
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfWeek();
        org.joda.time.LocalDate localDate28 = localDate25.plusYears(20);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        int int30 = localDate28.getDayOfYear();
        org.joda.time.LocalDate localDate32 = localDate28.plusWeeks(0);
        int int33 = localDate32.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime32 = dateTime10.withMillisOfSecond(12);
        java.util.Date date33 = dateTime10.toDate();
        long long34 = date33.getTime();
        java.lang.String str35 = date33.toGMTString();
        int int36 = date33.getSeconds();
        java.util.Date date37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = date33.after(date37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str35, "31 Dec 1969 23:59:59 GMT");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        int int41 = property5.getLeapAmount();
        int int42 = property5.get();
        org.joda.time.DateTime dateTime44 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths(29);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (byte) -1);
        org.joda.time.DateTime.Property property50 = dateTime49.secondOfDay();
        org.joda.time.DateTime dateTime51 = property50.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572591074,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=11,MILLISECOND=74,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale1);
        calendar5.set(2023, 1162, 1969, 39, 38, 14399967);
        calendar5.set(10799999, 27, 758, 339, 816, 14399954);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572591120,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=11,MILLISECOND=120,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=10799999,MONTH=27,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=758,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=339,MINUTE=816,SECOND=14399954,MILLISECOND=120,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setTime(1L);
        date3.setHours(32770);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime20.minusMinutes(52);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        long long38 = dateTimeZone34.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime39 = dateTime20.withZone(dateTimeZone34);
        int int40 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime20);
        java.util.Date date41 = dateTime16.toDate();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime46.hourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime46.minusDays((int) 'u');
        int int52 = dateTime46.getYearOfEra();
        org.joda.time.DateTime dateTime54 = dateTime46.plusMillis(4);
        java.util.Date date55 = dateTime46.toDate();
        java.lang.String str56 = date55.toGMTString();
        int int57 = date55.getMinutes();
        boolean boolean58 = date41.before(date55);
        boolean boolean59 = date3.after(date41);
        int int60 = date41.getSeconds();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Sep 27 10:00:00 UTC 1973");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187199990L) + "'", long38 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2 Jan 52 23:59:59 GMT" + "'", str56, "2 Jan 52 23:59:59 GMT");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter48.getParser();
        boolean boolean51 = dateTimeFormatter48.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withDefaultYear(14402021);
        java.lang.Integer int54 = dateTimeFormatter48.getPivotYear();
        java.lang.Appendable appendable55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(100);
        int int61 = localDate58.size();
        org.joda.time.LocalDate localDate63 = localDate58.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusDays((int) '#');
        int int69 = dateTime66.getWeekyear();
        org.joda.time.DateMidnight dateMidnight70 = dateTime66.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property72 = dateTime66.property(dateTimeFieldType71);
        org.joda.time.LocalDate.Property property73 = localDate63.property(dateTimeFieldType71);
        java.lang.String str74 = localDate63.toString();
        org.joda.time.LocalDate localDate76 = localDate63.minusYears(4);
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusDays((int) '#');
        int int83 = dateTime80.getWeekyear();
        org.joda.time.DateTime dateTime85 = dateTime80.minusMillis((int) (short) 0);
        int int86 = dateTime85.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone88);
        org.joda.time.DateTime dateTime91 = dateTime89.minusDays((int) '#');
        int int92 = dateTime89.getWeekyear();
        org.joda.time.DateTime dateTime94 = dateTime89.minusMillis((int) (short) 0);
        boolean boolean95 = dateTime85.isAfter((org.joda.time.ReadableInstant) dateTime94);
        long long96 = property77.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.LocalDate localDate97 = property77.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter48.printTo(appendable55, (org.joda.time.ReadablePartial) localDate97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572591166,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=11,MILLISECOND=166,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeParser50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-08-13" + "'", str74, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1970 + "'", int86 == 1970);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1970 + "'", int92 == 1970);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 17756L + "'", long96 == 17756L);
        org.junit.Assert.assertNotNull(localDate97);
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(32769);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.LocalDate localDate10 = localDate2.withFieldAdded(durationFieldType7, 39659999);
        org.joda.time.LocalDate localDate12 = localDate10.withYear(29);
        org.joda.time.LocalDate localDate14 = localDate10.plusWeeks(2730);
        org.joda.time.LocalDate localDate16 = localDate10.withCenturyOfEra(19005);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.days();
        java.lang.String str24 = durationFieldType23.getName();
        org.joda.time.LocalDate localDate26 = localDate21.withFieldAdded(durationFieldType23, 32770);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        int int32 = dateTime29.getWeekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateTime29.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property35 = dateTime29.property(dateTimeFieldType34);
        boolean boolean36 = localDate21.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType34.getDurationType();
        java.lang.String str38 = durationFieldType37.toString();
        boolean boolean39 = localDate10.isSupported(durationFieldType37);
        org.joda.time.LocalDate localDate41 = localDate10.plusYears((-50659));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "days" + "'", str24, "days");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eras" + "'", str38, "eras");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfWeek();
        boolean boolean18 = dateTimeField17.isSupported();
        long long21 = dateTimeField17.add((long) 17, (long) (byte) 10);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(0L);
        java.lang.String str24 = monthDay23.toString();
        org.joda.time.Chronology chronology25 = monthDay23.getChronology();
        org.joda.time.Chronology chronology26 = monthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = dateTimeField27.getAsShortText(365L, locale29);
        java.lang.String str31 = locale29.getVariant();
        java.util.Locale locale32 = locale29.stripExtensions();
        int int33 = dateTimeField17.getMaximumTextLength(locale29);
        java.util.Calendar.Builder builder34 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder36 = builder34.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime41.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime41.minusDays((int) 'u');
        int int47 = dateTime41.getYearOfEra();
        org.joda.time.DateTime dateTime49 = dateTime41.plusMillis(4);
        java.util.Date date50 = dateTime41.toDate();
        java.util.Calendar.Builder builder51 = builder36.setInstant(date50);
        java.util.Calendar calendar52 = builder36.build();
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = locale54.getDisplayScript(locale55);
        java.lang.String str58 = locale53.getDisplayCountry(locale54);
        java.lang.String str59 = locale54.getDisplayLanguage();
        java.util.Calendar.Builder builder60 = builder36.setLocale(locale54);
        java.lang.String str61 = locale54.getDisplayName();
        java.lang.String str62 = locale29.getDisplayScript(locale54);
        java.lang.String str63 = locale54.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) str63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Italy\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 864000017L + "'", long21 == 864000017L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "--01-03" + "'", str24, "--01-03");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Cina" + "'", str58, "Cina");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Italian" + "'", str59, "Italian");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italian (Italy)" + "'", str61, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Italy" + "'", str63, "Italy");
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.minusWeeks(8);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property48 = dateTime44.yearOfCentury();
        org.joda.time.DateTime.Property property49 = dateTime44.weekyear();
        boolean boolean50 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime.Property property52 = dateTime51.weekOfWeekyear();
        org.joda.time.DateTime.Property property53 = dateTime51.millisOfSecond();
        int int54 = property53.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = property53.setCopy("2 Apr 2104 08:59:25 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2 Apr 2104 08:59:25 GMT\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) ' ');
        org.joda.time.LocalDate localDate15 = localDate13.withYear((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.minusMinutes(52);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        long long37 = dateTimeZone33.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime38 = dateTime19.withZone(dateTimeZone33);
        org.joda.time.DateTime.Property property39 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime19.minusMinutes(18);
        org.joda.time.DateTime dateTime44 = dateTime19.withDurationAdded(10L, 45);
        boolean boolean45 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime19);
        long long46 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime19.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-187199990L) + "'", long37 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(9);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = locale13.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withLocale(locale13);
        boolean boolean16 = dateTimeFormatter15.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English" + "'", str14, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder10 = builder7.set(12, 2022);
        java.util.Calendar.Builder builder13 = builder7.set(11, (-1));
        java.util.Calendar.Builder builder18 = builder7.setTimeOfDay(34, 15600069, 2039, 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        long long23 = dateTimeZone19.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = localDate6.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate27 = localDate6.minusWeeks(49088531);
        org.joda.time.LocalDate.Property property28 = localDate27.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62180539199983L) + "'", long23 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfMonth();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate23.toDateTime(localTime28);
        boolean boolean30 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        org.joda.time.Chronology chronology46 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyear();
        org.joda.time.DateTime dateTime48 = dateTime20.toDateTime(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime20.withPeriodAdded(readablePeriod49, 0);
        org.joda.time.DateTime dateTime53 = dateTime20.plusHours(32769);
        org.joda.time.DateTime dateTime54 = dateTime20.toDateTimeISO();
        boolean boolean55 = dateTime54.isEqualNow();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.minus(readableDuration57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = dateTime58.withWeekOfWeekyear(223);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 223 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        boolean boolean9 = dateTimeFormatter2.isPrinter();
        int int10 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(83968099800000L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(100);
        org.joda.time.Interval interval37 = localDate36.toInterval();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        java.lang.String str39 = durationFieldType38.getName();
        org.joda.time.LocalDate localDate41 = localDate36.withFieldAdded(durationFieldType38, 32770);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) '#');
        int int47 = dateTime44.getWeekyear();
        org.joda.time.DateMidnight dateMidnight48 = dateTime44.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property50 = dateTime44.property(dateTimeFieldType49);
        boolean boolean51 = localDate36.isSupported(dateTimeFieldType49);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(100);
        org.joda.time.LocalDate.Property property57 = localDate54.dayOfMonth();
        org.joda.time.LocalDate localDate58 = property57.getLocalDate();
        org.joda.time.LocalDate localDate60 = property57.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate61 = property57.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property57.getFieldType();
        boolean boolean63 = localDate36.equals((java.lang.Object) property57);
        java.lang.String str64 = property57.getAsText();
        java.util.Locale locale68 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str69 = property57.getAsText(locale68);
        java.lang.String str70 = dateTimeZone29.getName((long) 59, locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter2.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter2.withPivotYear(8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = dateTimeFormatter2.print(1644572407887L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "days" + "'", str39, "days");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "13" + "'", str64, "13");
        org.junit.Assert.assertEquals(locale68.toString(), "fra_--01-01_monthOfYear");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "13" + "'", str69, "13");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+52:00" + "'", str70, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withPeriodAdded(readablePeriod10, 41);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean14 = dateTime12.isSupported(dateTimeFieldType13);
        java.lang.String str15 = dateTimeFieldType13.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfHalfday" + "'", str15, "clockhourOfHalfday");
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        java.util.Date date6 = new java.util.Date(2111, 29, 29, 100, (-17269665), (-17269665));
        int int7 = date6.getDay();
        date6.setSeconds((-52));
        org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 14 11:06:08 UTC 3980");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset(10L);
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj16, dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime24);
        long long30 = dateTimeZone13.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone13);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = locale33.getDisplayVariant();
        java.lang.String str36 = dateTimeZone13.getName((long) 2175, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(349260000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withPivotYear(14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withPivotYear(6);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology57 = chronology53.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.weekyearOfCentury();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(83968099800000L, chronology53);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDate59.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate59.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime66 = dateTime64.minusYears((int) (short) 10);
        org.joda.time.DateTime.Property property67 = dateTime64.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime64.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int71 = dateTimeFormatter43.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime68, "Feb 11, 2022 9:41:53 AM", 34610760);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-187199987L) + "'", long23 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32762L + "'", long30 == 32762L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100, 143999, 582, 50, 54, 49323762, 187);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.now(chronology4);
        java.lang.String str7 = monthDay6.toString();
        org.joda.time.MonthDay.Property property8 = monthDay6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = monthDay6.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--02-11" + "'", str7, "--02-11");
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(obj0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        java.lang.String str4 = localDate2.toString();
        int int5 = localDate2.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localDate2.getField(49073203);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49073203");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-13" + "'", str4, "2022-02-13");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfCentury(1);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        int int10 = mutableDateTime9.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 14399 + "'", int10 == 14399);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(52, 52, 292278994);
        java.util.Calendar.Builder builder11 = builder2.setTimeOfDay(15600070, 758, 14399999, 22);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay((java.lang.Object) dateTime16, chronology25);
        java.lang.String str32 = monthDay30.toString("35");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay30.withPeriodAdded(readablePeriod33, 0);
        int[] intArray36 = monthDay30.getValues();
        java.util.Calendar.Builder builder37 = builder11.setFields(intArray36);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "35" + "'", str32, "35");
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[11, 29]");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        java.util.Date date5 = new java.util.Date(7, 11, (int) (byte) -1, 0, 2022);
        java.lang.String str6 = date5.toLocaleString();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromDateFields(date5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromDateFields(date5);
        int int9 = date5.getTimezoneOffset();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 30 09:42:00 UTC 1907");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "30 nov. 1907 09:42:00" + "'", str6, "30 nov. 1907 09:42:00");
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(49047731);
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter23.getParser();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeParser26);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getDisplayVariant();
        java.lang.String str24 = dateTimeZone1.getName((long) 2175, locale21);
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale21.getDisplayCountry(locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-187199987L) + "'", long11 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32762L + "'", long18 == 32762L);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        org.joda.time.DateTime dateTime25 = localDate24.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis(1555156498053302000L);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.plus(readableDuration28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        int int19 = calendar1.getGreatestMinimum(3);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        calendar21.setLenient(true);
        calendar21.setMinimalDaysInFirstWeek(1970);
        int int27 = calendar21.getGreatestMinimum(10);
        java.time.Instant instant28 = calendar21.toInstant();
        calendar21.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime33.toMutableDateTime(dateTimeZone37);
        java.util.TimeZone timeZone39 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        calendar21.setTimeZone(timeZone39);
        calendar1.setTimeZone(timeZone39);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 4, dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = dateTimeZone47.getShortName((long) 0, locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone39, locale50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = calendar53.isSet((-700535));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644572591771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=11,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+52:00" + "'", str51, "+52:00");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644572591771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=11,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean13 = localDate8.equals((java.lang.Object) dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-187199987L) + "'", long6 == (-187199987L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        int int38 = dateTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime41.plusWeeks(5);
        org.joda.time.Chronology chronology54 = dateTime41.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.DateTime dateTime56 = dateTime37.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology54.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 43199999 + "'", int38 == 43199999);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(32769);
        int int7 = localDate6.size();
        int int8 = localDate6.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        boolean boolean11 = localDate6.isSupported(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = localDate6.getField(1965);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1965");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30748 + "'", int8 == 30748);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTime dateTime30 = localDate7.toDateTime(localTime29);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfMonth(8);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMonths(53);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime35.withDate(36, 10, 49021102);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49021102 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        org.joda.time.DateTime.Property property22 = dateTime20.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology36 = chronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyearOfCentury();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(83968099800000L, chronology32);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate38.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime43.minusYears((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime45.toYearMonthDay();
        long long48 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime49 = property22.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField50 = property22.getField();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 315532800L + "'", long48 == 315532800L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        int int11 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.minusDays((int) 'u');
        long long23 = dateTime17.getMillis();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.Interval interval29 = localDate28.toInterval();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        java.lang.String str31 = durationFieldType30.getName();
        org.joda.time.LocalDate localDate33 = localDate28.withFieldAdded(durationFieldType30, 32770);
        org.joda.time.DateTime dateTime35 = dateTime17.withFieldAdded(durationFieldType30, 3);
        org.joda.time.DateTime dateTime37 = dateTime10.withFieldAdded(durationFieldType30, (int) (short) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter40.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) '#');
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime44.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = dateTime44.plusWeeks(5);
        org.joda.time.Chronology chronology57 = dateTime44.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter40.withChronology(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = dateTime10.toString(dateTimeFormatter40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14400 + "'", int11 == 14400);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60526224000001L) + "'", long23 == (-60526224000001L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "days" + "'", str31, "days");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.clear();
        int int9 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.set(63421, 4085230, 349260000, 796387, (int) '#', (-16812840));
        calendar1.setLenient(true);
        boolean boolean19 = calendar1.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=63421,MONTH=4085230,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=349260000,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=796387,MINUTE=35,SECOND=-16812840,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        int int14 = dateTimeField12.getMinimumValue(0L);
        long long16 = dateTimeField12.roundFloor(1273616701036000L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62135784000000L) + "'", long16 == (-62135784000000L));
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = property22.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDate25.getFields();
        int int27 = localDate25.getDayOfWeek();
        org.joda.time.LocalDate localDate29 = localDate25.withWeekyear(1);
        org.joda.time.DateTime dateTime30 = dateTime14.withFields((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTime dateTime32 = dateTime14.withWeekyear(14399967);
        org.joda.time.DateTime dateTime34 = dateTime14.plusSeconds(816);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime39.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property45 = dateTime39.secondOfMinute();
        int int46 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.setLenient(true);
        int int12 = calendar1.getWeekYear();
        java.lang.Object obj13 = null;
        boolean boolean14 = calendar1.before(obj13);
        boolean boolean16 = calendar1.before((java.lang.Object) "11 f\351vr. 2022 09:35:17");
        calendar1.set(48967, 86399998, 15, 49356940, 358);
        calendar1.setTimeInMillis(5907399684280970188L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=5907399684280970188,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=187200013,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=42,SECOND=50,MILLISECOND=188,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology10.add(readablePeriod15, 18L, 23786);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology10.getDateTimeMillis(37868343609600000L, 68340, 49227, 3659, 815);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 18L + "'", long18 == 18L);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(97L);
        java.lang.String str26 = property23.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury(1);
        int int36 = property23.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.withWeekyear((int) 'u');
        boolean boolean39 = calendar1.before((java.lang.Object) dateTime38);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay43 = monthDay41.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay41.minus(readablePeriod44);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        java.lang.String str47 = property46.toString();
        boolean boolean48 = calendar1.after((java.lang.Object) property46);
        calendar1.clear();
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property54 = monthDay53.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.DurationField durationField56 = property54.getRangeDurationField();
        org.joda.time.MonthDay monthDay57 = property54.getMonthDay();
        java.util.Locale locale61 = new java.util.Locale("Nov", "ja", "2 Apr 2104 08:59:23 GMT");
        java.lang.String str62 = property54.getAsShortText(locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap63 = calendar1.getDisplayNames(49073203, 187200000, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[hourOfDay]" + "'", str26, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[dayOfMonth]" + "'", str47, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertEquals(locale61.toString(), "nov_JA_2 Apr 2104 08:59:23 GMT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Jan" + "'", str62, "Jan");
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(349260000);
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        int int18 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMillis((int) (short) 0);
        int int21 = dateTime20.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMillis((int) (short) 0);
        boolean boolean30 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime29.getMillisOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.plusMinutes(100);
        org.joda.time.DateTime dateTime35 = dateTime33.withCenturyOfEra(45);
        org.joda.time.DateTime dateTime36 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime33.withMonthOfYear(14591999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14591999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 28 + "'", int12 == 28);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 14399999 + "'", int31 == 14399999);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(0);
        java.util.Locale locale8 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(26);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = new java.util.Locale("years", "italien", "Cina");
        java.util.Locale.setDefault(category13, locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter10.withLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("0052-01-03T03:59:59.999+52:00", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale17.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property16 = monthDay15.monthOfYear();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        int int24 = property16.compareTo((org.joda.time.ReadableInstant) dateTime22);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = property16.getAsText(locale25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = property33.addToCopy(97L);
        java.lang.String str36 = property33.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime41.withYearOfCentury(1);
        int int46 = property33.compareTo((org.joda.time.ReadableInstant) dateTime41);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        java.lang.String str49 = locale47.getCountry();
        java.lang.String str50 = locale47.getDisplayScript();
        boolean boolean51 = locale47.hasExtensions();
        int int52 = property33.getMaximumTextLength(locale47);
        org.joda.time.MonthDay monthDay53 = property16.setCopy("2", locale47);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = property16.getAsShortText(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTime9.toString("2 Apr 2104 08:59:37 GMT", locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e00\u6708" + "'", str26, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[hourOfDay]" + "'", str36, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572592100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc6d4" + "'", str55, "\uc6d4");
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime4.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = dateTimeField13.getAsText(readablePartial14, 35, locale16);
        int int18 = dateTimeField13.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology36 = chronology32.withZone(dateTimeZone35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay((java.lang.Object) dateTime23, chronology32);
        java.lang.String str39 = monthDay37.toString("35");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay37.withPeriodAdded(readablePeriod40, 0);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusMonths(32770);
        java.util.Locale locale48 = new java.util.Locale("de-DE", "30 Nov 3874 00:00:00 GMT");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) monthDay44, 28, locale48);
        java.lang.String str51 = locale48.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = locale48.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 30 NOV 3874 00:00:00 GMT");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "35" + "'", str17, "35");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "35" + "'", str39, "35");
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertEquals(locale48.toString(), "de-de_30 NOV 3874 00:00:00 GMT");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "28" + "'", str50, "28");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.now(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfDay();
        org.joda.time.MonthDay monthDay50 = monthDay32.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeField dateTimeField51 = chronology41.millisOfSecond();
        long long53 = dateTimeField51.roundCeiling((long) 1051);
        int int55 = dateTimeField51.get(5907399684280970035L);
        boolean boolean57 = dateTimeField51.isLeap(0L);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1051L + "'", long53 == 1051L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(1644572109112L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = monthDay15.getFieldTypes();
        int[] intArray17 = null;
        int int18 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) monthDay15, intArray17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay15.plus(readablePeriod19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = monthDay20.toString("11 f\351vr. 2022 09:42:04");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("11 mai 2008 00:10:00");
        java.lang.String str2 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMillis((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.minus((long) 14340);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime14.plusWeeks(5);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusHours(48949);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.Interval interval35 = localDate34.toInterval();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.days();
        java.lang.String str37 = durationFieldType36.getName();
        org.joda.time.LocalDate localDate39 = localDate34.withFieldAdded(durationFieldType36, 32770);
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfCentury();
        java.lang.String str41 = property40.getAsText();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.plus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime45.plusMillis(2022);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays((int) '#');
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localDate58.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime53.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = dateTime53.plusWeeks(5);
        org.joda.time.Chronology chronology66 = dateTime53.getChronology();
        org.joda.time.Chronology chronology67 = dateTime53.getChronology();
        org.joda.time.DateTime dateTime68 = dateTime50.withChronology(chronology67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(5907399684280970662L, chronology67);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology67);
        int int71 = dateTime70.getYearOfCentury();
        long long72 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateMidnight dateMidnight73 = dateTime70.toDateMidnight();
        int int74 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime76 = dateTime29.withYear((-5039));
        org.joda.time.DateTime dateTime78 = dateTime76.plusMinutes(3659999);
        boolean boolean79 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "days" + "'", str37, "days");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "11" + "'", str41, "11");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 89L + "'", long72 == 89L);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        java.util.Locale locale18 = dateTimeFormatter16.getLocale();
        boolean boolean19 = dateTimeFormatter16.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        java.lang.String str29 = property28.getAsShortText();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        long long42 = dateTimeField34.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay45 = monthDay43.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay43.minus(readablePeriod46);
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay50 = monthDay48.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField52 = monthDay50.getField((int) (byte) 0);
        java.util.Locale locale56 = new java.util.Locale("", "", "hi!");
        int int57 = dateTimeField52.getMaximumTextLength(locale56);
        java.lang.String str58 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) monthDay43, locale56);
        int int59 = property28.getMaximumTextLength(locale56);
        org.joda.time.DateTimeField dateTimeField60 = property28.getField();
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        int int63 = property28.getMaximumTextLength(locale61);
        int int64 = property28.getLeapAmount();
        int int65 = property28.get();
        org.joda.time.DateTime dateTime66 = property28.getDateTime();
        org.joda.time.DateTime dateTime68 = dateTime66.withWeekOfWeekyear((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = dateTimeFormatter22.print((org.joda.time.ReadableInstant) dateTime66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3" + "'", str29, "3");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 9L + "'", long42 == 9L);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Feb" + "'", str58, "Feb");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644572592283,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=283,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        java.lang.String str4 = monthDay0.toString("23");
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology14.millis();
        org.joda.time.MonthDay monthDay22 = monthDay0.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay24 = monthDay22.plusDays(45);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withField(dateTimeFieldType25, 1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.withPeriodAdded(readablePeriod28, 7);
        org.joda.time.Chronology chronology31 = monthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.centuryOfEra();
        int int34 = dateTimeField32.getMinimumValue((long) 9);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23" + "'", str4, "23");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths(52);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        int int15 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean17 = localDate11.isSupported(durationFieldType16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        int int23 = localDate20.size();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        int int31 = dateTime28.getWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property34 = dateTime28.property(dateTimeFieldType33);
        org.joda.time.LocalDate.Property property35 = localDate25.property(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39);
        int int41 = property35.compareTo((org.joda.time.ReadableInstant) dateTime40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(100);
        int int47 = localDate44.size();
        org.joda.time.LocalDate localDate49 = localDate44.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays((int) '#');
        int int55 = dateTime52.getWeekyear();
        org.joda.time.DateMidnight dateMidnight56 = dateTime52.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property58 = dateTime52.property(dateTimeFieldType57);
        org.joda.time.LocalDate.Property property59 = localDate49.property(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType57.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property66 = dateTime65.hourOfDay();
        org.joda.time.DateTime dateTime68 = dateTime65.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology73 = chronology69.withZone(dateTimeZone72);
        java.lang.String str74 = chronology69.toString();
        org.joda.time.DurationField durationField75 = chronology69.seconds();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.yearOfCentury();
        boolean boolean77 = dateTimeFieldType57.isSupported(chronology69);
        org.joda.time.DateTime.Property property78 = dateTime40.property(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType57.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone81);
        org.joda.time.DateTime dateTime84 = dateTime82.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property85 = dateTime84.hourOfDay();
        org.joda.time.DateTime dateTime87 = dateTime84.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology88 = dateTime87.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.weekyear();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType57.getField(chronology88);
        boolean boolean92 = localDate11.isSupported(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ISOChronology[+52:00]" + "'", str74, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNull(durationFieldType79);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone3);
        long long12 = dateTimeZone3.nextTransition((long) 'u');
        long long15 = dateTimeZone3.adjustOffset((-189L), false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 117L + "'", long12 == 117L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-189L) + "'", long15 == (-189L));
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime2.getDayOfYear();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime2.isAfter(readableInstant9);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        java.lang.Object obj30 = null;
        boolean boolean31 = monthDay13.equals(obj30);
        org.joda.time.MonthDay monthDay33 = monthDay13.withMonthOfYear((int) (byte) 10);
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays(229);
        org.joda.time.MonthDay monthDay37 = monthDay33.minusMonths(580);
        org.joda.time.MonthDay monthDay39 = monthDay37.withDayOfMonth(3);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        long long7 = dateTimeField5.roundHalfFloor((long) 796387);
        int int9 = dateTimeField5.getMaximumValue(7257600000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 780000L + "'", long7 == 780000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1439 + "'", int9 == 1439);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (-1970));
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.plus(readablePeriod2);
        org.joda.time.MonthDay.Property property4 = monthDay3.monthOfYear();
        java.lang.String str5 = property4.getName();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.weekyear();
        org.joda.time.LocalDate.Property property12 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.plus(readablePeriod14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate20.minus(readablePeriod21);
        int int23 = localDate22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight25 = localDate22.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int27 = localDate22.get(dateTimeFieldType26);
        boolean boolean28 = localDate13.isSupported(dateTimeFieldType26);
        java.lang.String str29 = dateTimeFieldType26.getName();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType26.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 44 + "'", int27 == 44);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfYear" + "'", str29, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType30);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate9.toDateTime(readableInstant11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime12.withLaterOffsetAtOverlap();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        int int29 = dateTime26.getWeekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateTime26.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property32 = dateTime26.property(dateTimeFieldType31);
        org.joda.time.LocalDate.Property property33 = localDate23.property(dateTimeFieldType31);
        java.lang.String str34 = localDate23.toString();
        org.joda.time.LocalDate localDate36 = localDate23.minusYears(4);
        org.joda.time.LocalDate localDate38 = localDate36.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime(dateTimeZone48);
        java.lang.Object obj52 = null;
        boolean boolean53 = dateTimeZone48.equals(obj52);
        int int55 = dateTimeZone48.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate56.withPeriodAdded(readablePeriod57, (int) (byte) 0);
        org.joda.time.LocalDate.Property property60 = localDate56.year();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 4, dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate56.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        java.lang.Object obj67 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long74 = dateTimeZone70.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(obj67, dateTimeZone70);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime65.toMutableDateTime(dateTimeZone70);
        int int78 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateMidnight dateMidnight79 = localDate38.toDateMidnight(dateTimeZone48);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((long) 1970, dateTimeZone48);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateTime12, dateTimeZone48);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone48);
        long long84 = dateTimeZone48.previousTransition(3729687599L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4480738992669L + "'", long13 == 4480738992669L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-08-13" + "'", str34, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 187200000 + "'", int55 == 187200000);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-187199987L) + "'", long74 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 187200000 + "'", int78 == 187200000);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 3729687599L + "'", long84 == 3729687599L);
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay4 = monthDay2.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField6 = monthDay4.getField((int) (byte) 0);
        java.lang.String str7 = dateTimeField6.getName();
        org.joda.time.DurationField durationField8 = dateTimeField6.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        java.lang.String str51 = dateTimeField6.getAsText((long) 349260000, locale48);
        java.lang.String str52 = locale1.getDisplayLanguage(locale48);
        java.lang.String str53 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572592728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "janvier" + "'", str51, "janvier");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.withYearOfEra((int) ' ');
        int int29 = dateTime23.getYearOfCentury();
        int int30 = dateTime23.getMonthOfYear();
        int int31 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime34.toYearMonthDay();
        org.joda.time.DateTime dateTime41 = dateTime34.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime34.plus(7092L);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime34.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime23.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate7.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime47.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 52);
        org.joda.time.LocalDate localDate32 = localDate27.plusWeeks(0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) ' ');
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(chronology11);
        int int13 = dateTime12.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfDay(49063059);
        boolean boolean17 = dateTime12.isAfter((-60526224046001L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--01-03" + "'", str10, "--01-03");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = dateTime2.toString();
        int int15 = dateTime2.getDayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime2.secondOfMinute();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int19 = property16.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str14, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        org.joda.time.LocalDate localDate11 = localDate7.plusMonths(52);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        int int15 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property16 = localDate14.dayOfYear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury((int) '#');
        int int22 = localDate21.getDayOfMonth();
        int[] intArray23 = localDate21.getValues();
        int[] intArray24 = localDate21.getValues();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate21.minus(readablePeriod25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(1251546784156810000L);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(9);
        org.joda.time.DateTime dateTime31 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDate localDate33 = localDate21.minusMonths((int) (byte) 0);
        int int34 = localDate14.compareTo((org.joda.time.ReadablePartial) localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay7 = monthDay1.withFieldAdded(durationFieldType5, (-1));
        org.joda.time.MonthDay monthDay9 = monthDay7.plusDays((int) '4');
        java.lang.String str10 = monthDay7.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay7.plus(readablePeriod11);
        org.joda.time.MonthDay.Property property13 = monthDay12.dayOfMonth();
        int[] intArray14 = monthDay12.getValues();
        int int15 = monthDay12.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType16.getRangeDurationType();
        java.lang.String str20 = dateTimeFieldType16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = monthDay12.withField(dateTimeFieldType16, 32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--12-03" + "'", str10, "--12-03");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[12, 3]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyearOfCentury" + "'", str20, "weekyearOfCentury");
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj0, chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        int int11 = property2.getMaximumTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay21 = monthDay19.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = monthDay21.getField((int) (byte) 0);
        java.util.Locale locale27 = new java.util.Locale("", "", "hi!");
        int int28 = dateTimeField23.getMaximumTextLength(locale27);
        long long31 = dateTimeField23.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay32.minus(readablePeriod35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay39 = monthDay37.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField41 = monthDay39.getField((int) (byte) 0);
        java.util.Locale locale45 = new java.util.Locale("", "", "hi!");
        int int46 = dateTimeField41.getMaximumTextLength(locale45);
        java.lang.String str47 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) monthDay32, locale45);
        int int48 = property17.getMaximumTextLength(locale45);
        org.joda.time.DateTimeField dateTimeField49 = property17.getField();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        int int52 = property17.getMaximumTextLength(locale50);
        java.lang.String str53 = locale50.getDisplayVariant();
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayName(locale54);
        java.lang.String str57 = locale50.getDisplayName();
        int int58 = property2.getMaximumTextLength(locale50);
        java.lang.String str59 = property2.getAsShortText();
        java.lang.String str60 = property2.getAsString();
        java.lang.String str61 = property2.getAsText();
        org.joda.time.DurationField durationField62 = property2.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9L + "'", long31 == 9L);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Feb" + "'", str47, "Feb");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644572592947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-US" + "'", str55, "en-US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "French" + "'", str56, "French");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fran\347ais" + "'", str57, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "janv." + "'", str59, "janv.");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "janvier" + "'", str61, "janvier");
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getDisplayCountry();
        boolean boolean53 = locale48.hasExtensions();
        int int54 = property6.getMaximumShortTextLength(locale48);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime57.toMutableDateTime();
        int int61 = property6.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int62 = property6.getMaximumValue();
        int int63 = property6.getMinimumValueOverall();
        int int64 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572592984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=984,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withYearOfEra((int) ' ');
        int int35 = dateTime29.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime29.withDurationAdded(readableDuration36, (int) (byte) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(229);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = dateTimeFormatter24.print((org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        boolean boolean11 = dateTime9.isAfter(52L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.minusDays((int) 'u');
        long long22 = dateTime16.getMillis();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(100);
        org.joda.time.Interval interval28 = localDate27.toInterval();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        java.lang.String str30 = durationFieldType29.getName();
        org.joda.time.LocalDate localDate32 = localDate27.withFieldAdded(durationFieldType29, 32770);
        org.joda.time.DateTime dateTime34 = dateTime16.withFieldAdded(durationFieldType29, 3);
        org.joda.time.DateTime dateTime36 = dateTime34.minus((long) 11279);
        boolean boolean37 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime9.minusDays(364);
        int int40 = dateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60526224000001L) + "'", long22 == (-60526224000001L));
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "days" + "'", str30, "days");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DurationField durationField11 = chronology9.hours();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((long) 35, chronology9);
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.MonthDay.Property property8 = monthDay5.dayOfMonth();
        org.joda.time.MonthDay monthDay10 = monthDay5.plusMonths(2922789);
        org.joda.time.MonthDay monthDay12 = monthDay5.minusDays(22);
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays(46);
        org.joda.time.MonthDay monthDay16 = monthDay14.plusMonths(2035);
        org.joda.time.MonthDay monthDay18 = monthDay14.plusDays(95307);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(1644572109112L);
        java.lang.String str21 = monthDay20.toString();
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property25 = monthDay24.monthOfYear();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale26.getDisplayScript(locale27);
        int int30 = property25.getMaximumTextLength(locale26);
        java.lang.String str31 = property25.getAsString();
        java.lang.String str32 = property25.getAsShortText();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        int int34 = property25.getMaximumTextLength(locale33);
        java.lang.String str35 = monthDay20.toString("--01-01", locale33);
        java.lang.String str36 = monthDay20.toString();
        int[] intArray37 = monthDay20.getValues();
        org.joda.time.Chronology chronology38 = monthDay20.getChronology();
        int[] intArray39 = monthDay20.getValues();
        boolean boolean40 = monthDay18.isAfter((org.joda.time.ReadablePartial) monthDay20);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "--02-13" + "'", str21, "--02-13");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "janv." + "'", str32, "janv.");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "--01-01" + "'", str35, "--01-01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "--02-13" + "'", str36, "--02-13");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2, 13]");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2, 13]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology8);
        java.util.Date date16 = new java.util.Date();
        java.lang.String str17 = date16.toLocaleString();
        date16.setMinutes(43199999);
        java.lang.String str20 = date16.toGMTString();
        int int21 = date16.getSeconds();
        int int22 = date16.getHours();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date16);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks(122);
        int int26 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate25);
        java.util.Date date30 = new java.util.Date(0, 0, (int) '4');
        date30.setDate(2730);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.fromDateFields(date30);
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        org.joda.time.Interval interval41 = localDate40.toInterval();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        java.lang.String str43 = durationFieldType42.getName();
        org.joda.time.LocalDate localDate45 = localDate40.withFieldAdded(durationFieldType42, 32770);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime50.hourOfDay();
        org.joda.time.DateTime dateTime53 = dateTime50.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology58 = chronology54.withZone(dateTimeZone57);
        java.lang.String str59 = chronology54.toString();
        org.joda.time.DurationField durationField60 = chronology54.seconds();
        boolean boolean61 = durationFieldType42.isSupported(chronology54);
        org.joda.time.LocalDate localDate63 = localDate33.withFieldAdded(durationFieldType42, 22);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = localDate66.withDayOfYear(100);
        org.joda.time.LocalDate.Property property69 = localDate66.dayOfMonth();
        org.joda.time.LocalDate.Property property70 = localDate66.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        org.joda.time.LocalDate localDate72 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate74 = localDate72.withYearOfEra(52);
        org.joda.time.LocalDate.Property property75 = localDate74.weekOfWeekyear();
        org.joda.time.LocalDate.Property property76 = localDate74.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property82 = dateTime81.hourOfDay();
        org.joda.time.DateTime dateTime84 = dateTime81.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime86 = dateTime81.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int88 = dateTime81.get(dateTimeFieldType87);
        org.joda.time.LocalDate.Property property89 = localDate74.property(dateTimeFieldType87);
        org.joda.time.LocalDate localDate91 = localDate74.withWeekyear(365);
        org.joda.time.Chronology chronology92 = localDate91.getChronology();
        boolean boolean93 = dateTimeFieldType71.isSupported(chronology92);
        boolean boolean94 = localDate33.isSupported(dateTimeFieldType71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate96 = localDate25.withField(dateTimeFieldType71, 14399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14399 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Apr 02 08:59:13 UTC 2104");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Feb 11, 2022 9:43:13 AM" + "'", str17, "Feb 11, 2022 9:43:13 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2 Apr 2104 08:59:13 GMT" + "'", str20, "2 Apr 2104 08:59:13 GMT");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals(date30.toString(), "Wed Jul 24 00:00:00 UTC 1907");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "days" + "'", str43, "days");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+52:00]" + "'", str59, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay5 = monthDay1.withMonthOfYear(2);
        org.joda.time.MonthDay.Property property6 = monthDay1.monthOfYear();
        java.lang.String str7 = property6.getAsShortText();
        int int8 = property6.get();
        org.joda.time.MonthDay monthDay9 = property6.getMonthDay();
        int int10 = property6.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay11 = property6.getMonthDay();
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "janv." + "'", str7, "janv.");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(225, (-365), 34610760, 54, 15600069);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths(32769);
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.Interval interval20 = localDate0.toInterval(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        java.util.Locale locale14 = dateTimeFormatter12.getLocale();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter12.withLocale(locale16);
        org.joda.time.Chronology chronology21 = dateTimeFormatter12.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CA" + "'", str19, "CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(100);
        int int10 = localDate7.size();
        org.joda.time.LocalDate localDate12 = localDate7.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        int int18 = dateTime15.getWeekyear();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property21 = dateTime15.property(dateTimeFieldType20);
        org.joda.time.LocalDate.Property property22 = localDate12.property(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType20.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology36 = chronology32.withZone(dateTimeZone35);
        java.lang.String str37 = chronology32.toString();
        org.joda.time.DurationField durationField38 = chronology32.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.yearOfCentury();
        boolean boolean40 = dateTimeFieldType20.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = chronology32.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((-719166), 7, (-26569157), 9, 14591999, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14591999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+97:01]" + "'", str37, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("11 mai 2008 00:10:00");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime7.minusDays((int) 'u');
        int int13 = dateTime7.getYearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime7.plusMillis(4);
        java.util.Date date16 = dateTime7.toDate();
        java.util.Calendar.Builder builder17 = builder2.setInstant(date16);
        java.util.Calendar calendar18 = builder2.build();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale20.getDisplayScript(locale21);
        java.lang.String str24 = locale19.getDisplayCountry(locale20);
        java.lang.String str25 = locale20.getDisplayLanguage();
        java.util.Calendar.Builder builder26 = builder2.setLocale(locale20);
        java.lang.String str27 = locale20.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Cina" + "'", str24, "Cina");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "italien" + "'", str25, "italien");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.plus(364L);
        org.joda.time.DateTime dateTime22 = dateTime13.withWeekyear(14399999);
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.MonthDay.Property property6 = monthDay0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        java.util.Locale locale22 = new java.util.Locale("", "", "hi!");
        int int23 = dateTimeField18.getMaximumTextLength(locale22);
        long long26 = dateTimeField18.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay27.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) monthDay27, locale40);
        int int43 = property12.getMaximumTextLength(locale40);
        org.joda.time.DateTimeField dateTimeField44 = property12.getField();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        int int47 = property12.getMaximumTextLength(locale45);
        boolean boolean48 = locale45.hasExtensions();
        java.lang.String str49 = locale45.getDisplayCountry();
        boolean boolean50 = locale45.hasExtensions();
        int int51 = property6.getMaximumShortTextLength(locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property6.getFieldType();
        org.joda.time.DurationField durationField53 = property6.getRangeDurationField();
        org.joda.time.DurationField durationField54 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-15" + "'", str5, "--02-15");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Feb" + "'", str42, "Feb");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572593381,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=13,MILLISECOND=381,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.plus(364L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.MonthDay monthDay32 = monthDay22.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime20.toMutableDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate.Property property21 = localDate12.dayOfYear();
        java.lang.String str22 = property21.getAsString();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        calendar24.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar24.set(0, (int) (byte) 10, (int) (short) 10);
        int int35 = calendar24.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        int int41 = localDate38.size();
        org.joda.time.LocalDate localDate43 = localDate38.plusMonths(6);
        java.util.Date date44 = localDate43.toDate();
        calendar24.setTime(date44);
        java.util.TimeZone timeZone46 = calendar24.getTimeZone();
        java.util.Locale locale50 = new java.util.Locale("years", "italien", "Cina");
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone46, locale50);
        int int52 = property21.getMaximumTextLength(locale50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay((java.lang.Object) locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "225" + "'", str22, "225");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1660521600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=227,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Aug 15 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals(locale50.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644572593458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=13,MILLISECOND=458,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int10 = calendar1.getActualMaximum(7);
        int int12 = calendar1.getGreatestMinimum(15);
        java.time.Instant instant13 = calendar1.toInstant();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(0L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = monthDay15.getFieldTypes();
        boolean boolean17 = calendar1.before((java.lang.Object) dateTimeFieldTypeArray16);
        int int19 = calendar1.getMinimum(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572593490,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=13,MILLISECOND=490,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-46800000) + "'", int12 == (-46800000));
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.plus((long) 'a');
        int int16 = dateTime15.getSecondOfMinute();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays((int) '#');
        int int30 = dateTime27.getWeekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property33 = dateTime27.property(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate24.property(dateTimeFieldType32);
        boolean boolean35 = dateTime15.isSupported(dateTimeFieldType32);
        org.joda.time.DateTime dateTime37 = dateTime15.plusHours(2111);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 13 + "'", int16 == 13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        java.util.Date date5 = new java.util.Date(96684, 364, (-102795), 471, 0);
        date5.setTime((-59367227230202L));
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 24 07:32:49 UTC 88");
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate2.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate19 = localDate2.withWeekyear(365);
        org.joda.time.LocalDate.Property property20 = localDate2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        int int9 = dateTime7.getSecondOfDay();
        java.lang.String str11 = dateTime7.toString("14399");
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime7.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = property22.roundFloorCopy();
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3659 + "'", int9 == 3659);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "14399" + "'", str11, "14399");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate10.withPeriodAdded(readablePeriod11, (int) (byte) 0);
        org.joda.time.LocalDate.Property property14 = localDate10.year();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 4, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        java.lang.Object obj21 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj21, dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199987L) + "'", long28 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setDate(52, 52, 292278994);
        java.util.Calendar.Builder builder10 = builder2.setDate(0, 60, 4);
        java.util.Calendar.Builder builder14 = builder10.setTimeOfDay((int) (byte) 100, 2922789, 227);
        java.util.Calendar.Builder builder18 = builder10.setTimeOfDay(102812, (-46800000), 2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder10.setWeekDefinition(576, 160);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-54625291199941L));
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra(2175);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDate1.getValue(339);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 339");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime2.withChronology(chronology42);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(100);
        org.joda.time.LocalDate.Property property50 = localDate47.dayOfMonth();
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtStartOfDay();
        int int52 = dateTime51.getSecondOfMinute();
        boolean boolean53 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime2.getZone();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays((int) '#');
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime58.toDateTime(dateTimeZone65);
        java.lang.Object obj69 = null;
        boolean boolean70 = dateTimeZone65.equals(obj69);
        int int72 = dateTimeZone65.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDate localDate76 = localDate73.withPeriodAdded(readablePeriod74, (int) (byte) 0);
        org.joda.time.LocalDate.Property property77 = localDate73.year();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 4, dateTimeZone81);
        org.joda.time.DateTime dateTime83 = localDate73.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        java.lang.Object obj84 = null;
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long91 = dateTimeZone87.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(obj84, dateTimeZone87);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone87);
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime82.toMutableDateTime(dateTimeZone87);
        int int95 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime82);
        int int97 = dateTimeZone65.getStandardOffset(0L);
        long long99 = dateTimeZone54.getMillisKeepLocal(dateTimeZone65, 0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 187200000 + "'", int72 == 187200000);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-187199987L) + "'", long91 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 187200000 + "'", int95 == 187200000);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 187200000 + "'", int97 == 187200000);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        java.lang.String str8 = dateTime2.toString();
        int int9 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime2.withDurationAdded((-1480510777000L), 0);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime15 = dateTime12.withFieldAdded(durationFieldType13, 141);
        java.lang.String str16 = durationFieldType13.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str8, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "centuries" + "'", str16, "centuries");
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime4.minusSeconds(52);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(55);
        org.joda.time.DateTime.Property property33 = dateTime30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = dateTime38.toLocalDateTime();
        org.joda.time.DateTime dateTime41 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.Chronology chronology44 = dateTime42.getChronology();
        boolean boolean45 = dateTime30.equals((java.lang.Object) chronology44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = dateTime30.withDayOfYear((-18988));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -18988 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+52:00]" + "'", str25, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        int int5 = localDate4.getDayOfMonth();
        int[] intArray6 = localDate4.getValues();
        int[] intArray7 = localDate4.getValues();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate4.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1251546784156810000L);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(9);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDate localDate16 = localDate4.minusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate4.minusYears(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        int int6 = date3.getMinutes();
        int int7 = date3.getMinutes();
        int int8 = date3.getMonth();
        java.time.Instant instant9 = date3.toInstant();
        java.util.Date date13 = new java.util.Date(0, 999, 2730);
        date13.setTime((-187167242L));
        boolean boolean16 = date3.before(date13);
        date13.setMonth((-1829));
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 12 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Aug 29 20:00:32 UTC 1816");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (long) 32, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField19 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.hourOfDay();
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay(chronology8);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        boolean boolean50 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572593814,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=13,MILLISECOND=814,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimeZone55);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        java.lang.String str5 = locale1.getISO3Language();
        java.lang.String str6 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        boolean boolean50 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withZone(dateTimeZone53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter2.withPivotYear(32770);
        boolean boolean57 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology60 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter2.withOffsetParsed();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572593899,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=13,MILLISECOND=899,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        long long16 = dateTimeField13.add((long) 14399, 240);
        long long19 = dateTimeField13.getDifferenceAsLong((long) 19, (-5907399684280970322L));
        int int21 = dateTimeField13.getMaximumValue((long) 36);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 14639L + "'", long16 == 14639L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 5907399684280970341L + "'", long19 == 5907399684280970341L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        int int6 = localDate3.size();
        org.joda.time.LocalDate localDate8 = localDate3.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime11.property(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate8.property(dateTimeFieldType16);
        java.lang.String str19 = localDate8.toString();
        org.joda.time.LocalDate localDate21 = localDate8.minusYears(4);
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime26.toDateTime(dateTimeZone33);
        java.lang.Object obj37 = null;
        boolean boolean38 = dateTimeZone33.equals(obj37);
        int int40 = dateTimeZone33.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate44 = localDate41.withPeriodAdded(readablePeriod42, (int) (byte) 0);
        org.joda.time.LocalDate.Property property45 = localDate41.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 4, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate41.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        java.lang.Object obj52 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(obj52, dateTimeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime50.toMutableDateTime(dateTimeZone55);
        int int63 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateMidnight dateMidnight64 = localDate23.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 1970, dateTimeZone33);
        org.joda.time.DateTime dateTime66 = localDate65.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.minus(readableDuration67);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-08-13" + "'", str19, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 187200000 + "'", int40 == 187200000);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-187199987L) + "'", long59 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 187200000 + "'", int63 == 187200000);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        long long7 = dateTimeZone2.convertLocalToUTC((long) 4, false, (long) 5);
        int int9 = dateTimeZone2.getStandardOffset(83968099800000L);
        long long11 = dateTimeZone2.previousTransition(89L);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 323, dateTimeZone2);
        org.joda.time.LocalDate localDate14 = localDate12.withMonthOfYear(5);
        org.joda.time.LocalDate localDate16 = localDate12.plusDays(42);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate12.plus(readablePeriod17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199996L) + "'", long7 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 89L + "'", long11 == 89L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.Chronology chronology25 = dateTime2.getChronology();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology25);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale29.getDisplayScript(locale30);
        java.lang.String str33 = locale28.getDisplayCountry(locale29);
        java.lang.String str34 = locale29.getDisplayLanguage();
        java.lang.String str35 = locale29.getVariant();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale29);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale29);
        java.lang.String str38 = locale29.getDisplayScript();
        java.lang.String str39 = localDate26.toString("2022-08-13", locale29);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Cina" + "'", str33, "Cina");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "italien" + "'", str34, "italien");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572594072,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=14,MILLISECOND=72,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572594072,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=14,MILLISECOND=72,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-08-13" + "'", str39, "2022-08-13");
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay((java.lang.Object) dateTime5, chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfDay();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(5907399684280970035L, chronology14);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTime(dateTimeZone29);
        int int32 = dateTimeZone29.getStandardOffset((long) (short) 0);
        org.joda.time.Chronology chronology33 = chronology14.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.secondOfMinute();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setExtension('u', "en-US");
        java.util.Locale.Builder builder42 = builder37.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder43 = builder37.clear();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.getDefault(category44);
        java.util.Locale.setDefault(locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        java.util.Locale.Builder builder48 = builder37.setLocale(locale47);
        java.util.Locale locale49 = builder37.build();
        java.util.Locale locale50 = builder37.build();
        int int51 = dateTimeField36.getMaximumShortTextLength(locale50);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 187200000 + "'", int32 == 187200000);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDate8.getFieldType((int) (short) 1);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        org.joda.time.LocalDate.Property property16 = localDate13.dayOfMonth();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.LocalDate localDate19 = property16.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = property16.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property16.roundHalfEvenCopy();
        boolean boolean22 = localDate8.isAfter((org.joda.time.ReadablePartial) localDate21);
        java.lang.String str23 = localDate21.toString();
        org.joda.time.LocalDate localDate25 = localDate21.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-13" + "'", str23, "2022-02-13");
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 4, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("\u30c9\u30a4\u30c4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '????' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(240);
        int int9 = dateTime8.getYearOfEra();
        org.joda.time.DateTime.Property property10 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = property10.addToCopy(1034016480L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1034018450 for weekyear must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.days();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology40);
        org.joda.time.DurationField durationField42 = chronology40.seconds();
        boolean boolean43 = durationFieldType26.isSupported(chronology40);
        org.joda.time.DateTime dateTime45 = dateTime24.withFieldAdded(durationFieldType26, 11);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.Chronology chronology50 = dateTimeFormatter49.getChronology();
        boolean boolean51 = dateTimeFormatter49.isParser();
        org.joda.time.Chronology chronology52 = dateTimeFormatter49.getChronology();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale53.getDisplayScript(locale54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter49.withLocale(locale54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter49.withDefaultYear(1970);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = dateTime46.toString(dateTimeFormatter49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "days" + "'", str27, "days");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(chronology52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it" + "'", str55, "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        java.lang.String str14 = dateTimeField13.toString();
        int int15 = dateTimeField13.getMinimumValue();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('u', "en-US");
        java.util.Locale.Builder builder21 = builder19.setLanguageTag("de-DE");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = builder21.build();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTime dateTime36 = dateTime33.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology41 = chronology37.withZone(dateTimeZone40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((java.lang.Object) dateTime28, chronology37);
        java.lang.String str44 = monthDay42.toString("35");
        org.joda.time.MonthDay.Property property45 = monthDay42.monthOfYear();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        int int47 = property45.getMaximumTextLength(locale46);
        java.lang.String str48 = locale46.getDisplayCountry();
        java.util.Locale.Builder builder49 = builder21.setLocale(locale46);
        int int50 = dateTimeField13.getMaximumTextLength(locale46);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str14, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "35" + "'", str44, "35");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        int int15 = date13.getDate();
        boolean boolean16 = date3.after(date13);
        java.util.Date date20 = new java.util.Date(0, 0, (int) '4');
        date20.setDate(12);
        date20.setHours(2922789);
        date20.setTime(9L);
        java.util.Date date30 = new java.util.Date(0, 0, (int) '4');
        int int31 = date30.getHours();
        int int32 = date30.getDate();
        boolean boolean33 = date20.after(date30);
        boolean boolean34 = date3.before(date30);
        java.lang.String str35 = date30.toLocaleString();
        date30.setHours(251);
        date30.setTime((-28166399860L));
        int int40 = date30.getMinutes();
        java.lang.String str41 = date30.toGMTString();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 09 00:00:00 UTC 1969");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "21 f\351vr. 1900 00:00:00" + "'", str35, "21 f\351vr. 1900 00:00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9 Feb 1969 00:00:00 GMT" + "'", str41, "9 Feb 1969 00:00:00 GMT");
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay18.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay18.plus(readablePeriod24);
        int int26 = monthDay25.getDayOfMonth();
        org.joda.time.Chronology chronology27 = monthDay25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime32.yearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime32.plusWeeks(0);
        org.joda.time.DateTime.Property property39 = dateTime32.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime44.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime32.toMutableDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology27.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology27.getZone();
        long long57 = dateTimeZone53.convertLocalToUTC((-349259424L), false, (long) 49088531);
        boolean boolean59 = dateTimeZone53.isStandardOffset(262L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 29 + "'", int26 == 29);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-349259424L) + "'", long57 == (-349259424L));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(14399000, 4630, (-19034), 16804056, (int) 'u', 14399, 805);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16804056 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        java.util.Locale locale2 = new java.util.Locale("mercoled\354", "--12-03");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField14 = monthDay12.getField((int) (byte) 0);
        java.util.Locale locale18 = new java.util.Locale("", "", "hi!");
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        long long22 = dateTimeField14.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay23.minus(readablePeriod26);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = monthDay30.getField((int) (byte) 0);
        java.util.Locale locale36 = new java.util.Locale("", "", "hi!");
        int int37 = dateTimeField32.getMaximumTextLength(locale36);
        java.lang.String str38 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) monthDay23, locale36);
        int int39 = property8.getMaximumTextLength(locale36);
        org.joda.time.DateTimeField dateTimeField40 = property8.getField();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        int int43 = property8.getMaximumTextLength(locale41);
        int int44 = property8.getLeapAmount();
        int int45 = property8.get();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        int int51 = dateTime48.getWeekyear();
        org.joda.time.DateMidnight dateMidnight52 = dateTime48.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property54 = dateTime48.property(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = property54.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField56 = property54.getField();
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        int int59 = dateTimeField56.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property8.getAsShortText(locale58);
        java.util.Locale locale62 = new java.util.Locale("9 Dec 1973 00:00:00 GMT");
        java.lang.String str63 = locale58.getDisplayScript(locale62);
        java.lang.String str64 = locale2.getDisplayScript(locale62);
        org.junit.Assert.assertEquals(locale2.toString(), "mercoled\354_--12-03");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9L + "'", long22 == 9L);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Feb" + "'", str38, "Feb");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572594424,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=14,MILLISECOND=424,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "3" + "'", str60, "3");
        org.junit.Assert.assertEquals(locale62.toString(), "9 dec 1973 00:00:00 gmt");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        int[] intArray33 = monthDay13.getValues();
        int[] intArray34 = monthDay13.getValues();
        int int35 = monthDay13.getMonthOfYear();
        int int36 = monthDay13.size();
        org.joda.time.MonthDay monthDay38 = monthDay13.plusDays((int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2, 13]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(monthDay38);
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(31);
        org.joda.time.DateTime dateTime6 = dateTime2.plusHours(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology9 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-03T13:59:59.999+52:00" + "'", str8, "1970-01-03T13:59:59.999+52:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        int int8 = property7.getMinimumValue();
        org.joda.time.DateTime dateTime10 = property7.addToCopy(9);
        org.joda.time.DateTime dateTime11 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property7.addWrapFieldToCopy(2730);
        org.joda.time.DateTime dateTime14 = property7.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        int int17 = dateTime14.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.minus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology51 = chronology47.withZone(dateTimeZone50);
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DurationField durationField53 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.yearOfCentury();
        boolean boolean55 = dateTimeFieldType35.isSupported(chronology47);
        boolean boolean56 = dateTimeFieldType18.isSupported(chronology47);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        java.lang.String str72 = chronology67.toString();
        org.joda.time.DurationField durationField73 = chronology67.seconds();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = durationFieldType57.getField(chronology67);
        org.joda.time.DateTimeField dateTimeField79 = chronology67.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = chronology67.get(readablePeriod80, 270L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+52:00]" + "'", str52, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+52:00]" + "'", str72, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(157852800004L, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks(0);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear(2111);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        java.util.Date date5 = new java.util.Date(32772, 1439, 21, (int) (short) 0, 59);
        int int6 = date5.getMonth();
        int int7 = date5.getMonth();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology22 = chronology18.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology22);
        boolean boolean24 = durationFieldType9.isSupported(chronology22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) localDate8, chronology22);
        java.util.Date date26 = localDate25.toDate();
        boolean boolean27 = date5.before(date26);
        int int28 = date26.getSeconds();
        int int29 = date26.getMonth();
        int int30 = date26.getTimezoneOffset();
        int int31 = date26.getMinutes();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 21 00:59:00 UTC 34791");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 13 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.MonthDay monthDay7 = monthDay0.plusDays((int) (byte) -1);
        org.joda.time.MonthDay.Property property8 = monthDay0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("fra_--01-01_monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"fra_--01-01_monthOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = property18.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDate21.getFields();
        boolean boolean23 = localDate12.equals((java.lang.Object) localDate21);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfYear();
        org.joda.time.LocalDate localDate26 = property24.addToCopy(0);
        org.joda.time.LocalDate localDate27 = property24.withMaximumValue();
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfMonth(6);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.Interval interval35 = localDate34.toInterval();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate.Property property40 = localDate34.weekOfWeekyear();
        java.lang.Object obj41 = null;
        boolean boolean42 = localDate34.equals(obj41);
        org.joda.time.LocalDate localDate44 = localDate34.withYear(2045);
        boolean boolean45 = localDate27.isEqual((org.joda.time.ReadablePartial) localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfWeek();
        java.lang.String str11 = property10.toString();
        int int12 = property10.get();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        int int18 = dateTime15.getWeekyear();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property21 = dateTime15.property(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime15.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) '#');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = dateTime25.plusWeeks(5);
        org.joda.time.DateTime dateTime39 = dateTime25.minusMillis(13);
        int int40 = property22.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.plusYears(0);
        int int43 = property10.getDifference((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays((int) '#');
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime46.toDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime46.minusMinutes(52);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        long long64 = dateTimeZone60.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime65 = dateTime46.withZone(dateTimeZone60);
        org.joda.time.DateTime.Property property66 = dateTime46.minuteOfHour();
        org.joda.time.DateTime dateTime68 = dateTime46.minusMinutes(18);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime71 = dateTime68.withDurationAdded(readableDuration69, (int) (byte) 1);
        boolean boolean72 = dateTime71.isEqualNow();
        int int73 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime75 = dateTime71.withMillis((-2678400000L));
        org.joda.time.DateTime.Property property76 = dateTime75.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[dayOfWeek]" + "'", str11, "Property[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19036 + "'", int43 == 19036);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-187199990L) + "'", long64 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        java.util.Date date0 = new java.util.Date();
        java.lang.String str1 = date0.toLocaleString();
        date0.setMinutes(43199999);
        java.lang.String str4 = date0.toGMTString();
        int int5 = date0.getSeconds();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date0);
        date0.setTime((-187192908L));
        org.junit.Assert.assertEquals(date0.toString(), "Mon Dec 29 20:00:07 UTC 1969");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "11 f\351vr. 2022 09:43:14" + "'", str1, "11 f\351vr. 2022 09:43:14");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2 Apr 2104 08:59:14 GMT" + "'", str4, "2 Apr 2104 08:59:14 GMT");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.Chronology chronology24 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime7.withChronology(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology38 = chronology34.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = chronology34.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology34.weekyearOfCentury();
        org.joda.time.DateTime dateTime43 = dateTime25.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField44 = chronology34.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology34.getDateTimeMillis((long) (-26971783), 1965, 32, 22, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1965 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime2.plus(7092L);
        org.joda.time.DateTime dateTime12 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int9 = calendar1.getWeekYear();
        calendar1.setMinimalDaysInFirstWeek(8);
        java.lang.Object obj12 = null;
        boolean boolean13 = calendar1.before(obj12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withWeekyear(16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572594788,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=14,MILLISECOND=788,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear((-292275055));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTimeFormatter9.print(5907399684280970998L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(13);
        org.joda.time.DateTime dateTime13 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime7.withMillis(26L);
        org.joda.time.DateTime.Property property16 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) ' ');
        int int20 = dateTime17.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14340 + "'", int20 == 14340);
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(49107584);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int22 = monthDay20.getValue(821);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 821");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        int int5 = property2.getMinimumValue();
        java.lang.String str6 = property2.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "janvier" + "'", str6, "janvier");
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getVariant();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean6 = dateTimeZone4.isStandardOffset(10L);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long14 = dateTimeZone10.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj7, dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        int int17 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime15);
        long long21 = dateTimeZone4.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone4);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        boolean boolean30 = locale0.equals((java.lang.Object) dateTimeZone24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de-DE" + "'", str1, "de-DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187199987L) + "'", long14 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32762L + "'", long21 == 32762L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        java.lang.String str16 = dateTime15.toString();
        java.lang.String str17 = dateTime15.toString();
        org.joda.time.DateTime dateTime19 = dateTime15.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-01-01T00:00:00.000+52:00" + "'", str16, "2022-01-01T00:00:00.000+52:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-01T00:00:00.000+52:00" + "'", str17, "2022-01-01T00:00:00.000+52:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.MonthDay.Property property21 = monthDay18.monthOfYear();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        int int23 = property21.getMaximumValue();
        int int24 = property21.get();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime28.plusWeeks(5);
        org.joda.time.Chronology chronology41 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime42.getZone();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale48.getCountry();
        java.lang.String str50 = dateTimeZone46.getName((long) 46, locale48);
        java.lang.String str51 = locale48.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay52 = property21.setCopy("36", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"36\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+52:00" + "'", str50, "+52:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        int int14 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property13.addToCopy((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = property13.addToCopy((long) 16);
        org.joda.time.DateTime dateTime19 = property13.roundHalfFloorCopy();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale20.getDisplayScript(locale21);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale21);
        java.util.Set<java.lang.Character> charSet25 = locale21.getExtensionKeys();
        java.util.Locale locale26 = locale21.stripExtensions();
        java.lang.String str27 = property13.getAsShortText(locale26);
        int int28 = property13.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572594970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=14,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "19" + "'", str27, "19");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        java.util.Locale locale14 = dateTimeFormatter12.getLocale();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter12.withLocale(locale16);
        java.io.Writer writer21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays((int) '#');
        boolean boolean35 = dateTime32.isBeforeNow();
        boolean boolean36 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = dateTime41.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime48.hourOfDay();
        org.joda.time.DateTime dateTime51 = dateTime48.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime41.toMutableDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfWeek();
        org.joda.time.DurationField durationField55 = chronology52.halfdays();
        org.joda.time.DateTime dateTime56 = dateTime32.toDateTime(chronology52);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths(323);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(writer21, (org.joda.time.ReadableInstant) dateTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CA" + "'", str19, "CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        java.util.Date date1 = new java.util.Date(59823L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtStartOfDay(dateTimeZone6);
        java.util.Date date9 = dateTime8.toDate();
        date9.setTime((long) 14400);
        java.time.Instant instant12 = date9.toInstant();
        long long13 = date9.getTime();
        int int14 = date9.getYear();
        int int15 = date9.getDate();
        boolean boolean16 = date1.before(date9);
        java.lang.String str17 = date9.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:59 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:14 UTC 1970");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 14400L + "'", long13 == 14400L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1 Jan 1970 00:00:14 GMT" + "'", str17, "1 Jan 1970 00:00:14 GMT");
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        int int2 = monthDay1.getMonthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        boolean boolean8 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter6.getPrinter();
        org.joda.time.Chronology chronology14 = dateTimeFormatter6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withPivotYear(52);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronology();
        int int18 = dateTimeFormatter16.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.now(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField34 = chronology27.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.year();
        java.lang.String str36 = dateTimeField35.getName();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale38.getDisplayScript(locale39);
        java.util.Set<java.lang.String> strSet42 = locale39.getUnicodeLocaleKeys();
        java.lang.String str43 = dateTimeField35.getAsText(63421, locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter16.withLocale(locale39);
        java.lang.String str45 = locale39.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = monthDay1.toString("java.util.GregorianCalendar[time=9,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "year" + "'", str36, "year");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "63421" + "'", str43, "63421");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "italien" + "'", str45, "italien");
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate9.toDateTime(readableInstant11);
        int int13 = localDate9.getEra();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(3);
        org.joda.time.LocalDate localDate22 = localDate9.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean24 = localDate9.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate9.centuryOfEra();
        java.lang.String str26 = property25.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "21" + "'", str26, "21");
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(22, 6, 32, 43199999);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder7.setInstant(198300832L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField35 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology26.minuteOfDay();
        org.joda.time.DurationField durationField38 = chronology26.minutes();
        org.joda.time.DurationField durationField39 = chronology26.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = dateTimeZone1.getShortName((long) (byte) 100);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(dateTimeZone1);
        java.util.TimeZone timeZone18 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar19);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar19.getLeastMaximum(61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 61");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-187199987L) + "'", long11 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572595218,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=15,MILLISECOND=228,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.MonthDay.Property property21 = monthDay18.monthOfYear();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.joda.time.MonthDay monthDay24 = property21.addToCopy(26);
        int int25 = property21.getMinimumValue();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField30 = monthDay28.getField((int) (byte) 0);
        int int31 = dateTimeField30.getMinimumValue();
        int int32 = dateTimeField30.getMinimumValue();
        org.joda.time.DurationField durationField33 = dateTimeField30.getRangeDurationField();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale34.getDisplayLanguage();
        int int37 = dateTimeField30.getMaximumTextLength(locale34);
        java.lang.String str38 = locale34.getScript();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = locale39.getScript();
        java.util.Locale.setDefault(locale39);
        java.lang.String str43 = locale34.getDisplayScript(locale39);
        int int44 = property21.getMaximumTextLength(locale39);
        java.util.Locale locale48 = new java.util.Locale("hi!", "1969-12-31T23:59:59.999Z", "11");
        java.util.Locale.setDefault(locale48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        java.lang.String str56 = property55.getAsShortText();
        org.joda.time.MonthDay monthDay57 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay59 = monthDay57.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField61 = monthDay59.getField((int) (byte) 0);
        java.util.Locale locale65 = new java.util.Locale("", "", "hi!");
        int int66 = dateTimeField61.getMaximumTextLength(locale65);
        long long69 = dateTimeField61.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay72 = monthDay70.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay70.minus(readablePeriod73);
        org.joda.time.MonthDay monthDay75 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay77 = monthDay75.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField79 = monthDay77.getField((int) (byte) 0);
        java.util.Locale locale83 = new java.util.Locale("", "", "hi!");
        int int84 = dateTimeField79.getMaximumTextLength(locale83);
        java.lang.String str85 = dateTimeField61.getAsShortText((org.joda.time.ReadablePartial) monthDay70, locale83);
        int int86 = property55.getMaximumTextLength(locale83);
        java.lang.String str87 = locale83.getCountry();
        java.lang.String str88 = locale83.getISO3Country();
        java.lang.String str89 = locale48.getDisplayScript(locale83);
        int int90 = property21.getMaximumShortTextLength(locale83);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "italien" + "'", str36, "italien");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_1969-12-31T23:59:59.999Z_11");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "3" + "'", str56, "3");
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 9L + "'", long69 == 9L);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Feb" + "'", str85, "Feb");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        boolean boolean13 = calendar12.isWeekDateSupported();
        long long14 = calendar12.getTimeInMillis();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.fromCalendarFields(calendar12);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 392358211200000L + "'", long14 == 392358211200000L);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(667680016L);
        org.joda.time.LocalDate localDate3 = monthDay1.toLocalDate(14399999);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date3);
        int int9 = date3.getYear();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jul 18 21:00:00 UTC 2233");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 333 + "'", int9 == 333);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        java.lang.String str32 = chronology27.toString();
        org.joda.time.DurationField durationField33 = chronology27.seconds();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.yearOfCentury();
        boolean boolean35 = dateTimeFieldType15.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField36 = chronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology27.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = dateTimeField37.set((long) 7200000, 284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 284 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+52:00]" + "'", str32, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = dateTime10.toString("--02-01", locale12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime10.getZone();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.roll(9, false);
        calendar16.setFirstDayOfWeek((int) (byte) 1);
        int int22 = calendar16.getWeekYear();
        int int23 = calendar16.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromCalendarFields(calendar16);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(100);
        org.joda.time.LocalDate.Property property30 = localDate27.dayOfMonth();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        int int32 = localDate31.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        long long48 = dateTimeZone44.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone44);
        org.joda.time.DateTime dateTime50 = localDate31.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime51 = localDate24.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now(dateTimeZone44);
        long long54 = dateTimeZone14.getMillisKeepLocal(dateTimeZone44, 16804046L);
        long long56 = dateTimeZone44.nextTransition((long) 583);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--02-01" + "'", str13, "--02-01");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644615795413,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=15,MILLISECOND=413,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62180539199983L) + "'", long48 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-145255954L) + "'", long54 == (-145255954L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 583L + "'", long56 == 583L);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        java.time.Instant instant26 = calendar25.toInstant();
        int int27 = calendar25.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572595470,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=15,MILLISECOND=470,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572595470,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=15,MILLISECOND=470,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        int int3 = property2.getMinimumValueOverall();
        java.util.Locale locale7 = new java.util.Locale("years", "italien", "Cina");
        java.lang.String str8 = property2.getAsText(locale7);
        java.lang.String str9 = property2.getAsString();
        java.lang.String str10 = property2.getAsShortText();
        org.joda.time.DurationField durationField11 = property2.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals(locale7.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "January" + "'", str8, "January");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jan" + "'", str10, "Jan");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.DateTime dateTime12 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury(6);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime2.withYearOfEra(364);
        org.joda.time.DateTime dateTime7 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime7.withEra((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        long long19 = chronology8.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        long long32 = dateTimeField24.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay33.minus(readablePeriod36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 0);
        java.util.Locale locale46 = new java.util.Locale("", "", "hi!");
        int int47 = dateTimeField42.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) monthDay33, locale46);
        int[] intArray49 = monthDay33.getValues();
        int[] intArray51 = chronology8.get((org.joda.time.ReadablePartial) monthDay33, (long) 4);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.Chronology chronology53 = monthDay52.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = chronology53.getDateTimeMillis(49117299, 54, (-17269665), 47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62180539199983L) + "'", long19 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9L + "'", long32 == 9L);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb" + "'", str48, "Feb");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 3]");
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        java.lang.Object obj5 = null;
        boolean boolean6 = calendar1.after(obj5);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        int int8 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615795604,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=15,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        int int8 = property2.getMinimumValue();
        org.joda.time.MonthDay monthDay10 = property2.addWrapFieldToCopy(292278994);
        int int11 = monthDay10.getDayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate.Property property10 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        int int12 = localDate11.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime15.plusWeeks(5);
        org.joda.time.Chronology chronology28 = dateTime15.getChronology();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime15.minus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean32 = dateTime15.isSupported(dateTimeFieldType31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(100);
        int int38 = localDate35.size();
        org.joda.time.LocalDate localDate40 = localDate35.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays((int) '#');
        int int46 = dateTime43.getWeekyear();
        org.joda.time.DateMidnight dateMidnight47 = dateTime43.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property49 = dateTime43.property(dateTimeFieldType48);
        org.joda.time.LocalDate.Property property50 = localDate40.property(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType48.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime56.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology64 = chronology60.withZone(dateTimeZone63);
        java.lang.String str65 = chronology60.toString();
        org.joda.time.DurationField durationField66 = chronology60.seconds();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.yearOfCentury();
        boolean boolean68 = dateTimeFieldType48.isSupported(chronology60);
        boolean boolean69 = dateTimeFieldType31.isSupported(chronology60);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType31.getDurationType();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType31.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property72 = localDate11.property(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[+52:00]" + "'", str65, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra(2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, 2000);
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate.Property property8 = localDate6.dayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfMonth();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        int int16 = localDate15.getWeekyear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.LocalDate.Property property22 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.plusWeeks(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDate25.getFieldType((int) (short) 1);
        int int28 = localDate15.get(dateTimeFieldType27);
        int int29 = localDate6.get(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays((int) '#');
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime7.minusMinutes(52);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        long long25 = dateTimeZone21.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime26 = dateTime7.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime7.getZone();
        long long30 = dateTimeZone27.adjustOffset((long) 1439, true);
        org.joda.time.DateTime dateTime31 = localDate2.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        java.util.Date date33 = dateTime31.toDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-187199990L) + "'", long25 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1439L + "'", long30 == 1439L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 13 09:43:15 UTC 52");
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 4, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime12 = dateTime9.minus((long) (short) 100);
        int int13 = dateTime12.getDayOfMonth();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime21 = null;
        org.joda.time.DateTime dateTime22 = localDate16.toDateTime(localTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays((int) '#');
        int int37 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime34.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.plus(readablePeriod43);
        boolean boolean45 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTime34);
        int int47 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology48 = dateTime34.getChronology();
        java.lang.String str50 = dateTime34.toString("2022-02-13");
        org.joda.time.DateTime dateTime52 = dateTime34.plus((long) 14402021);
        boolean boolean53 = dateTime22.equals((java.lang.Object) 14402021);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime22.withPeriodAdded(readablePeriod54, 14399);
        boolean boolean57 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime22.withZoneRetainFields(dateTimeZone60);
        java.lang.String str63 = dateTimeZone60.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-13" + "'", str50, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+52:00" + "'", str63, "+52:00");
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.PRC;
        int int8 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.MonthDay monthDay11 = property2.addToCopy(70);
        int int12 = property2.getMinimumValue();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property15 = monthDay14.monthOfYear();
        org.joda.time.MonthDay monthDay17 = property15.addToCopy((int) ' ');
        org.joda.time.MonthDay monthDay19 = property15.addToCopy((-1));
        int int20 = property15.get();
        boolean boolean21 = property2.equals((java.lang.Object) int20);
        java.lang.String str22 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.setMinimalDaysInFirstWeek(2730);
        calendar1.clear();
        calendar1.set(15, 0, (int) (byte) 1, 5, 2021, (int) ' ');
        long long16 = calendar1.getTimeInMillis();
        calendar1.setLenient(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61693867108000,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2730,ERA=?,YEAR=15,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=14,MINUTE=41,SECOND=32,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61693867108000L) + "'", long16 == (-61693867108000L));
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime2.minus(readablePeriod17);
        int int19 = dateTime2.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.MonthDay monthDay34 = monthDay13.minusDays(59);
        java.util.Date date40 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        long long41 = date40.getTime();
        long long42 = date40.getTime();
        boolean boolean43 = monthDay13.equals((java.lang.Object) date40);
        org.joda.time.Chronology chronology44 = monthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 4, dateTimeZone50);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = dateTimeZone50.getShortName((long) 0, locale53);
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property57 = monthDay56.monthOfYear();
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale58.getDisplayScript(locale59);
        int int62 = property57.getMaximumTextLength(locale58);
        org.joda.time.DurationField durationField63 = property57.getDurationField();
        int int64 = property57.getMinimumValue();
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = locale65.getDisplayVariant();
        boolean boolean68 = property57.equals((java.lang.Object) str67);
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.util.Locale.setDefault(locale70);
        java.util.Locale locale72 = locale70.stripExtensions();
        int int73 = property57.getMaximumTextLength(locale70);
        java.lang.String str74 = locale53.getDisplayCountry(locale70);
        java.lang.String str75 = locale53.toLanguageTag();
        java.lang.String str76 = dateTimeField45.getAsShortText(19, locale53);
        java.lang.String str77 = locale53.getDisplayLanguage();
        java.lang.String str78 = locale53.getScript();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Nov 05 00:10:00 UTC 4630");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 83968099800000L + "'", long41 == 83968099800000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 83968099800000L + "'", long42 == 83968099800000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+52:00" + "'", str54, "+52:00");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "it" + "'", str75, "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "19" + "'", str76, "19");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "italien" + "'", str77, "italien");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(17);
        int int3 = localDate0.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate0.withWeekOfWeekyear(227);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 227 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime19.withFieldAdded(durationFieldType20, (int) 'u');
        int int24 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime19);
        java.util.TimeZone timeZone25 = dateTimeZone12.toTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        int int27 = calendar26.getMinimalDaysInFirstWeek();
        calendar26.setFirstDayOfWeek(0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 349260000 + "'", int24 == 349260000);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572595956,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=15,MILLISECOND=956,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getDisplayCountry();
        boolean boolean53 = locale48.hasExtensions();
        int int54 = property6.getMaximumShortTextLength(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property6.getFieldType();
        int int56 = property6.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay58 = property6.setCopy("758");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 758 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572596044,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=16,MILLISECOND=44,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.minusDays((int) 'u');
        int int32 = dateTime26.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime26.plus(readablePeriod33);
        boolean boolean35 = property19.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTime dateTime37 = dateTime26.minusMonths(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime26.withTime(32772, 1051, 582, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate.Property property10 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.DateTime dateTime19 = property17.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekOfWeekyear(22);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.minusSeconds(20);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 102782L + "'", long23 == 102782L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime14 = dateTime4.plus(32762L);
        int int15 = dateTime14.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = dateTime14.toString("11 Feb 2022 09:43:06 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology8 = dateTimeFormatter6.getChronolgy();
        java.util.Locale locale9 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter6.withZone(dateTimeZone11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property30 = dateTime24.property(dateTimeFieldType29);
        org.joda.time.LocalDate.Property property31 = localDate21.property(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readablePeriod35);
        int int37 = property31.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = property31.withMaximumValue();
        org.joda.time.DateTime dateTime39 = localDate38.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology40 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime45.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime48.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime53 = dateTime48.withCenturyOfEra(0);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate56.withDayOfYear(100);
        int int59 = localDate56.size();
        org.joda.time.LocalDate localDate61 = localDate56.plusMonths(6);
        int int63 = localDate61.getValue(0);
        java.lang.String str64 = localDate61.toString();
        org.joda.time.LocalDate localDate66 = localDate61.withWeekyear(1);
        org.joda.time.LocalDate localDate68 = localDate61.withDayOfYear((int) (byte) 1);
        int int69 = localDate61.getYear();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(dateTimeZone71);
        long long76 = dateTimeZone71.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime77 = localDate61.toDateTimeAtMidnight(dateTimeZone71);
        org.joda.time.DateTime dateTime78 = dateTime48.withZoneRetainFields(dateTimeZone71);
        org.joda.time.Interval interval79 = localDate38.toInterval(dateTimeZone71);
        org.joda.time.Chronology chronology80 = localDate38.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter6.withChronology(chronology80);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-08-13" + "'", str64, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-187199996L) + "'", long76 == (-187199996L));
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear(471);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withZoneUTC();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((-60494601600001L));
        int int8 = property5.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate9 = property5.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField17 = chronology8.weeks();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology8);
        java.util.Date date22 = new java.util.Date(0, 0, (int) '4');
        date22.setDate(12);
        date22.setHours(2922789);
        date22.setTime(9L);
        java.util.Date date32 = new java.util.Date(0, 0, (int) '4');
        int int33 = date32.getHours();
        boolean boolean34 = date22.before(date32);
        java.lang.String str35 = date22.toLocaleString();
        int int36 = date22.getDate();
        date22.setYear(34608860);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date22);
        int int40 = localDate39.getYearOfEra();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(100);
        int int46 = localDate43.size();
        org.joda.time.LocalDate localDate48 = localDate43.plusMonths(6);
        int int50 = localDate48.getValue(0);
        java.lang.String str51 = localDate48.toString();
        org.joda.time.LocalDate localDate53 = localDate48.withWeekyear(1);
        org.joda.time.LocalDate localDate55 = localDate48.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDate55.toDateTimeAtStartOfDay(dateTimeZone58);
        int int61 = dateTime60.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime60.getZone();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime60.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str65 = dateTimeFieldType64.getName();
        boolean boolean66 = dateTime60.isSupported(dateTimeFieldType64);
        boolean boolean67 = localDate39.isSupported(dateTimeFieldType64);
        int int68 = localDate18.indexOf(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Jan 01 00:00:00 UTC 34610760");
        org.junit.Assert.assertEquals(date32.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 janv. 1970 00:00:00" + "'", str35, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 34610760 + "'", int40 == 34610760);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-08-13" + "'", str51, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2021 + "'", int61 == 2021);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "millisOfDay" + "'", str65, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar calendar8 = builder0.build();
        java.util.Calendar.Builder builder12 = builder0.setWeekDate(6, 29, 14399);
        java.util.Calendar.Builder builder16 = builder12.setTimeOfDay((-1848), (-700535), 16);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-60128179200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=227,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        long long12 = dateTimeZone3.adjustOffset(5907399684280970556L, true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5907399684280970556L + "'", long12 == 5907399684280970556L);
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-13T13:37:59.638+52:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-13T13:37:59.638+52:00\" is malformed at \"+52:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 'x');
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale1);
        int int5 = calendar4.getMinimalDaysInFirstWeek();
        int int7 = calendar4.getMaximum(2);
        int int9 = calendar4.getActualMinimum((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar4.get(817);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 817");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572596385,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=16,MILLISECOND=385,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        java.lang.String str15 = chronology10.toString();
        org.joda.time.DurationField durationField16 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.weekOfWeekyear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(7092L, chronology10);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(obj0, chronology10);
        org.joda.time.Interval interval21 = localDate20.toInterval();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+52:00]" + "'", str15, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.withEra(1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean13 = dateTimeZone11.isStandardOffset(10L);
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long21 = dateTimeZone17.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj14, dateTimeZone17);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        int int24 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime22);
        long long28 = dateTimeZone11.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.DateTime dateTime29 = dateTime7.toDateTime(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-187199987L) + "'", long21 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32762L + "'", long28 == 32762L);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        calendar2.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar2.set(0, (int) (byte) 10, (int) (short) 10);
        int int13 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        java.util.Date date22 = localDate21.toDate();
        calendar2.setTime(date22);
        java.util.TimeZone timeZone24 = calendar2.getTimeZone();
        java.util.Locale locale28 = new java.util.Locale("years", "italien", "Cina");
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str31 = dateTimeZone30.toString();
        boolean boolean32 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 168, dateTimeZone30);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals(locale28.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572596436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=16,MILLISECOND=436,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "janv." + "'", str3, "janv.");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale19.getDisplayVariant();
        int int22 = dateTimeField18.getMaximumShortTextLength(locale19);
        long long24 = dateTimeField18.roundHalfFloor((-187200000L));
        org.joda.time.DurationField durationField25 = dateTimeField18.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-446400000L) + "'", long24 == (-446400000L));
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.DateTime dateTime11 = localDate2.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(71);
        org.joda.time.DateTime dateTime14 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime11.minus(1644572461292L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(100);
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        int int11 = localDate10.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        long long27 = dateTimeZone23.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime29 = localDate10.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.Chronology chronology30 = chronology3.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62180539199983L) + "'", long27 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate9.toDateTime(readableInstant11);
        int int13 = localDate9.getEra();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(3);
        org.joda.time.LocalDate localDate22 = localDate9.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean24 = localDate9.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDate9.getFieldTypes();
        org.joda.time.LocalDate localDate27 = localDate9.withYear(44);
        int int28 = localDate27.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(97L);
        java.lang.String str26 = property23.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury(1);
        int int36 = property23.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.withWeekyear((int) 'u');
        boolean boolean39 = calendar1.before((java.lang.Object) dateTime38);
        long long40 = dateTime38.getMillis();
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.DateTime.Property property42 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(49034491);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property42.getFieldType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[hourOfDay]" + "'", str26, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-58474483200001L) + "'", long40 == (-58474483200001L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(43199999);
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        org.joda.time.DateTime.Property property30 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime10.minusMinutes(18);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer7, (org.joda.time.ReadableInstant) dateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDate2.getFieldTypes();
        java.lang.String str7 = localDate2.toString();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate15 = localDate10.withDayOfMonth(21);
        boolean boolean16 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        org.joda.time.DateTime dateTime28 = localDate2.toDateTimeAtMidnight(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.withYearOfCentury((int) '#');
        int int34 = localDate33.getDayOfMonth();
        int int35 = localDate33.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate36 = localDate2.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate.Property property37 = localDate36.era();
        org.joda.time.LocalDate localDate38 = property37.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-13" + "'", str7, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 13 + "'", int34 == 13);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.now(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfDay();
        org.joda.time.MonthDay monthDay50 = monthDay32.withChronologyRetainFields(chronology41);
        int int51 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(0L);
        java.lang.String str54 = monthDay53.toString();
        org.joda.time.MonthDay monthDay56 = monthDay53.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay59 = monthDay53.withFieldAdded(durationFieldType57, (-1));
        org.joda.time.MonthDay monthDay61 = monthDay59.plusDays((int) '4');
        java.lang.String str62 = monthDay59.toString();
        int int63 = monthDay32.compareTo((org.joda.time.ReadablePartial) monthDay59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay65 = monthDay59.withDayOfMonth(63421);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63421 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 13 + "'", int51 == 13);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "--01-03" + "'", str54, "--01-03");
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "--12-03" + "'", str62, "--12-03");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes(14399995);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(100);
        int int9 = localDate6.size();
        org.joda.time.LocalDate localDate11 = localDate6.plusMonths(6);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTime dateTime13 = localDate6.toDateTime(localTime12);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime dateTime16 = dateTime13.minusMillis(999);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime(dateTimeZone17);
        boolean boolean19 = dateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((long) (byte) 100);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = locale17.getCountry();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale17.getDisplayVariant(locale20);
        java.lang.String str22 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) monthDay15, 11, locale20);
        org.joda.time.Chronology chronology23 = monthDay15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572596811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=16,MILLISECOND=811,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay13 = monthDay11.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        java.util.Locale locale22 = new java.util.Locale("", "", "hi!");
        int int23 = dateTimeField18.getMaximumTextLength(locale22);
        long long26 = dateTimeField18.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay27.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) monthDay27, locale40);
        int[] intArray43 = monthDay27.getValues();
        int int44 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) monthDay11, intArray43);
        int[] intArray45 = monthDay11.getValues();
        org.joda.time.MonthDay monthDay47 = monthDay11.plusDays((int) (short) 0);
        org.joda.time.MonthDay.Property property48 = monthDay11.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Feb" + "'", str42, "Feb");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2, 13]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 3]");
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDate4.getFields();
        org.joda.time.LocalDate.Property property6 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate7 = property6.withMinimumValue();
        java.lang.String str8 = property6.getAsText();
        org.joda.time.DurationField durationField9 = property6.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime22 = dateTime17.plusSeconds(13);
        org.joda.time.DateTime dateTime23 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime17.withMillis(26L);
        int int26 = property6.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 239, dateTimeZone3);
        long long6 = dateTimeZone3.convertUTCToLocal((long) (short) 10);
        java.lang.String str8 = dateTimeZone3.getNameKey(1644572218446L);
        java.lang.String str10 = dateTimeZone3.getName(5907461382676800000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 187200010L + "'", long6 == 187200010L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone7);
        int int10 = dateTimeZone7.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 10, dateTimeZone7);
        long long13 = dateTimeZone7.nextTransition((long) 364);
        long long15 = dateTimeZone7.nextTransition(36000L);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 187200000 + "'", int10 == 187200000);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 364L + "'", long13 == 364L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 36000L + "'", long15 == 36000L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        java.util.Date date3 = new java.util.Date(86399998, 1941, 819);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Dec 27 00:00:00 UTC 86402061");
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        int int6 = monthDay2.indexOf(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        int int12 = dateTime9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property15 = dateTime9.property(dateTimeFieldType14);
        boolean boolean16 = monthDay2.isSupported(dateTimeFieldType14);
        java.lang.String str17 = dateTimeFieldType14.toString();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "era" + "'", str17, "era");
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int14 = dateTimeField12.get((long) 471);
        int int16 = dateTimeField12.getMinimumValue(89L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        int int26 = localDate24.getValue(0);
        java.lang.String str27 = localDate24.toString();
        org.joda.time.LocalDate localDate29 = localDate24.withWeekyear(1);
        org.joda.time.LocalDate localDate31 = localDate24.withDayOfYear((int) (byte) 1);
        int int32 = localDate24.getYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(100);
        int int38 = localDate35.size();
        org.joda.time.LocalDate localDate40 = localDate35.plusMonths(6);
        int int42 = localDate40.getValue(0);
        boolean boolean43 = localDate24.equals((java.lang.Object) int42);
        org.joda.time.LocalDate localDate45 = localDate24.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDate localDate47 = localDate24.withYearOfCentury(7);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.Chronology chronology52 = dateTimeFormatter51.getChronology();
        boolean boolean53 = dateTimeFormatter51.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter51.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = dateTimeFormatter51.getPrinter();
        org.joda.time.Chronology chronology59 = dateTimeFormatter51.getChronology();
        org.joda.time.Chronology chronology60 = dateTimeFormatter51.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean64 = dateTimeZone62.isStandardOffset(10L);
        java.lang.Object obj65 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long72 = dateTimeZone68.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(obj65, dateTimeZone68);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTime();
        int int75 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) dateTime73);
        long long79 = dateTimeZone62.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate80 = org.joda.time.LocalDate.now(dateTimeZone62);
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale82);
        java.lang.String str84 = locale82.getDisplayVariant();
        java.lang.String str85 = dateTimeZone62.getName((long) 2175, locale82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter51.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(5907461382864000000L, dateTimeZone62);
        int int88 = localDate47.compareTo((org.joda.time.ReadablePartial) localDate87);
        int int89 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDate87);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-08-13" + "'", str27, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNull(dateTimePrinter58);
        org.junit.Assert.assertNull(chronology59);
        org.junit.Assert.assertNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-187199987L) + "'", long72 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 32762L + "'", long79 == 32762L);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.010" + "'", str85, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 31 + "'", int89 == 31);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.LocalDate localDate25 = property23.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate25.plus(readablePeriod26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        int int33 = localDate30.size();
        org.joda.time.LocalDate localDate35 = localDate30.plusMonths(6);
        int int37 = localDate35.getValue(0);
        java.lang.String str38 = localDate35.toString();
        org.joda.time.LocalDate localDate40 = localDate35.withWeekyear(1);
        org.joda.time.LocalDate localDate42 = localDate35.withDayOfYear((int) (byte) 1);
        int int43 = localDate35.getYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.withDayOfYear(100);
        int int49 = localDate46.size();
        org.joda.time.LocalDate localDate51 = localDate46.plusMonths(6);
        int int53 = localDate51.getValue(0);
        boolean boolean54 = localDate35.equals((java.lang.Object) int53);
        org.joda.time.LocalDate localDate56 = localDate35.withDayOfYear((int) (short) 100);
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTime dateTime58 = localDate35.toDateTime(localTime57);
        int int59 = localDate35.getCenturyOfEra();
        int int60 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-08-13" + "'", str38, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str5 = locale0.getExtension('a');
        java.lang.String str6 = locale0.getISO3Language();
        boolean boolean7 = locale0.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale0.getUnicodeLocaleType("-16812840");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: -16812840");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "it" + "'", str1, "it");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ita" + "'", str6, "ita");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField17 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTimeField18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        int int14 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property13.addToCopy((long) (byte) -1);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate22.toDateTime(localTime28);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime dateTime32 = dateTime29.withYear(26);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        long long35 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.centuryOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime32.toMutableDateTime(chronology37);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 58187427402912L + "'", long35 == 58187427402912L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        java.lang.String str16 = durationFieldType15.getName();
        org.joda.time.LocalDate localDate18 = localDate13.withFieldAdded(durationFieldType15, 32770);
        int int19 = property8.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Interval interval20 = localDate18.toInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "days" + "'", str16, "days");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfWeek();
        boolean boolean18 = dateTimeField17.isSupported();
        long long21 = dateTimeField17.add((long) 17, (long) (byte) 10);
        java.lang.String str23 = dateTimeField17.getAsText(5907399684280970990L);
        boolean boolean25 = dateTimeField17.isLeap(5907399684280970744L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 864000017L + "'", long21 == 864000017L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "samedi" + "'", str23, "samedi");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        int int29 = localDate7.size();
        org.joda.time.LocalDate.Property property30 = localDate7.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate7.withDayOfMonth(471);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 471 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        int int11 = property2.getMaximumTextLength(locale10);
        int int12 = property2.getMaximumValueOverall();
        boolean boolean14 = property2.equals((java.lang.Object) 124243200100L);
        java.util.Locale locale17 = new java.util.Locale("21-feb-1900 0.00.00", "it");
        int int18 = property2.getMaximumShortTextLength(locale17);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = locale17.getDisplayLanguage(locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "21-feb-1900 0.00.00_IT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.monthOfYear();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay22 = monthDay20.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay.Property property25 = monthDay20.dayOfMonth();
        java.lang.String str26 = property25.toString();
        java.util.Locale locale27 = null;
        int int28 = property25.getMaximumShortTextLength(locale27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        java.lang.String str35 = property34.getAsShortText();
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        long long48 = dateTimeField40.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay51 = monthDay49.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay49.minus(readablePeriod52);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay56 = monthDay54.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField58 = monthDay56.getField((int) (byte) 0);
        java.util.Locale locale62 = new java.util.Locale("", "", "hi!");
        int int63 = dateTimeField58.getMaximumTextLength(locale62);
        java.lang.String str64 = dateTimeField40.getAsShortText((org.joda.time.ReadablePartial) monthDay49, locale62);
        int int65 = property34.getMaximumTextLength(locale62);
        org.joda.time.DateTimeField dateTimeField66 = property34.getField();
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(locale67);
        int int69 = property34.getMaximumTextLength(locale67);
        boolean boolean70 = locale67.hasExtensions();
        java.lang.String str71 = locale67.getDisplayCountry();
        boolean boolean72 = locale67.hasExtensions();
        int int73 = property25.getMaximumShortTextLength(locale67);
        java.lang.String str74 = locale67.getDisplayLanguage();
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.lang.String str76 = locale75.getDisplayVariant();
        java.lang.String str77 = locale67.getDisplayName(locale75);
        java.lang.String str78 = dateTimeField17.getAsShortText((long) 366, locale75);
        long long81 = dateTimeField17.addWrapField((long) 14432, 0);
        long long83 = dateTimeField17.roundFloor(97L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "3" + "'", str35, "3");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 9L + "'", long48 == 9L);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Feb" + "'", str64, "Feb");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644572597217,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=217,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fran\347ais" + "'", str74, "fran\347ais");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "francese" + "'", str77, "francese");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "gen" + "'", str78, "gen");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 14432L + "'", long81 == 14432L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-187200000L) + "'", long83 == (-187200000L));
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology16 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.millisOfDay();
        long long20 = dateTimeField18.roundHalfCeiling((long) (short) -1);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getCountry();
        java.lang.String str24 = dateTimeField18.getAsText(1660210645527L, locale22);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.getDisplayCountry();
        java.lang.String str28 = dateTimeField18.getAsText(1451L, locale26);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.lang.String str30 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray44 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList61);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList61);
        java.util.Collection<java.util.Locale> localeCollection64 = null;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, localeCollection64);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale66 = java.util.Locale.lookup(languageRangeList1, localeCollection64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "49045527" + "'", str24, "49045527");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Royaume-Uni" + "'", str27, "Royaume-Uni");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "14401451" + "'", str28, "14401451");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(localeList65);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now(dateTimeZone6);
        int int10 = dateTimeZone6.getOffsetFromLocal((-60494601600001L));
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.now(dateTimeZone6);
        org.joda.time.MonthDay monthDay13 = monthDay11.minusMonths(292278994);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 187200000 + "'", int10 == 187200000);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(1, 21);
        int int5 = calendar1.getWeekYear();
        boolean boolean6 = calendar1.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61501040202696,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=21,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=304,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21 + "'", int5 == 21);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = dateTimeZone1.getShortName((long) (byte) 100);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(dateTimeZone1);
        java.util.TimeZone timeZone18 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.fromCalendarFields(calendar19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis(2022);
        org.joda.time.DateTime dateTime28 = monthDay20.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(227);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-187199987L) + "'", long11 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572597316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=326,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        int int13 = property5.getDifference((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime15 = property5.addToCopy((-50659));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-16812840) + "'", int13 == (-16812840));
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDate9.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(83968099800000L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        int int46 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime47 = localDate9.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis(41);
        int int50 = dateTime47.getMonthOfYear();
        org.joda.time.DateTime dateTime52 = dateTime47.plusMillis(38399214);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.now(chronology4);
        org.joda.time.Chronology chronology7 = monthDay6.getChronology();
        org.joda.time.Chronology chronology8 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfWeek();
        long long12 = dateTimeField9.addWrapField(1651689388210L, 1199);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property15 = monthDay14.monthOfYear();
        org.joda.time.MonthDay monthDay17 = property15.addToCopy((int) ' ');
        int int18 = monthDay17.size();
        org.joda.time.MonthDay.Property property19 = monthDay17.dayOfMonth();
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay(1644572109112L);
        java.lang.String str23 = monthDay22.toString();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property27 = monthDay26.monthOfYear();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale28.getDisplayScript(locale29);
        int int32 = property27.getMaximumTextLength(locale28);
        java.lang.String str33 = property27.getAsString();
        java.lang.String str34 = property27.getAsShortText();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        int int36 = property27.getMaximumTextLength(locale35);
        java.lang.String str37 = monthDay22.toString("--01-01", locale35);
        java.lang.String str38 = monthDay22.toString();
        int[] intArray39 = monthDay22.getValues();
        org.joda.time.Chronology chronology40 = monthDay22.getChronology();
        int[] intArray41 = monthDay22.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = dateTimeField9.set((org.joda.time.ReadablePartial) monthDay17, 68340, intArray41, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1651862188210L + "'", long12 == 1651862188210L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "--02-13" + "'", str23, "--02-13");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "it" + "'", str30, "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "janv." + "'", str34, "janv.");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--01-01" + "'", str37, "--01-01");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "--02-13" + "'", str38, "--02-13");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2, 13]");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2, 13]");
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 52);
        org.joda.time.LocalDate localDate32 = localDate27.plusWeeks(0);
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.centuryOfEra();
        boolean boolean35 = dateTimeField34.isLenient();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        java.lang.String str10 = property5.toString();
        int int11 = property5.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property5.setCopy("\u4e0a\u5348 12:10:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2008/5/11 ?? 12:10:00\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfMonth]" + "'", str10, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 13 + "'", int11 == 13);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        calendar5.roll(9, false);
        int int10 = calendar5.getActualMaximum(1);
        java.lang.Object obj11 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj11, dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime19.getZone();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        calendar5.setTimeZone(timeZone22);
        java.util.Calendar.Builder builder24 = builder0.setTimeZone(timeZone22);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setExtension('u', "en-US");
        java.util.Locale.Builder builder30 = builder25.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder31 = builder25.clear();
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property34 = monthDay33.monthOfYear();
        int int35 = property34.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime40.hourOfDay();
        int int42 = property34.compareTo((org.joda.time.ReadableInstant) dateTime40);
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = property34.getAsText(locale43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = monthDay54.getField((int) (byte) 0);
        java.util.Locale locale60 = new java.util.Locale("", "", "hi!");
        int int61 = dateTimeField56.getMaximumTextLength(locale60);
        long long64 = dateTimeField56.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay65 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay67 = monthDay65.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay65.minus(readablePeriod68);
        org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay72 = monthDay70.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField74 = monthDay72.getField((int) (byte) 0);
        java.util.Locale locale78 = new java.util.Locale("", "", "hi!");
        int int79 = dateTimeField74.getMaximumTextLength(locale78);
        java.lang.String str80 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) monthDay65, locale78);
        int int81 = property50.getMaximumTextLength(locale78);
        org.joda.time.DateTimeField dateTimeField82 = property50.getField();
        java.util.Locale locale83 = java.util.Locale.FRENCH;
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(locale83);
        int int85 = property50.getMaximumTextLength(locale83);
        java.lang.String str86 = locale83.getDisplayVariant();
        java.util.Locale locale87 = java.util.Locale.US;
        java.lang.String str88 = locale87.toLanguageTag();
        java.lang.String str89 = locale83.getDisplayName(locale87);
        java.lang.String str90 = locale87.getLanguage();
        java.util.Set<java.lang.Character> charSet91 = locale87.getExtensionKeys();
        int int92 = property34.getMaximumTextLength(locale87);
        java.util.Locale.Builder builder93 = builder31.setLocale(locale87);
        java.util.Locale locale94 = builder31.build();
        java.util.Calendar calendar95 = java.util.Calendar.getInstance(timeZone22, locale94);
        int int97 = calendar95.get(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=504,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278994 + "'", int10 == 292278994);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-187199987L) + "'", long18 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e00\u6708" + "'", str44, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3" + "'", str51, "3");
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 9L + "'", long64 == 9L);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Feb" + "'", str80, "Feb");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644572597505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=505,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "en-US" + "'", str88, "en-US");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "French" + "'", str89, "French");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "en" + "'", str90, "en");
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar95);
// flaky:         org.junit.Assert.assertEquals(calendar95.toString(), "java.util.GregorianCalendar[time=1644572597505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=505,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        calendar1.clear();
        int int25 = calendar1.getActualMinimum(11);
        calendar1.set(49202, 14399954, 49034491, 88, 23556876);
        int int32 = calendar1.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=49202,MONTH=14399954,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=49034491,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=88,MINUTE=23556876,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillis((-60526227120001L));
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra(52);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate.Property property12 = localDate10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int24 = dateTime17.get(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate10.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate27 = localDate10.withWeekyear(365);
        org.joda.time.DateTime dateTime28 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate27);
        boolean boolean29 = dateTime4.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        java.lang.String str1 = durationFieldType0.toString();
        java.lang.String str2 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "days" + "'", str1, "days");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "days" + "'", str2, "days");
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDate9.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(83968099800000L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        int int46 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime47 = localDate9.toDateTimeAtMidnight(dateTimeZone29);
        int int48 = localDate9.getDayOfMonth();
        org.joda.time.LocalDate.Property property49 = localDate9.year();
        int int50 = localDate9.getYearOfCentury();
        org.joda.time.Chronology chronology51 = localDate9.getChronology();
        int int52 = localDate9.size();
        org.joda.time.LocalDate localDate54 = localDate9.minusYears(71);
        org.joda.time.LocalDate.Property property55 = localDate54.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 13 + "'", int48 == 13);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de-DE" + "'", str1, "de-DE");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "de_DE");
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate2.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate19 = localDate2.withWeekyear(365);
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(43199999);
        int[] intArray22 = localDate19.getValues();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) '#');
        int int28 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime25.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.plus(readablePeriod34);
        boolean boolean36 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = dateTime25.isEqual((long) ' ');
        int int39 = dateTime25.getMillisOfDay();
        org.joda.time.DateTime.Property property40 = dateTime25.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone41.convertUTCToLocal((long) 23628);
        java.lang.String str44 = dateTimeZone41.getID();
        org.joda.time.DateTime dateTime45 = dateTime25.withZone(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = localDate19.toDateMidnight(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[365, 2, 16]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14399999 + "'", int39 == 14399999);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 187223628L + "'", long43 == 187223628L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+52:00" + "'", str44, "+52:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = dateTime2.toString();
        int int15 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime2.withHourOfDay((int) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(94);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str14, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        java.lang.String str12 = calendar1.getCalendarType();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.setLenient(true);
        calendar16.roll((int) (short) 100, 0);
        int int23 = calendar16.getGreatestMinimum(0);
        calendar16.clear();
        calendar16.clear(0);
        calendar16.set(8, 0, (int) 'a', 2021, 3);
        int int34 = calendar16.getGreatestMinimum(3);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        calendar36.setLenient(true);
        calendar36.setMinimalDaysInFirstWeek(1970);
        int int42 = calendar36.getGreatestMinimum(10);
        java.time.Instant instant43 = calendar36.toInstant();
        calendar36.setTimeInMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) '4');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone52);
        java.util.TimeZone timeZone54 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        calendar36.setTimeZone(timeZone54);
        calendar16.setTimeZone(timeZone54);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone54, locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap61 = calendar1.getDisplayNames(823, 0, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=10,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35,MINUTE=13,SECOND=17,MILLISECOND=746,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644572597747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=747,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromDateFields(date9);
        int int11 = date9.getMonth();
        date9.setMinutes(30);
        int int14 = date9.getDay();
        int int15 = date9.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572597769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:30:17 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 122 + "'", int15 == 122);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        int int2 = monthDay1.size();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = monthDay1.getValue(87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 87");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        java.lang.String str3 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "halfdayOfDay" + "'", str1, "halfdayOfDay");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "halfdayOfDay" + "'", str3, "halfdayOfDay");
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("fr");
        boolean boolean14 = calendar1.before((java.lang.Object) "fr");
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        int int16 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-59367263820162,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=88,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=267,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=22,SECOND=59,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        int int6 = calendar1.getActualMaximum(1);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long14 = dateTimeZone10.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj7, dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        calendar1.setTimeZone(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=856,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278994 + "'", int6 == 292278994);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187199987L) + "'", long14 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1644572597856,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=17,MILLISECOND=856,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.withMinuteOfHour(4);
        org.joda.time.DateTime.Property property21 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy((-1970));
        int int24 = property21.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        int int38 = dateTime37.getMillisOfDay();
        long long39 = dateTime37.getMillis();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.minus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime37.plusHours(31);
        org.joda.time.DateTime.Property property44 = dateTime37.secondOfDay();
        org.joda.time.DateTime dateTime45 = property44.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 43199999 + "'", int38 == 43199999);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3052799999L + "'", long39 == 3052799999L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks(100);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getName();
        org.joda.time.DateTime dateTime23 = property19.addWrapFieldToCopy(0);
        int int24 = property19.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "secondOfDay" + "'", str21, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 86399 + "'", int24 == 86399);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.minus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology51 = chronology47.withZone(dateTimeZone50);
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DurationField durationField53 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.yearOfCentury();
        boolean boolean55 = dateTimeFieldType35.isSupported(chronology47);
        boolean boolean56 = dateTimeFieldType18.isSupported(chronology47);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        java.lang.String str72 = chronology67.toString();
        org.joda.time.DurationField durationField73 = chronology67.seconds();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = durationFieldType57.getField(chronology67);
        java.lang.String str79 = durationFieldType57.toString();
        java.lang.String str80 = durationFieldType57.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+52:00]" + "'", str52, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+52:00]" + "'", str72, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "minutes" + "'", str79, "minutes");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "minutes" + "'", str80, "minutes");
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.LocalDate localDate17 = localDate15.plusYears(0);
        int int18 = localDate15.getDayOfYear();
        org.joda.time.LocalDate localDate20 = localDate15.withCenturyOfEra(9);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDate23.getFieldTypes();
        java.lang.String str28 = localDate23.toString();
        org.joda.time.LocalDate localDate29 = localDate15.withFields((org.joda.time.ReadablePartial) localDate23);
        int int30 = localDate29.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 311 + "'", int18 == 311);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-13" + "'", str28, "2022-02-13");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 44 + "'", int30 == 44);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime16 = dateTime2.withSecondOfMinute(59);
        int int17 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime2.plusWeeks(14403);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks(38399214);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        int int5 = dateTime4.getSecondOfDay();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(100);
        int int12 = localDate9.size();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = dateTime17.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property23 = dateTime17.property(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property24 = localDate14.property(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property25 = localDate14.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime35 = dateTime30.withYearOfEra((int) ' ');
        int int36 = dateTime30.getYearOfCentury();
        int int37 = dateTime30.getMonthOfYear();
        int int38 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime41.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime41.toYearMonthDay();
        org.joda.time.DateTime dateTime48 = dateTime41.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTime dateTime50 = dateTime41.plus(7092L);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime41.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime30.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = localDate14.toDateTimeAtStartOfDay(dateTimeZone51);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = property6.compareTo((org.joda.time.ReadablePartial) localDate14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14400 + "'", int5 == 14400);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField19 = chronology8.dayOfYear();
        long long22 = dateTimeField19.set(0L, 9);
        int int23 = dateTimeField19.getMinimumValue();
        boolean boolean24 = dateTimeField19.isSupported();
        int int26 = dateTimeField19.getLeapAmount(83652552000000L);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField19.getMinimumValue(readablePartial27);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 518400000L + "'", long22 == 518400000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime4.withLaterOffsetAtOverlap();
        int int9 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime12 = dateTime4.withDurationAdded(3729599999L, 23556876);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        int int7 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay5 = monthDay1.withMonthOfYear(2);
        org.joda.time.MonthDay.Property property6 = monthDay1.monthOfYear();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay17 = monthDay15.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField19 = monthDay17.getField((int) (byte) 0);
        java.util.Locale locale23 = new java.util.Locale("", "", "hi!");
        int int24 = dateTimeField19.getMaximumTextLength(locale23);
        long long27 = dateTimeField19.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay28.minus(readablePeriod31);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField37 = monthDay35.getField((int) (byte) 0);
        java.util.Locale locale41 = new java.util.Locale("", "", "hi!");
        int int42 = dateTimeField37.getMaximumTextLength(locale41);
        java.lang.String str43 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) monthDay28, locale41);
        int int44 = property13.getMaximumTextLength(locale41);
        org.joda.time.DateTimeField dateTimeField45 = property13.getField();
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        int int48 = property13.getMaximumTextLength(locale46);
        java.lang.String str49 = locale46.getDisplayVariant();
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale46.getDisplayName(locale50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property58 = dateTime57.hourOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology65 = chronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology61.weekyearOfCentury();
        org.joda.time.MonthDay monthDay67 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay69 = monthDay67.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField71 = monthDay69.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.era();
        int int73 = monthDay69.indexOf(dateTimeFieldType72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MonthDay monthDay76 = monthDay69.withPeriodAdded(readablePeriod74, (-1));
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.lang.String str79 = dateTimeField66.getAsShortText((org.joda.time.ReadablePartial) monthDay69, (int) '#', locale78);
        java.lang.String str80 = locale46.getDisplayName(locale78);
        java.lang.String str81 = property6.getAsShortText(locale78);
        java.lang.String str82 = property6.getAsText();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3" + "'", str14, "3");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9L + "'", long27 == 9L);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Feb" + "'", str43, "Feb");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644572598166,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=18,MILLISECOND=166,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en-US" + "'", str51, "en-US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "French" + "'", str52, "French");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "35" + "'", str79, "35");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "French" + "'", str80, "French");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Jan" + "'", str81, "Jan");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "janvier" + "'", str82, "janvier");
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        java.util.Date date5 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        long long6 = date5.getTime();
        int int7 = date5.getHours();
        java.lang.String str8 = date5.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 05 00:10:00 UTC 4630");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 83968099800000L + "'", long6 == 83968099800000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "5 nov. 4630 00:10:00" + "'", str8, "5 nov. 4630 00:10:00");
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        int int8 = property7.getMinimumValue();
        org.joda.time.DateTime dateTime10 = property7.addToCopy(9);
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.joda.time.DateTime dateTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.joda.time.DurationField durationField14 = property13.getRangeDurationField();
        java.util.Locale locale16 = new java.util.Locale("Feb");
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        int int18 = property13.getMaximumTextLength(locale16);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals(locale16.toString(), "feb");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField8 = property2.getDurationField();
        int int9 = property2.getMinimumValue();
        java.lang.Object obj10 = null;
        boolean boolean11 = property2.equals(obj10);
        java.lang.String str12 = property2.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "janv." + "'", str12, "janv.");
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(684);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        long long19 = chronology8.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        long long32 = dateTimeField24.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay33.minus(readablePeriod36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 0);
        java.util.Locale locale46 = new java.util.Locale("", "", "hi!");
        int int47 = dateTimeField42.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) monthDay33, locale46);
        int[] intArray49 = monthDay33.getValues();
        int[] intArray51 = chronology8.get((org.joda.time.ReadablePartial) monthDay33, (long) 4);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.Chronology chronology53 = monthDay52.getChronology();
        java.lang.String str55 = monthDay52.toString("14400");
        org.joda.time.MonthDay monthDay57 = monthDay52.minusDays(25);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62180539199983L) + "'", long19 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9L + "'", long32 == 9L);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb" + "'", str48, "Feb");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 3]");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "14400" + "'", str55, "14400");
        org.junit.Assert.assertNotNull(monthDay57);
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        java.lang.String str13 = property5.toString();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        int int23 = localDate21.getValue(0);
        java.lang.String str24 = localDate21.toString();
        org.joda.time.LocalDate localDate26 = localDate21.withWeekyear(1);
        org.joda.time.LocalDate localDate28 = localDate21.withDayOfYear((int) (byte) 1);
        int int29 = localDate21.getYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        int int35 = localDate32.size();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        int int39 = localDate37.getValue(0);
        boolean boolean40 = localDate21.equals((java.lang.Object) int39);
        org.joda.time.LocalDate localDate42 = localDate21.withDayOfYear((int) (short) 100);
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTime dateTime44 = localDate21.toDateTime(localTime43);
        long long45 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate localDate46 = property5.roundHalfCeilingCopy();
        int int47 = localDate46.getYearOfEra();
        org.joda.time.ReadablePartial readablePartial48 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withFields(readablePartial48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.minus(readablePeriod54);
        int[] intArray56 = monthDay53.getValues();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = localDate49.isBefore((org.joda.time.ReadablePartial) monthDay53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[dayOfMonth]" + "'", str13, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-08-13" + "'", str24, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-179L) + "'", long45 == (-179L));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2, 15]");
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = property17.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property17.setCopy((int) (byte) 0);
        org.joda.time.LocalDate.Property property21 = localDate20.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        int int5 = dateTimeField4.getMinimumValue();
        int int6 = dateTimeField4.getMinimumValue();
        long long8 = dateTimeField4.remainder((long) 2022);
        long long11 = dateTimeField4.add((long) 16, 1970);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime14.plusWeeks(5);
        org.joda.time.Chronology chronology27 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(100);
        org.joda.time.Interval interval34 = localDate33.toInterval();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.days();
        java.lang.String str36 = durationFieldType35.getName();
        org.joda.time.LocalDate localDate38 = localDate33.withFieldAdded(durationFieldType35, 32770);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate33.plus(readablePeriod39);
        org.joda.time.LocalDate localDate42 = localDate33.withYearOfEra(32769);
        org.joda.time.LocalDate localDate44 = localDate33.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime45 = localDate44.toDateTimeAtMidnight();
        int int46 = localDate44.getCenturyOfEra();
        org.joda.time.LocalDate localDate48 = localDate44.withWeekyear(19);
        int int49 = localDate48.getYear();
        int[] intArray51 = chronology27.get((org.joda.time.ReadablePartial) localDate48, (long) 49073203);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyearOfCentury();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(83968099800000L, chronology62);
        org.joda.time.DateTimeField dateTimeField69 = chronology62.dayOfYear();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(dateTimeZone71);
        org.joda.time.LocalDate localDate74 = localDate72.withDayOfYear(100);
        int int75 = localDate72.size();
        org.joda.time.LocalDate localDate77 = localDate72.plusMonths(6);
        int[] intArray79 = chronology62.get((org.joda.time.ReadablePartial) localDate72, (long) 35);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = dateTimeField4.addWrapPartial((org.joda.time.ReadablePartial) localDate48, 49211518, intArray79, (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49211518");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5180457600016L + "'", long11 == 5180457600016L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "days" + "'", str36, "days");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 3]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 3]");
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        java.util.Date date1 = dateTime0.toDate();
        date1.setHours((int) (byte) -1);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 10 23:43:18 UTC 2022");
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(6);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        int int17 = localDate14.size();
        int int19 = localDate14.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate21 = localDate14.withWeekyear(10);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        long long30 = dateTimeZone25.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        java.lang.String str35 = locale33.getCountry();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale33.getDisplayVariant(locale36);
        java.lang.String str38 = dateTimeZone25.getShortName((long) 20, locale33);
        java.lang.String str39 = localDate14.toString("3", locale33);
        org.joda.time.DateTime dateTime40 = localDate14.toDateTimeAtCurrentTime();
        int int41 = dateTime40.getMillisOfSecond();
        long long42 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime44 = dateTime40.withWeekyear(2111);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfMinute();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks(49073203);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(12503);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-187199996L) + "'", long30 == (-187199996L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572598442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=18,MILLISECOND=442,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+52:00" + "'", str38, "+52:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3" + "'", str39, "3");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 442 + "'", int41 == 442);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 31);
        boolean boolean24 = dateTimeFormatter21.isPrinter();
        java.lang.StringBuffer stringBuffer25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime35 = dateTime30.withYearOfEra((int) ' ');
        int int36 = dateTime30.getYearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime30.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime40 = dateTime30.plus(32762L);
        int int41 = dateTime40.getDayOfMonth();
        int int42 = dateTime40.getSecondOfDay();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(3428268451211279L);
        org.joda.time.Chronology chronology45 = monthDay44.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime40.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime40.minusDays(2112);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(stringBuffer25, (org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14432 + "'", int42 == 14432);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(6);
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(41);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (short) 100);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('u', "en-US");
        java.util.Locale.Builder builder19 = builder15.clear();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = builder19.build();
        java.lang.String str22 = locale21.getCountry();
        java.util.Calendar calendar23 = dateTime14.toCalendar(locale21);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar23.getMinimum(284);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 284");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=8450340000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=98,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=19,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.clockhourOfDay();
        long long20 = chronology9.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay23 = monthDay21.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField25 = monthDay23.getField((int) (byte) 0);
        java.util.Locale locale29 = new java.util.Locale("", "", "hi!");
        int int30 = dateTimeField25.getMaximumTextLength(locale29);
        long long33 = dateTimeField25.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay34.minus(readablePeriod37);
        org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay41 = monthDay39.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField43 = monthDay41.getField((int) (byte) 0);
        java.util.Locale locale47 = new java.util.Locale("", "", "hi!");
        int int48 = dateTimeField43.getMaximumTextLength(locale47);
        java.lang.String str49 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) monthDay34, locale47);
        int[] intArray50 = monthDay34.getValues();
        int[] intArray52 = chronology9.get((org.joda.time.ReadablePartial) monthDay34, (long) 4);
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(chronology9);
        boolean boolean54 = dateTimeFieldType0.isSupported(chronology9);
        org.joda.time.DurationField durationField55 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology9.clockhourOfHalfday();
        boolean boolean59 = dateTimeField57.isLeap(48999000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62180539199983L) + "'", long20 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9L + "'", long33 == 9L);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Feb" + "'", str49, "Feb");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 3]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTime dateTime14 = dateTime4.withDurationAdded(35L, 45);
        org.joda.time.DateTime dateTime16 = dateTime4.plusDays(43199999);
        int int17 = dateTime4.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime4.withWeekOfWeekyear(14403);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14403 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        java.lang.String str19 = dateTimeZone17.getShortName((long) 26);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate13 = localDate7.plusDays(3659999);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate13.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        long long6 = java.util.Date.UTC(14402021, (-1829), (-700535), 7, 102812, 2035);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 454416346487155000L + "'", long6 == 454416346487155000L);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset(10L);
        long long7 = dateTimeZone2.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 187200000, dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(39659999L);
        boolean boolean14 = dateTime12.isBefore(1451870438400052L);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        java.lang.String str26 = localDate23.toString();
        org.joda.time.LocalDate localDate28 = localDate23.withWeekyear(1);
        org.joda.time.LocalDate localDate30 = localDate23.withDayOfYear((int) (byte) 1);
        int int31 = localDate23.getYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime39 = localDate23.toDateTimeAtMidnight(dateTimeZone33);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isStandardOffset((long) '4');
        int int46 = dateTimeZone41.getStandardOffset((long) 292278994);
        org.joda.time.DateTime dateTime47 = localDate23.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 17, dateTimeZone41);
        org.joda.time.DateTime dateTime49 = dateTime12.withZone(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-58474832460001L) + "'", long7 == (-58474832460001L));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-08-13" + "'", str26, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187199996L) + "'", long38 == (-187199996L));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology23 = chronology19.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.dayOfYear();
        org.joda.time.DurationField durationField27 = chronology19.seconds();
        org.joda.time.DurationField durationField28 = chronology19.minutes();
        org.joda.time.DateTime dateTime29 = dateTime9.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime33.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime33.toYearMonthDay();
        org.joda.time.DateTime dateTime40 = dateTime33.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        boolean boolean46 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology47 = dateTime45.getChronology();
        int int48 = dateTime45.getSecondOfMinute();
        org.joda.time.DateTime dateTime50 = dateTime45.minusHours(0);
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime45.toYearMonthDay();
        org.joda.time.LocalDate localDate52 = dateTime45.toLocalDate();
        int[] intArray54 = chronology19.get((org.joda.time.ReadablePartial) localDate52, (long) (short) 0);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(0L, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer6, (org.joda.time.ReadablePartial) localDate55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 59 + "'", int48 == 59);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 3]");
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setScript("0010-02-14");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 0010-02-14 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.centuryOfEra();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.hourOfHalfday();
        java.lang.String str20 = dateTimeField18.getAsText((-1650925148000L));
        long long22 = dateTimeField18.roundHalfFloor((long) 229);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField18.add((-58474742400000L), 83968449000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 83968449000000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "5" + "'", str20, "5");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Calendar.Builder builder15 = builder3.setWeekDate((int) (byte) 1, 187200000, 1);
        java.util.Calendar.Builder builder20 = builder3.setTimeOfDay(24, 816, 816, 9);
        int[] intArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder20.setFields(intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        long long6 = java.util.Date.UTC(11, 37, 292269054, 2000, 816, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25250288881060000L + "'", long6 == 25250288881060000L);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay11 = monthDay9.minusDays((int) (short) 10);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category13, locale15);
        java.lang.String str17 = monthDay11.toString("35", locale15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter6.withLocale(locale15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withZoneUTC();
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(writer20, 5907461389171200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "35" + "'", str17, "35");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime.Property property6 = dateTime2.minuteOfHour();
        java.lang.String str7 = property6.getAsString();
        java.lang.String str8 = property6.getAsText();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "59" + "'", str7, "59");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "59" + "'", str8, "59");
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) ' ');
        org.joda.time.LocalDate localDate15 = localDate13.plusMonths(59);
        int int16 = localDate15.getWeekOfWeekyear();
        int int17 = localDate15.getYear();
        org.joda.time.LocalDate.Property property18 = localDate15.yearOfCentury();
        org.joda.time.Interval interval19 = localDate15.toInterval();
        org.joda.time.DateMidnight dateMidnight20 = localDate15.toDateMidnight();
        org.joda.time.LocalDate localDate22 = localDate15.plusWeeks(0);
        org.joda.time.LocalDate localDate24 = localDate15.minusDays(1051);
        org.joda.time.LocalDate.Property property25 = localDate24.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37 + "'", int17 == 37);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay5 = monthDay1.withMonthOfYear(2);
        org.joda.time.MonthDay.Property property6 = monthDay1.monthOfYear();
        java.lang.String str7 = property6.getAsShortText();
        org.joda.time.MonthDay monthDay9 = property6.addWrapFieldToCopy(53);
        int int10 = monthDay9.getMonthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay9.withChronologyRetainFields(chronology11);
        java.lang.String str13 = monthDay12.toString();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "janv." + "'", str7, "janv.");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--06-03" + "'", str13, "--06-03");
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate14.withWeekyear(6);
        org.joda.time.DateTimeField dateTimeField18 = localDate16.getField(0);
        org.joda.time.LocalDate localDate20 = localDate16.plusYears(999);
        org.joda.time.LocalDate.Property property21 = localDate16.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate16.withPeriodAdded(readablePeriod22, 999);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate24.plus(readablePeriod25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder6 = builder0.clear();
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        int int17 = property9.compareTo((org.joda.time.ReadableInstant) dateTime15);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = property9.getAsText(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        org.joda.time.DateTimeField dateTimeField57 = property25.getField();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        int int60 = property25.getMaximumTextLength(locale58);
        java.lang.String str61 = locale58.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale62.toLanguageTag();
        java.lang.String str64 = locale58.getDisplayName(locale62);
        java.lang.String str65 = locale62.getLanguage();
        java.util.Set<java.lang.Character> charSet66 = locale62.getExtensionKeys();
        int int67 = property9.getMaximumTextLength(locale62);
        java.util.Locale.Builder builder68 = builder6.setLocale(locale62);
        java.util.Locale locale69 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder72 = builder6.setUnicodeLocaleKeyword("01-Jan-1970 00:00:00", "dimanche");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 01-Jan-1970 00:00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e00\u6708" + "'", str19, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644572598888,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=18,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-US" + "'", str63, "en-US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "French" + "'", str64, "French");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology23);
        java.lang.Integer int28 = dateTimeFormatter27.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter27.getZone();
        java.io.Writer writer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(writer30, 70315200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(dateTimeZone29);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = property13.addToCopy((long) 11);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str30 = property13.getAsShortText(locale29);
        org.joda.time.DateTime dateTime31 = property13.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime31.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "19" + "'", str30, "19");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset(10L);
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj16, dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime24);
        long long30 = dateTimeZone13.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone13);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = locale33.getDisplayVariant();
        java.lang.String str36 = dateTimeZone13.getName((long) 2175, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(349260000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withDefaultYear(14402021);
        java.util.Locale locale42 = dateTimeFormatter41.getLocale();
        java.lang.StringBuffer stringBuffer43 = null;
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.withDayOfYear(100);
        int int49 = localDate46.size();
        org.joda.time.LocalDate localDate51 = localDate46.plusMonths(6);
        int int53 = localDate51.getValue(0);
        java.lang.String str54 = localDate51.toString();
        org.joda.time.LocalDate localDate56 = localDate51.withWeekyear(1);
        org.joda.time.LocalDate localDate58 = localDate51.withDayOfYear((int) (byte) 1);
        int int59 = localDate51.getYear();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(dateTimeZone61);
        org.joda.time.LocalDate localDate64 = localDate62.withDayOfYear(100);
        int int65 = localDate62.size();
        org.joda.time.LocalDate localDate67 = localDate62.plusMonths(6);
        int int69 = localDate67.getValue(0);
        boolean boolean70 = localDate51.equals((java.lang.Object) int69);
        org.joda.time.LocalDate localDate72 = localDate51.withDayOfYear((int) (short) 100);
        int int73 = localDate51.size();
        org.joda.time.LocalDate.Property property74 = localDate51.era();
        org.joda.time.LocalDate localDate75 = property74.roundCeilingCopy();
        int int76 = localDate75.getEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter41.printTo(stringBuffer43, (org.joda.time.ReadablePartial) localDate75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-187199987L) + "'", long23 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32762L + "'", long30 == 32762L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-08-13" + "'", str54, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(obj0, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withWeekOfWeekyear(21);
        org.joda.time.LocalDate localDate6 = localDate4.minusDays(32);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(100);
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate16 = property12.roundHalfFloorCopy();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        int int22 = localDate19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDate19.getFieldTypes();
        java.lang.String str24 = localDate19.toString();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(100);
        org.joda.time.LocalDate.Property property30 = localDate27.dayOfMonth();
        org.joda.time.LocalDate localDate32 = localDate27.withDayOfMonth(21);
        boolean boolean33 = localDate19.isEqual((org.joda.time.ReadablePartial) localDate27);
        boolean boolean34 = localDate16.isEqual((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.LocalDate localDate36 = localDate16.minusYears(23);
        int int37 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate36);
        int int38 = localDate36.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-13" + "'", str24, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 44 + "'", int38 == 44);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTime.Property property7 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.DateTimeField dateTimeField9 = monthDay7.getField((int) (byte) 0);
        long long11 = dateTimeField9.roundHalfCeiling((long) (byte) 100);
        long long13 = dateTimeField9.roundCeiling(32772L);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2678400000L + "'", long13 == 2678400000L);
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay17 = monthDay15.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField19 = monthDay17.getField((int) (byte) 0);
        java.util.Locale locale23 = new java.util.Locale("", "", "hi!");
        int int24 = dateTimeField19.getMaximumTextLength(locale23);
        long long27 = dateTimeField19.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay28.minus(readablePeriod31);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField37 = monthDay35.getField((int) (byte) 0);
        java.util.Locale locale41 = new java.util.Locale("", "", "hi!");
        int int42 = dateTimeField37.getMaximumTextLength(locale41);
        java.lang.String str43 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) monthDay28, locale41);
        int int44 = property13.getMaximumTextLength(locale41);
        org.joda.time.DateTimeField dateTimeField45 = property13.getField();
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        int int48 = property13.getMaximumTextLength(locale46);
        boolean boolean49 = locale46.hasExtensions();
        java.lang.String str50 = locale46.getDisplayCountry();
        boolean boolean51 = locale46.hasExtensions();
        java.lang.String str52 = property5.getAsText(locale46);
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay55 = monthDay53.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField57 = monthDay55.getField((int) (byte) 0);
        java.util.Locale locale61 = new java.util.Locale("", "", "hi!");
        int int62 = dateTimeField57.getMaximumTextLength(locale61);
        long long65 = dateTimeField57.add((long) 9, (long) (short) 0);
        int int67 = dateTimeField57.get((-187199987L));
        long long69 = dateTimeField57.remainder((long) 'a');
        long long71 = dateTimeField57.roundFloor(0L);
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("");
        int int74 = dateTimeField57.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = locale73.stripExtensions();
        java.lang.String str76 = locale46.getDisplayName(locale73);
        boolean boolean77 = locale73.hasExtensions();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3" + "'", str14, "3");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9L + "'", long27 == 9L);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Feb" + "'", str43, "Feb");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644572599112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=19,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "3" + "'", str52, "3");
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 9L + "'", long65 == 9L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 97L + "'", long69 == 97L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "French" + "'", str76, "French");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.plus((long) 'a');
        int int16 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        long long26 = chronology22.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DurationField durationField27 = chronology22.months();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (byte) 0);
        int int32 = localDate28.getYearOfEra();
        int int33 = localDate28.getDayOfWeek();
        long long35 = chronology22.set((org.joda.time.ReadablePartial) localDate28, (long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        int int37 = localDate28.get(dateTimeFieldType36);
        boolean boolean38 = dateTime15.isSupported(dateTimeFieldType36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime15.minus(readableDuration39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 7092L + "'", long26 == 7092L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1644537600032L + "'", long35 == 1644537600032L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate4.minus(readablePeriod5);
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(3);
        org.joda.time.LocalDate localDate10 = localDate6.minusDays(22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDate6.toString("DateTimeField[hourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.MonthDay monthDay34 = monthDay13.plusMonths(2);
        int[] intArray35 = monthDay13.getValues();
        org.joda.time.MonthDay monthDay37 = monthDay13.plusDays(18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = monthDay37.toString("property[dayofmonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay37);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.lang.String str5 = locale0.getDisplayScript(locale4);
        java.lang.String str7 = locale4.getExtension('u');
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale4);
        calendar8.setMinimalDaysInFirstWeek(988);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de-DE" + "'", str1, "de-DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Allemagne" + "'", str2, "Allemagne");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572599200,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=988,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=19,MILLISECOND=200,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        int int5 = localDate4.getDayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDate4.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        int int12 = dateTime9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property15 = dateTime9.property(dateTimeFieldType14);
        java.lang.String str16 = dateTimeFieldType14.getName();
        int int17 = localDate4.indexOf(dateTimeFieldType14);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate4.minus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfEra();
        org.joda.time.LocalDate localDate22 = localDate19.withWeekyear(28);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(100);
        int int28 = localDate25.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDate25.getFieldTypes();
        java.lang.String str30 = localDate25.toString();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear(100);
        org.joda.time.LocalDate.Property property36 = localDate33.dayOfMonth();
        org.joda.time.LocalDate localDate38 = localDate33.withDayOfMonth(21);
        boolean boolean39 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate41 = localDate33.plusYears(96684);
        int int42 = localDate41.getDayOfMonth();
        boolean boolean43 = localDate22.isEqual((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate45 = localDate22.plusMonths(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "era" + "'", str16, "era");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-13" + "'", str30, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        long long19 = chronology8.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.DurationField durationField20 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.era();
        org.joda.time.DurationField durationField22 = chronology8.halfdays();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62180539199983L) + "'", long19 == (-62180539199983L));
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int10 = calendar1.getActualMaximum(7);
        int int12 = calendar1.getGreatestMinimum(15);
        java.time.Instant instant13 = calendar1.toInstant();
        boolean boolean14 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572599278,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=19,MILLISECOND=278,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-46800000) + "'", int12 == (-46800000));
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay(0L);
        java.lang.String str5 = monthDay4.toString();
        boolean boolean6 = monthDay2.isEqual((org.joda.time.ReadablePartial) monthDay4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(100);
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        java.lang.String str14 = durationFieldType13.getName();
        org.joda.time.LocalDate localDate16 = localDate11.withFieldAdded(durationFieldType13, 32770);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate11.plus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate11.withYearOfEra(32769);
        int int21 = localDate11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property30 = dateTime24.property(dateTimeFieldType29);
        int int31 = localDate11.get(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = monthDay4.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--01-03" + "'", str5, "--01-03");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "days" + "'", str14, "days");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(durationFieldType32);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType2.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField22 = chronology11.secondOfMinute();
        long long26 = chronology11.add(32762L, 1644572314944L, 227);
        org.joda.time.DurationField durationField27 = durationFieldType1.getField(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 373317915525050L + "'", long26 == 373317915525050L);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar calendar8 = builder0.build();
        java.util.Calendar.Builder builder12 = builder0.setDate(10, (int) 'a', 3);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = dateTime17.toLocalDateTime();
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded(1L, 52);
        java.lang.String str23 = dateTime22.toString();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale24.getDisplayVariant();
        java.util.Calendar calendar27 = dateTime22.toCalendar(locale24);
        java.lang.String str28 = locale24.getLanguage();
        java.util.Calendar.Builder builder29 = builder0.setLocale(locale24);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime32.toMutableDateTime(dateTimeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.util.Calendar.Builder builder40 = builder29.setTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int43 = dateTimeZone41.getStandardOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone41, dateTimeZone45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-60128179200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=227,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0052-01-03T04:00:00.051+52:00" + "'", str23, "0052-01-03T04:00:00.051+52:00");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-60526223999949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime19.withFieldAdded(durationFieldType20, (int) 'u');
        int int24 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        java.lang.String str27 = dateTime25.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 349260000 + "'", int24 == 349260000);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-15T10:44:19.387+97:01" + "'", str27, "2022-02-15T10:44:19.387+97:01");
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate localDate5 = localDate0.minusWeeks((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.DurationField durationField13 = property11.getDurationField();
        org.joda.time.DateTime dateTime15 = property11.addToCopy((long) 239);
        org.joda.time.DateTime dateTime16 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime18 = property11.addToCopy((long) 2730);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime20 = localDate5.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3" + "'", str12, "3");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology9.add(readablePeriod16, (long) 32, (int) (byte) 0);
        long long23 = chronology9.add((long) '4', 32769L, 25);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(120000L, chronology9);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 819277L + "'", long23 == 819277L);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfEra();
        java.lang.String str16 = property15.getAsShortText();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDate localDate18 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate19 = property15.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property15.getLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay7 = monthDay5.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField9 = monthDay7.getField((int) (byte) 0);
        java.util.Locale locale13 = new java.util.Locale("", "", "hi!");
        int int14 = dateTimeField9.getMaximumTextLength(locale13);
        boolean boolean15 = dateTime4.equals((java.lang.Object) int14);
        int int16 = dateTime4.getHourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime4.minusWeeks((-700535));
        java.util.Locale locale23 = new java.util.Locale("years", "italien", "Cina");
        java.util.Locale.setDefault(locale23);
        java.util.Calendar calendar25 = dateTime19.toCalendar(locale23);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals(locale23.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=423680543999999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15395,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=329,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(chronology0);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property4 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay6 = property4.addToCopy((int) ' ');
        int int7 = property4.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        org.joda.time.MonthDay.Property property9 = monthDay1.property(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField20 = chronology15.years();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = chronology15.get(readablePeriod21, (-187199941L), 4311L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        int int20 = monthDay16.indexOf(dateTimeFieldType19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay16.withPeriodAdded(readablePeriod21, (-1));
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) monthDay16, (int) '#', locale25);
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale25.getDisplayLanguage();
        java.lang.String str29 = locale25.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "35" + "'", str26, "35");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "en-CA" + "'", str29, "en-CA");
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        int int38 = dateTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime41.plusWeeks(5);
        org.joda.time.Chronology chronology54 = dateTime41.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.DateTime dateTime56 = dateTime37.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.halfdayOfDay();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate60.withDayOfYear(100);
        int int63 = localDate60.size();
        org.joda.time.Chronology chronology64 = localDate60.getChronology();
        org.joda.time.DateMidnight dateMidnight65 = localDate60.toDateMidnight();
        org.joda.time.LocalDate.Property property66 = localDate60.weekOfWeekyear();
        org.joda.time.LocalDate localDate68 = localDate60.withWeekyear(0);
        int int69 = dateTimeField57.getMinimumValue((org.joda.time.ReadablePartial) localDate68);
        int int70 = localDate68.getWeekyear();
        org.joda.time.DateTime dateTime71 = localDate68.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 43199999 + "'", int38 == 43199999);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DurationField durationField16 = chronology10.minutes();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = chronology10.get(readablePeriod17, 1640645940000L, (-532800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = dateTimeField5.getAsShortText(365L, locale7);
        java.lang.String str9 = locale7.getVariant();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale7.getLanguage();
        java.util.Set<java.lang.String> strSet12 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale13 = locale7.stripExtensions();
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet14);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.LocalDate localDate6 = localDate0.minusDays(43199999);
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) (byte) -1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        long long7 = dateTimeField5.roundHalfEven(113156423106330000L);
        long long9 = dateTimeField5.remainder(1135988104780800000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 113156423106330000L + "'", long7 == 113156423106330000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMinuteOfHour(31);
        org.joda.time.DateTime dateTime6 = dateTime2.plusHours(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.DateTime dateTime10 = dateTime6.minusDays(24);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-03T13:59:59.999+52:00" + "'", str8, "1970-01-03T13:59:59.999+52:00");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate4 = property3.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = localDate4.toString("Feb 11, 2022 9:38:30 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.setMinimalDaysInFirstWeek(2730);
        calendar1.clear();
        java.time.Instant instant9 = calendar1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(229);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        calendar1.setTimeZone(timeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+229:00' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+229:00,offset=824400000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=2730,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+F9:00");
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeZone3.getShortName((long) 0, locale6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) calendar8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        int int15 = localDate12.size();
        org.joda.time.LocalDate localDate17 = localDate12.plusMonths(6);
        int int19 = localDate17.getValue(0);
        java.lang.String str20 = localDate17.toString();
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) localDate17);
        java.util.Date date23 = localDate17.toDate();
        calendar8.setTime(date23);
        int int25 = date23.getDay();
        date23.setDate(92);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-08-13" + "'", str20, "2022-08-13");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Oct 31 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone3);
        long long8 = dateTimeZone3.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        int int11 = dateTimeZone3.getOffset((long) 4);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(62135766730335L, dateTimeZone3);
        org.joda.time.LocalDate.Property property13 = localDate12.centuryOfEra();
        int int14 = property13.getMaximumValueOverall();
        org.joda.time.LocalDate localDate15 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate16 = property13.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-187199996L) + "'", long8 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 187200000 + "'", int11 == 187200000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        int int6 = monthDay2.indexOf(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        int int12 = dateTime9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property15 = dateTime9.property(dateTimeFieldType14);
        boolean boolean16 = monthDay2.isSupported(dateTimeFieldType14);
        org.joda.time.MonthDay.Property property17 = monthDay2.monthOfYear();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        int int19 = property17.getMinimumValueOverall();
        java.lang.String str20 = property17.getAsText();
        int int21 = property17.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "February" + "'", str20, "February");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) '#');
        int int16 = dateTime13.getWeekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateTime13.toDateMidnight();
        org.joda.time.DateTime.Property property18 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        int int23 = property18.getMaximumTextLength(locale20);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        java.lang.String str31 = property30.getAsShortText();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        long long44 = dateTimeField36.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay45.minus(readablePeriod48);
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay52 = monthDay50.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField54 = monthDay52.getField((int) (byte) 0);
        java.util.Locale locale58 = new java.util.Locale("", "", "hi!");
        int int59 = dateTimeField54.getMaximumTextLength(locale58);
        java.lang.String str60 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) monthDay45, locale58);
        int int61 = property30.getMaximumTextLength(locale58);
        java.lang.String str62 = locale58.getCountry();
        java.lang.String str63 = locale20.getDisplayName(locale58);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = dateTimeField8.set((long) (-10), "ita", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ita\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572599864,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=19,MILLISECOND=864,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "3" + "'", str31, "3");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 9L + "'", long44 == 9L);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Feb" + "'", str60, "Feb");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese (China)" + "'", str63, "Chinese (China)");
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(240, 34908480, 1439, (-26569155), (-3600000), 292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26569155 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.secondOfMinute();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(7200014L);
        long long21 = chronology8.set((org.joda.time.ReadablePartial) monthDay19, 392358211200000L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = monthDay19.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 392347584000000L + "'", long21 == 392347584000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        int int6 = localDate3.size();
        org.joda.time.LocalDate localDate8 = localDate3.plusMonths(6);
        int int10 = localDate8.getValue(0);
        java.lang.String str11 = localDate8.toString();
        org.joda.time.LocalDate localDate13 = localDate8.withWeekyear(1);
        org.joda.time.LocalDate localDate15 = localDate8.withDayOfYear((int) (byte) 1);
        int int16 = localDate8.getYear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime24 = localDate8.toDateTimeAtMidnight(dateTimeZone18);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isStandardOffset((long) '4');
        int int31 = dateTimeZone26.getStandardOffset((long) 292278994);
        org.joda.time.DateTime dateTime32 = localDate8.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 17, dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-08-13" + "'", str11, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-187199996L) + "'", long23 == (-187199996L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsText();
        int int4 = property2.getMinimumValue();
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        int int6 = property2.getMinimumValue();
        int int7 = property2.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "janvier" + "'", str3, "janvier");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.plusWeeks(5);
        org.joda.time.DateTime dateTime26 = dateTime12.minusMillis(13);
        int int27 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property30 = dateTime26.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        int int4 = date3.getHours();
        int int5 = date3.getMinutes();
        java.util.Date date9 = new java.util.Date(0, 0, (int) '4');
        date9.setDate(12);
        date9.setTime(1L);
        boolean boolean14 = date3.after(date9);
        date3.setTime(43199999L);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date3);
        date3.setDate(16);
        java.lang.String str20 = date3.toLocaleString();
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jan 16 11:59:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "16 janv. 1970 11:59:59" + "'", str20, "16 janv. 1970 11:59:59");
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        boolean boolean15 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) '#');
        int int21 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMillis((int) (short) 0);
        org.joda.time.Chronology chronology24 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology24);
        org.joda.time.Chronology chronology26 = dateTime14.getChronology();
        org.joda.time.DateTime.Property property27 = dateTime14.dayOfWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        int int33 = localDate30.size();
        org.joda.time.LocalDate localDate35 = localDate30.plusMonths(6);
        int int37 = localDate35.getValue(0);
        java.lang.String str38 = localDate35.toString();
        org.joda.time.LocalDate localDate40 = localDate35.withWeekyear(1);
        org.joda.time.LocalDate localDate42 = localDate35.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate42.toDateTimeAtStartOfDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(100);
        org.joda.time.DateTime.Property property50 = dateTime49.weekyear();
        int int51 = property27.getDifference((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = property27.addToCopy(251);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withPeriodAdded(readablePeriod54, 14399995);
        org.joda.time.DateTime.Property property57 = dateTime53.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-08-13" + "'", str38, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-719523) + "'", int51 == (-719523));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        java.util.Date date3 = new java.util.Date(7, 14399, 229);
        int int4 = date3.getMonth();
        int int5 = date3.getHours();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jul 17 00:00:00 UTC 3107");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withHourOfDay(4);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        int int22 = localDate20.getValue(0);
        java.lang.String str23 = localDate20.toString();
        org.joda.time.LocalDate localDate25 = localDate20.withWeekyear(1);
        org.joda.time.LocalDate localDate27 = localDate20.withDayOfYear((int) (byte) 1);
        int int28 = localDate20.getYear();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        long long35 = dateTimeZone30.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime36 = localDate20.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime7.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime.Property property38 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime40 = property38.addWrapFieldToCopy(251);
        java.lang.String str41 = property38.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) '#');
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime44.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = dateTime44.plusWeeks(5);
        org.joda.time.Chronology chronology57 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekyear();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DurationField durationField60 = chronology57.millis();
        org.joda.time.DurationField durationField61 = chronology57.months();
        boolean boolean62 = property38.equals((java.lang.Object) chronology57);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-08-13" + "'", str23, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-187199996L) + "'", long35 == (-187199996L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "14340" + "'", str41, "14340");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeZone3.getShortName((long) 0, locale6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.fromCalendarFields(calendar8);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar8.getMinimum((-1630));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1630");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572600159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology51 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withPivotYear((int) (short) 1);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate56.withDayOfYear(100);
        org.joda.time.Interval interval59 = localDate58.toInterval();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.days();
        java.lang.String str61 = durationFieldType60.getName();
        org.joda.time.LocalDate localDate63 = localDate58.withFieldAdded(durationFieldType60, 32770);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDate localDate65 = localDate58.plus(readablePeriod64);
        org.joda.time.LocalDate localDate67 = localDate58.withYearOfEra(32769);
        org.joda.time.LocalDate localDate69 = localDate58.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime70 = localDate69.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime72 = dateTime70.plusWeeks(100);
        org.joda.time.DateTime dateTime74 = dateTime70.withYearOfCentury((int) 'a');
        java.util.GregorianCalendar gregorianCalendar75 = dateTime70.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572600192,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=192,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNull(dateTimeZone50);
        org.junit.Assert.assertNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "days" + "'", str61, "days");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(gregorianCalendar75);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(1644615388210L);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        java.lang.String str8 = durationFieldType7.getName();
        java.lang.String str9 = durationFieldType7.getName();
        org.joda.time.MonthDay monthDay11 = monthDay5.withFieldAdded(durationFieldType7, 21);
        java.lang.String str12 = durationFieldType7.getName();
        org.joda.time.MonthDay monthDay14 = monthDay3.withFieldAdded(durationFieldType7, 12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.021" + "'", str2, "+00:00:00.021");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "days" + "'", str9, "days");
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.era();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays(17);
        org.joda.time.MonthDay.Property property21 = monthDay18.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.MonthDay monthDay15 = monthDay5.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfDay();
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DurationField durationField19 = chronology14.millis();
        java.lang.Object obj20 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj20, dateTimeZone23);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology32 = chronology14.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) 0L, chronology14);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-187199987L) + "'", long27 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.lang.String str2 = locale0.getCountry();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField14 = monthDay12.getField((int) (byte) 0);
        java.util.Locale locale18 = new java.util.Locale("", "", "hi!");
        int int19 = dateTimeField14.getMaximumTextLength(locale18);
        long long22 = dateTimeField14.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay23.minus(readablePeriod26);
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = monthDay30.getField((int) (byte) 0);
        java.util.Locale locale36 = new java.util.Locale("", "", "hi!");
        int int37 = dateTimeField32.getMaximumTextLength(locale36);
        java.lang.String str38 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) monthDay23, locale36);
        int int39 = property8.getMaximumTextLength(locale36);
        java.lang.String str40 = locale0.getDisplayVariant(locale36);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime48 = dateTime45.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime45.yearOfCentury();
        java.util.Locale locale52 = new java.util.Locale("fra", "fr");
        java.lang.String str53 = property49.getAsShortText(locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale0.getDisplayLanguage(locale52);
        java.util.Locale.setDefault(locale52);
        java.util.Locale locale57 = locale52.stripExtensions();
        java.lang.String str58 = locale52.getISO3Language();
        java.lang.String str59 = locale52.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572600286,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=286,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3" + "'", str9, "3");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9L + "'", long22 == 9L);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Feb" + "'", str38, "Feb");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals(locale52.toString(), "fra_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "52" + "'", str53, "52");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "French" + "'", str55, "French");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fra_FR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fra" + "'", str58, "fra");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fra" + "'", str59, "fra");
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("nov.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=nov.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.lang.String str13 = calendar1.getCalendarType();
        int int14 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=10,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35,MINUTE=13,SECOND=20,MILLISECOND=329,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        java.util.Date date11 = new java.util.Date(0, 0, (int) '4');
        date11.setDate(12);
        date11.setHours(2922789);
        date11.setTime(9L);
        java.util.Date date21 = new java.util.Date(0, 0, (int) '4');
        int int22 = date21.getHours();
        boolean boolean23 = date11.before(date21);
        int int24 = date11.getDay();
        calendar1.setTime(date11);
        java.lang.String str26 = calendar1.getCalendarType();
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property29 = monthDay28.monthOfYear();
        int int30 = property29.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime35.hourOfDay();
        int int37 = property29.compareTo((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = property29.getAsText(locale38);
        boolean boolean40 = calendar1.before((java.lang.Object) str39);
        java.time.Instant instant41 = calendar1.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=9,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e00\u6708" + "'", str39, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant41);
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        int int12 = property10.getMaximumValueOverall();
        org.joda.time.DateTime dateTime14 = property10.addToCopy(187200013);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(818);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1200);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = localDate7.toInterval();
        org.joda.time.LocalDate.Property property16 = localDate7.year();
        org.joda.time.LocalDate.Property property17 = localDate7.era();
        org.joda.time.LocalDate localDate18 = property17.withMinimumValue();
        org.joda.time.DurationField durationField19 = property17.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        int int9 = dateTime6.getWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateTime6.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property12 = dateTime6.property(dateTimeFieldType11);
        org.joda.time.DateTime.Property property13 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime15 = dateTime6.withCenturyOfEra(20);
        int int16 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime6.withYearOfEra((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTimeISO();
        int int20 = mutableDateTime19.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 349260000 + "'", int16 == 349260000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale2.getDisplayVariant(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.lang.String str9 = locale8.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fra_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572600436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=436,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int16 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate2.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate19 = localDate2.minusYears(54);
        org.joda.time.LocalDate localDate21 = localDate2.withWeekyear(311);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.Chronology chronology25 = dateTimeFormatter24.getChronology();
        boolean boolean26 = dateTimeFormatter24.isParser();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField38 = monthDay36.getField((int) (byte) 0);
        java.util.Locale locale42 = new java.util.Locale("", "", "hi!");
        int int43 = dateTimeField38.getMaximumTextLength(locale42);
        long long46 = dateTimeField38.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay47.minus(readablePeriod50);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = monthDay54.getField((int) (byte) 0);
        java.util.Locale locale60 = new java.util.Locale("", "", "hi!");
        int int61 = dateTimeField56.getMaximumTextLength(locale60);
        java.lang.String str62 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) monthDay47, locale60);
        int int63 = property32.getMaximumTextLength(locale60);
        org.joda.time.DateTimeField dateTimeField64 = property32.getField();
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale65);
        int int67 = property32.getMaximumTextLength(locale65);
        boolean boolean68 = locale65.hasExtensions();
        java.lang.String str69 = locale65.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter24.withLocale(locale65);
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder71.setExtension('u', "en-US");
        java.util.Locale.Builder builder75 = builder71.clear();
        java.util.Locale locale76 = builder75.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter24.withLocale(locale76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter24.withDefaultYear(820);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = localDate21.toString(dateTimeFormatter79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "3" + "'", str33, "3");
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 9L + "'", long46 == 9L);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Feb" + "'", str62, "Feb");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572600447,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=447,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u7fa9\u5927\u5229", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        int int23 = calendar1.getFirstDayOfWeek();
        calendar1.setTimeInMillis(43199999L);
        java.util.Date date27 = new java.util.Date((long) (short) 0);
        calendar1.setTime(date27);
        java.time.Instant instant29 = calendar1.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.set(96684, 349260000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        int int5 = localDate4.getDayOfMonth();
        int[] intArray6 = localDate4.getValues();
        int[] intArray7 = localDate4.getValues();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate4.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1251546784156810000L);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(9);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDate4.getValue(63421);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63421");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        java.lang.String str14 = chronology9.toString();
        org.joda.time.DurationField durationField15 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(7092L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.LocalTime localTime23 = dateTime21.toLocalTime();
        org.joda.time.DateTime dateTime24 = localDate18.toDateTime(localTime23);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+52:00]" + "'", str14, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTimeISO();
        java.lang.String str14 = dateTime4.toString("1");
        org.joda.time.DateTime dateTime16 = dateTime4.withMinuteOfHour(7);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMonths(37);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(4);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) 'x');
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        org.joda.time.Interval interval24 = localDate23.toInterval();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate23.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate.Property property29 = localDate23.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property29.addToCopy(311);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        long long47 = dateTimeZone43.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime52.toMutableDateTime(dateTimeZone56);
        int int59 = dateTimeZone56.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 10, dateTimeZone56);
        boolean boolean61 = localDate48.isBefore((org.joda.time.ReadablePartial) localDate60);
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str67 = locale64.getExtension('a');
        java.util.Locale.setDefault(category63, locale64);
        java.lang.String str69 = localDate48.toString("--02-13", locale64);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.days();
        java.lang.String str76 = durationFieldType75.getName();
        org.joda.time.DateTime dateTime78 = dateTime74.withFieldAdded(durationFieldType75, (int) 'u');
        org.joda.time.DateTime.Property property79 = dateTime78.millisOfDay();
        int int80 = dateTime78.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay81 = dateTime78.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.DateTime dateTime83 = dateTime78.plus(readablePeriod82);
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate86 = localDate84.withYearOfEra(52);
        org.joda.time.LocalDate.Property property87 = localDate86.weekOfWeekyear();
        java.util.Locale locale89 = java.util.Locale.ITALIAN;
        java.lang.String str90 = locale89.getLanguage();
        java.lang.String str92 = locale89.getExtension('a');
        org.joda.time.LocalDate localDate93 = property87.setCopy("3", locale89);
        java.util.Calendar calendar94 = dateTime78.toCalendar(locale89);
        java.lang.String str95 = locale64.getDisplayScript(locale89);
        java.lang.String str96 = property29.getAsShortText(locale89);
        java.util.Calendar calendar97 = dateTime16.toCalendar(locale89);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-62180539199983L) + "'", long47 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 187200000 + "'", int59 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "it" + "'", str65, "it");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "--02-13" + "'", str69, "--02-13");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "days" + "'", str76, "days");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 13 + "'", int80 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "it" + "'", str90, "it");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "14" + "'", str96, "14");
        org.junit.Assert.assertNotNull(calendar97);
        org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=-126233520001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1965,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=7,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguage("gregory");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setLanguageTag("allemand");
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime29.toMutableDateTime(dateTimeZone33);
        int int36 = dateTimeZone33.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 10, dateTimeZone33);
        boolean boolean38 = localDate25.isBefore((org.joda.time.ReadablePartial) localDate37);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str44 = locale41.getExtension('a');
        java.util.Locale.setDefault(category40, locale41);
        java.lang.String str46 = localDate25.toString("--02-13", locale41);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        java.lang.String str53 = durationFieldType52.getName();
        org.joda.time.DateTime dateTime55 = dateTime51.withFieldAdded(durationFieldType52, (int) 'u');
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfDay();
        int int57 = dateTime55.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime55.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.plus(readablePeriod59);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra(52);
        org.joda.time.LocalDate.Property property64 = localDate63.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str69 = locale66.getExtension('a');
        org.joda.time.LocalDate localDate70 = property64.setCopy("3", locale66);
        java.util.Calendar calendar71 = dateTime55.toCalendar(locale66);
        java.lang.String str72 = locale41.getDisplayScript(locale66);
        java.util.Set<java.lang.String> strSet73 = locale41.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder74 = builder5.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder76 = builder74.setVariant("Nov");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Nov [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62180539199983L) + "'", long24 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "--02-13" + "'", str46, "--02-13");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "days" + "'", str53, "days");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.Chronology chronology8 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime2.minusMonths(2111);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology23 = chronology19.withZone(dateTimeZone22);
        java.lang.String str24 = chronology19.toString();
        org.joda.time.DurationField durationField25 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.dayOfWeek();
        boolean boolean29 = dateTimeField28.isSupported();
        long long32 = dateTimeField28.add((long) 17, (long) (byte) 10);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay(0L);
        java.lang.String str35 = monthDay34.toString();
        org.joda.time.Chronology chronology36 = monthDay34.getChronology();
        org.joda.time.Chronology chronology37 = monthDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfDay();
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = dateTimeField38.getAsShortText(365L, locale40);
        java.lang.String str42 = locale40.getVariant();
        java.util.Locale locale43 = locale40.stripExtensions();
        int int44 = dateTimeField28.getMaximumTextLength(locale40);
        java.util.Calendar.Builder builder45 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder47 = builder45.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime52.hourOfDay();
        org.joda.time.DateTime dateTime55 = dateTime52.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime52.minusDays((int) 'u');
        int int58 = dateTime52.getYearOfEra();
        org.joda.time.DateTime dateTime60 = dateTime52.plusMillis(4);
        java.util.Date date61 = dateTime52.toDate();
        java.util.Calendar.Builder builder62 = builder47.setInstant(date61);
        java.util.Calendar calendar63 = builder47.build();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = locale65.getDisplayScript(locale66);
        java.lang.String str69 = locale64.getDisplayCountry(locale65);
        java.lang.String str70 = locale65.getDisplayLanguage();
        java.util.Calendar.Builder builder71 = builder47.setLocale(locale65);
        java.lang.String str72 = locale65.getDisplayName();
        java.lang.String str73 = locale40.getDisplayScript(locale65);
        java.util.Calendar calendar74 = dateTime2.toCalendar(locale65);
        // The following exception was thrown during execution in test generation
        try {
            calendar74.add(49117299, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+52:00]" + "'", str24, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 864000017L + "'", long32 == 864000017L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "--01-03" + "'", str35, "--01-03");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Cina" + "'", str69, "Cina");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str70, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)" + "'", str72, "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        boolean boolean17 = durationFieldType2.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Chronology chronology20 = chronology13.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField22 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType1.getField(chronology13);
        java.lang.String str24 = durationFieldType1.toString();
        java.lang.String str25 = durationFieldType1.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "days" + "'", str24, "days");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "days" + "'", str25, "days");
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(583, 3, 19);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusWeeks(141);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.minusWeeks(8);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property48 = dateTime44.yearOfCentury();
        org.joda.time.DateTime.Property property49 = dateTime44.weekyear();
        boolean boolean50 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds(251);
        int int54 = dateTime51.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 21);
        boolean boolean24 = dateTimeFormatter23.isOffsetParsed();
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(writer25, (-62180539199983L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        boolean boolean15 = date3.before(date13);
        java.lang.String str16 = date3.toLocaleString();
        date3.setDate(73);
        java.time.Instant instant19 = date3.toInstant();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Mar 14 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1-gen-1970 0.00.00" + "'", str16, "1-gen-1970 0.00.00");
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.Chronology chronology8 = dateTime2.getChronology();
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology22 = chronology18.withZone(dateTimeZone21);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.now(chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField25 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.year();
        java.lang.String str27 = dateTimeField26.getName();
        java.util.Locale locale30 = new java.util.Locale("fra", "fr");
        int int31 = dateTimeField26.getMaximumTextLength(locale30);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.toLanguageTag();
        java.lang.String str35 = dateTimeField26.getAsText((long) (-46800000), locale33);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        java.lang.String str40 = monthDay36.toString("23");
        java.lang.String str41 = monthDay36.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime46.hourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology54 = chronology50.withZone(dateTimeZone53);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.now(chronology50);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.dayOfMonth();
        org.joda.time.DurationField durationField57 = chronology50.millis();
        org.joda.time.MonthDay monthDay58 = monthDay36.withChronologyRetainFields(chronology50);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DurationField durationField60 = chronology50.months();
        org.joda.time.DateTimeField dateTimeField61 = chronology50.dayOfYear();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.lang.String str64 = locale63.getDisplayVariant();
        java.lang.String str65 = dateTimeField61.getAsText(4236569991000L, locale63);
        java.lang.String str66 = locale33.getDisplayName(locale63);
        boolean boolean67 = dateTime2.equals((java.lang.Object) locale33);
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.lang.String str69 = locale68.getDisplayVariant();
        java.lang.String str70 = locale68.getDisplayScript();
        org.joda.time.MonthDay monthDay72 = new org.joda.time.MonthDay(0L);
        java.lang.String str73 = monthDay72.toString();
        org.joda.time.MonthDay monthDay75 = monthDay72.plusMonths((int) (byte) 10);
        int[] intArray76 = monthDay72.getValues();
        org.joda.time.MonthDay.Property property77 = monthDay72.monthOfYear();
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = property77.getAsText(locale78);
        java.lang.String str80 = locale68.getDisplayName(locale78);
        java.lang.String str81 = locale33.getDisplayScript(locale68);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "year" + "'", str27, "year");
        org.junit.Assert.assertEquals(locale30.toString(), "fra_FR");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "23" + "'", str40, "23");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "--02-13" + "'", str41, "--02-13");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "95" + "'", str65, "95");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "--01-03" + "'", str73, "--01-03");
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 3]");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "janvier" + "'", str79, "janvier");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "italien (Italie)" + "'", str80, "italien (Italie)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.withMinuteOfHour(4);
        long long21 = dateTime13.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        java.util.Date date1 = new java.util.Date((-187199738L));
        java.lang.String str2 = date1.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Mon Dec 29 20:00:00 UTC 1969");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "29 Dec 1969 20:00:00 GMT" + "'", str2, "29 Dec 1969 20:00:00 GMT");
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.lang.String str2 = locale0.getCountry();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.lang.String str5 = locale0.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572600966,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=20,MILLISECOND=966,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str4 = locale1.getExtension('a');
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale6 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale6);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter10.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 10);
        int int15 = dateTimeFormatter14.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter14.getZone();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category21, locale23);
        java.lang.String str25 = monthDay19.toString("35", locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter14.withLocale(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("");
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.lang.String str35 = locale29.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale29);
        java.util.Locale locale37 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "35" + "'", str25, "35");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "de-DE" + "'", str30, "de-DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Germany" + "'", str31, "Germany");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.LocalDate localDate21 = localDate16.withFieldAdded(durationFieldType18, 32770);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property30 = dateTime24.property(dateTimeFieldType29);
        boolean boolean31 = localDate16.isSupported(dateTimeFieldType29);
        int int32 = localDate11.get(dateTimeFieldType29);
        org.joda.time.LocalDate localDate34 = localDate11.withWeekyear(187200000);
        org.joda.time.Interval interval35 = localDate34.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "days" + "'", str19, "days");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(interval35);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale2.getDisplayVariant(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale9.getDisplayScript(locale10);
        java.lang.String str13 = locale8.getDisplayCountry(locale9);
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale9);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale9);
        java.util.Locale.setDefault(locale9);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572601032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=21,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Cina" + "'", str13, "Cina");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str14, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572601032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=21,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        int int41 = property5.getLeapAmount();
        int int42 = property5.get();
        org.joda.time.DateTime dateTime44 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime44.withDurationAdded((long) 11, 4);
        boolean boolean49 = dateTime44.isAfter(32769L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusDays((int) '#');
        int int55 = dateTime52.getWeekyear();
        org.joda.time.DateTime dateTime57 = dateTime52.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfDay();
        org.joda.time.DateTime dateTime60 = property58.setCopy((int) (short) 100);
        int int61 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = dateTime60.minusSeconds((int) '4');
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572601047,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=21,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        int int18 = dateTimeField16.getMaximumValue((long) 2111);
        long long21 = dateTimeField16.add(342850000L, 10799999);
        long long23 = dateTimeField16.remainder((-60526227120001L));
        int int25 = dateTimeField16.get((long) 314);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 365 + "'", int18 == 365);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 933120256450000L + "'", long21 == 933120256450000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 11279999L + "'", long23 == 11279999L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime9 = property7.setCopy(8);
        org.joda.time.DateTime dateTime11 = property7.setCopy(48949);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.weekyear();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        java.lang.String str12 = localDate11.toString();
        int int13 = localDate11.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate11.minus(readablePeriod14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2023-01-02" + "'", str12, "2023-01-02");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Locale locale6 = new java.util.Locale("hi!", "1969-12-31T23:59:59.999Z", "11");
        java.util.Locale.setDefault(locale6);
        java.util.Calendar.Builder builder8 = builder0.setLocale(locale6);
        java.util.Calendar.Builder builder12 = builder0.setWeekDate(49280848, 29, 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_1969-12-31T23:59:59.999Z_11");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DurationField durationField19 = chronology8.millis();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = monthDay20.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology35 = chronology31.withZone(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology35);
        boolean boolean37 = durationFieldType22.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.weekOfWeekyear();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, chronology35);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology35.add(readablePeriod42, (long) 41, 69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 41L + "'", long45 == 41L);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        boolean boolean11 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(dateTimeZone21);
        java.lang.Object obj25 = null;
        boolean boolean26 = dateTimeZone21.equals(obj25);
        int int28 = dateTimeZone21.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (byte) 0);
        org.joda.time.LocalDate.Property property33 = localDate29.year();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 4, dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate29.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        java.lang.Object obj40 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(obj40, dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime38.toMutableDateTime(dateTimeZone43);
        int int51 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime10.toMutableDateTime(dateTimeZone21);
        int int53 = dateTime10.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = dateTime10.withWeekyear(14);
        org.joda.time.DateTime dateTime57 = dateTime10.withMillisOfDay(2922789);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone70);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone70);
        java.util.Locale.Builder builder75 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder75.setExtension('u', "en-US");
        java.util.Locale locale79 = builder78.build();
        java.lang.String str80 = dateTimeZone70.getName((long) (short) 0, locale79);
        boolean boolean81 = dateTimeZone70.isFixed();
        org.joda.time.DateTime dateTime82 = dateTime57.toDateTime(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 187200000 + "'", int28 == 187200000);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-187199987L) + "'", long47 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 187200000 + "'", int51 == 187200000);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+97:01" + "'", str80, "+97:01");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField22 = chronology11.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(32772, 51, 49275478, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate7.toDateTime(localTime13);
        org.joda.time.LocalDate.Property property15 = localDate7.yearOfCentury();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        org.joda.time.Interval interval21 = localDate20.toInterval();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        java.lang.String str23 = durationFieldType22.getName();
        org.joda.time.LocalDate localDate25 = localDate20.withFieldAdded(durationFieldType22, 32770);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate25.toDateTime(readableInstant27);
        int int29 = localDate25.getEra();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        int int35 = localDate32.size();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(3);
        org.joda.time.LocalDate localDate38 = localDate25.withFields((org.joda.time.ReadablePartial) localDate37);
        int int39 = property15.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        boolean boolean42 = localDate38.isSupported(durationFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = localDate38.withDayOfYear(580);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 580 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "days" + "'", str23, "days");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.monthOfYear();
        org.joda.time.DurationField durationField19 = dateTimeField18.getDurationField();
        int int20 = dateTimeField18.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        java.util.Date date6 = new java.util.Date(314, 86399, 14402, 0, 86399998, 117);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Aug 13 23:59:57 UTC 9617");
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        boolean boolean9 = dateTimeFormatter8.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 2111);
        org.joda.time.Chronology chronology12 = dateTimeFormatter8.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 4, dateTimeZone16);
        long long19 = dateTimeZone16.previousTransition((long) 2922789);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology21 = dateTimeFormatter8.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2922789L + "'", long19 == 2922789L);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int5 = dateTimeZone1.getOffsetFromLocal(16804046L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 187200000 + "'", int5 == 187200000);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        long long7 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime4.minusMonths(1439);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(14);
        org.joda.time.DateTime dateTime15 = dateTime9.plusMillis(311);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60526224000001L) + "'", long7 == (-60526224000001L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        int int9 = dateTime6.getWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateTime6.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property12 = dateTime6.property(dateTimeFieldType11);
        org.joda.time.DateTime.Property property13 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime15 = dateTime6.withCenturyOfEra(20);
        int int16 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay(0L);
        java.lang.String str19 = monthDay18.toString();
        org.joda.time.Chronology chronology20 = monthDay18.getChronology();
        org.joda.time.Chronology chronology21 = monthDay18.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfYear();
        org.joda.time.DateTime dateTime26 = dateTime6.toDateTime(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 349260000 + "'", int16 == 349260000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--01-03" + "'", str19, "--01-03");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        java.lang.String str8 = dateTime2.toString();
        boolean boolean9 = dateTime2.isAfterNow();
        org.joda.time.DateTime.Property property10 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str8, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfHour();
        int int6 = dateTimeField5.getMinimumValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField35 = chronology26.minutes();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 28);
        org.joda.time.DateTime.Property property40 = dateTime36.era();
        org.joda.time.DateTime.Property property41 = dateTime36.yearOfCentury();
        org.joda.time.DateTime dateTime42 = property41.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.Chronology chronology24 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime7.withChronology(chronology24);
        java.lang.String str26 = chronology24.toString();
        long long30 = chronology24.add(2022L, (long) 19, 30);
        org.joda.time.DurationField durationField31 = chronology24.weekyears();
        org.joda.time.Chronology chronology32 = chronology24.withUTC();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+52:00]" + "'", str26, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2592L + "'", long30 == 2592L);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        java.util.Date date6 = new java.util.Date((int) '#', 4, 364, 1, 14399999, (int) 'x');
        int int7 = date6.getHours();
        date6.setMonth(99);
        int int10 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Apr 14 01:01:00 UTC 1971");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withYear(14400);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (byte) 0);
        org.joda.time.LocalDate.Property property13 = localDate9.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 4, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        int int26 = dateTime23.getWeekyear();
        org.joda.time.DateMidnight dateMidnight27 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property29 = dateTime23.property(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime23.minusWeeks(17);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.toMutableDateTimeISO();
        int int34 = property20.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Chronology chronology35 = mutableDateTime32.getChronology();
        boolean boolean36 = localDate8.equals((java.lang.Object) mutableDateTime32);
        org.joda.time.DateTime dateTime37 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime38 = localDate8.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        boolean boolean50 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withZone(dateTimeZone53);
        org.joda.time.MonthDay monthDay57 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property58 = monthDay57.monthOfYear();
        java.util.Locale locale59 = java.util.Locale.ITALY;
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale59.getDisplayScript(locale60);
        int int63 = property58.getMaximumTextLength(locale59);
        org.joda.time.DurationField durationField64 = property58.getDurationField();
        int int65 = property58.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField66 = property58.getField();
        java.lang.String str67 = property58.getAsString();
        java.lang.String str68 = property58.getName();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getScript();
        java.lang.String str71 = property58.getAsText(locale69);
        java.lang.String str72 = dateTimeZone53.getShortName(14399L, locale69);
        int int74 = dateTimeZone53.getOffsetFromLocal(0L);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572601687,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=21,MILLISECOND=687,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "monthOfYear" + "'", str68, "monthOfYear");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Januar" + "'", str71, "Januar");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+97:01" + "'", str72, "+97:01");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 349260000 + "'", int74 == 349260000);
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("13 Feb 2022 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '13 Feb 2022 00:00:00 GMT' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property3 = monthDay2.monthOfYear();
        int int4 = property3.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        int int11 = property3.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = property3.getAsText(locale12);
        int int14 = property3.getMaximumValueOverall();
        org.joda.time.DurationField durationField15 = property3.getDurationField();
        java.lang.String str16 = property3.getAsString();
        java.lang.String str17 = property3.getName();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayScript(locale19);
        java.lang.String str22 = locale19.getVariant();
        java.lang.String str23 = property3.getAsShortText(locale19);
        java.lang.String str24 = locale0.getDisplayVariant(locale19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e00\u6708" + "'", str13, "\u4e00\u6708");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "monthOfYear" + "'", str17, "monthOfYear");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gen" + "'", str23, "gen");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, 14, (int) 'u');
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay(5, 11, 1439, (int) '#');
        java.util.Calendar.Builder builder24 = builder20.setTimeOfDay((int) (short) 1, 5, (int) 'x');
        java.util.Calendar.Builder builder28 = builder24.setDate(3659999, 26, 227);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("");
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.lang.String str35 = locale29.getDisplayVariant();
        java.util.Calendar.Builder builder36 = builder24.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder39 = builder36.setWeekDefinition((int) (short) 100, 815);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "de-DE" + "'", str30, "de-DE");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Allemagne" + "'", str31, "Allemagne");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime13 = dateTime4.withFieldAdded(durationFieldType11, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = dateTime16.plusWeeks(5);
        org.joda.time.Chronology chronology29 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyear();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology29);
        boolean boolean32 = durationFieldType11.isSupported(chronology29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) '#');
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = dateTime35.plusWeeks(5);
        org.joda.time.Chronology chronology48 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DurationField durationField51 = chronology48.hours();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfYear();
        org.joda.time.DurationField durationField53 = chronology48.millis();
        org.joda.time.DurationField durationField54 = durationFieldType11.getField(chronology48);
        org.joda.time.DateTimeField dateTimeField55 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = chronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = chronology48.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate localDate5 = localDate0.minusWeeks((int) 'x');
        int[] intArray6 = localDate0.getValues();
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 13]");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("February", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Collection<java.lang.String> strCollection10 = null;
        java.lang.String str11 = java.util.Locale.lookupTag(languageRangeList9, strCollection10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray22 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray36 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray50 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap55);
        java.util.Collection<java.util.Locale> localeCollection57 = null;
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray68 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.lang.String[] strArray82 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList83);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList85);
        java.util.Set<java.lang.String> strSet87 = java.util.Calendar.getAvailableCalendarTypes();
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalDate localDate91 = localDate88.withPeriodAdded(readablePeriod89, (int) (byte) 0);
        org.joda.time.LocalDate.Property property92 = localDate88.year();
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        boolean boolean94 = localDate88.equals((java.lang.Object) filteringMode93);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strSet87, filteringMode93);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList56, localeCollection57, filteringMode93);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList96);
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList96);
        java.util.List<java.util.Locale> localeList99 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList98);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode93.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNotNull(localeList98);
        org.junit.Assert.assertNotNull(localeList99);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(999);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property30 = dateTime24.property(dateTimeFieldType29);
        org.joda.time.LocalDate.Property property31 = localDate21.property(dateTimeFieldType29);
        java.lang.String str32 = localDate21.toString();
        org.joda.time.LocalDate localDate34 = localDate21.minusYears(4);
        org.joda.time.LocalDate localDate36 = localDate34.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(dateTimeZone46);
        java.lang.Object obj50 = null;
        boolean boolean51 = dateTimeZone46.equals(obj50);
        int int53 = dateTimeZone46.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate57 = localDate54.withPeriodAdded(readablePeriod55, (int) (byte) 0);
        org.joda.time.LocalDate.Property property58 = localDate54.year();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 4, dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate54.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        java.lang.Object obj65 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long72 = dateTimeZone68.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(obj65, dateTimeZone68);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime63.toMutableDateTime(dateTimeZone68);
        int int76 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateMidnight dateMidnight77 = localDate36.toDateMidnight(dateTimeZone46);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(dateTimeZone46);
        java.lang.String str79 = dateTimeZone46.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter13.withZone(dateTimeZone46);
        java.io.Writer writer81 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter80.printTo(writer81, (-1080001L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-08-13" + "'", str32, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 187200000 + "'", int53 == 187200000);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-187199987L) + "'", long72 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 187200000 + "'", int76 == 187200000);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+52:00" + "'", str79, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        int int6 = localDate3.size();
        org.joda.time.LocalDate localDate8 = localDate3.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime11.property(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate8.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField32 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.hourOfHalfday();
        boolean boolean35 = dateTimeFieldType16.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField36 = chronology27.year();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 12, chronology27);
        org.joda.time.DateTimeField dateTimeField38 = chronology27.minuteOfDay();
        org.joda.time.DurationField durationField39 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField40 = chronology27.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(5, 34908480, 333);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34908480 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        int int9 = dateTime7.getSecondOfDay();
        long long10 = dateTime7.getMillis();
        int int11 = dateTime7.getMinuteOfDay();
        boolean boolean13 = dateTime7.isAfter(124592460100L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 14399 + "'", int9 == 14399);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        int int29 = localDate28.getYearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.weekOfWeekyear();
        int int31 = localDate28.getEra();
        org.joda.time.LocalDate localDate33 = localDate28.withYear((-1630));
        org.joda.time.LocalDate localDate35 = localDate28.plusMonths(100);
        org.joda.time.LocalDate localDate37 = localDate28.withWeekOfWeekyear(20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property6 = localDate2.era();
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = dateTimeField8.getRangeDurationField();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        org.joda.time.Interval interval15 = localDate14.toInterval();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        java.lang.String str17 = durationFieldType16.getName();
        org.joda.time.LocalDate localDate19 = localDate14.withFieldAdded(durationFieldType16, 32770);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        int int25 = dateTime22.getWeekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property28 = dateTime22.property(dateTimeFieldType27);
        boolean boolean29 = localDate14.isSupported(dateTimeFieldType27);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfMonth();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.LocalDate localDate38 = property35.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate39 = property35.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        boolean boolean41 = localDate14.equals((java.lang.Object) property35);
        int int42 = property35.getLeapAmount();
        org.joda.time.LocalDate localDate43 = property35.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate44 = property35.roundFloorCopy();
        java.lang.String str45 = localDate44.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.MonthDay monthDay59 = monthDay49.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.clockhourOfDay();
        org.joda.time.MonthDay monthDay61 = new org.joda.time.MonthDay(0L, chronology58);
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay();
        int[] intArray64 = chronology58.get((org.joda.time.ReadablePartial) monthDay62, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = dateTimeField8.addWrapField((org.joda.time.ReadablePartial) localDate44, 49073203, intArray64, 60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49073203");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "days" + "'", str17, "days");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-13" + "'", str45, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 3]");
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusWeeks(17);
        org.joda.time.DateTime.Property property11 = dateTime2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        int int21 = property11.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property22 = dateTime20.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        int int9 = property2.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        java.lang.String str18 = durationFieldType17.getName();
        org.joda.time.DateTime dateTime20 = dateTime16.withFieldAdded(durationFieldType17, 1);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds(11);
        int int23 = property2.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.era();
        java.lang.String str25 = property24.getAsText();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 4, dateTimeZone29);
        org.joda.time.DateTime.Property property31 = dateTime30.secondOfDay();
        org.joda.time.DateTime dateTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            long long35 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "days" + "'", str18, "days");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ap. J.-C." + "'", str25, "ap. J.-C.");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.minus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime2.minus(readablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays((int) '#');
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        long long28 = chronology24.add((-2608L), (long) 'a', (int) (byte) 100);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology24);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime2.toMutableDateTime(chronology24);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7092L + "'", long28 == 7092L);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.PRC;
        int int8 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.MonthDay monthDay10 = property2.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property2.getFieldType();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str16 = locale13.getExtension('a');
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.util.Locale.setDefault(category12, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category12);
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        boolean boolean23 = property2.equals((java.lang.Object) locale20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = chronology15.weekyears();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate7 = property5.setCopy(1);
        org.joda.time.LocalDate localDate8 = property5.roundCeilingCopy();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate15 = localDate11.minusYears(32769);
        org.joda.time.LocalDate.Property property16 = localDate11.yearOfEra();
        boolean boolean17 = localDate8.isEqual((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate19 = localDate11.withYear(2140);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 31);
        boolean boolean24 = dateTimeFormatter21.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(3);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean31 = dateTimeZone29.isStandardOffset(10L);
        long long34 = dateTimeZone29.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone29);
        long long37 = dateTimeZone29.nextTransition((-9193325335413479000L));
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = dateTimeZone29.getName(5907399684280970744L, locale39);
        java.lang.String str41 = locale39.getDisplayLanguage();
        java.lang.String str42 = dateTimeZone26.getShortName((long) 48967, locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter21.withLocale(locale39);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-58474832460001L) + "'", long34 == (-58474832460001L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-9193325335413479000L) + "'", long37 == (-9193325335413479000L));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cor\351en" + "'", str41, "cor\351en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+03:00" + "'", str42, "+03:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(187200000);
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getNameKey((long) 41);
        java.lang.String str6 = dateTimeZone1.getName(48999000L);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((-349259959L), dateTimeZone1);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        long long10 = property9.remainder();
        java.lang.String str11 = property9.getAsShortText();
        java.lang.String str12 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "30" + "'", str11, "30");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "30" + "'", str12, "30");
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        int int11 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime.Property property12 = dateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = dateTimeZone13.getName(0L, locale15);
        int int18 = property12.getMaximumShortTextLength(locale15);
        java.util.Locale locale19 = locale15.stripExtensions();
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale19.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfMonth();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = property15.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = property15.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.LocalDate localDate21 = property15.roundHalfFloorCopy();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(100);
        org.joda.time.Interval interval27 = localDate26.toInterval();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        int int33 = localDate26.get(dateTimeFieldType32);
        boolean boolean34 = localDate21.isSupported(dateTimeFieldType32);
        boolean boolean35 = dateTime4.isSupported(dateTimeFieldType32);
        int int36 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime38 = dateTime4.withMillisOfDay(14432);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime4.withDurationAdded(readableDuration39, 42);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((-10));
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(366);
        org.joda.time.DateTime dateTime48 = dateTime45.withDurationAdded(83966284740000L, 1199);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMillis((-50659));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(22, 6, 32, 43199999);
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.MonthDay monthDay12 = monthDay9.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay15 = monthDay9.withFieldAdded(durationFieldType13, (-1));
        org.joda.time.MonthDay monthDay17 = monthDay15.plusDays((int) '4');
        java.lang.String str18 = monthDay15.toString();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay15.plus(readablePeriod19);
        org.joda.time.MonthDay.Property property21 = monthDay20.dayOfMonth();
        int[] intArray22 = monthDay20.getValues();
        java.util.Calendar.Builder builder23 = builder7.setFields(intArray22);
        java.util.Calendar.Builder builder27 = builder23.setWeekDate((int) '#', 49006181, 46);
        java.util.Calendar.Builder builder32 = builder27.setTimeOfDay(100, 80400000, 3659017, 988);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--01-03" + "'", str10, "--01-03");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--12-03" + "'", str18, "--12-03");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[12, 3]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfSecond();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((long) (-1970));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.plus(readablePeriod16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = monthDay17.getFieldTypes();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        long long32 = dateTimeField24.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay33.minus(readablePeriod36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 0);
        java.util.Locale locale46 = new java.util.Locale("", "", "hi!");
        int int47 = dateTimeField42.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) monthDay33, locale46);
        int[] intArray49 = monthDay33.getValues();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay52 = monthDay33.withPeriodAdded(readablePeriod50, 59);
        int[] intArray53 = monthDay33.getValues();
        int[] intArray54 = monthDay33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray56 = dateTimeField13.addWrapField((org.joda.time.ReadablePartial) monthDay17, (int) 'u', intArray54, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9L + "'", long32 == 9L);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb" + "'", str48, "Feb");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2, 13]");
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        java.lang.String str18 = localDate7.toString();
        org.joda.time.LocalDate.Property property19 = localDate7.year();
        org.joda.time.LocalDate localDate21 = localDate7.minusDays(2913229);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-08-13" + "'", str18, "2022-08-13");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.lang.String str25 = calendar24.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar24.set(160, 34847);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572602569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=22,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.year();
        java.lang.String str17 = dateTimeField16.getName();
        java.util.Locale locale20 = new java.util.Locale("fra", "fr");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.toLanguageTag();
        java.lang.String str25 = dateTimeField16.getAsText((long) (-46800000), locale23);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays((int) (short) 10);
        java.lang.String str30 = monthDay26.toString("23");
        java.lang.String str31 = monthDay26.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.now(chronology40);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.dayOfMonth();
        org.joda.time.DurationField durationField47 = chronology40.millis();
        org.joda.time.MonthDay monthDay48 = monthDay26.withChronologyRetainFields(chronology40);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DurationField durationField50 = chronology40.months();
        org.joda.time.DateTimeField dateTimeField51 = chronology40.dayOfYear();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getDisplayVariant();
        java.lang.String str55 = dateTimeField51.getAsText(4236569991000L, locale53);
        java.lang.String str56 = locale23.getDisplayName(locale53);
        java.lang.String str57 = locale53.getISO3Language();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
        org.junit.Assert.assertEquals(locale20.toString(), "fra_FR");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "23" + "'", str30, "23");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "--02-13" + "'", str31, "--02-13");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "95" + "'", str55, "95");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ita" + "'", str57, "ita");
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.Interval interval3 = localDate2.toInterval();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate2.withPeriodAdded(readablePeriod4, 292278993);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(9);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.millisOfDay();
        boolean boolean17 = dateTimeField15.isLeap(0L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.setWeekDate(3, (-1), 1);
        java.lang.String str16 = calendar1.getCalendarType();
        calendar1.set(239, 32770, 29, (-16812840), 99, 45);
        int int24 = calendar1.getWeekYear();
        java.util.Date date31 = new java.util.Date(70, 17, 187200000, 44, 6, 14399);
        boolean boolean32 = calendar1.after((java.lang.Object) 14399);
        calendar1.setLenient(true);
        calendar1.setFirstDayOfWeek(108);
        int int37 = calendar1.getWeekYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-28970346015000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=108,minimalDaysInFirstWeek=4,ERA=1,YEAR=1051,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=348,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=45,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1051 + "'", int24 == 1051);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Aug 11 00:05:59 UTC 514507");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1051 + "'", int37 == 1051);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        long long7 = dateTimeZone2.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale10.getCountry();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale10.getDisplayVariant(locale13);
        java.lang.String str15 = dateTimeZone2.getShortName((long) 20, locale10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) '#');
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTime.Property property29 = dateTime18.centuryOfEra();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        int int36 = dateTime33.getWeekyear();
        org.joda.time.DateTime dateTime38 = dateTime33.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime33.plus(readablePeriod39);
        int int41 = property29.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(4);
        int int46 = dateTime43.getEra();
        int int47 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime54.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int61 = dateTime54.get(dateTimeFieldType60);
        org.joda.time.DateTime dateTime63 = dateTime54.minusMonths((int) (byte) 10);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = localDate66.withDayOfYear(100);
        org.joda.time.Interval interval69 = localDate68.toInterval();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        java.lang.String str71 = durationFieldType70.getName();
        org.joda.time.LocalDate localDate73 = localDate68.withFieldAdded(durationFieldType70, 32770);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDate localDate75 = localDate68.plus(readablePeriod74);
        org.joda.time.LocalDate localDate77 = localDate75.withDayOfMonth(23);
        java.util.Locale locale78 = java.util.Locale.UK;
        boolean boolean79 = localDate75.equals((java.lang.Object) locale78);
        java.lang.String str80 = locale78.getScript();
        java.util.Calendar calendar81 = dateTime63.toCalendar(locale78);
        java.lang.String str82 = dateTimeZone2.getShortName((-1858694400000L), locale78);
        long long86 = dateTimeZone2.convertLocalToUTC(385500832L, false, (long) 32772);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.DateTime dateTime88 = localDate87.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199996L) + "'", long7 == (-187199996L));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572602666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=22,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "19" + "'", str30, "19");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 187200000 + "'", int47 == 187200000);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "days" + "'", str71, "days");
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=-60552662400001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=51,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=61,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+52:00" + "'", str82, "+52:00");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 198300832L + "'", long86 == 198300832L);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        int int8 = dateTime7.getCenturyOfEra();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMinutes(15);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        int int8 = property5.getMaximumValue();
        org.joda.time.DateTime dateTime9 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime10 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime14 = property5.addWrapFieldToCopy(32770);
        boolean boolean15 = dateTime14.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        java.lang.String str17 = dateTime14.toString("23");
        org.joda.time.DateTime dateTime19 = dateTime14.withMillis((long) 1970);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "23" + "'", str17, "23");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        long long7 = dateTimeZone2.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        int int9 = localDate8.getWeekyear();
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDate8.getFields();
        org.joda.time.LocalDate.Property property11 = localDate8.era();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtMidnight(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199996L) + "'", long7 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.setLenient(true);
        int int13 = calendar1.getMinimum(2);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str18 = locale14.getCountry();
        boolean boolean19 = calendar1.after((java.lang.Object) locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = locale14.getUnicodeLocaleType("1970-01-01T00:00:00.637+00:00:00.638");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1970-01-01T00:00:00.637+00:00:00.638");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        org.joda.time.DateTime dateTime38 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime40 = property5.addWrapFieldToCopy(3);
        boolean boolean42 = dateTime40.isAfter(292269054L);
        boolean boolean44 = dateTime40.isEqual(16804046L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        org.joda.time.MonthDay monthDay11 = property2.addToCopy(2);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.minus(readablePeriod12);
        java.lang.Object obj14 = null;
        boolean boolean15 = monthDay13.equals(obj14);
        java.lang.String str16 = monthDay13.toString();
        org.joda.time.MonthDay monthDay18 = monthDay13.plusDays((int) (short) 100);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "--03-03" + "'", str16, "--03-03");
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfMonth();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.lang.String str9 = locale4.getDisplayScript(locale8);
        int int10 = property3.getMaximumTextLength(locale4);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        int int16 = localDate13.size();
        int int18 = localDate13.getValue((int) (short) 0);
        org.joda.time.LocalDate.Property property19 = localDate13.era();
        org.joda.time.LocalDate localDate20 = property19.roundHalfEvenCopy();
        boolean boolean21 = property3.equals((java.lang.Object) property19);
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de-DE" + "'", str5, "de-DE");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Allemagne" + "'", str6, "Allemagne");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        calendar1.set(3, 16, 0);
        calendar1.setFirstDayOfWeek((int) 'u');
        calendar1.set(0, 14399999, (int) 'u');
        calendar1.set(44, 364, (int) (byte) 10);
        boolean boolean25 = calendar1.isWeekDateSupported();
        boolean boolean27 = calendar1.before((java.lang.Object) "samedi");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=44,MONTH=364,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        int int6 = localDate3.size();
        org.joda.time.LocalDate localDate8 = localDate3.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime11.property(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate8.property(dateTimeFieldType16);
        java.lang.String str19 = localDate8.toString();
        org.joda.time.LocalDate localDate21 = localDate8.minusYears(4);
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime26.toDateTime(dateTimeZone33);
        java.lang.Object obj37 = null;
        boolean boolean38 = dateTimeZone33.equals(obj37);
        int int40 = dateTimeZone33.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate44 = localDate41.withPeriodAdded(readablePeriod42, (int) (byte) 0);
        org.joda.time.LocalDate.Property property45 = localDate41.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 4, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate41.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        java.lang.Object obj52 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(obj52, dateTimeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime50.toMutableDateTime(dateTimeZone55);
        int int63 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateMidnight dateMidnight64 = localDate23.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 1970, dateTimeZone33);
        int int67 = dateTimeZone33.getOffset(1644404707046L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-08-13" + "'", str19, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 187200000 + "'", int40 == 187200000);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-187199987L) + "'", long59 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 187200000 + "'", int63 == 187200000);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 187200000 + "'", int67 == 187200000);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.String str23 = locale18.getDisplayScript(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter17.withLocale(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withOffsetParsed();
        java.io.Writer writer26 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfMonth();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.LocalDate localDate35 = property32.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate36 = property32.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        org.joda.time.LocalDate localDate38 = property32.getLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.withYear((int) ' ');
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths(59);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology57 = chronology53.withZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(chronology57);
        org.joda.time.DurationField durationField59 = chronology57.seconds();
        boolean boolean60 = durationFieldType43.isSupported(chronology57);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) localDate40, chronology57);
        boolean boolean63 = localDate40.equals((java.lang.Object) 187200000L);
        org.joda.time.LocalDate localDate65 = localDate40.minusYears(239);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter25.printTo(writer26, (org.joda.time.ReadablePartial) localDate65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de-DE" + "'", str19, "de-DE");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Allemagne" + "'", str20, "Allemagne");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "days" + "'", str44, "days");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate65);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean15 = dateTimeZone13.isStandardOffset(10L);
        java.lang.Object obj16 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj16, dateTimeZone19);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime24);
        long long30 = dateTimeZone13.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone13);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = locale33.getDisplayVariant();
        java.lang.String str36 = dateTimeZone13.getName((long) 2175, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(349260000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withPivotYear(14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withPivotYear(6);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter37.withDefaultYear(15);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-187199987L) + "'", long23 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32762L + "'", long30 == 32762L);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }
}

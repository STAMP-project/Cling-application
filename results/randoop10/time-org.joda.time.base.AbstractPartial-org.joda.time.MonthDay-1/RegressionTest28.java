import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.minus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = dateTime2.isSupported(dateTimeFieldType18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusDays((int) '#');
        int int33 = dateTime30.getWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateTime30.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime30.property(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate27.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology51 = chronology47.withZone(dateTimeZone50);
        java.lang.String str52 = chronology47.toString();
        org.joda.time.DurationField durationField53 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.yearOfCentury();
        boolean boolean55 = dateTimeFieldType35.isSupported(chronology47);
        boolean boolean56 = dateTimeFieldType18.isSupported(chronology47);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        java.lang.String str72 = chronology67.toString();
        org.joda.time.DurationField durationField73 = chronology67.seconds();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = durationFieldType57.getField(chronology67);
        org.joda.time.Chronology chronology79 = chronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField80 = chronology67.year();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+97:01]" + "'", str52, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+97:01]" + "'", str72, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        java.lang.String str5 = property2.getName();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.DurationField durationField13 = property11.getDurationField();
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTime dateTime15 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime16 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = property11.addWrapFieldToCopy(1970);
        org.joda.time.DateTime dateTime19 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        boolean boolean21 = property2.equals((java.lang.Object) dateTime20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = property2.setCopy(823);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 823 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("6");
        org.joda.time.DateTime dateTime3 = dateTime1.withMillis((long) 14400);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        int int5 = dateTime3.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays((int) '#');
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime7.plusWeeks(5);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear(52);
        org.joda.time.DateTime.Property property22 = dateTime19.secondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfMinute();
        org.joda.time.DateTime dateTime24 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        int int25 = dateTime24.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusHours((int) (short) 0);
        org.joda.time.DateTime dateTime31 = dateTime27.minusDays(36599);
        org.joda.time.DateTime.Property property32 = dateTime27.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3659999 + "'", int25 == 3659999);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+97:01]" + "'", str13, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology15 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.dayOfYear();
        org.joda.time.DurationField durationField19 = chronology11.seconds();
        org.joda.time.DurationField durationField20 = chronology11.minutes();
        org.joda.time.DateTime dateTime21 = dateTime1.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField22 = chronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology11.weekyearOfCentury();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('u', "en-US");
        java.util.Locale.Builder builder31 = builder29.setLanguageTag("de-DE");
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = builder31.build();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = dateTimeField23.set(777695307L, "", locale33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = locale38.getDisplayName(locale42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology57 = chronology53.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.weekyearOfCentury();
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay61 = monthDay59.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField63 = monthDay61.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        int int65 = monthDay61.indexOf(dateTimeFieldType64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MonthDay monthDay68 = monthDay61.withPeriodAdded(readablePeriod66, (-1));
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = dateTimeField58.getAsShortText((org.joda.time.ReadablePartial) monthDay61, (int) '#', locale70);
        java.lang.String str72 = locale38.getDisplayName(locale70);
        java.util.Locale locale76 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str77 = locale70.getDisplayLanguage(locale76);
        java.lang.String str78 = locale76.getDisplayVariant();
        java.util.Set<java.lang.String> strSet79 = locale76.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572617383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=37,MILLISECOND=383,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en-US" + "'", str43, "en-US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French" + "'", str44, "French");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "35" + "'", str71, "35");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "French" + "'", str72, "French");
        org.junit.Assert.assertEquals(locale76.toString(), "fra_--01-01_monthOfYear");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "monthOfYear" + "'", str78, "monthOfYear");
        org.junit.Assert.assertNotNull(strSet79);
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale2.getDisplayVariant(locale5);
        java.util.Locale.setDefault(category0, locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(14400004);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale10.getDisplayLanguage();
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale10);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572617432,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=37,MILLISECOND=432,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str12, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        java.io.Writer writer8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        boolean boolean14 = dateTime11.isBeforeNow();
        long long15 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime11.minusMillis(999);
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getNameKey(1644572109112L);
        org.joda.time.DateTime dateTime24 = dateTime17.withZoneRetainFields(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer8, (org.joda.time.ReadableInstant) dateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.021" + "'", str21, "+00:00:00.021");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeZone13);
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        java.lang.String str13 = property5.toString();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        int int23 = localDate21.getValue(0);
        java.lang.String str24 = localDate21.toString();
        org.joda.time.LocalDate localDate26 = localDate21.withWeekyear(1);
        org.joda.time.LocalDate localDate28 = localDate21.withDayOfYear((int) (byte) 1);
        int int29 = localDate21.getYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.withDayOfYear(100);
        int int35 = localDate32.size();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        int int39 = localDate37.getValue(0);
        boolean boolean40 = localDate21.equals((java.lang.Object) int39);
        org.joda.time.LocalDate localDate42 = localDate21.withDayOfYear((int) (short) 100);
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTime dateTime44 = localDate21.toDateTime(localTime43);
        long long45 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate localDate46 = property5.roundHalfCeilingCopy();
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime52.hourOfDay();
        org.joda.time.DateTime dateTime55 = dateTime52.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime52.withYearOfEra((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology71 = chronology67.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = chronology67.weekyearOfCentury();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(83968099800000L, chronology67);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime77 = localDate73.toDateTimeAtStartOfDay(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusDays((int) '#');
        java.util.TimeZone timeZone83 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate(dateTimeZone84);
        java.util.TimeZone timeZone86 = null;
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate(dateTimeZone87);
        org.joda.time.DateTime dateTime89 = localDate85.toDateTimeAtStartOfDay(dateTimeZone87);
        org.joda.time.DateTime dateTime90 = dateTime80.toDateTime(dateTimeZone87);
        org.joda.time.DateTime dateTime92 = dateTime80.plusWeeks(5);
        int int93 = dateTimeZone76.getOffset((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.LocalDate localDate94 = new org.joda.time.LocalDate((java.lang.Object) dateTime57, dateTimeZone76);
        org.joda.time.Interval interval95 = localDate46.toInterval(dateTimeZone76);
        int int97 = dateTimeZone76.getStandardOffset(7257600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[dayOfMonth]" + "'", str13, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-08-15" + "'", str24, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-177L) + "'", long45 == (-177L));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 187200000 + "'", int93 == 187200000);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 187200000 + "'", int97 == 187200000);
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Date date2 = new java.util.Date();
        java.lang.String str3 = date2.toLocaleString();
        date2.setMinutes(43199999);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        calendar7.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar7.set(0, (int) (byte) 10, (int) (short) 10);
        int int18 = calendar7.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        int int24 = localDate21.size();
        org.joda.time.LocalDate localDate26 = localDate21.plusMonths(6);
        java.util.Date date27 = localDate26.toDate();
        calendar7.setTime(date27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) '#');
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime31.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = dateTime31.plusWeeks(5);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        int int45 = dateTime44.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = dateTime48.plusWeeks(5);
        org.joda.time.Chronology chronology61 = dateTime48.getChronology();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime48.minus(readablePeriod62);
        int int64 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = calendar7.after((java.lang.Object) int64);
        java.util.Date date66 = calendar7.getTime();
        boolean boolean67 = date2.before(date66);
        date2.setMinutes(365);
        long long70 = date2.getTime();
        java.util.Calendar.Builder builder71 = builder0.setInstant(date2);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 15:05:37 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "11 f\351vr. 2022 09:43:37" + "'", str3, "11 f\351vr. 2022 09:43:37");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1660521600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=227,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Aug 15 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 70 + "'", int45 == 70);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Mon Aug 15 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1644591937546L + "'", long70 == 1644591937546L);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.clear();
        java.lang.String str7 = calendar1.getCalendarType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        boolean boolean20 = dateTime19.isEqualNow();
        org.joda.time.DateTime.Property property21 = dateTime19.year();
        org.joda.time.DateTime dateTime22 = property21.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("13-feb-2022 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"13-feb-2022 0.00.00\" is malformed at \"-feb-2022 0.00.00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime4.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = dateTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime4.plusHours(582);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        int int5 = localDate4.getDayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDate4.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        int int12 = dateTime9.getWeekyear();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property15 = dateTime9.property(dateTimeFieldType14);
        java.lang.String str16 = dateTimeFieldType14.getName();
        int int17 = localDate4.indexOf(dateTimeFieldType14);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        long long23 = dateTimeZone19.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateMidnight dateMidnight24 = localDate4.toDateMidnight(dateTimeZone19);
        long long28 = dateTimeZone19.convertLocalToUTC(3659999L, true, (-15501402168528000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "era" + "'", str16, "era");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-349259990L) + "'", long23 == (-349259990L));
        org.junit.Assert.assertNotNull(dateMidnight24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-345600001L) + "'", long28 == (-345600001L));
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMillis((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes(100);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis(2022);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        org.joda.time.Chronology chronology46 = dateTime33.getChronology();
        org.joda.time.Chronology chronology47 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime30.withChronology(chronology47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(5907399684280970662L, chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate52 = localDate49.withPeriodAdded(readablePeriod50, 10);
        org.joda.time.DateTime dateTime53 = dateTime16.withFields((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.Instant instant54 = dateTime53.toInstant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3659999 + "'", int18 == 3659999);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField17 = monthDay15.getField((int) (byte) 0);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        java.lang.String str47 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) monthDay15, locale44);
        long long49 = dateTimeField4.roundHalfFloor((long) (short) 100);
        long long51 = dateTimeField4.roundHalfEven((long) 15);
        int int52 = dateTimeField4.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "February" + "'", str47, "February");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime.Property property11 = dateTime4.dayOfMonth();
        java.lang.String str12 = property11.getName();
        org.joda.time.DateTime dateTime13 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis((int) (short) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        boolean boolean20 = dateTimeZone17.isStandardOffset((long) '4');
        int int22 = dateTimeZone17.getStandardOffset((long) 292278994);
        org.joda.time.DateTime dateTime23 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 349260000 + "'", int22 == 349260000);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        int int4 = property2.getMinimumValue();
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property7 = monthDay6.monthOfYear();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        int int15 = property7.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = property7.getAsText(locale16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        java.lang.String str57 = monthDay18.toString("--02-11", locale53);
        java.util.Set<java.lang.String> strSet58 = locale53.getUnicodeLocaleAttributes();
        int int59 = property7.getMaximumShortTextLength(locale53);
        java.util.Locale locale60 = locale53.stripExtensions();
        java.lang.String str61 = locale53.toLanguageTag();
        int int62 = property2.getMaximumShortTextLength(locale53);
        java.util.Locale locale63 = null;
        int int64 = property2.getMaximumShortTextLength(locale63);
        int int65 = property2.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e00\u6708" + "'", str17, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "--02-11" + "'", str57, "--02-11");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "und" + "'", str61, "und");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        int int7 = localDate6.getWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = property13.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate17 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(349260000);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = localDate19.toDateMidnight(dateTimeZone22);
        org.joda.time.Interval interval25 = localDate6.toInterval(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = localDate6.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfWeek(4);
        org.joda.time.LocalDate.Property property30 = localDate29.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Allemagne");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((-700535));
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology17);
        boolean boolean19 = durationFieldType4.isSupported(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) localDate3, chronology17);
        boolean boolean21 = localDate2.equals((java.lang.Object) localDate20);
        org.joda.time.LocalDate localDate23 = localDate20.minusMonths(32772);
        int int24 = localDate20.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate20.plus(readablePeriod25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay5 = monthDay1.withMonthOfYear(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay1.getFieldType(0);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = localDate4.getFields();
        org.joda.time.LocalDate.Property property6 = localDate4.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate4.plus(readablePeriod7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        int int17 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate localDate19 = localDate15.withWeekyear(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate19.withWeekOfWeekyear(1971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1971 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField17 = chronology12.seconds();
        org.joda.time.DurationField durationField18 = chronology12.years();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(292278993);
        org.joda.time.DateTime dateTime14 = dateTime10.withCenturyOfEra(816);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay17 = monthDay15.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField19 = monthDay17.getField((int) (byte) 0);
        java.lang.String str20 = dateTimeField19.getName();
        org.joda.time.DurationField durationField21 = dateTimeField19.getRangeDurationField();
        boolean boolean22 = dateTimeField19.isLenient();
        boolean boolean23 = dateTimeField19.isSupported();
        int int24 = dateTime14.get(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "monthOfYear" + "'", str20, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(83968099800000L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        int int46 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter10.withZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter10.getZone();
        java.lang.Appendable appendable50 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable50, 35L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        java.util.Date date1 = new java.util.Date((long) (short) 0);
        java.lang.String str2 = date1.toLocaleString();
        date1.setMinutes(227);
        int int5 = date1.getMinutes();
        long long6 = date1.getTime();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 03:47:00 UTC 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 janv. 1970 00:00:00" + "'", str2, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 13620000L + "'", long6 == 13620000L);
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder15 = builder11.setWeekDate(7, 16, 2922789);
        java.util.Calendar.Builder builder17 = builder11.setLenient(true);
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(187200000, 51860, 29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder23 = builder21.setInstant((long) 80400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        java.lang.String str5 = property2.getName();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.DurationField durationField13 = property11.getDurationField();
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTime dateTime15 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime16 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = property11.addWrapFieldToCopy(1970);
        org.joda.time.DateTime dateTime19 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        boolean boolean21 = property2.equals((java.lang.Object) dateTime20);
        int int22 = property2.get();
        java.lang.String str23 = property2.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "monthOfYear" + "'", str5, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "janvier" + "'", str23, "janvier");
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("\uc6d4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime13 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime7.withWeekOfWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readablePeriod19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        long long26 = dateTimeZone22.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime27 = dateTime18.withZoneRetainFields(dateTimeZone22);
        long long28 = dateTime27.getMillis();
        boolean boolean29 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis(168);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str33 = dateTimeFieldType32.toString();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getDurationType();
        java.lang.String str35 = dateTimeFieldType32.toString();
        boolean boolean36 = dateTime31.isSupported(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-349259990L) + "'", long26 == (-349259990L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfDay" + "'", str33, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "secondOfDay" + "'", str35, "secondOfDay");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate12 = property5.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime15.toYearMonthDay();
        org.joda.time.DateTime dateTime22 = dateTime15.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime15.plus(7092L);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime15.getZone();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        java.util.Locale locale29 = new java.util.Locale("Feb");
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str31 = dateTimeZone25.getShortName(364L, locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) property5, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals(locale29.toString(), "feb");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "feb" + "'", str30, "feb");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+97:01" + "'", str31, "+97:01");
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.Interval interval15 = localDate7.toInterval();
        org.joda.time.LocalDate.Property property16 = localDate7.year();
        org.joda.time.LocalDate.Property property17 = localDate7.era();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.joda.time.LocalDate localDate19 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime22.plusWeeks(5);
        org.joda.time.Chronology chronology35 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyear();
        long long40 = chronology35.add(3729599999L, (long) 365, 240);
        org.joda.time.DurationField durationField41 = chronology35.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) property17, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3729687599L + "'", long40 == 3729687599L);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        java.util.Date date1 = new java.util.Date((long) (short) 0);
        java.lang.String str2 = date1.toLocaleString();
        int int3 = date1.getYear();
        java.util.Date date7 = new java.util.Date(0, 0, (int) '4');
        int int8 = date7.getHours();
        int int9 = date7.getMinutes();
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        date13.setDate(12);
        date13.setTime(1L);
        boolean boolean18 = date7.after(date13);
        date7.setTime(43199999L);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date7);
        date7.setDate(16);
        boolean boolean24 = date1.before(date7);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 janv. 1970 00:00:00" + "'", str2, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 16 11:59:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        int int33 = monthDay13.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay35 = monthDay13.withMonthOfYear((-22425480));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -22425480 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 15]");
        org.junit.Assert.assertNotNull(monthDay32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime19.withTime(21, 0, 4, 0);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        java.lang.String str26 = property25.getAsShortText();
        boolean boolean27 = property25.isLeap();
        org.joda.time.DateTime dateTime28 = property25.getDateTime();
        org.joda.time.DateTime dateTime29 = property25.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022" + "'", str26, "2022");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology19 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField20 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField23 = chronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField27 = chronology15.minutes();
        org.joda.time.Chronology chronology28 = chronology15.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(0, 14399000, (int) (byte) 1, 49, 820, 1, 822, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime3.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = dateTime3.plusWeeks(5);
        org.joda.time.Chronology chronology16 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DurationField durationField19 = chronology16.months();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 364, chronology16);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfMonth();
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTime dateTime29 = localDate23.toDateTime(localTime28);
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfMinute();
        int int31 = dateTime29.getMonthOfYear();
        org.joda.time.DateTime dateTime32 = localDate20.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDate localDate34 = localDate20.plusYears(33);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.minusMonths(576);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology33 = chronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.weekyearOfCentury();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(83968099800000L, chronology29);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        long long40 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        java.util.Date date44 = new java.util.Date(0, 0, (int) '4');
        date44.setDate(12);
        date44.setHours(2922789);
        date44.setTime(9L);
        java.util.Date date54 = new java.util.Date(0, 0, (int) '4');
        int int55 = date54.getHours();
        boolean boolean56 = date44.before(date54);
        java.lang.String str57 = date44.toLocaleString();
        date44.setMonth(187200000);
        date44.setDate((-1));
        boolean boolean62 = property19.equals((java.lang.Object) date44);
        java.lang.String str63 = date44.toGMTString();
        boolean boolean64 = localDate11.equals((java.lang.Object) date44);
        java.lang.String str65 = date44.toGMTString();
        java.time.Instant instant66 = date44.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-2608L) + "'", long40 == (-2608L));
        org.junit.Assert.assertEquals(date44.toString(), "Tue Dec 30 00:00:00 UTC 15601969");
        org.junit.Assert.assertEquals(date54.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1 janv. 1970 00:00:00" + "'", str57, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "30 Dec 15601969 00:00:00 GMT" + "'", str63, "30 Dec 15601969 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "30 Dec 15601969 00:00:00 GMT" + "'", str65, "30 Dec 15601969 00:00:00 GMT");
        org.junit.Assert.assertNotNull(instant66);
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 52);
        org.joda.time.LocalDate localDate32 = localDate27.plusWeeks(0);
        org.joda.time.LocalDate localDate34 = localDate32.withYearOfEra((int) ' ');
        int int35 = localDate34.getWeekOfWeekyear();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withDayOfYear(100);
        int int42 = localDate39.size();
        org.joda.time.LocalDate localDate44 = localDate39.plusMonths(6);
        int int46 = localDate44.getValue(0);
        java.lang.String str47 = localDate44.toString();
        org.joda.time.LocalDate localDate49 = localDate44.withWeekyear(1);
        org.joda.time.LocalDate localDate51 = localDate44.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean56 = dateTimeZone54.isStandardOffset(10L);
        long long59 = dateTimeZone54.adjustOffset((-58474832460001L), false);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone54);
        long long62 = dateTimeZone54.nextTransition((-9193325335413479000L));
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = dateTimeZone54.getName(5907399684280970744L, locale64);
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.lang.String str69 = locale68.getLanguage();
        java.lang.String str70 = locale67.getDisplayScript(locale68);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale68);
        java.util.Set<java.lang.Character> charSet72 = locale68.getExtensionKeys();
        java.util.Locale locale73 = locale68.stripExtensions();
        java.lang.String str74 = dateTimeZone54.getName((long) 311, locale73);
        java.lang.String str75 = localDate44.toString("1970", locale73);
        java.lang.String str76 = locale73.getISO3Language();
        java.lang.String str77 = localDate34.toString("\u4e03\u6708", locale73);
        int int78 = localDate34.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 46 + "'", int35 == 46);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-08-15" + "'", str47, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-58474832460001L) + "'", long59 == (-58474832460001L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-9193325335413479000L) + "'", long62 == (-9193325335413479000L));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "it" + "'", str69, "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644572618354,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=38,MILLISECOND=354,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970" + "'", str75, "1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ita" + "'", str76, "ita");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e03\u6708" + "'", str77, "\u4e03\u6708");
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 46 + "'", int78 == 46);
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        java.util.Date date10 = java.util.Date.from(instant8);
        java.util.Date date11 = java.util.Date.from(instant8);
        java.util.Date date12 = java.util.Date.from(instant8);
        date12.setMonth(32769);
        date12.setHours(0);
        int int17 = date12.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572618417,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=38,MILLISECOND=417,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:43:38 UTC 2022");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:43:38 UTC 2022");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:43:38 UTC 2022");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sat Oct 11 00:43:38 UTC 4752");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2852 + "'", int17 == 2852);
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        int int29 = localDate26.size();
        org.joda.time.LocalDate localDate31 = localDate26.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusDays((int) '#');
        int int37 = dateTime34.getWeekyear();
        org.joda.time.DateMidnight dateMidnight38 = dateTime34.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property40 = dateTime34.property(dateTimeFieldType39);
        org.joda.time.LocalDate.Property property41 = localDate31.property(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType39.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime47.hourOfDay();
        org.joda.time.DateTime dateTime50 = dateTime47.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology55 = chronology51.withZone(dateTimeZone54);
        java.lang.String str56 = chronology51.toString();
        org.joda.time.DurationField durationField57 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.yearOfCentury();
        boolean boolean59 = dateTimeFieldType39.isSupported(chronology51);
        org.joda.time.DateTime.Property property60 = dateTime22.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime61 = property60.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime63 = property60.addWrapFieldToCopy(49006181);
        org.joda.time.DateTime dateTime64 = dateTime63.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[+97:01]" + "'", str56, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField19 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.dayOfWeek();
        long long24 = chronology8.add((-359999899L), (-3599635L), 57);
        org.joda.time.DateTimeField dateTimeField25 = chronology8.monthOfYear();
        long long27 = dateTimeField25.roundCeiling((long) 2007);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-565179094L) + "'", long24 == (-565179094L));
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2329140000L + "'", long27 == 2329140000L);
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        boolean boolean15 = date3.before(date13);
        java.lang.String str16 = date3.toLocaleString();
        date3.setMonth(187200000);
        date3.setDate((-1));
        int int21 = date3.getDay();
        int int22 = date3.getDate();
        int int23 = date3.getDay();
        org.junit.Assert.assertEquals(date3.toString(), "Tue Dec 30 00:00:00 UTC 15601969");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1 janv. 1970 00:00:00" + "'", str16, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 30 + "'", int22 == 30);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        int int8 = property7.getMinimumValue();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear(12);
        org.joda.time.DateTime dateTime15 = dateTime9.withWeekyear((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.weekyear();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        int[] intArray12 = localDate11.getValues();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2023, 1, 2]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay12 = monthDay2.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.MonthDay monthDay27 = monthDay17.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfDay();
        boolean boolean30 = durationFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField31 = chronology26.millis();
        java.lang.Object obj32 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(obj32, dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime40.getZone();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.Chronology chronology44 = chronology26.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology45 = chronology11.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(obj0, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-187199987L) + "'", long39 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter48.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatter48.getParser();
        org.joda.time.Chronology chronology52 = dateTimeFormatter48.getChronolgy();
        java.lang.Appendable appendable53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusDays((int) '#');
        int int59 = dateTime56.getWeekyear();
        org.joda.time.DateTime dateTime61 = dateTime56.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfDay();
        org.joda.time.DateTime dateTime63 = property62.roundFloorCopy();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter48.printTo(appendable53, (org.joda.time.ReadableInstant) dateTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572618600,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=38,MILLISECOND=600,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeParser50);
        org.junit.Assert.assertNull(dateTimeParser51);
        org.junit.Assert.assertNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 0);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        org.joda.time.LocalDate localDate28 = localDate23.plusMonths(6);
        int int30 = localDate28.getValue(0);
        java.lang.String str31 = localDate28.toString();
        org.joda.time.LocalDate localDate33 = localDate28.withWeekyear(1);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate33.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime19.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = dateTime19.toDateTime();
        boolean boolean44 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime46 = dateTime19.minusMonths(43199999);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-08-15" + "'", str31, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        java.util.Locale locale3 = new java.util.Locale("eras", "", "millisOfDay");
        java.util.Locale locale6 = new java.util.Locale("--02-01", "2022-02-15");
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.util.Locale locale8 = locale3.stripExtensions();
        boolean boolean9 = locale3.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "eras__millisOfDay");
        org.junit.Assert.assertEquals(locale6.toString(), "--02-01_2022-02-15");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "eras__millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        java.lang.String str26 = localDate23.toString();
        org.joda.time.LocalDate.Property property27 = localDate23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtCurrentTime(dateTimeZone28);
        int int30 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        boolean boolean34 = dateTimeZone33.isFixed();
        boolean boolean35 = dateTimeZone33.isFixed();
        org.joda.time.DateMidnight dateMidnight36 = localDate23.toDateMidnight(dateTimeZone33);
        java.util.TimeZone timeZone37 = dateTimeZone33.toTimeZone();
        long long40 = dateTimeZone33.adjustOffset((-62135784000000L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-08-15" + "'", str26, "2022-08-15");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-62135784000000L) + "'", long40 == (-62135784000000L));
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays((int) '#');
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime18.plusWeeks(5);
        org.joda.time.DateTime dateTime32 = dateTime18.withYearOfEra(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        int int36 = dateTime32.get(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType33.getRangeDurationType();
        boolean boolean38 = localDate7.isSupported(dateTimeFieldType33);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.withDayOfYear(100);
        int int44 = localDate41.size();
        org.joda.time.LocalDate localDate46 = localDate41.plusMonths(6);
        org.joda.time.LocalTime localTime47 = null;
        org.joda.time.DateTime dateTime48 = localDate41.toDateTime(localTime47);
        org.joda.time.LocalDate.Property property49 = localDate41.dayOfWeek();
        org.joda.time.LocalDate localDate51 = localDate41.withYearOfEra(2730);
        org.joda.time.LocalDate.Property property52 = localDate41.monthOfYear();
        org.joda.time.LocalDate localDate53 = property52.withMinimumValue();
        boolean boolean54 = localDate7.equals((java.lang.Object) property52);
        org.joda.time.LocalDate localDate55 = property52.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusDays((int) '#');
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime58.toDateTime(dateTimeZone65);
        org.joda.time.DateTime.Property property69 = dateTime58.centuryOfEra();
        java.lang.String str70 = property69.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.minusDays((int) '#');
        int int76 = dateTime73.getWeekyear();
        org.joda.time.DateTime dateTime78 = dateTime73.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime80 = dateTime73.plus(readablePeriod79);
        int int81 = property69.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime84 = dateTime80.withDurationAdded(292279000L, (int) (byte) 1);
        org.joda.time.DateTime dateTime86 = dateTime80.plusWeeks(3659999);
        org.joda.time.YearMonthDay yearMonthDay87 = dateTime86.toYearMonthDay();
        org.joda.time.Chronology chronology88 = yearMonthDay87.getChronology();
        boolean boolean89 = localDate55.isAfter((org.joda.time.ReadablePartial) yearMonthDay87);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "19" + "'", str70, "19");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        org.joda.time.Interval interval15 = localDate14.toInterval();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        java.lang.String str17 = durationFieldType16.getName();
        org.joda.time.LocalDate localDate19 = localDate14.withFieldAdded(durationFieldType16, 32770);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        int int25 = dateTime22.getWeekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateTime22.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property28 = dateTime22.property(dateTimeFieldType27);
        boolean boolean29 = localDate14.isSupported(dateTimeFieldType27);
        boolean boolean30 = localDate4.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate.Property property31 = localDate4.centuryOfEra();
        java.lang.String str32 = property31.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "days" + "'", str17, "days");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "20" + "'", str32, "20");
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology15.weeks();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.halfdayOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(100);
        org.joda.time.Interval interval27 = localDate26.toInterval();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        java.lang.String str29 = durationFieldType28.getName();
        org.joda.time.LocalDate localDate31 = localDate26.withFieldAdded(durationFieldType28, 32770);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate33 = localDate26.plus(readablePeriod32);
        org.joda.time.LocalDate localDate35 = localDate26.withYearOfEra(32769);
        java.lang.String str36 = localDate35.toString();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.withYearOfCentury((int) '#');
        int int42 = localDate41.getDayOfMonth();
        int[] intArray43 = localDate41.getValues();
        int int44 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDate35, intArray43);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime.Property property59 = dateTime48.centuryOfEra();
        java.lang.String str60 = property59.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays((int) '#');
        int int66 = dateTime63.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime63.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime63.plus(readablePeriod69);
        int int71 = property59.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = property59.addToCopy((long) 11);
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str76 = property59.getAsShortText(locale75);
        java.lang.String str77 = localDate35.toString("+52:00", locale75);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "days" + "'", str29, "days");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32769-04-10" + "'", str36, "32769-04-10");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2035, 2, 15]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "19" + "'", str60, "19");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "19" + "'", str76, "19");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+52:00" + "'", str77, "+52:00");
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.minus((long) 719571);
        java.lang.String str41 = dateTime37.toString();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime37.minus(readableDuration42);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-02-09T11:00:59.999+97:01" + "'", str38, "1970-02-09T11:00:59.999+97:01");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-02-09T11:00:59.999+97:01" + "'", str41, "1970-02-09T11:00:59.999+97:01");
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology17);
        boolean boolean19 = durationFieldType4.isSupported(chronology17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) localDate3, chronology17);
        boolean boolean21 = localDate2.equals((java.lang.Object) localDate20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        java.util.Date date29 = dateTime28.toDate();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays((int) '#');
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime32.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = dateTime32.minusMinutes(52);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        long long50 = dateTimeZone46.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime51 = dateTime32.withZone(dateTimeZone46);
        int int52 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology53 = dateTime32.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime32.withMillis(31608000000L);
        org.joda.time.DateTime dateTime57 = dateTime55.minus(83968099800000L);
        int int58 = dateTime55.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology60 = null;
        boolean boolean61 = dateTimeFieldType59.isSupported(chronology60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType59.getRangeDurationType();
        java.lang.String str63 = dateTimeFieldType59.toString();
        int int64 = dateTime55.get(dateTimeFieldType59);
        boolean boolean65 = localDate2.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDate localDate67 = localDate2.withDayOfYear(5);
        org.joda.time.Chronology chronology68 = localDate67.getChronology();
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone70);
        org.joda.time.LocalDate localDate73 = localDate71.withDayOfYear(100);
        int int74 = localDate71.size();
        org.joda.time.LocalDate localDate76 = localDate71.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.minusDays((int) '#');
        int int82 = dateTime79.getWeekyear();
        org.joda.time.DateMidnight dateMidnight83 = dateTime79.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property85 = dateTime79.property(dateTimeFieldType84);
        org.joda.time.LocalDate.Property property86 = localDate76.property(dateTimeFieldType84);
        org.joda.time.LocalDate localDate87 = property86.roundCeilingCopy();
        int int88 = localDate87.getDayOfYear();
        org.joda.time.LocalDate localDate90 = localDate87.plusMonths(0);
        org.joda.time.Chronology chronology91 = localDate90.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long93 = chronology68.set((org.joda.time.ReadablePartial) localDate90, 5907399684280970188L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Feb 10 22:59:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-349259990L) + "'", long50 == (-349259990L));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "weekyearOfCentury" + "'", str63, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 71 + "'", int64 == 71);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 229 + "'", int88 == 229);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) localDate7);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate21 = property18.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDate21.getFields();
        boolean boolean23 = localDate12.equals((java.lang.Object) localDate21);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfYear();
        org.joda.time.LocalDate localDate26 = property24.addToCopy(0);
        org.joda.time.LocalDate localDate27 = property24.withMaximumValue();
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfMonth(6);
        java.lang.String str30 = localDate27.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate27.withEra(55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-12-31" + "'", str30, "2022-12-31");
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = dateTimeField4.getAsShortText((long) 10, locale11);
        int int14 = dateTimeField4.getMinimumValue();
        long long17 = dateTimeField4.add(10L, (int) (byte) 1);
        long long19 = dateTimeField4.roundFloor(0L);
        boolean boolean20 = dateTimeField4.isLenient();
        java.lang.String str22 = dateTimeField4.getAsText((-60494788800001L));
        java.lang.String str23 = dateTimeField4.getName();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "janv." + "'", str13, "janv.");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2678400010L + "'", long17 == 2678400010L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d\351cembre" + "'", str22, "d\351cembre");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "monthOfYear" + "'", str23, "monthOfYear");
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate2.withYearOfEra(2730);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfYear();
        org.joda.time.LocalDate localDate14 = property13.withMinimumValue();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        int int16 = property15.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 99 + "'", int16 == 99);
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        java.lang.String str18 = localDate7.toString();
        org.joda.time.LocalDate localDate20 = localDate7.minusYears(4);
        org.joda.time.LocalDate localDate22 = localDate7.minusMonths(32);
        org.joda.time.DateTime dateTime23 = localDate7.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.Interval interval29 = localDate28.toInterval();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        java.lang.String str31 = durationFieldType30.getName();
        org.joda.time.LocalDate localDate33 = localDate28.withFieldAdded(durationFieldType30, 32770);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays((int) '#');
        int int39 = dateTime36.getWeekyear();
        org.joda.time.DateMidnight dateMidnight40 = dateTime36.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property42 = dateTime36.property(dateTimeFieldType41);
        boolean boolean43 = localDate28.isSupported(dateTimeFieldType41);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.withDayOfYear(100);
        org.joda.time.LocalDate.Property property49 = localDate46.dayOfMonth();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.LocalDate localDate52 = property49.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate53 = property49.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        boolean boolean55 = localDate28.equals((java.lang.Object) property49);
        org.joda.time.LocalDate localDate57 = localDate28.withCenturyOfEra(816);
        int int58 = localDate57.size();
        org.joda.time.LocalDate localDate59 = localDate7.withFields((org.joda.time.ReadablePartial) localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-08-15" + "'", str18, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "days" + "'", str31, "days");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1 janv. 1970 00:00:00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1janv.197000:00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate26 = property17.addWrapFieldToCopy(59);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate26.minus(readablePeriod28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate26.withCenturyOfEra((-26971783));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26971783 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-2022-08-15" + "'", str27, "-2022-08-15");
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 45);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) 3659, 2111);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        boolean boolean15 = date3.before(date13);
        java.lang.String str16 = date3.toLocaleString();
        int int17 = date3.getDay();
        int int18 = date3.getDate();
        int int19 = date3.getYear();
        long long20 = date3.getTime();
        date3.setDate(2922786);
        date3.setMonth((-5039));
        org.junit.Assert.assertEquals(date3.toString(), "Mon May 26 00:00:00 UTC 9552");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1 janv. 1970 00:00:00" + "'", str16, "1 janv. 1970 00:00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9L + "'", long20 == 9L);
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int9 = calendar1.getWeekYear();
        long long10 = calendar1.getTimeInMillis();
        java.lang.String str11 = calendar1.getCalendarType();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.minus(readablePeriod13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572619110,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=110,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572619110L + "'", long10 == 1644572619110L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localTime11.getFields();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(14403);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withDurationAdded(readableDuration13, 0);
        int int16 = dateTime15.getYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        int int15 = dateTime12.getWeekyear();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property18 = dateTime12.property(dateTimeFieldType17);
        boolean boolean19 = localDate4.isSupported(dateTimeFieldType17);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        org.joda.time.LocalDate.Property property25 = localDate22.dayOfMonth();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        org.joda.time.LocalDate localDate28 = property25.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate29 = property25.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        boolean boolean31 = localDate4.equals((java.lang.Object) property25);
        java.lang.String str32 = property25.getAsText();
        java.util.Locale locale36 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str37 = property25.getAsText(locale36);
        org.joda.time.LocalDate localDate38 = property25.withMinimumValue();
        org.joda.time.LocalDate localDate39 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField40 = property25.getField();
        org.joda.time.LocalDate localDate41 = property25.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "15" + "'", str32, "15");
        org.junit.Assert.assertEquals(locale36.toString(), "fra_--01-01_monthOfYear");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "15" + "'", str37, "15");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays((int) '#');
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime17.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology33 = chronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.weekyearOfCentury();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(83968099800000L, chronology29);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate35.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears((int) (short) 10);
        int int43 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime19.getZone();
        int int46 = dateTimeZone44.getStandardOffset((-187199996L));
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone44);
        java.lang.String str49 = dateTimeZone44.getShortName((-54625291199941L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(168, 73, (int) (byte) 100, (-16812840), 2111, dateTimeZone44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16812840 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 349260000 + "'", int46 == 349260000);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+97:01" + "'", str49, "+97:01");
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime2.minusMinutes(18);
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(69);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-349259990L) + "'", long20 == (-349259990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        boolean boolean9 = dateTimeFormatter2.isPrinter();
        int int10 = dateTimeFormatter2.getDefaultYear();
        java.util.Locale locale11 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withDefaultYear(239);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withZoneUTC();
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay4 = monthDay2.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay2.minus(readablePeriod5);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        java.lang.String str8 = property7.toString();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        int int47 = property16.getMaximumTextLength(locale44);
        org.joda.time.DateTimeField dateTimeField48 = property16.getField();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        int int51 = property16.getMaximumTextLength(locale49);
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale49.getDisplayCountry();
        boolean boolean54 = locale49.hasExtensions();
        int int55 = property7.getMaximumShortTextLength(locale49);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale49);
        java.util.Locale.Builder builder58 = builder56.setVariant("");
        java.util.Locale locale59 = builder56.build();
        java.util.Locale locale60 = builder56.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder56.setLanguage("Allemagne");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Allemagne [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572619242,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=242,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.minus(readablePeriod33);
        int int35 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime15.withHourOfDay(11);
        int int38 = dateTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays((int) '#');
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime41.plusWeeks(5);
        org.joda.time.Chronology chronology54 = dateTime41.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.DateTime dateTime56 = dateTime37.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.halfdayOfDay();
        java.lang.String str58 = dateTimeField57.toString();
        long long60 = dateTimeField57.roundFloor(62135971200000L);
        java.lang.String str62 = dateTimeField57.getAsText(864000017L);
        org.joda.time.ReadablePartial readablePartial63 = null;
        int int64 = dateTimeField57.getMaximumValue(readablePartial63);
        org.joda.time.DurationField durationField65 = dateTimeField57.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 39659999 + "'", int38 == 39659999);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str58, "DateTimeField[halfdayOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 62135938740000L + "'", long60 == 62135938740000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AM" + "'", str62, "AM");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(durationField65);
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getDisplayCountry();
        boolean boolean53 = locale48.hasExtensions();
        int int54 = property6.getMaximumShortTextLength(locale48);
        java.lang.String str55 = locale48.getDisplayLanguage();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getDisplayVariant();
        java.lang.String str58 = locale48.getDisplayName(locale56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime66 = dateTime63.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime66.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime71 = dateTime66.withCenturyOfEra(0);
        org.joda.time.DateTime.Property property72 = dateTime71.dayOfWeek();
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.util.Locale locale74 = java.util.Locale.ITALIAN;
        java.lang.String str75 = locale74.getLanguage();
        java.lang.String str76 = locale73.getDisplayScript(locale74);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale74);
        java.lang.String str78 = locale74.getISO3Language();
        int int79 = property72.getMaximumTextLength(locale74);
        java.lang.String str80 = locale56.getDisplayName(locale74);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale74);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572619340,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=340,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais" + "'", str55, "fran\347ais");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "francese" + "'", str58, "francese");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "it" + "'", str75, "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1644572619340,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=340,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ita" + "'", str78, "ita");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "italiano (Italia)" + "'", str80, "italiano (Italia)");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1644572619340,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=340,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate12 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property5.roundCeilingCopy();
        org.joda.time.LocalDate.Property property15 = localDate14.year();
        org.joda.time.LocalDate localDate16 = property15.roundHalfCeilingCopy();
        int int17 = property15.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        java.util.Date date6 = new java.util.Date(24, 54, 365, 14399, 187200013, 45);
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getDay();
        int int9 = date6.getYear();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 23 23:13:45 UTC 2287");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 387 + "'", int9 == 387);
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        java.lang.String str25 = localDate24.toString();
        org.joda.time.LocalDate.Property property26 = localDate24.dayOfWeek();
        java.util.Date date27 = localDate24.toDate();
        org.joda.time.LocalDate.Property property28 = localDate24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime31.toYearMonthDay();
        org.joda.time.DateTime dateTime38 = dateTime31.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        boolean boolean44 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology45 = dateTime43.getChronology();
        int int46 = dateTime43.getSecondOfMinute();
        boolean boolean47 = localDate24.equals((java.lang.Object) dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-08-15" + "'", str25, "2022-08-15");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Aug 15 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology20 = chronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(83968099800000L, chronology16);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtStartOfDay();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        org.joda.time.LocalDate.Property property33 = localDate30.dayOfMonth();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTime dateTime36 = localDate30.toDateTime(localTime35);
        boolean boolean37 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        org.joda.time.Chronology chronology53 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyear();
        org.joda.time.DateTime dateTime55 = dateTime27.toDateTime(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime27.withPeriodAdded(readablePeriod56, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str60 = dateTimeFieldType59.getName();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime69 = dateTime66.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology74 = chronology70.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField75 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField76 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType59.getField(chronology70);
        org.joda.time.DateTimeField dateTimeField79 = chronology70.yearOfCentury();
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("1970-01-03T03:59:59.999+52:00");
        java.lang.String str83 = dateTimeField79.getAsShortText(45, locale82);
        java.util.Calendar calendar84 = dateTime27.toCalendar(locale82);
        java.util.Locale.Builder builder85 = builder4.setLocale(locale82);
        java.util.Locale.Builder builder87 = builder85.setLanguage("dimanche");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder90 = builder87.setUnicodeLocaleKeyword("4630", "Cina");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 4630 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "era" + "'", str60, "era");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "45" + "'", str83, "45");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=83968095540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4630,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMonths((int) ' ');
        org.joda.time.DateTime.Property property11 = dateTime7.dayOfMonth();
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        org.joda.time.Interval interval18 = localDate17.toInterval();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtCurrentTime(dateTimeZone20);
        int int24 = dateTimeZone20.getOffset(0L);
        java.lang.String str26 = dateTimeZone20.getName(97L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime34.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime39 = dateTime34.withCenturyOfEra(0);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfWeek();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale41.getDisplayScript(locale42);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale42);
        java.lang.String str46 = locale42.getISO3Language();
        int int47 = property40.getMaximumTextLength(locale42);
        boolean boolean48 = dateTimeZone20.equals((java.lang.Object) int47);
        java.lang.String str50 = dateTimeZone20.getShortName(26L);
        int int52 = dateTimeZone20.getStandardOffset((long) 48999197);
        java.util.TimeZone timeZone53 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime54 = dateTime7.withZoneRetainFields(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 349260000 + "'", int24 == 349260000);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:01" + "'", str26, "+97:01");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572619489,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=489,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ita" + "'", str46, "ita");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+97:01" + "'", str50, "+97:01");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 349260000 + "'", int52 == 349260000);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(obj0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.year();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate2.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate2.minus(readablePeriod7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(14399000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14399000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-15" + "'", str4, "2022-02-15");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        boolean boolean17 = durationFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.year();
        org.joda.time.DurationField durationField19 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfDay();
        org.joda.time.Chronology chronology21 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.era();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "days" + "'", str1, "days");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        int int36 = dateTime33.getWeekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateTime33.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property39 = dateTime33.property(dateTimeFieldType38);
        boolean boolean40 = localDate25.isSupported(dateTimeFieldType38);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.withDayOfYear(100);
        org.joda.time.LocalDate.Property property46 = localDate43.dayOfMonth();
        org.joda.time.LocalDate localDate47 = property46.getLocalDate();
        org.joda.time.LocalDate localDate49 = property46.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate50 = property46.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property46.getFieldType();
        boolean boolean52 = localDate25.equals((java.lang.Object) property46);
        java.lang.String str53 = property46.getAsText();
        java.util.Locale locale57 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str58 = property46.getAsText(locale57);
        java.lang.String str59 = dateTimeZone18.getName((long) 59, locale57);
        int int61 = dateTimeZone18.getStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "days" + "'", str28, "days");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "15" + "'", str53, "15");
        org.junit.Assert.assertEquals(locale57.toString(), "fra_--01-01_monthOfYear");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "15" + "'", str58, "15");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+52:00" + "'", str59, "+52:00");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 187200000 + "'", int61 == 187200000);
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.set(0, (int) (byte) 10, (int) (short) 10);
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        java.util.Date date21 = localDate20.toDate();
        calendar1.setTime(date21);
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        calendar24.setMinimalDaysInFirstWeek(96684);
        calendar24.set(358, 818, 822, 818, 42);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1660521600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=227,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Aug 15 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=96684,ERA=1,YEAR=358,MONTH=818,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=822,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=818,MINUTE=42,SECOND=39,MILLISECOND=593,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(57);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology8);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate4.withPeriodAdded(readablePeriod11, 63421);
        org.joda.time.LocalDate.Property property14 = localDate4.year();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        long long18 = dateTimeField15.addWrapField(633600010L, 640);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 20197065600010L + "'", long18 == 20197065600010L);
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.withMinimumValue();
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.Chronology chronology13 = localDate11.getChronology();
        org.joda.time.LocalDate.Property property14 = localDate11.year();
        org.joda.time.LocalDate localDate15 = property14.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property14 = monthDay13.monthOfYear();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale15.getDisplayScript(locale16);
        int int19 = property14.getMaximumTextLength(locale15);
        java.lang.String str20 = property14.getAsString();
        org.joda.time.MonthDay monthDay21 = property14.getMonthDay();
        boolean boolean22 = calendar1.before((java.lang.Object) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay21.monthOfYear();
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField28 = monthDay26.getField((int) (byte) 0);
        java.util.Locale locale32 = new java.util.Locale("", "", "hi!");
        int int33 = dateTimeField28.getMaximumTextLength(locale32);
        long long36 = dateTimeField28.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay39 = monthDay37.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField46 = monthDay44.getField((int) (byte) 0);
        java.util.Locale locale50 = new java.util.Locale("", "", "hi!");
        int int51 = dateTimeField46.getMaximumTextLength(locale50);
        java.lang.String str52 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) monthDay37, locale50);
        int[] intArray53 = monthDay37.getValues();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay56 = monthDay37.withPeriodAdded(readablePeriod54, 59);
        org.joda.time.MonthDay monthDay58 = monthDay37.minusDays(59);
        int int59 = monthDay21.compareTo((org.joda.time.ReadablePartial) monthDay58);
        java.lang.String str61 = monthDay58.toString("95");
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay64 = monthDay58.withFieldAdded(durationFieldType62, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=32770,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=678,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 9L + "'", long36 == 9L);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Feb" + "'", str52, "Feb");
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2, 15]");
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "95" + "'", str61, "95");
        org.junit.Assert.assertNotNull(durationFieldType62);
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setTimeOfDay((int) (short) -1, 0, 2730);
        java.util.Calendar.Builder builder15 = builder3.setTimeOfDay(15, 44, 14399);
        java.util.Calendar.Builder builder19 = builder15.setDate(14402, 14399954, 100);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        java.lang.String str24 = monthDay20.toString("23");
        java.lang.String str25 = monthDay20.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology38 = chronology34.withZone(dateTimeZone37);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.DateTimeField dateTimeField40 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField41 = chronology34.millis();
        org.joda.time.MonthDay monthDay42 = monthDay20.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusDays(45);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MonthDay monthDay47 = monthDay44.withField(dateTimeFieldType45, 1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.withPeriodAdded(readablePeriod48, 7);
        org.joda.time.Chronology chronology51 = monthDay44.getChronology();
        int[] intArray52 = monthDay44.getValues();
        java.util.Calendar.Builder builder53 = builder15.setFields(intArray52);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "23" + "'", str24, "23");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--02-15" + "'", str25, "--02-15");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[3, 31]");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        java.lang.String str16 = dateTimeField15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.now(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        int int33 = dateTimeField31.getMaximumTextLength(locale32);
        int int34 = dateTimeField15.getMaximumShortTextLength(locale32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        java.lang.String str38 = locale36.getCountry();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        java.lang.String str45 = property44.getAsShortText();
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField50 = monthDay48.getField((int) (byte) 0);
        java.util.Locale locale54 = new java.util.Locale("", "", "hi!");
        int int55 = dateTimeField50.getMaximumTextLength(locale54);
        long long58 = dateTimeField50.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay61 = monthDay59.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay59.minus(readablePeriod62);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay66 = monthDay64.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField68 = monthDay66.getField((int) (byte) 0);
        java.util.Locale locale72 = new java.util.Locale("", "", "hi!");
        int int73 = dateTimeField68.getMaximumTextLength(locale72);
        java.lang.String str74 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) monthDay59, locale72);
        int int75 = property44.getMaximumTextLength(locale72);
        java.lang.String str76 = locale36.getDisplayVariant(locale72);
        java.lang.String str77 = dateTimeField15.getAsShortText(1970, locale72);
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.lang.String str79 = locale78.toLanguageTag();
        java.lang.String str80 = locale72.getDisplayLanguage(locale78);
        org.joda.time.MonthDay monthDay82 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property83 = monthDay82.monthOfYear();
        org.joda.time.MonthDay monthDay85 = property83.addToCopy((int) ' ');
        int int86 = property83.get();
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale87);
        java.lang.String str89 = locale87.getCountry();
        java.util.Locale locale90 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str91 = locale87.getDisplayVariant(locale90);
        java.lang.String str92 = property83.getAsShortText(locale87);
        java.lang.String str93 = locale72.getDisplayScript(locale87);
        java.lang.String str94 = locale87.getDisplayVariant();
        boolean boolean95 = locale87.hasExtensions();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[year]" + "'", str16, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572619769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 9L + "'", long58 == 9L);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Feb" + "'", str74, "Feb");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970" + "'", str77, "1970");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "de-DE" + "'", str79, "de-DE");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1644572619769,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=39,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "janv." + "'", str92, "janv.");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minuteOfHour" + "'", str1, "minuteOfHour");
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMillis(48949);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        org.joda.time.DateTime dateTime12 = dateTime8.minusHours(365);
        org.joda.time.DateTime dateTime14 = dateTime8.plusSeconds(20);
        int int15 = dateTime14.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readablePeriod16);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.era();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(1644615388210L);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getRangeDurationType();
        java.lang.String str20 = durationFieldType19.getName();
        java.lang.String str21 = durationFieldType19.getName();
        org.joda.time.MonthDay monthDay23 = monthDay17.withFieldAdded(durationFieldType19, 21);
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.Calendar.Builder builder31 = builder27.setDate(52, 52, 292278994);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.lang.String str37 = dateTimeField36.getName();
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        java.lang.String str43 = monthDay38.toString();
        org.joda.time.MonthDay.Property property44 = monthDay38.monthOfYear();
        int[] intArray51 = new int[] { 2730, 2022, 'x', (byte) -1, 7, 17 };
        int int52 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) monthDay38, intArray51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay38.plus(readablePeriod53);
        int[] intArray55 = monthDay54.getValues();
        java.util.Calendar.Builder builder56 = builder31.setFields(intArray55);
        java.util.Calendar.Builder builder60 = builder31.setWeekDate(10799999, 36000000, 22);
        org.joda.time.MonthDay monthDay61 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay63 = monthDay61.minusDays((int) (short) 10);
        java.lang.String str65 = monthDay61.toString("23");
        java.lang.String str66 = monthDay61.toString();
        int[] intArray67 = monthDay61.getValues();
        java.util.Calendar.Builder builder68 = builder60.setFields(intArray67);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = dateTimeField15.set((org.joda.time.ReadablePartial) monthDay23, 34610760, intArray67, 819);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 819 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "monthOfYear" + "'", str37, "monthOfYear");
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "--02-15" + "'", str43, "--02-15");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2730, 2022, 120, -1, 7, 17]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 12 + "'", int52 == 12);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2, 15]");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "23" + "'", str65, "23");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "--02-15" + "'", str66, "--02-15");
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[2, 15]");
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate24 = property17.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property17.getFieldType();
        org.joda.time.LocalDate localDate26 = property17.getLocalDate();
        boolean boolean27 = property17.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMillis(999);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        java.util.Date date20 = dateTime19.toDate();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.minusMinutes(52);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        long long41 = dateTimeZone37.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime42 = dateTime23.withZone(dateTimeZone37);
        int int43 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime45 = dateTime23.withMillisOfSecond(12);
        long long46 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime23.withMillisOfSecond(17);
        int int49 = dateTime48.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.plus(readableDuration50);
        boolean boolean52 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean54 = dateTime12.isBefore(124243200100L);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime57 = dateTime12.withDurationAdded(readableDuration55, (-292275055));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Feb 10 22:59:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-349259990L) + "'", long41 == (-349259990L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter14.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis(2022);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime26.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime26.plusWeeks(5);
        org.joda.time.Chronology chronology39 = dateTime26.getChronology();
        org.joda.time.Chronology chronology40 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime23.withChronology(chronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime46.hourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology54 = chronology50.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = chronology50.weeks();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField58 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime59 = dateTime41.toDateTime(chronology50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter14.withChronology(chronology50);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-62135596800000L));
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = dateTime1.toString("Feb 13, 2022 12:00:00 AM", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fra" + "'", str4, "fra");
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate15.plus(readablePeriod21);
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate localDate24 = property23.roundHalfFloorCopy();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = localDate24.isSupported(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMillis((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes(100);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime25.plusMillis(2022);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        org.joda.time.Chronology chronology46 = dateTime33.getChronology();
        org.joda.time.Chronology chronology47 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime30.withChronology(chronology47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(5907399684280970662L, chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate52 = localDate49.withPeriodAdded(readablePeriod50, 10);
        org.joda.time.DateTime dateTime53 = dateTime16.withFields((org.joda.time.ReadablePartial) localDate49);
        int int54 = localDate49.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3659999 + "'", int18 == 3659999);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 315 + "'", int54 == 315);
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(187200013);
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(monthDay2);
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        java.lang.String str12 = property10.getAsString();
        long long13 = property10.remainder();
        org.joda.time.LocalDate localDate14 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11" + "'", str11, "11");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "11" + "'", str12, "11");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 31363200000L + "'", long13 == 31363200000L);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        java.util.Locale locale2 = new java.util.Locale("21-feb-1900 0.00.00", "it");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime dateTime12 = dateTime7.withDurationAdded(1L, 52);
        java.lang.String str13 = dateTime12.toString();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale14);
        java.lang.String str16 = locale14.getDisplayVariant();
        java.util.Calendar calendar17 = dateTime12.toCalendar(locale14);
        java.lang.String str18 = locale14.getLanguage();
        java.lang.String str19 = locale2.getDisplayScript(locale14);
        java.lang.String str20 = locale14.getDisplayName();
        java.util.Set<java.lang.Character> charSet21 = locale14.getExtensionKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "21-feb-1900 0.00.00_IT");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0052-01-05T01:01:00.051+97:01" + "'", str13, "0052-01-05T01:01:00.051+97:01");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-60526223999949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais" + "'", str20, "fran\347ais");
        org.junit.Assert.assertNotNull(charSet21);
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        java.util.Date date9 = new java.util.Date(0, 0, (int) '4');
        date9.setDate(12);
        int int12 = date9.getMinutes();
        int int13 = date9.getSeconds();
        calendar1.setTime(date9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-2205360000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=43,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 12 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(97L);
        java.lang.String str8 = property5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(1);
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime13.minusYears(29);
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfMinute();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(100);
        int int27 = localDate24.size();
        org.joda.time.LocalDate localDate29 = localDate24.plusMonths(6);
        int int31 = localDate29.getValue(0);
        java.lang.String str32 = localDate29.toString();
        org.joda.time.LocalDate localDate34 = localDate29.withWeekyear(1);
        org.joda.time.LocalDate localDate36 = localDate29.withDayOfYear((int) (byte) 1);
        int int37 = localDate29.getYear();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime45 = localDate29.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getRangeDurationType();
        java.lang.String str49 = dateTimeFieldType46.toString();
        int int50 = dateTime20.get(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-08-15" + "'", str32, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-349259996L) + "'", long44 == (-349259996L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "year" + "'", str49, "year");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1941 + "'", int50 == 1941);
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        int int23 = property17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.minus((long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(70);
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology29 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekOfWeekyear((int) (byte) 1);
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate6.minus(readablePeriod8);
        org.joda.time.LocalDate.Property property10 = localDate6.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(818, 333, 580, 34610760, 102812);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34610760 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setWeekDate(70, 16, 2730);
        java.util.Calendar.Builder builder8 = builder2.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder10 = builder8.setCalendarType("2022-02-11T13:40:02.140+52:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-11T13:40:02.140+52:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(13);
        org.joda.time.DateTime dateTime13 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime7.withMillis(26L);
        org.joda.time.DateTime.Property property16 = dateTime7.yearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime7.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property17.getFieldType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, 14, (int) 'u');
        java.util.Calendar.Builder builder19 = builder15.setTimeOfDay(0, 0, 6);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime22.toMutableDateTime(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        java.util.Calendar.Builder builder29 = builder19.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder33 = builder29.setWeekDate(2111, 141, 18);
        java.util.Calendar.Builder builder37 = builder33.setWeekDate(8, (int) 'a', (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.minus(readablePeriod42);
        int[] intArray44 = monthDay41.getValues();
        java.util.Calendar.Builder builder45 = builder33.setFields(intArray44);
        java.util.Calendar.Builder builder47 = builder45.setLenient(false);
        java.util.Calendar.Builder builder51 = builder45.setDate(15600070, 16, 143999);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar52 = builder51.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2, 15]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromDateFields(date9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.minus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay15 = monthDay10.withPeriodAdded(readablePeriod13, 999);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = monthDay10.getValue(49358934);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49358934");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572620343,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=40,MILLISECOND=343,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:43:40 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusYears((int) '4');
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = dateTime10.toString("--02-01", locale12);
        org.joda.time.DateTime dateTime15 = dateTime10.plusSeconds(39659999);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(23556876);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--02-01" + "'", str13, "--02-01");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale1.getDisplayScript(locale2);
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.getDisplayLanguage();
        java.lang.String str7 = locale1.getVariant();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale1);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.Chronology chronology13 = monthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) calendar8, chronology13);
        org.joda.time.DurationField durationField19 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cina" + "'", str5, "Cina");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italien" + "'", str6, "italien");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572620409,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=40,MILLISECOND=409,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--01-05" + "'", str11, "--01-05");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        java.lang.String str3 = monthDay2.toString();
        org.joda.time.Chronology chronology4 = monthDay2.getChronology();
        org.joda.time.Chronology chronology5 = monthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.weeks();
        org.joda.time.Chronology chronology9 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology5.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--01-05" + "'", str3, "--01-05");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType7, 1);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology13);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(14402, 3, 96, 12, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(2022);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.plusWeeks(5);
        org.joda.time.Chronology chronology36 = dateTime23.getChronology();
        org.joda.time.Chronology chronology37 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime20.withChronology(chronology37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907399684280970662L, chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        int int41 = dateTime40.getYearOfCentury();
        long long42 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime40.plusMonths(11);
        org.joda.time.DateTime dateTime47 = dateTime45.minusYears((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime45.withTime((-50), 821, 2097, 61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -50 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11" + "'", str11, "11");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 89L + "'", long42 == 89L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setVariant("Italie");
        java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("14340");
        java.util.Locale.Builder builder12 = builder9.clearExtensions();
        java.util.Locale.Builder builder13 = builder9.clear();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("year");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder13.setScript("-01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: -01:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-15" + "'", str10, "2022-08-15");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfMonth(23);
        int int14 = localDate11.getDayOfWeek();
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        int int17 = property15.getMinimumValueOverall();
        java.lang.String str18 = property15.toString();
        org.joda.time.DurationField durationField19 = property15.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[yearOfEra]" + "'", str18, "Property[yearOfEra]");
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        int int9 = calendar1.getWeeksInWeekYear();
        boolean boolean10 = calendar1.isWeekDateSupported();
        java.util.Locale locale14 = new java.util.Locale("secondOfDay");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = calendar1.getDisplayName(49344357, 10799999, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615820605,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=40,MILLISECOND=605,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals(locale14.toString(), "secondofday");
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMonths((int) ' ');
        org.joda.time.DateTime.Property property11 = dateTime7.dayOfMonth();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.LocalDate localDate21 = localDate16.withFieldAdded(durationFieldType18, 32770);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property30 = dateTime24.property(dateTimeFieldType29);
        boolean boolean31 = localDate16.isSupported(dateTimeFieldType29);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(100);
        org.joda.time.LocalDate.Property property37 = localDate34.dayOfMonth();
        org.joda.time.LocalDate localDate38 = property37.getLocalDate();
        org.joda.time.LocalDate localDate40 = property37.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate41 = property37.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        boolean boolean43 = localDate16.equals((java.lang.Object) property37);
        int int44 = property37.getLeapAmount();
        org.joda.time.LocalDate localDate45 = property37.roundHalfEvenCopy();
        boolean boolean46 = property11.equals((java.lang.Object) localDate45);
        org.joda.time.DateTime dateTime48 = property11.addWrapFieldToCopy(0);
        int int49 = dateTime48.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "days" + "'", str19, "days");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("16804056");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        java.lang.String str16 = dateTimeField15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.now(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        int int33 = dateTimeField31.getMaximumTextLength(locale32);
        int int34 = dateTimeField15.getMaximumShortTextLength(locale32);
        int int36 = dateTimeField15.get(0L);
        long long38 = dateTimeField15.roundCeiling(100L);
        long long40 = dateTimeField15.roundHalfFloor(62135766730346L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[year]" + "'", str16, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 31186740000L + "'", long38 == 31186740000L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 62135247540000L + "'", long40 == 62135247540000L);
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property10.getFieldType();
        java.util.Date date16 = new java.util.Date(10, 43199999, 815);
        boolean boolean17 = property10.equals((java.lang.Object) date16);
        int int18 = property10.getMinimumValue();
        org.joda.time.DurationField durationField19 = property10.getLeapDurationField();
        java.lang.String str20 = property10.getAsString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 23 00:00:00 UTC 3601912");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "59" + "'", str20, "59");
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale3.getCountry();
        boolean boolean5 = locale3.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zho", (double) (-375829157L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-3.75829157E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        org.joda.time.DateTime dateTime18 = dateTime14.minus(1644537600032L);
        int int19 = dateTime14.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime22.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime22.toYearMonthDay();
        org.joda.time.DateTime dateTime29 = dateTime22.withDurationAdded((long) '4', (int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime22.plus(7092L);
        org.joda.time.DateTime dateTime32 = dateTime22.withEarlierOffsetAtOverlap();
        int int33 = dateTime22.getEra();
        boolean boolean34 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime22);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime22.toGregorianCalendar();
        int int36 = dateTime22.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 40 + "'", int19 == 40);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3659999 + "'", int36 == 3659999);
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        org.joda.time.LocalDate.Property property12 = localDate11.year();
        java.lang.String str13 = property12.getName();
        int int14 = property12.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "year" + "'", str13, "year");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getDayOfWeek();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime14 = property11.setCopy("0");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTime dateTime24 = dateTime19.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths(39659999);
        boolean boolean29 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime26);
        int int30 = dateTime26.getMinuteOfHour();
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        java.lang.String str36 = locale31.getDisplayLanguage(locale35);
        java.util.Calendar calendar37 = dateTime26.toCalendar(locale35);
        boolean boolean38 = calendar37.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French" + "'", str36, "French");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=-60526223999880,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=120,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(23);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime(dateTimeZone19);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.now(dateTimeZone19);
        int int23 = dateTimeZone19.getOffsetFromLocal((-60494601600001L));
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.now(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear(0);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfSecond(57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeFormatter10.print((org.joda.time.ReadableInstant) dateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(monthDay21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 349260000 + "'", int23 == 349260000);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField18 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        java.lang.String str10 = dateTime9.toString();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Calendar calendar14 = dateTime9.toCalendar(locale11);
        // The following exception was thrown during execution in test generation
        try {
            calendar14.setWeekDate(35008981, 239, 1200);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 1200");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0052-01-05T01:01:00.051+97:01" + "'", str10, "0052-01-05T01:01:00.051+97:01");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=-60526223999949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int int29 = monthDay13.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = monthDay13.getFieldTypes();
        org.joda.time.MonthDay monthDay32 = monthDay13.minusDays(86399999);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(100);
        int int38 = localDate35.size();
        org.joda.time.LocalDate localDate40 = localDate35.plusMonths(6);
        int int42 = localDate40.getValue(0);
        java.lang.String str43 = localDate40.toString();
        org.joda.time.LocalDate.Property property44 = localDate40.weekyear();
        org.joda.time.LocalDate.Property property45 = localDate40.dayOfWeek();
        org.joda.time.LocalDate localDate46 = property45.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate46.plus(readablePeriod47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDate localDate55 = localDate53.minus(readablePeriod54);
        int int56 = localDate55.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight58 = localDate55.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int60 = localDate55.get(dateTimeFieldType59);
        boolean boolean61 = localDate46.isSupported(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property62 = monthDay13.property(dateTimeFieldType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-08-15" + "'", str43, "2022-08-15");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 46 + "'", int60 == 46);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay7 = monthDay1.withFieldAdded(durationFieldType5, (-1));
        org.joda.time.MonthDay monthDay9 = monthDay7.plusDays((int) '4');
        java.lang.String str10 = monthDay7.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay7.plus(readablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = monthDay7.toLocalDate(292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-05" + "'", str2, "--01-05");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--12-05" + "'", str10, "--12-05");
        org.junit.Assert.assertNotNull(monthDay12);
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime.Property property11 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        int int26 = dateTime23.getWeekyear();
        org.joda.time.DateMidnight dateMidnight27 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property29 = dateTime23.property(dateTimeFieldType28);
        org.joda.time.LocalDate.Property property30 = localDate20.property(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType28.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology44 = chronology40.withZone(dateTimeZone43);
        java.lang.String str45 = chronology40.toString();
        org.joda.time.DurationField durationField46 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField47 = chronology40.yearOfCentury();
        boolean boolean48 = dateTimeFieldType28.isSupported(chronology40);
        java.lang.String str49 = dateTimeFieldType28.getName();
        boolean boolean50 = dateTime12.isSupported(dateTimeFieldType28);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfYear(100);
        org.joda.time.Interval interval56 = localDate55.toInterval();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        java.lang.String str58 = durationFieldType57.getName();
        org.joda.time.LocalDate localDate60 = localDate55.withFieldAdded(durationFieldType57, 32770);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDate localDate62 = localDate55.plus(readablePeriod61);
        org.joda.time.LocalDate localDate64 = localDate55.withYearOfEra(32769);
        org.joda.time.LocalDate localDate66 = localDate55.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime67 = localDate66.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime69 = dateTime67.plusWeeks(100);
        org.joda.time.DateTime.Property property70 = dateTime67.secondOfDay();
        java.lang.String str71 = property70.getAsText();
        org.joda.time.DateTime dateTime72 = property70.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property78 = dateTime77.hourOfDay();
        org.joda.time.DateTime dateTime80 = dateTime77.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime82 = dateTime77.minusDays((int) 'u');
        int int83 = dateTime77.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.DateTime dateTime85 = dateTime77.plus(readablePeriod84);
        boolean boolean86 = property70.equals((java.lang.Object) dateTime77);
        org.joda.time.DateTime dateTime88 = dateTime77.minusMonths(32772);
        boolean boolean89 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[+97:01]" + "'", str45, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "era" + "'", str49, "era");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "days" + "'", str58, "days");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField18 = chronology15.halfdays();
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.clockhourOfHalfday();
        java.lang.String str22 = dateTimeField20.getAsText((long) 1439);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale25.getDisplayScript(locale26);
        java.lang.String str29 = locale24.getDisplayCountry(locale25);
        java.lang.String str30 = dateTimeField20.getAsShortText((-1480510777000L), locale25);
        boolean boolean31 = dateTimeField20.isSupported();
        boolean boolean32 = dateTimeField20.isSupported();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Cina" + "'", str29, "Cina");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "12" + "'", str30, "12");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        date7.setTime((long) 14400);
        java.time.Instant instant10 = date7.toInstant();
        long long11 = date7.getTime();
        int int12 = date7.getYear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.DateTime dateTime21 = dateTime17.withFieldAdded(durationFieldType18, (int) 'u');
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        int int23 = dateTime21.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime21.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.plus(readablePeriod25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withYearOfEra(52);
        org.joda.time.LocalDate.Property property30 = localDate29.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str35 = locale32.getExtension('a');
        org.joda.time.LocalDate localDate36 = property30.setCopy("3", locale32);
        java.util.Calendar calendar37 = dateTime21.toCalendar(locale32);
        org.joda.time.DateTime dateTime39 = dateTime21.minusSeconds(2007);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.lang.String str43 = dateTimeZone41.toString();
        org.joda.time.DateTime dateTime44 = dateTime39.withZoneRetainFields(dateTimeZone41);
        boolean boolean45 = date7.equals((java.lang.Object) dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:14 UTC 1970");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 14400L + "'", long11 == 14400L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "days" + "'", str19, "days");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-00:00:00.001" + "'", str43, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.now(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfDay();
        org.joda.time.MonthDay monthDay50 = monthDay32.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeField dateTimeField51 = chronology41.era();
        long long55 = chronology41.add((long) 11, (long) 1051, 0);
        org.joda.time.DurationField durationField56 = chronology41.hours();
        org.joda.time.DateTimeField dateTimeField57 = chronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology41.clockhourOfDay();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 15]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 11L + "'", long55 == 11L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(239);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime12 = monthDay0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        calendar15.setLenient(true);
        calendar15.roll((int) (short) 100, 0);
        int int22 = calendar15.getGreatestMinimum(0);
        calendar15.clear();
        calendar15.clear(0);
        calendar15.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone32 = calendar15.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay(0L);
        java.lang.String str36 = monthDay35.toString();
        org.joda.time.Chronology chronology37 = monthDay35.getChronology();
        org.joda.time.Chronology chronology38 = monthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime46.hourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology54 = chronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.weekOfWeekyear();
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay(0L);
        java.lang.String str59 = monthDay58.toString();
        org.joda.time.Chronology chronology60 = monthDay58.getChronology();
        org.joda.time.Chronology chronology61 = monthDay58.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.millisOfDay();
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property67 = monthDay66.monthOfYear();
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale68.getDisplayScript(locale69);
        int int72 = property67.getMaximumTextLength(locale68);
        java.lang.String str73 = property67.getAsString();
        java.lang.String str74 = property67.getAsShortText();
        java.util.Locale locale75 = java.util.Locale.ROOT;
        int int76 = property67.getMaximumTextLength(locale75);
        java.lang.String str77 = dateTimeField63.getAsShortText(2, locale75);
        int int78 = dateTimeField56.getMaximumShortTextLength(locale75);
        java.lang.String str79 = dateTimeField39.getAsText(readablePartial40, 364, locale75);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone32, locale75);
        java.lang.String str81 = monthDay0.toString("\u30c9\u30a4\u30c4", locale75);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572621228,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=228,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "--01-05" + "'", str36, "--01-05");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "--01-05" + "'", str59, "--01-05");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "janv." + "'", str74, "janv.");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2" + "'", str77, "2");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "364" + "'", str79, "364");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644572621229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str81, "\u30c9\u30a4\u30c4");
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        int int17 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate.Property property18 = localDate15.yearOfEra();
        int int19 = localDate15.size();
        org.joda.time.LocalDate localDate21 = localDate15.plusYears(23628);
        int int22 = localDate15.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray17 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray31 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap36);
        java.util.Collection<java.util.Locale> localeCollection38 = null;
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray49 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList50);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray63 = new java.lang.String[] { "fr", "", "--01-01", "hi!", "23", "", "23" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList64);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList66);
        java.util.Set<java.lang.String> strSet68 = java.util.Calendar.getAvailableCalendarTypes();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (byte) 0);
        org.joda.time.LocalDate.Property property73 = localDate69.year();
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        boolean boolean75 = localDate69.equals((java.lang.Object) filteringMode74);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strSet68, filteringMode74);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter(languageRangeList37, localeCollection38, filteringMode74);
        java.util.Locale locale78 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection38);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNull(locale78);
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime2.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime2.withWeekOfWeekyear(16);
        org.joda.time.LocalDateTime localDateTime12 = dateTime2.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField20 = chronology15.millis();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology34 = chronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(83968099800000L, chronology30);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays((int) '#');
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime43.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = dateTime43.plusWeeks(5);
        int int56 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone39);
        java.lang.String str59 = dateTimeZone39.getNameKey(100L);
        org.joda.time.Chronology chronology60 = chronology15.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 187200000 + "'", int56 == 187200000);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        long long19 = dateTime18.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60522940800001L) + "'", long19 == (-60522940800001L));
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusWeeks(17);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfSecond();
        java.lang.String str14 = property13.getAsText();
        org.joda.time.DateTime dateTime16 = property13.addWrapFieldToCopy(292269054);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "999" + "'", str14, "999");
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        java.util.Date date1 = new java.util.Date((long) 13);
        int int2 = date1.getMinutes();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.fromDateFields(date1);
        date1.setHours(487);
        int int6 = date1.getYear();
        org.junit.Assert.assertEquals(date1.toString(), "Wed Jan 21 07:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        long long25 = chronology17.add(1644791716406L, (-349259990L), 14403);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+97:01]" + "'", str13, "ISOChronology[+97:01]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3385599919564L) + "'", long25 == (-3385599919564L));
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        long long24 = chronology19.add((-187199990L), (-2779199987L), 10);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.weekOfWeekyear();
        java.lang.String str26 = dateTimeField25.toString();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-27979199860L) + "'", long24 == (-27979199860L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str26, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField20 = chronology15.millis();
        org.joda.time.DurationField durationField21 = chronology15.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay((java.lang.Object) chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths((int) 'x');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.withYear(26);
        org.joda.time.Chronology chronology13 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 292269054);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer10, 1644572262024L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime4.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        int int12 = property10.getMaximumValueOverall();
        org.joda.time.DateTime dateTime13 = property10.roundFloorCopy();
        boolean boolean15 = dateTime13.isEqual((long) 49117299);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusMillis(2022);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) dateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTimeISO();
        int int25 = dateTime23.getWeekOfWeekyear();
        boolean boolean26 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        java.lang.String str16 = dateTimeField15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.now(chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        int int33 = dateTimeField31.getMaximumTextLength(locale32);
        int int34 = dateTimeField15.getMaximumShortTextLength(locale32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        java.lang.String str38 = locale36.getCountry();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        java.lang.String str45 = property44.getAsShortText();
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField50 = monthDay48.getField((int) (byte) 0);
        java.util.Locale locale54 = new java.util.Locale("", "", "hi!");
        int int55 = dateTimeField50.getMaximumTextLength(locale54);
        long long58 = dateTimeField50.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay61 = monthDay59.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay59.minus(readablePeriod62);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay66 = monthDay64.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField68 = monthDay66.getField((int) (byte) 0);
        java.util.Locale locale72 = new java.util.Locale("", "", "hi!");
        int int73 = dateTimeField68.getMaximumTextLength(locale72);
        java.lang.String str74 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) monthDay59, locale72);
        int int75 = property44.getMaximumTextLength(locale72);
        java.lang.String str76 = locale36.getDisplayVariant(locale72);
        java.lang.String str77 = dateTimeField15.getAsShortText(1970, locale72);
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.lang.String str79 = locale78.toLanguageTag();
        java.lang.String str80 = locale72.getDisplayLanguage(locale78);
        org.joda.time.MonthDay monthDay82 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property83 = monthDay82.monthOfYear();
        org.joda.time.MonthDay monthDay85 = property83.addToCopy((int) ' ');
        int int86 = property83.get();
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale87);
        java.lang.String str89 = locale87.getCountry();
        java.util.Locale locale90 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str91 = locale87.getDisplayVariant(locale90);
        java.lang.String str92 = property83.getAsShortText(locale87);
        java.lang.String str93 = locale72.getDisplayScript(locale87);
        java.util.Set<java.lang.String> strSet94 = locale87.getUnicodeLocaleAttributes();
        java.lang.String str95 = locale87.getISO3Country();
        java.lang.String str97 = locale87.getExtension('a');
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[year]" + "'", str16, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572621669,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=669,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 9L + "'", long58 == 9L);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Feb" + "'", str74, "Feb");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970" + "'", str77, "1970");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "de-DE" + "'", str79, "de-DE");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1644572621670,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=670,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "janv." + "'", str92, "janv.");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime20.toMutableDateTime(dateTimeZone24);
        int int27 = dateTimeZone24.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 10, dateTimeZone24);
        boolean boolean29 = localDate16.isBefore((org.joda.time.ReadablePartial) localDate28);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str35 = locale32.getExtension('a');
        java.util.Locale.setDefault(category31, locale32);
        java.lang.String str37 = localDate16.toString("--02-13", locale32);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.days();
        java.lang.String str44 = durationFieldType43.getName();
        org.joda.time.DateTime dateTime46 = dateTime42.withFieldAdded(durationFieldType43, (int) 'u');
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfDay();
        int int48 = dateTime46.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime46.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.plus(readablePeriod50);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate54 = localDate52.withYearOfEra(52);
        org.joda.time.LocalDate.Property property55 = localDate54.weekOfWeekyear();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str60 = locale57.getExtension('a');
        org.joda.time.LocalDate localDate61 = property55.setCopy("3", locale57);
        java.util.Calendar calendar62 = dateTime46.toCalendar(locale57);
        java.lang.String str63 = locale32.getDisplayScript(locale57);
        boolean boolean64 = locale57.hasExtensions();
        java.util.Set<java.lang.Character> charSet65 = locale57.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62180539199983L) + "'", long15 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 349260000 + "'", int27 == 349260000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--02-13" + "'", str37, "--02-13");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "days" + "'", str44, "days");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 13 + "'", int48 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it" + "'", str58, "it");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSet65);
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = durationFieldType6.isSupported(chronology10);
        java.lang.String str12 = durationFieldType6.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.Object obj6 = null;
        boolean boolean7 = languageRange1.equals(obj6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.plusYears(17);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        int int4 = property3.getLeapAmount();
        org.joda.time.DurationField durationField5 = property3.getRangeDurationField();
        org.joda.time.LocalDate localDate7 = property3.addWrapFieldToCopy(49275478);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        int int13 = localDate10.size();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        java.util.Date date16 = localDate15.toDate();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate15.withPeriodAdded(readablePeriod17, 292278994);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDate15.getFieldTypes();
        java.lang.Object obj21 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long28 = dateTimeZone24.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj21, dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        boolean boolean31 = dateTimeZone24.isFixed();
        org.joda.time.Interval interval32 = localDate15.toInterval(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = localDate7.toDateTimeAtStartOfDay(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Aug 15 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199987L) + "'", long28 == (-187199987L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        boolean boolean5 = dateTime2.isBeforeNow();
        int int6 = dateTime2.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra((int) ' ');
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = locale17.getCountry();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        java.lang.String str57 = locale17.getDisplayVariant(locale53);
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale53.getDisplayScript(locale58);
        java.util.Calendar calendar60 = dateTime16.toCalendar(locale53);
        java.util.Calendar calendar61 = dateTime2.toCalendar(locale53);
        java.time.Instant instant62 = calendar61.toInstant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 239 + "'", int6 == 239);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572621809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=41,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-61157376000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=32,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant62);
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-5039));
        int int3 = dateTimeZone1.getStandardOffset((-162055689L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-5039) + "'", int3 == (-5039));
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDate4.getChronology();
        org.joda.time.LocalDate.Property property13 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate14 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime2.withChronology(chronology42);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths(2022);
        int int47 = dateTime44.getWeekyear();
        java.lang.String str48 = dateTime44.toString();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = localDate51.withDayOfYear(100);
        org.joda.time.Interval interval54 = localDate53.toInterval();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.days();
        java.lang.String str56 = durationFieldType55.getName();
        org.joda.time.LocalDate localDate58 = localDate53.withFieldAdded(durationFieldType55, 32770);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays((int) '#');
        int int64 = dateTime61.getWeekyear();
        org.joda.time.DateMidnight dateMidnight65 = dateTime61.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property67 = dateTime61.property(dateTimeFieldType66);
        boolean boolean68 = localDate53.isSupported(dateTimeFieldType66);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone70);
        org.joda.time.LocalDate localDate73 = localDate71.withDayOfYear(100);
        org.joda.time.LocalDate.Property property74 = localDate71.dayOfMonth();
        org.joda.time.LocalDate localDate75 = property74.getLocalDate();
        org.joda.time.LocalDate localDate77 = property74.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate78 = property74.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property74.getFieldType();
        boolean boolean80 = localDate53.equals((java.lang.Object) property74);
        int int81 = property74.getLeapAmount();
        org.joda.time.LocalDate localDate82 = property74.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate83 = property74.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = dateTime44.withFields((org.joda.time.ReadablePartial) localDate83);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.DateTime dateTime86 = dateTime84.minus(readableDuration85);
        org.joda.time.DateTime dateTime88 = dateTime86.withMillis((-62135596800000L));
        org.joda.time.DateTime.Property property89 = dateTime86.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-03T03:59:59.999+52:00" + "'", str48, "1970-01-03T03:59:59.999+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "days" + "'", str56, "days");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime4.plusSeconds(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter33.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays((int) '#');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime37.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = dateTime37.plusWeeks(5);
        org.joda.time.Chronology chronology50 = dateTime37.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime30.toDateTime(chronology50);
        int int53 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime.Property property54 = dateTime30.era();
        java.lang.String str55 = property54.getAsText();
        org.joda.time.DateTime dateTime56 = property54.withMinimumValue();
        java.lang.String str57 = property54.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property54.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval59 = property54.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+52:00]" + "'", str25, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ap. J.-C." + "'", str55, "ap. J.-C.");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(2111);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        org.joda.time.LocalDate localDate9 = property3.setCopy("3", locale5);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.minus(readablePeriod10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        org.joda.time.LocalDate.Property property17 = localDate14.dayOfMonth();
        org.joda.time.LocalDate localDate18 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withYear(14400);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (byte) 0);
        org.joda.time.LocalDate.Property property25 = localDate21.year();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 4, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.weekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) '#');
        int int38 = dateTime35.getWeekyear();
        org.joda.time.DateMidnight dateMidnight39 = dateTime35.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property41 = dateTime35.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = dateTime35.minusWeeks(17);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime44.toMutableDateTimeISO();
        int int46 = property32.compareTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology47 = mutableDateTime44.getChronology();
        boolean boolean48 = localDate20.equals((java.lang.Object) mutableDateTime44);
        org.joda.time.LocalDate localDate50 = localDate20.withDayOfYear(50);
        org.joda.time.LocalDate.Property property51 = localDate50.centuryOfEra();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(100);
        int int57 = localDate54.size();
        org.joda.time.LocalDate localDate59 = localDate54.plusMonths(6);
        int int61 = localDate59.getValue(0);
        java.lang.String str62 = localDate59.toString();
        org.joda.time.LocalDate localDate64 = localDate59.withWeekyear(1);
        org.joda.time.LocalDate localDate66 = localDate59.withDayOfYear((int) (byte) 1);
        int int67 = localDate59.getYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = null;
        org.joda.time.format.DateTimeParser dateTimeParser69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter68, dateTimeParser69);
        org.joda.time.Chronology chronology71 = dateTimeFormatter70.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter70.withPivotYear(70);
        boolean boolean74 = localDate59.equals((java.lang.Object) 70);
        int int75 = localDate59.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.weeks();
        boolean boolean77 = localDate59.isSupported(durationFieldType76);
        org.joda.time.LocalDate localDate79 = localDate50.withFieldAdded(durationFieldType76, (int) (byte) -1);
        org.joda.time.LocalDate localDate81 = localDate11.withFieldAdded(durationFieldType76, 366);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-08-13" + "'", str62, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField16 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime4.withWeekOfWeekyear(9);
        org.joda.time.DateTime dateTime14 = dateTime4.plus(32762L);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime4.toGregorianCalendar();
        gregorianCalendar15.set((-211005), 988, 2922789);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate.Property property5 = localDate2.weekyear();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy(8640000);
        org.joda.time.LocalDate localDate10 = property5.setCopy((-21880993));
        java.util.Locale locale12 = null;
        org.joda.time.LocalDate localDate13 = property5.setCopy("14399821", locale12);
        int int14 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        java.util.TimeZone timeZone18 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        boolean boolean33 = calendar1.before((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfDay();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withPivotYear(24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter52.withDefaultYear(10799999);
        java.io.Writer writer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter54.printTo(writer55, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572622185,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=42,MILLISECOND=185,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNull(dateTimePrinter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.Date date13 = dateTime4.toDate();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.minus(readablePeriod14);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        java.lang.Object obj5 = null;
        boolean boolean6 = calendar1.after(obj5);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(48, 205);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615822237,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=42,MILLISECOND=237,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(monthDay7);
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        boolean boolean13 = dateTime10.isBeforeNow();
        boolean boolean14 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DurationField durationField33 = chronology30.halfdays();
        org.joda.time.DateTime dateTime34 = dateTime10.toDateTime(chronology30);
        org.joda.time.DurationField durationField35 = chronology30.weekyears();
        org.joda.time.DurationField durationField36 = chronology30.weeks();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) '#');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(5);
        int int17 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology31 = chronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(83968099800000L, chronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        int int53 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime4.toMutableDateTime(dateTimeZone36);
        long long56 = dateTimeZone1.getMillisKeepLocal(dateTimeZone36, (long) 365);
        java.lang.String str58 = dateTimeZone1.getNameKey(83652552000000L);
        boolean boolean59 = dateTimeZone1.isFixed();
        long long61 = dateTimeZone1.previousTransition((-187199773L));
        long long63 = dateTimeZone1.nextTransition((long) 48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 187200000 + "'", int53 == 187200000);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 365L + "'", long56 == 365L);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-187199773L) + "'", long61 == (-187199773L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 48L + "'", long63 == 48L);
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getISO3Country();
        boolean boolean4 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "USA" + "'", str2, "USA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "USA" + "'", str3, "USA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Feb");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "feb" + "'", str2, "feb");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "feb" + "'", str3, "feb");
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(100);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.days();
        java.lang.String str11 = durationFieldType10.getName();
        org.joda.time.LocalDate localDate13 = localDate8.withFieldAdded(durationFieldType10, 32770);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.Interval interval19 = localDate18.toInterval();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.LocalDate localDate23 = localDate18.withFieldAdded(durationFieldType20, 32770);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '#');
        int int29 = dateTime26.getWeekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateTime26.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property32 = dateTime26.property(dateTimeFieldType31);
        boolean boolean33 = localDate18.isSupported(dateTimeFieldType31);
        boolean boolean34 = localDate8.isSupported(dateTimeFieldType31);
        boolean boolean35 = localDate3.isSupported(dateTimeFieldType31);
        int int36 = localDate3.getYearOfEra();
        org.joda.time.LocalDate.Property property37 = localDate3.era();
        org.joda.time.LocalDate localDate39 = localDate3.plusYears(24);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays((int) '#');
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtStartOfDay(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime42.toDateTime(dateTimeZone49);
        org.joda.time.DateTime.Property property53 = dateTime42.centuryOfEra();
        int int54 = property53.getMaximumValue();
        org.joda.time.DateTime dateTime56 = property53.addToCopy((long) (byte) -1);
        boolean boolean57 = localDate39.equals((java.lang.Object) property53);
        org.joda.time.LocalDate.Property property58 = localDate39.weekyear();
        org.joda.time.DurationField durationField59 = property58.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2922789 + "'", int54 == 2922789);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        java.lang.Object obj13 = null;
        boolean boolean14 = dateTimeZone9.equals(obj13);
        long long17 = dateTimeZone9.convertLocalToUTC((long) (-26569157), false);
        java.lang.String str19 = dateTimeZone9.getNameKey((long) (short) 10);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-213769157L) + "'", long17 == (-213769157L));
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusWeeks(17);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 36000000);
        java.lang.String str13 = dateTime10.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-09-06T03:59:59.999+52:00" + "'", str13, "1969-09-06T03:59:59.999+52:00");
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology12 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean16 = dateTimeZone14.isStandardOffset(10L);
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long24 = dateTimeZone20.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj17, dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        int int27 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long31 = dateTimeZone14.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone14);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale34);
        java.lang.String str36 = locale34.getDisplayVariant();
        java.lang.String str37 = dateTimeZone14.getName((long) 2175, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter3.withZone(dateTimeZone14);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907461382864000000L, dateTimeZone14);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfYear(100);
        int int45 = localDate42.size();
        java.lang.String str47 = localDate42.toString("2022-08-11");
        int int48 = localDate42.getWeekOfWeekyear();
        int int49 = localDate42.getWeekyear();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtStartOfDay(dateTimeZone54);
        java.util.Date date57 = dateTime56.toDate();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusDays((int) '#');
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(dateTimeZone64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtStartOfDay(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime60.toDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = dateTime60.minusMinutes(52);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(dateTimeZone74);
        long long78 = dateTimeZone74.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime79 = dateTime60.withZone(dateTimeZone74);
        int int80 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology81 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime83 = dateTime60.withMillis(31608000000L);
        org.joda.time.DateTime dateTime85 = dateTime83.minus(83968099800000L);
        int int86 = dateTime83.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology88 = null;
        boolean boolean89 = dateTimeFieldType87.isSupported(chronology88);
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType87.getRangeDurationType();
        java.lang.String str91 = dateTimeFieldType87.toString();
        int int92 = dateTime83.get(dateTimeFieldType87);
        int int93 = localDate42.indexOf(dateTimeFieldType87);
        org.joda.time.LocalDate.Property property94 = localDate39.property(dateTimeFieldType87);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-187199987L) + "'", long24 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 32762L + "'", long31 == 32762L);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-08-11" + "'", str47, "2022-08-11");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-187199990L) + "'", long78 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weekyearOfCentury" + "'", str91, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 71 + "'", int92 == 71);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDate2.getFieldTypes();
        java.lang.String str7 = localDate2.toString();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate15 = localDate10.withDayOfMonth(21);
        boolean boolean16 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        org.joda.time.DateTime dateTime28 = localDate2.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) '#');
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime31.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = dateTime31.plusWeeks(5);
        org.joda.time.DateTime dateTime45 = dateTime31.withYearOfEra(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = dateTimeFieldType46.isSupported(chronology47);
        int int49 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType46.getRangeDurationType();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.LocalDate localDate54 = localDate2.withFieldAdded(durationFieldType51, 48);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) localDate2);
        org.joda.time.LocalDate localDate57 = localDate55.withWeekyear(48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-13" + "'", str7, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "centuries" + "'", str52, "centuries");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        int int12 = dateTimeZone10.getOffset((-2779199987L));
        java.lang.String str14 = dateTimeZone10.getNameKey(1644572488295L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 187200000 + "'", int12 == 187200000);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime4.toDateMidnight();
        long long7 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.days();
        org.joda.time.DurationField durationField27 = chronology24.weekyears();
        org.joda.time.DateTime dateTime28 = dateTime4.withChronology(chronology24);
        org.joda.time.DateTime.Property property29 = dateTime4.year();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime4.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60526224000001L) + "'", long7 == (-60526224000001L));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        boolean boolean11 = dateTime4.isAfter((long) 17);
        org.joda.time.DateTime dateTime13 = dateTime4.minus((long) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime4.minusSeconds(14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime4.getZone();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        int int23 = localDate20.size();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        int int31 = dateTime28.getWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property34 = dateTime28.property(dateTimeFieldType33);
        org.joda.time.LocalDate.Property property35 = localDate25.property(dateTimeFieldType33);
        org.joda.time.LocalDate localDate36 = property35.roundCeilingCopy();
        int int37 = localDate36.getDayOfYear();
        org.joda.time.LocalDate localDate39 = localDate36.plusMonths(0);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.centuries();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(3975782403200L, chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.year();
        long long48 = dateTimeField45.addWrapField(0L, (-1970));
        int int49 = dateTimeField45.getMinimumValue();
        int int50 = dateTime4.get(dateTimeField45);
        long long51 = dateTime4.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 229 + "'", int37 == 229);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62167219200000L) + "'", long48 == (-62167219200000L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-292275054) + "'", int49 == (-292275054));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 51 + "'", int50 == 51);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60526224000001L) + "'", long51 == (-60526224000001L));
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        boolean boolean50 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int51 = dateTimeFormatter2.getPivotYear();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572622647,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=42,MILLISECOND=647,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(int51);
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withLocale(locale10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withDefaultYear((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("21 Feb 1900 00:00:00 GMT", dateTimeFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology19 = chronology15.withZone(dateTimeZone18);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.now(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField22 = chronology15.millis();
        org.joda.time.Chronology chronology23 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.minuteOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(5907399684280970171L, chronology15);
        org.joda.time.DurationField durationField26 = chronology15.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0, 1162, (-292275054), 50, 95307, 35, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        long long19 = chronology8.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        long long32 = dateTimeField24.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay33.minus(readablePeriod36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 0);
        java.util.Locale locale46 = new java.util.Locale("", "", "hi!");
        int int47 = dateTimeField42.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) monthDay33, locale46);
        int[] intArray49 = monthDay33.getValues();
        int[] intArray51 = chronology8.get((org.joda.time.ReadablePartial) monthDay33, (long) 4);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.Chronology chronology53 = monthDay52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfDay();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.days();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62180539199983L) + "'", long19 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9L + "'", long32 == 9L);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb" + "'", str48, "Feb");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 3]");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        int[] intArray5 = monthDay1.getValues();
        org.joda.time.MonthDay.Property property6 = monthDay1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '#');
        int int12 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime9.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MonthDay.Property property22 = monthDay1.monthOfYear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 3]");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        java.util.Date date1 = new java.util.Date((long) 13);
        java.lang.String str2 = date1.toLocaleString();
        date1.setTime(345600000L);
        org.junit.Assert.assertEquals(date1.toString(), "Mon Jan 05 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 janv. 1970 00:00:00" + "'", str2, "1 janv. 1970 00:00:00");
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay11 = monthDay9.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField13 = monthDay11.getField((int) (byte) 0);
        java.util.Locale locale17 = new java.util.Locale("", "", "hi!");
        int int18 = dateTimeField13.getMaximumTextLength(locale17);
        long long21 = dateTimeField13.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay24 = monthDay22.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay22.minus(readablePeriod25);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        java.lang.String str37 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) monthDay22, locale35);
        int int38 = property7.getMaximumTextLength(locale35);
        java.lang.String str39 = monthDay0.toString("--02-11", locale35);
        org.joda.time.MonthDay.Property property40 = monthDay0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 4, dateTimeZone44);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = dateTimeZone44.getShortName((long) 0, locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        boolean boolean50 = property40.equals((java.lang.Object) locale47);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.MonthDay monthDay63 = monthDay53.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfDay();
        boolean boolean66 = durationFieldType51.isSupported(chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology62.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField71 = chronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology62.yearOfEra();
        org.joda.time.MonthDay monthDay73 = new org.joda.time.MonthDay(chronology62);
        int int74 = property40.compareTo((org.joda.time.ReadablePartial) monthDay73);
        org.joda.time.MonthDay.Property property75 = monthDay73.monthOfYear();
        org.joda.time.MonthDay monthDay77 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property78 = monthDay77.monthOfYear();
        org.joda.time.MonthDay monthDay80 = property78.addToCopy((int) ' ');
        int int81 = property78.get();
        java.lang.String str82 = property78.toString();
        org.joda.time.MonthDay monthDay83 = property78.getMonthDay();
        int[] intArray84 = monthDay83.getValues();
        boolean boolean85 = property75.equals((java.lang.Object) intArray84);
        java.lang.String str86 = property75.getAsString();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3" + "'", str8, "3");
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9L + "'", long21 == 9L);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Feb" + "'", str37, "Feb");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "--02-11" + "'", str39, "--02-11");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+52:00" + "'", str48, "+52:00");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Property[monthOfYear]" + "'", str82, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 3]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2" + "'", str86, "2");
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate2.withYearOfEra(2730);
        org.joda.time.LocalDate.Property property13 = localDate2.year();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTime dateTime23 = localDate16.toDateTime(localTime22);
        org.joda.time.LocalDate.Property property24 = localDate16.dayOfWeek();
        org.joda.time.LocalDate.Property property25 = localDate16.yearOfEra();
        int int26 = localDate16.getDayOfWeek();
        int int27 = localDate16.getEra();
        int int28 = property13.compareTo((org.joda.time.ReadablePartial) localDate16);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfYear(100);
        int int34 = localDate31.size();
        org.joda.time.LocalDate localDate36 = localDate31.plusMonths(6);
        int int38 = localDate36.getValue(0);
        java.lang.String str39 = localDate36.toString();
        org.joda.time.LocalDate localDate41 = localDate36.withWeekyear(1);
        org.joda.time.LocalDate localDate43 = localDate36.withDayOfYear((int) (byte) 1);
        int int44 = localDate36.getYear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(100);
        int int50 = localDate47.size();
        org.joda.time.LocalDate localDate52 = localDate47.plusMonths(6);
        int int54 = localDate52.getValue(0);
        boolean boolean55 = localDate36.equals((java.lang.Object) int54);
        org.joda.time.LocalDate localDate57 = localDate36.withDayOfYear((int) (short) 100);
        java.lang.String str58 = localDate36.toString();
        boolean boolean59 = localDate16.isAfter((org.joda.time.ReadablePartial) localDate36);
        int int60 = localDate36.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-08-13" + "'", str39, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-08-13" + "'", str58, "2022-08-13");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime2.getDayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(100);
        int int14 = localDate11.size();
        org.joda.time.LocalDate localDate16 = localDate11.plusMonths(6);
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTime dateTime18 = localDate11.toDateTime(localTime17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime18);
        int int21 = dateTime18.getEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withPivotYear(14399967);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra(52);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str33 = locale30.getExtension('a');
        org.joda.time.LocalDate localDate34 = property28.setCopy("3", locale30);
        java.lang.String str35 = locale30.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter21.withLocale(locale30);
        java.lang.Appendable appendable37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime42.hourOfDay();
        org.joda.time.DateMidnight dateMidnight44 = dateTime42.toDateMidnight();
        long long45 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime42.minusMonths(1439);
        org.joda.time.DateTime dateTime49 = dateTime47.withYear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(appendable37, (org.joda.time.ReadableInstant) dateTime49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60526224000001L) + "'", long45 == (-60526224000001L));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        int int4 = date3.getHours();
        java.util.Date date8 = new java.util.Date(0, 0, (int) '4');
        date8.setDate(12);
        date8.setHours(2922789);
        date8.setTime(9L);
        java.util.Date date18 = new java.util.Date(0, 0, (int) '4');
        int int19 = date18.getHours();
        int int20 = date18.getDate();
        boolean boolean21 = date8.after(date18);
        int int22 = date18.getMonth();
        boolean boolean23 = date3.before(date18);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date18.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.Chronology chronology24 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime7.withChronology(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime7.millisOfDay();
        org.joda.time.DurationField durationField27 = property26.getDurationField();
        org.joda.time.DateTime dateTime29 = property26.addToCopy(14402);
        org.joda.time.DateTime dateTime31 = dateTime29.plus(48999000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime29.toString(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-03T04:00:16.423+52:00" + "'", str33, "1970-01-03T04:00:16.423+52:00");
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology23);
        java.lang.Integer int28 = dateTimeFormatter27.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology42 = chronology38.withZone(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(chronology42);
        org.joda.time.DurationField durationField44 = chronology42.seconds();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter27.withChronology(chronology42);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        java.util.Date date8 = localDate7.toDate();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate7.withPeriodAdded(readablePeriod9, 292278994);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks(88);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime8.toMutableDateTime(dateTimeZone12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(dateTimeZone12);
        int int16 = dateTimeZone12.getOffsetFromLocal((-60494601600001L));
        int int18 = dateTimeZone12.getOffsetFromLocal((long) 364);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property27 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayScript(locale31);
        java.lang.String str33 = dateTime28.toString("3", locale30);
        java.lang.String str34 = dateTimeZone12.getShortName((long) 12, locale30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter2.withLocale(locale30);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 187200000 + "'", int18 == 187200000);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "3" + "'", str33, "3");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+52:00" + "'", str34, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        int int7 = localDate6.getWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = property13.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate17 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(349260000);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = localDate19.toDateMidnight(dateTimeZone22);
        org.joda.time.Interval interval25 = localDate6.toInterval(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = localDate6.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfWeek(4);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate29.minus(readablePeriod30);
        int int32 = localDate29.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        int int8 = dateTime7.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMillis((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes(100);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.LocalDate localDate30 = localDate25.withFieldAdded(durationFieldType27, 32770);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.plus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime39 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean43 = dateTimeZone41.isStandardOffset(10L);
        java.lang.Object obj44 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long51 = dateTimeZone47.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(obj44, dateTimeZone47);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTime();
        int int54 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) dateTime52);
        long long58 = dateTimeZone41.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone41);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(dateTimeZone61);
        long long65 = dateTimeZone61.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime66 = localDate59.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) dateTime37, dateTimeZone61);
        org.joda.time.DateTime dateTime68 = dateTime20.withZone(dateTimeZone61);
        boolean boolean69 = dateTime20.isEqualNow();
        org.joda.time.DateTime dateTime71 = dateTime20.plusMillis(23786);
        boolean boolean72 = dateTime71.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14399999 + "'", int18 == 14399999);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "days" + "'", str28, "days");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-187199987L) + "'", long51 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32762L + "'", long58 == 32762L);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-187199990L) + "'", long65 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfDay();
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime14.withYear(292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        java.util.Date date5 = new java.util.Date(14403, 816, 36599, (int) '4', 3659);
        date5.setYear(49323762);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 19 16:59:00 UTC 49325662");
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        int int6 = calendar1.getActualMaximum(1);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long14 = dateTimeZone10.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj7, dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        calendar1.setTimeZone(timeZone18);
        calendar1.setLenient(false);
        calendar1.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(38399214);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278994 + "'", int6 == 292278994);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187199987L) + "'", long14 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays((int) '#');
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime7.toDateTime(dateTimeZone14);
        org.joda.time.DateTime.Property property18 = dateTime7.centuryOfEra();
        org.joda.time.DateTime.Property property19 = dateTime7.monthOfYear();
        org.joda.time.DateTime.Property property20 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime22 = property20.addToCopy(24);
        boolean boolean23 = languageRange1.equals((java.lang.Object) 24);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getDisplayCountry();
        boolean boolean53 = locale48.hasExtensions();
        int int54 = property6.getMaximumShortTextLength(locale48);
        java.lang.String str55 = locale48.getISO3Country();
        java.util.Locale locale56 = locale48.stripExtensions();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572623247,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=43,MILLISECOND=247,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 4, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.plus(readablePeriod26);
        boolean boolean28 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime27.plus((long) 86399999);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setTime((long) (short) 100);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromDateFields(date3);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) dateTime13, chronology22);
        org.joda.time.MonthDay monthDay28 = monthDay8.withChronologyRetainFields(chronology22);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DurationField durationField31 = chronology22.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology22.hourOfDay();
        java.lang.String str33 = dateTimeField32.toString();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DateTimeField[hourOfDay]" + "'", str33, "DateTimeField[hourOfDay]");
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology50 = dateTimeFormatter2.getChronolgy();
        java.lang.Object obj51 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long58 = dateTimeZone54.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj51, dateTimeZone54);
        java.lang.String str61 = dateTimeZone54.getName((long) 1970);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter2.withZone(dateTimeZone54);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology64 = dateTimeFormatter2.getChronology();
        java.lang.StringBuffer stringBuffer65 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.days();
        java.lang.String str72 = durationFieldType71.getName();
        org.joda.time.DateTime dateTime74 = dateTime70.withFieldAdded(durationFieldType71, (int) 'u');
        org.joda.time.DateTime.Property property75 = dateTime74.millisOfDay();
        int int76 = dateTime74.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay77 = dateTime74.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime74.plus(readablePeriod78);
        org.joda.time.LocalDate localDate80 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate82 = localDate80.withYearOfEra(52);
        org.joda.time.LocalDate.Property property83 = localDate82.weekOfWeekyear();
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale85.getLanguage();
        java.lang.String str88 = locale85.getExtension('a');
        org.joda.time.LocalDate localDate89 = property83.setCopy("3", locale85);
        java.util.Calendar calendar90 = dateTime74.toCalendar(locale85);
        org.joda.time.DateTime dateTime92 = dateTime74.minusMillis(70);
        boolean boolean93 = dateTime74.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer65, (org.joda.time.ReadableInstant) dateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572623351,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=43,MILLISECOND=351,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-187199987L) + "'", long58 == (-187199987L));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+52:00" + "'", str61, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNull(dateTimePrinter63);
        org.junit.Assert.assertNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "days" + "'", str72, "days");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 13 + "'", int76 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "it" + "'", str86, "it");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) 'x', (int) ' ', 0);
        java.util.Calendar.Builder builder11 = builder3.setDate(28, 29, 815);
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay(14400, 51860, 292278994, 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTimeISO();
        java.lang.String str14 = dateTime4.toString("1");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology23.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField28 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.dayOfYear();
        org.joda.time.DurationField durationField31 = chronology23.seconds();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.weekyearOfCentury();
        org.joda.time.DateTime dateTime34 = dateTime4.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setTime((long) (short) 100);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromDateFields(date3);
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        boolean boolean14 = dateTimeFormatter12.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter12.getPrinter();
        org.joda.time.Chronology chronology20 = dateTimeFormatter12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter12.withPivotYear(52);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronology();
        int int24 = dateTimeFormatter22.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.MonthDay monthDay36 = monthDay26.withChronologyRetainFields(chronology35);
        org.joda.time.DurationField durationField37 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 4, dateTimeZone44);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = dateTimeZone44.getShortName((long) 0, locale47);
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property51 = monthDay50.monthOfYear();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale52.getDisplayScript(locale53);
        int int56 = property51.getMaximumTextLength(locale52);
        org.joda.time.DurationField durationField57 = property51.getDurationField();
        int int58 = property51.getMinimumValue();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale59.getDisplayVariant();
        boolean boolean62 = property51.equals((java.lang.Object) str61);
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        java.util.Locale.setDefault(locale64);
        java.util.Locale locale66 = locale64.stripExtensions();
        int int67 = property51.getMaximumTextLength(locale64);
        java.lang.String str68 = locale47.getDisplayCountry(locale64);
        java.lang.String str69 = dateTimeField39.getAsShortText(0L, locale64);
        java.util.Locale.Category category70 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale71 = java.util.Locale.getDefault(category70);
        java.util.Locale.setDefault(locale71);
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.String str74 = locale64.getDisplayScript(locale73);
        java.lang.String str75 = locale73.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter22.withLocale(locale73);
        java.lang.String str77 = property9.getAsText(locale73);
        java.lang.String str78 = property9.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property9.getFieldType();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimePrinter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+52:00" + "'", str48, "+52:00");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category63.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "janv." + "'", str69, "janv.");
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category70.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fran\347ais" + "'", str75, "fran\347ais");
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "janvier" + "'", str77, "janvier");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "monthOfYear" + "'", str78, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long8 = dateTimeZone4.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj1, dateTimeZone4);
        boolean boolean11 = dateTimeZone4.isStandardOffset((long) (short) 1);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (byte) 0);
        org.joda.time.LocalDate.Property property17 = localDate13.year();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 4, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate13.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.plus((long) 55);
        int int28 = dateTime27.getYearOfEra();
        int int29 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime27);
        long long31 = dateTimeZone4.previousTransition(259207092L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-187199987L) + "'", long8 == (-187199987L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1969 + "'", int28 == 1969);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 187200000 + "'", int29 == 187200000);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 259207092L + "'", long31 == 259207092L);
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str4 = locale1.getExtension('a');
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str6 = locale1.getScript();
        java.util.Locale locale7 = locale1.stripExtensions();
        java.lang.String str8 = locale1.getScript();
        java.lang.String str9 = locale1.getDisplayCountry();
        java.lang.String str10 = locale1.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italien" + "'", str10, "italien");
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfDay();
        long long18 = dateTimeField16.roundHalfCeiling((-1L));
        int int20 = dateTimeField16.getLeapAmount(32772L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime22.plusWeeks(5);
        int int35 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime22);
        int int36 = dateTime22.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime22.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime22.plusWeeks(34759438);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 187200000 + "'", int35 == 187200000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        calendar1.set(0, 1051, (-1970), 3659999, 55, 52);
        calendar1.set(160, 0, 311);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=160,MONTH=0,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=311,DAY_OF_YEAR=267,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=3659999,MINUTE=55,SECOND=52,MILLISECOND=659,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay11);
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        int int7 = calendar1.getWeekYear();
        int int8 = calendar1.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        int int15 = localDate12.size();
        org.joda.time.LocalDate localDate17 = localDate12.plusMonths(6);
        int int19 = localDate17.getValue(0);
        org.joda.time.LocalDate localDate21 = localDate17.plusMonths(52);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        int int25 = localDate21.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate9.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int27 = localDate9.getDayOfWeek();
        org.joda.time.Chronology chronology28 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644615823676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=43,MILLISECOND=676,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField17 = chronology8.centuries();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology8);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology8);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(obj0, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        org.joda.time.DateTime dateTime12 = dateTime8.minusHours(365);
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks(8);
        java.lang.String str15 = dateTime14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond(2922786);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922786 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-187199987L) + "'", long7 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-03-26T08:43:43.717+52:00" + "'", str15, "2022-03-26T08:43:43.717+52:00");
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        int int10 = calendar1.getGreatestMinimum(3);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        int int12 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(49344357, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572623735,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=43,MILLISECOND=735,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        org.joda.time.Chronology chronology9 = dateTimeFormatter6.getChronolgy();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        int int15 = localDate12.size();
        org.joda.time.LocalDate localDate17 = localDate12.plusMonths(6);
        int int19 = localDate17.getValue(0);
        java.lang.String str20 = localDate17.toString();
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) localDate17);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology35 = chronology31.withZone(dateTimeZone34);
        org.joda.time.Interval interval36 = localDate22.toInterval(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter6.withZone(dateTimeZone34);
        java.lang.String str39 = dateTimeZone34.getName((long) 33);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-08-13" + "'", str20, "2022-08-13");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+97:01" + "'", str39, "+97:01");
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate4.minus(readablePeriod5);
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(3);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.plusWeeks(5);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime29.minus(readablePeriod43);
        int int45 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = dateTime25.withHourOfDay(11);
        int int48 = dateTime47.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays((int) '#');
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtStartOfDay(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime51.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = dateTime51.plusWeeks(5);
        org.joda.time.Chronology chronology64 = dateTime51.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.eras();
        org.joda.time.DateTime dateTime66 = dateTime47.withChronology(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology68 = null;
        boolean boolean69 = dateTimeFieldType67.isSupported(chronology68);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType67.getRangeDurationType();
        java.lang.String str71 = dateTimeFieldType67.toString();
        java.lang.String str72 = dateTimeFieldType67.getName();
        org.joda.time.DateTime.Property property73 = dateTime47.property(dateTimeFieldType67);
        org.joda.time.LocalDate.Property property74 = localDate8.property(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43199999 + "'", int48 == 43199999);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "weekyearOfCentury" + "'", str71, "weekyearOfCentury");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyearOfCentury" + "'", str72, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        java.util.Date date5 = new java.util.Date(7, 11, (int) (byte) -1, 0, 2022);
        java.lang.String str6 = date5.toLocaleString();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromDateFields(date5);
        org.joda.time.MonthDay.Property property8 = monthDay7.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology17.halfdays();
        org.joda.time.MonthDay monthDay27 = monthDay7.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.minuteOfHour();
        boolean boolean31 = dateTimeField29.isLeap(3787200000L);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 30 09:42:00 UTC 1907");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "30-nov-1907 9.42.00" + "'", str6, "30-nov-1907 9.42.00");
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+52:00]" + "'", str22, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        calendar1.set(3, 16, 0);
        calendar1.set(16804056, (-292275055), 323, 240, 323, 60);
        java.util.TimeZone timeZone22 = calendar1.getTimeZone();
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=16804056,MONTH=-292275055,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=323,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=240,MINUTE=323,SECOND=60,MILLISECOND=853,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        int int15 = date13.getDate();
        boolean boolean16 = date3.after(date13);
        int int17 = date13.getDay();
        java.time.Instant instant18 = date13.toInstant();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date13);
        java.lang.String str20 = date13.toGMTString();
        date13.setMinutes(1969);
        date13.setTime((long) 2175);
        date13.setHours((-719523));
        long long27 = date13.getTime();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Thu Dec 01 21:00:02 UTC 1887");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "21 Feb 1900 00:00:00 GMT" + "'", str20, "21 Feb 1900 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2590282797825L) + "'", long27 == (-2590282797825L));
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime6.withFieldAdded(durationFieldType7, 1);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withHourOfDay(570);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 570 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("d\351cembre");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'de?cembre' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 34608860);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter19.getZone();
        java.lang.String str22 = dateTimeZone20.getName(292269054L);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(583, 3, 19);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDate.Property property10 = localDate6.year();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 4, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long24 = dateTimeZone20.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj17, dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime15.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = dateTime15.withYearOfEra(1);
        boolean boolean31 = dateTime15.isAfter((long) 160);
        org.joda.time.DateTime dateTime33 = dateTime15.withYear(34608860);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime15.plus(readableDuration34);
        boolean boolean36 = localDate5.equals((java.lang.Object) dateTime15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-187199987L) + "'", long24 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.MonthDay monthDay5 = property2.getMonthDay();
        java.lang.String str6 = monthDay5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = monthDay5.getFieldType(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--01-03" + "'", str6, "--01-03");
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(4);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.withDurationAdded(readableDuration30, (int) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury(29);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(239);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays((int) '#');
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtStartOfDay(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime42.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = dateTime42.plusWeeks(5);
        org.joda.time.Chronology chronology55 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.weekyear();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillisOfSecond(70);
        boolean boolean60 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime63 = dateTime57.withYear(35);
        long long64 = dateTime57.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644572624004L + "'", long64 == 1644572624004L);
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale1);
        boolean boolean6 = calendar5.isWeekDateSupported();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromCalendarFields(calendar5);
        java.lang.String str8 = monthDay7.toString();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay7.minus(readablePeriod9);
        int int11 = monthDay7.getDayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay7.getChronology();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572624040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=40,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572624040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=40,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--02-11" + "'", str8, "--02-11");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        java.lang.String str18 = localDate7.toString();
        org.joda.time.LocalDate localDate20 = localDate7.minusYears(4);
        org.joda.time.LocalDate localDate22 = localDate20.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) '#');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime25.toDateTime(dateTimeZone32);
        java.lang.Object obj36 = null;
        boolean boolean37 = dateTimeZone32.equals(obj36);
        int int39 = dateTimeZone32.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (int) (byte) 0);
        org.joda.time.LocalDate.Property property44 = localDate40.year();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 4, dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate40.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        java.lang.Object obj51 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long58 = dateTimeZone54.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(obj51, dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime49.toMutableDateTime(dateTimeZone54);
        int int62 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateMidnight dateMidnight63 = localDate22.toDateMidnight(dateTimeZone32);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime69.hourOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime69.withYearOfEra((int) ' ');
        int int75 = dateTime74.getDayOfWeek();
        org.joda.time.DateTime.Property property76 = dateTime74.millisOfSecond();
        int int77 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime74);
        java.lang.String str78 = dateTimeZone32.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-08-13" + "'", str18, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 187200000 + "'", int39 == 187200000);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-187199987L) + "'", long58 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 187200000 + "'", int62 == 187200000);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 187200000 + "'", int77 == 187200000);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+52:00" + "'", str78, "+52:00");
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology26);
        org.joda.time.DurationField durationField35 = chronology26.minutes();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 28);
        org.joda.time.DateTime dateTime41 = dateTime39.withMillisOfSecond(9);
        org.joda.time.DateTime.Property property42 = dateTime39.secondOfDay();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.DateTime dateTime44 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime45 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 86399 + "'", int43 == 86399);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate7.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property31 = monthDay30.monthOfYear();
        java.lang.String str32 = property31.getAsText();
        int int33 = property31.get();
        int int34 = property31.getMaximumValueOverall();
        int int35 = property31.get();
        java.lang.String str36 = property31.toString();
        org.joda.time.MonthDay monthDay38 = property31.addToCopy(327);
        java.lang.String str39 = monthDay38.toString();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.minus(readablePeriod40);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDate7.compareTo((org.joda.time.ReadablePartial) monthDay38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "janvier" + "'", str32, "janvier");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[monthOfYear]" + "'", str36, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "--04-03" + "'", str39, "--04-03");
        org.junit.Assert.assertNotNull(monthDay41);
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int9 = calendar1.getWeekYear();
        calendar1.setMinimalDaysInFirstWeek(8);
        int int12 = calendar1.getWeeksInWeekYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        calendar1.setLenient(true);
        java.time.Instant instant16 = calendar1.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572624185,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=185,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("halfdays");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("1970");
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property13 = monthDay12.monthOfYear();
        int int14 = property13.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        int int21 = property13.compareTo((org.joda.time.ReadableInstant) dateTime19);
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = property13.getAsText(locale22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(97L);
        java.lang.String str33 = property30.toString();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readablePeriod37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime38.withYearOfCentury(1);
        int int43 = property30.compareTo((org.joda.time.ReadableInstant) dateTime38);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        java.lang.String str46 = locale44.getCountry();
        java.lang.String str47 = locale44.getDisplayScript();
        boolean boolean48 = locale44.hasExtensions();
        int int49 = property30.getMaximumTextLength(locale44);
        org.joda.time.MonthDay monthDay50 = property13.setCopy("2", locale44);
        java.lang.String str51 = locale44.getCountry();
        java.lang.String str52 = locale10.getDisplayScript(locale44);
        java.util.Locale.Builder builder53 = builder9.setLocale(locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder55 = builder9.setVariant("ISOChronology[+00:00:00.638]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ISOChronology[+00:00:00.638] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e00\u6708" + "'", str23, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[hourOfDay]" + "'", str33, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572624206,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=206,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.MonthDay monthDay7 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) (byte) 0);
        java.util.Locale locale15 = new java.util.Locale("", "", "hi!");
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long19 = dateTimeField11.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay20.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = monthDay27.getField((int) (byte) 0);
        java.util.Locale locale33 = new java.util.Locale("", "", "hi!");
        int int34 = dateTimeField29.getMaximumTextLength(locale33);
        java.lang.String str35 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) monthDay20, locale33);
        int int36 = property5.getMaximumTextLength(locale33);
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int40 = property5.getMaximumTextLength(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = locale38.getDisplayName(locale42);
        java.lang.String str45 = locale38.getDisplayName();
        boolean boolean46 = locale38.hasExtensions();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572624235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en-US" + "'", str43, "en-US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French" + "'", str44, "French");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u6cd5\u6587" + "'", str45, "\u6cd5\u6587");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        int int7 = localDate6.getWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(100);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = property13.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate17 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(349260000);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = localDate19.toDateMidnight(dateTimeZone22);
        org.joda.time.Interval interval25 = localDate6.toInterval(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = localDate6.withDayOfYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate6.minus(readablePeriod28);
        int int30 = localDate29.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology15.weeks();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        int int26 = dateTime23.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime23.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.plus(readablePeriod32);
        boolean boolean34 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime23);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        int int41 = localDate38.size();
        org.joda.time.LocalDate localDate43 = localDate38.plusMonths(6);
        org.joda.time.LocalTime localTime44 = null;
        org.joda.time.DateTime dateTime45 = localDate38.toDateTime(localTime44);
        int int46 = dateTime45.getEra();
        org.joda.time.DateTime dateTime48 = dateTime45.plusMonths((int) 'x');
        org.joda.time.DateTime dateTime49 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.plus((long) 'a');
        int int52 = dateTime51.getSecondOfMinute();
        boolean boolean53 = localDate35.equals((java.lang.Object) dateTime51);
        org.joda.time.Chronology chronology54 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime20.toMutableDateTime(chronology54);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 44 + "'", int52 == 44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 23, dateTimeZone1);
        java.util.Date date4 = localDate3.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Jan 03 00:00:00 UTC 1970");
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDate8.getFields();
        int int10 = localDate8.getDayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate8.withWeekyear(1);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate20 = localDate16.minusYears(32769);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        int int27 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusDays((int) '#');
        boolean boolean35 = dateTime32.isBeforeNow();
        boolean boolean36 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int37 = property21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate38 = property21.roundFloorCopy();
        org.joda.time.LocalDate.Property property39 = localDate38.weekyear();
        int[] intArray41 = chronology13.get((org.joda.time.ReadablePartial) localDate38, 3369600005L);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(100);
        int int47 = localDate44.size();
        org.joda.time.LocalDate localDate49 = localDate44.plusMonths(6);
        int int51 = localDate49.getValue(0);
        org.joda.time.LocalDate localDate53 = localDate49.plusMonths(52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        int int57 = localDate53.compareTo((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate.Property property58 = localDate53.dayOfMonth();
        boolean boolean59 = localDate38.isAfter((org.joda.time.ReadablePartial) localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 2, 9]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((-62135784000000L));
        int[] intArray2 = monthDay1.getValues();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField17 = monthDay15.getField((int) (byte) 0);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        long long30 = dateTimeField22.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay31.minus(readablePeriod34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay38 = monthDay36.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField40 = monthDay38.getField((int) (byte) 0);
        java.util.Locale locale44 = new java.util.Locale("", "", "hi!");
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        java.lang.String str46 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay31, locale44);
        java.lang.String str47 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) monthDay15, locale44);
        long long49 = dateTimeField4.roundHalfFloor((long) (short) 100);
        boolean boolean50 = dateTimeField4.isSupported();
        boolean boolean51 = dateTimeField4.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField4.getType();
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(0L);
        java.lang.String str55 = monthDay54.toString();
        org.joda.time.Chronology chronology56 = monthDay54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType52.getField(chronology56);
        java.lang.String str60 = dateTimeField58.getAsShortText(1644529168582L);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb" + "'", str46, "Feb");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "February" + "'", str47, "February");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "--01-03" + "'", str55, "--01-03");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "f\351vr." + "'", str60, "f\351vr.");
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTime.Property property7 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        int int9 = dateTime8.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate.Property property10 = localDate4.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        boolean boolean12 = dateTimeField11.isLenient();
        long long14 = dateTimeField11.roundFloor((long) 34847);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-259200000L) + "'", long14 == (-259200000L));
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(97L);
        java.lang.String str26 = property23.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury(1);
        int int36 = property23.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.withWeekyear((int) 'u');
        boolean boolean39 = calendar1.before((java.lang.Object) dateTime38);
        long long40 = dateTime38.getMillis();
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.DateTime.Property property42 = dateTime38.yearOfEra();
        boolean boolean44 = dateTime38.isAfter((long) 323);
        org.joda.time.DateMidnight dateMidnight45 = dateTime38.toDateMidnight();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[hourOfDay]" + "'", str26, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-58474483200001L) + "'", long40 == (-58474483200001L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.MonthDay.Property property8 = monthDay5.dayOfMonth();
        org.joda.time.MonthDay monthDay10 = monthDay5.plusMonths(2922789);
        org.joda.time.MonthDay monthDay12 = monthDay5.minusDays(22);
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays(46);
        org.joda.time.MonthDay monthDay16 = monthDay14.plusMonths(2035);
        int[] intArray17 = monthDay16.getValues();
        int[] intArray18 = monthDay16.getValues();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[7, 7]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[7, 7]");
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromDateFields(date9);
        int int11 = date9.getMonth();
        date9.setMinutes(30);
        int int14 = date9.getDay();
        int int15 = date9.getMinutes();
        long long16 = date9.getTime();
        int int17 = date9.getSeconds();
        date9.setHours((int) '4');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572624564,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=564,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 13 04:30:44 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30 + "'", int15 == 30);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644571844564L + "'", long16 == 1644571844564L);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.withYearOfEra((int) ' ');
        int int38 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime40 = dateTime32.withYearOfEra(817);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(32769);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay25 = monthDay23.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField27 = monthDay25.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        int int29 = monthDay25.indexOf(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay25.withPeriodAdded(readablePeriod30, (-1));
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) monthDay25, (int) '#', locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = property7.setCopy("1378", locale34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1378\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "35" + "'", str35, "35");
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now(dateTimeZone6);
        int int10 = dateTimeZone6.getOffsetFromLocal((-60494601600001L));
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.now(dateTimeZone6);
        long long14 = dateTimeZone6.convertLocalToUTC(32769L, false);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(2007);
        org.joda.time.DateTime dateTime20 = dateTime16.withMillisOfDay(333);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 187200000 + "'", int10 == 187200000);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187167231L) + "'", long14 == (-187167231L));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate2.withYearOfEra(2730);
        org.joda.time.Interval interval13 = localDate2.toInterval();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.Interval interval19 = localDate18.toInterval();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.LocalDate localDate23 = localDate18.withFieldAdded(durationFieldType20, 32770);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate18.plus(readablePeriod24);
        org.joda.time.LocalDate localDate27 = localDate18.withYearOfEra(32769);
        org.joda.time.LocalDate localDate29 = localDate18.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime30 = localDate29.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(100);
        org.joda.time.DateTime dateTime34 = dateTime30.withYearOfCentury((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime39.minusDays((int) 'u');
        int int45 = dateTime39.getYearOfEra();
        org.joda.time.DateTime dateTime47 = dateTime39.plusMillis(4);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(100);
        org.joda.time.LocalDate.Property property53 = localDate50.dayOfMonth();
        org.joda.time.LocalDate localDate54 = property53.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime55 = dateTime47.withFields((org.joda.time.ReadablePartial) localDate54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate58.withDayOfYear(100);
        org.joda.time.Interval interval61 = localDate60.toInterval();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.days();
        java.lang.String str63 = durationFieldType62.getName();
        org.joda.time.LocalDate localDate65 = localDate60.withFieldAdded(durationFieldType62, 32770);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDate localDate67 = localDate60.plus(readablePeriod66);
        int int68 = localDate54.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.LocalDate.Property property69 = localDate60.weekyear();
        org.joda.time.LocalDate localDate70 = property69.roundCeilingCopy();
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = locale72.getDisplayScript(locale73);
        java.lang.String str76 = locale71.getDisplayCountry(locale72);
        java.lang.String str77 = locale72.getDisplayLanguage();
        java.lang.String str78 = property69.getAsText(locale72);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property69.getFieldType();
        boolean boolean80 = dateTime34.equals((java.lang.Object) dateTimeFieldType79);
        boolean boolean81 = localDate2.isSupported(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "days" + "'", str63, "days");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "it" + "'", str74, "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Cina" + "'", str76, "Cina");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str77, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022" + "'", str78, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = chronology20.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField31 = chronology20.dayOfYear();
        long long35 = chronology20.add((long) 32769, (long) 292278993, 6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter9.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField37 = chronology20.halfdayOfDay();
        long long40 = dateTimeField37.add((long) 68, 49356940);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1753706727L + "'", long35 == 1753706727L);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2132219808000068L + "'", long40 == 2132219808000068L);
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        int int29 = localDate7.size();
        org.joda.time.LocalDate.Property property30 = localDate7.era();
        org.joda.time.LocalDate localDate31 = property30.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property30.roundCeilingCopy();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.withDayOfYear(100);
        int int38 = localDate35.size();
        org.joda.time.Chronology chronology39 = localDate35.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = localDate35.toDateMidnight();
        int int41 = localDate32.compareTo((org.joda.time.ReadablePartial) localDate35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval42 = localDate32.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223372036828800000 + 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(9);
        java.lang.Integer int12 = dateTimeFormatter9.getPivotYear();
        java.lang.Integer int13 = dateTimeFormatter9.getPivotYear();
        java.io.Writer writer14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(6);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMinutes(41);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfEra(52);
        org.joda.time.LocalDate.Property property31 = localDate30.weekOfWeekyear();
        org.joda.time.LocalDate.Property property32 = localDate30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int44 = dateTime37.get(dateTimeFieldType43);
        org.joda.time.LocalDate.Property property45 = localDate30.property(dateTimeFieldType43);
        org.joda.time.LocalDate localDate47 = localDate30.withWeekyear(365);
        org.joda.time.DateTime dateTime48 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra(292278993);
        org.joda.time.LocalDate.Property property51 = localDate47.yearOfCentury();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(100);
        int int57 = localDate54.size();
        org.joda.time.LocalDate localDate59 = localDate54.plusMonths(6);
        int int61 = localDate59.getValue(0);
        java.lang.String str62 = localDate59.toString();
        org.joda.time.LocalDate localDate64 = localDate59.withWeekyear(1);
        org.joda.time.LocalDate localDate66 = localDate59.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = localDate66.toDateTimeAtStartOfDay(dateTimeZone69);
        org.joda.time.DateTime dateTime76 = dateTime71.withTime(21, 0, 4, 0);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        java.lang.String str78 = property77.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property77.getFieldType();
        boolean boolean80 = localDate47.isSupported(dateTimeFieldType79);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(writer14, (org.joda.time.ReadablePartial) localDate47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-08-13" + "'", str62, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022" + "'", str78, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) '#');
        int int17 = dateTime14.getWeekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateTime14.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property20 = dateTime14.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = dateTime14.minusWeeks(17);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        int int24 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property25 = dateTime9.monthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime9.hourOfDay();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime9.withDurationAdded(readableDuration27, 816);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder6 = builder0.clear();
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        int int17 = property9.compareTo((org.joda.time.ReadableInstant) dateTime15);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = property9.getAsText(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField31 = monthDay29.getField((int) (byte) 0);
        java.util.Locale locale35 = new java.util.Locale("", "", "hi!");
        int int36 = dateTimeField31.getMaximumTextLength(locale35);
        long long39 = dateTimeField31.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay42 = monthDay40.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay40.minus(readablePeriod43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField49 = monthDay47.getField((int) (byte) 0);
        java.util.Locale locale53 = new java.util.Locale("", "", "hi!");
        int int54 = dateTimeField49.getMaximumTextLength(locale53);
        java.lang.String str55 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) monthDay40, locale53);
        int int56 = property25.getMaximumTextLength(locale53);
        org.joda.time.DateTimeField dateTimeField57 = property25.getField();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        int int60 = property25.getMaximumTextLength(locale58);
        java.lang.String str61 = locale58.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale62.toLanguageTag();
        java.lang.String str64 = locale58.getDisplayName(locale62);
        java.lang.String str65 = locale62.getLanguage();
        java.util.Set<java.lang.Character> charSet66 = locale62.getExtensionKeys();
        int int67 = property9.getMaximumTextLength(locale62);
        java.util.Locale.Builder builder68 = builder6.setLocale(locale62);
        java.util.Locale locale69 = builder68.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e00\u6708" + "'", str19, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Feb" + "'", str55, "Feb");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644572624906,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=44,MILLISECOND=906,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-US" + "'", str63, "en-US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "French" + "'", str64, "French");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        java.util.Locale.Builder builder10 = builder4.removeUnicodeLocaleAttribute("117");
        java.util.Locale.Builder builder11 = builder4.clearExtensions();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("dayOfYear");
        java.util.Locale.Builder builder14 = builder11.setLocale(locale13);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsText();
        int int4 = property2.get();
        int int5 = property2.getMaximumValueOverall();
        int int6 = property2.get();
        org.joda.time.MonthDay monthDay7 = property2.getMonthDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "janvier" + "'", str3, "janvier");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(monthDay7);
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("domenica", strMap1);
        java.util.Collection<java.lang.String> strCollection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = java.util.Locale.lookupTag(languageRangeList2, strCollection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(14400004);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale2.getDisplayLanguage();
        boolean boolean5 = dateTimeZone1.equals((java.lang.Object) locale2);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale2);
        calendar6.set(211, 14402, 311, 5, 14402);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str4, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=211,MONTH=14402,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=311,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=5,MINUTE=14402,SECOND=45,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime dateTime7 = dateTime2.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime7.withMonthOfYear(49117299);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49117299 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField17 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.year();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.clockhourOfDay();
        long long21 = dateTimeField18.getDifferenceAsLong((long) 442, 4480738534038L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1244649L) + "'", long21 == (-1244649L));
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(20);
        long long3 = dateTimeZone1.previousTransition(3715200000L);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        long long6 = dateTimeZone1.nextTransition((long) 69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3715200000L + "'", long3 == 3715200000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 69L + "'", long6 == 69L);
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("72000000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14280");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime25 = dateTime16.withCenturyOfEra(20);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime9.toDateTime(dateTimeZone12);
        int int28 = dateTime9.getMillisOfSecond();
        org.joda.time.DateTime.Property property29 = dateTime9.hourOfDay();
        int int30 = dateTime9.getMillisOfDay();
        java.lang.Class<?> wildcardClass31 = dateTime9.getClass();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 349260000 + "'", int26 == 349260000);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10799999 + "'", int30 == 10799999);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test14281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14281");
        java.util.Locale locale1 = new java.util.Locale("11 f\351vr. 2022 09:42:16");
        org.junit.Assert.assertEquals(locale1.toString(), "11 f\351vr. 2022 09:42:16");
    }

    @Test
    public void test14282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14282");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear(43199999);
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(2022);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime20.plusWeeks(5);
        org.joda.time.Chronology chronology33 = dateTime20.getChronology();
        org.joda.time.Chronology chronology34 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime17.withChronology(chronology34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(5907399684280970662L, chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, 52);
        org.joda.time.LocalDate localDate41 = localDate36.plusWeeks(0);
        org.joda.time.Chronology chronology42 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.centuryOfEra();
        org.joda.time.DurationField durationField44 = chronology42.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter7.withChronology(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.parse("feb", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test14283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14283");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property8.roundCeilingCopy();
        int int11 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(100);
        int int18 = localDate15.size();
        java.lang.String str20 = localDate15.toString("2022-08-11");
        int int21 = localDate15.getWeekOfWeekyear();
        int int22 = localDate15.getWeekyear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        java.util.Date date30 = dateTime29.toDate();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.minusMinutes(52);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        long long51 = dateTimeZone47.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime52 = dateTime33.withZone(dateTimeZone47);
        int int53 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology54 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime33.withMillis(31608000000L);
        org.joda.time.DateTime dateTime58 = dateTime56.minus(83968099800000L);
        int int59 = dateTime56.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology61 = null;
        boolean boolean62 = dateTimeFieldType60.isSupported(chronology61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType60.getRangeDurationType();
        java.lang.String str64 = dateTimeFieldType60.toString();
        int int65 = dateTime56.get(dateTimeFieldType60);
        int int66 = localDate15.indexOf(dateTimeFieldType60);
        boolean boolean67 = dateTime10.isSupported(dateTimeFieldType60);
        int int68 = dateTime10.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14400 + "'", int11 == 14400);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-08-11" + "'", str20, "2022-08-11");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-187199990L) + "'", long51 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weekyearOfCentury" + "'", str64, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 71 + "'", int65 == 71);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test14284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14284");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test14285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14285");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        java.util.Date date8 = localDate7.toDate();
        int int9 = localDate7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = dateTimeZone10.getName(0L, locale12);
        org.joda.time.DateTime dateTime15 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.LocalDate localDate17 = localDate7.withDayOfWeek(3);
        org.joda.time.DateTime dateTime18 = localDate7.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime18.withTime(33, 638, 1973, 349260000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test14286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14286");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.lang.String str3 = property2.getAsText();
        int int4 = property2.get();
        int int5 = property2.getMaximumValueOverall();
        org.joda.time.DurationField durationField6 = property2.getDurationField();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        java.lang.String str8 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "janvier" + "'", str3, "janvier");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
    }

    @Test
    public void test14287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 45);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = dateTimeFieldType13.isSupported(chronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.DateTime dateTime23 = dateTime20.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        boolean boolean25 = dateTimeFieldType13.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        int int27 = dateTime12.get(dateTimeField26);
        org.joda.time.DateTime dateTime28 = dateTime12.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 14399954 + "'", int27 == 14399954);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test14288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14288");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        int int13 = calendar1.getMaximum((int) (short) 10);
        int int14 = calendar1.getWeeksInWeekYear();
        java.time.Instant instant15 = calendar1.toInstant();
        java.util.Date date16 = java.util.Date.from(instant15);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property19 = monthDay18.monthOfYear();
        org.joda.time.MonthDay monthDay21 = monthDay18.minusMonths(55);
        int int22 = monthDay21.size();
        org.joda.time.Chronology chronology23 = monthDay21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        boolean boolean25 = date16.equals((java.lang.Object) dateTimeField24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test14289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14289");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        calendar1.set(1439, (int) ' ', 7);
        java.util.Date date15 = new java.util.Date();
        calendar1.setTime(date15);
        int int17 = date15.getHours();
        int int18 = date15.getSeconds();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear(100);
        org.joda.time.LocalDate.Property property24 = localDate21.dayOfMonth();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.year();
        boolean boolean27 = date15.equals((java.lang.Object) localDate25);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572625454,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=45,MILLISECOND=454,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 09:43:45 UTC 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 45 + "'", int18 == 45);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14290");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 16, 1);
        int int10 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime9.withEarlierOffsetAtOverlap();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(100);
        int int17 = localDate14.size();
        org.joda.time.LocalDate localDate19 = localDate14.plusMonths(6);
        int int21 = localDate19.getValue(0);
        java.lang.String str22 = localDate19.toString();
        org.joda.time.LocalDate localDate24 = localDate19.withWeekyear(1);
        org.joda.time.LocalDate localDate26 = localDate19.withDayOfYear((int) (byte) 1);
        int int27 = localDate19.getYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        int int33 = localDate30.size();
        org.joda.time.LocalDate localDate35 = localDate30.plusMonths(6);
        int int37 = localDate35.getValue(0);
        boolean boolean38 = localDate19.equals((java.lang.Object) int37);
        org.joda.time.LocalDate localDate40 = localDate19.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((-16812840));
        boolean boolean43 = dateTime11.equals((java.lang.Object) localDate40);
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.Chronology chronology47 = dateTimeFormatter46.getChronology();
        boolean boolean48 = dateTimeFormatter46.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter46.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter46.withPivotYear((java.lang.Integer) 364);
        org.joda.time.Chronology chronology53 = dateTimeFormatter46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeFormatter46.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTime11.toString(dateTimeFormatter46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 44 + "'", int10 == 44);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-08-13" + "'", str22, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(chronology53);
        org.junit.Assert.assertNull(dateTimeZone54);
    }

    @Test
    public void test14291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14291");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        java.lang.String str19 = dateTimeZone17.getShortName((long) 26);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra(52);
        org.joda.time.LocalDate.Property property23 = localDate22.weekOfWeekyear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.LocalDate.Property property29 = localDate26.dayOfMonth();
        org.joda.time.LocalDate localDate30 = property29.getLocalDate();
        org.joda.time.LocalDate localDate32 = property29.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate33 = property29.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        org.joda.time.LocalDate localDate35 = property29.roundHalfFloorCopy();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        org.joda.time.Interval interval41 = localDate40.toInterval();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate40.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.era();
        int int47 = localDate40.get(dateTimeFieldType46);
        boolean boolean48 = localDate35.isSupported(dateTimeFieldType46);
        int int49 = property23.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDate localDate50 = property23.withMinimumValue();
        org.joda.time.LocalDate.Property property51 = localDate50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        boolean boolean53 = dateTimeZone17.equals((java.lang.Object) dateTimeField52);
        long long56 = dateTimeField52.getDifferenceAsLong((long) 358, 1644572333091L);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withYearOfEra((int) '4');
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime60.toMutableDateTime(dateTimeZone64);
        int int67 = dateTimeZone64.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 10, dateTimeZone64);
        org.joda.time.LocalDate.Property property69 = localDate68.dayOfYear();
        org.joda.time.LocalDate localDate70 = property69.withMinimumValue();
        org.joda.time.LocalDate localDate72 = property69.setCopy("117");
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDate72, 292278994, locale74);
        org.joda.time.LocalDate localDate77 = localDate72.minusYears(432);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 187200000 + "'", int67 == 187200000);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "292278994" + "'", str75, "292278994");
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test14292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14292");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(2022);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.plusWeeks(5);
        org.joda.time.Chronology chronology36 = dateTime23.getChronology();
        org.joda.time.Chronology chronology37 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime20.withChronology(chronology37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907399684280970662L, chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        int int41 = dateTime40.getYearOfCentury();
        long long42 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime40.plusMonths(11);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology47 = dateTime45.getChronology();
        int int48 = dateTime45.getMillisOfDay();
        java.util.Date date49 = dateTime45.toDate();
        date49.setSeconds(14402);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11" + "'", str11, "11");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 89L + "'", long42 == 89L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 49425561 + "'", int48 == 49425561);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Jan 11 13:43:02 UTC 2023");
    }

    @Test
    public void test14293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("+00:00:00.097");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00:00.097\" is malformed at \":00:00.097\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14294");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 14399995);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime6.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(0);
        int int13 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        java.lang.String str27 = chronology22.toString();
        boolean boolean28 = dateTime6.equals((java.lang.Object) str27);
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar30 = dateTime6.toCalendar(locale29);
        org.joda.time.DateTime dateTime32 = dateTime6.minusSeconds(52);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(229);
        boolean boolean35 = localDate1.equals((java.lang.Object) dateTime32);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 239 + "'", int13 == 239);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+52:00]" + "'", str27, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test14295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14295");
        java.util.Locale locale3 = new java.util.Locale("11 f\351vr. 2022 09:35:17", "und", "2022");
        java.lang.String str4 = locale3.getScript();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(97L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        int int18 = property10.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = property10.addToCopy((long) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        int int26 = dateTime23.getWeekyear();
        org.joda.time.DateMidnight dateMidnight27 = dateTime23.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property29 = dateTime23.property(dateTimeFieldType28);
        org.joda.time.DateTime.Property property30 = dateTime23.centuryOfEra();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(6);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMonths(364);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        int int37 = dateTime34.getDayOfMonth();
        boolean boolean38 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime20.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) locale3, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "11 f\351vr. 2022 09:35:17_UND_2022");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
    }

    @Test
    public void test14296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14296");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        int int14 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime16 = property13.addToCopy((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = property13.addToCopy((long) 16);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear(4);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.minusMinutes(52);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        long long41 = dateTimeZone37.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime42 = dateTime23.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime23.getZone();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate44.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime50.hourOfDay();
        org.joda.time.DateTime dateTime53 = dateTime50.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime50.withMillisOfDay(8);
        boolean boolean57 = dateTime50.isAfter((long) 17);
        boolean boolean58 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean59 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime61 = dateTime20.withMillisOfDay(1022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-187199990L) + "'", long41 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test14297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14297");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        int int15 = localDate12.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDate12.getFieldTypes();
        java.lang.String str17 = localDate12.toString();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(100);
        org.joda.time.LocalDate.Property property23 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate25 = localDate20.withDayOfMonth(21);
        boolean boolean26 = localDate12.isEqual((org.joda.time.ReadablePartial) localDate20);
        boolean boolean27 = localDate9.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property28 = localDate9.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = property28.setCopy("11 f\351vr. 2022 09:36:08");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11 fe?vr. 2022 09:36:08\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-13" + "'", str17, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test14298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14298");
        java.util.Date date1 = new java.util.Date((long) 13);
        java.lang.String str2 = date1.toLocaleString();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        calendar4.setLenient(true);
        calendar4.setMinimalDaysInFirstWeek(1970);
        int int10 = calendar4.getGreatestMinimum(10);
        java.time.Instant instant11 = calendar4.toInstant();
        int int12 = calendar4.getWeekYear();
        calendar4.setMinimalDaysInFirstWeek(8);
        java.util.Date date15 = calendar4.getTime();
        boolean boolean16 = date1.before(date15);
        date15.setHours((int) (byte) 10);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1-gen-1970 0.00.00" + "'", str2, "1-gen-1970 0.00.00");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572625717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=45,MILLISECOND=717,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 10:43:45 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test14299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14299");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        int int3 = property2.getMinimumValueOverall();
        java.util.Locale locale7 = new java.util.Locale("years", "italien", "Cina");
        java.lang.String str8 = property2.getAsText(locale7);
        int int9 = property2.getMaximumValue();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale10.getCountry();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        java.lang.String str19 = property18.getAsShortText();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay22 = monthDay20.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField((int) (byte) 0);
        java.util.Locale locale28 = new java.util.Locale("", "", "hi!");
        int int29 = dateTimeField24.getMaximumTextLength(locale28);
        long long32 = dateTimeField24.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay33.minus(readablePeriod36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField42 = monthDay40.getField((int) (byte) 0);
        java.util.Locale locale46 = new java.util.Locale("", "", "hi!");
        int int47 = dateTimeField42.getMaximumTextLength(locale46);
        java.lang.String str48 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) monthDay33, locale46);
        int int49 = property18.getMaximumTextLength(locale46);
        java.lang.String str50 = locale10.getDisplayVariant(locale46);
        java.util.Locale locale52 = new java.util.Locale("en-US");
        java.lang.String str53 = locale46.getDisplayLanguage(locale52);
        java.lang.String str54 = property2.getAsText(locale46);
        java.lang.String str55 = property2.getAsShortText();
        int int56 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals(locale7.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "January" + "'", str8, "January");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572625729,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=45,MILLISECOND=729,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3" + "'", str19, "3");
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9L + "'", long32 == 9L);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb" + "'", str48, "Feb");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals(locale52.toString(), "en-us");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "January" + "'", str54, "January");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "janv." + "'", str55, "janv.");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
    }

    @Test
    public void test14300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14300");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        org.joda.time.MonthDay monthDay9 = property2.getMonthDay();
        org.joda.time.DateTimeField dateTimeField10 = property2.getField();
        java.lang.String str11 = property2.getAsString();
        java.util.Locale locale15 = new java.util.Locale("eras", "", "millisOfDay");
        java.util.Locale locale18 = new java.util.Locale("--02-01", "2022-02-15");
        java.lang.String str19 = locale15.getDisplayCountry(locale18);
        java.lang.String str20 = property2.getAsText(locale15);
        int int21 = property2.getMaximumValue();
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(0L);
        java.lang.String str24 = monthDay23.toString();
        org.joda.time.Chronology chronology25 = monthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        boolean boolean27 = dateTimeField26.isLenient();
        int int28 = dateTimeField26.getMinimumValue();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property31 = monthDay30.monthOfYear();
        org.joda.time.MonthDay monthDay33 = property31.addToCopy((int) ' ');
        int int34 = property31.get();
        java.lang.String str35 = property31.toString();
        java.util.Locale locale36 = java.util.Locale.PRC;
        int int37 = property31.getMaximumShortTextLength(locale36);
        org.joda.time.MonthDay monthDay39 = property31.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property31.getFieldType();
        java.lang.String str41 = property31.getAsString();
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property44 = monthDay43.monthOfYear();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale45.getDisplayScript(locale46);
        int int49 = property44.getMaximumTextLength(locale45);
        org.joda.time.DurationField durationField50 = property44.getDurationField();
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay53 = monthDay51.minusDays((int) (short) 10);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category55, locale57);
        java.lang.String str59 = monthDay53.toString("35", locale57);
        int int60 = property44.getMaximumShortTextLength(locale57);
        int int61 = property31.getMaximumTextLength(locale57);
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.util.Locale.setDefault(locale63);
        java.util.Locale locale65 = locale63.stripExtensions();
        java.lang.String str66 = locale57.getDisplayVariant(locale65);
        int int67 = dateTimeField26.getMaximumShortTextLength(locale65);
        int int68 = property2.getMaximumTextLength(locale65);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertEquals(locale15.toString(), "eras__millisOfDay");
        org.junit.Assert.assertEquals(locale18.toString(), "--02-01_2022-02-15");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January" + "'", str20, "January");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "--01-03" + "'", str24, "--01-03");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[monthOfYear]" + "'", str35, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "it" + "'", str47, "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "35" + "'", str59, "35");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category62.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
    }

    @Test
    public void test14301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14301");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(52);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        java.lang.String str19 = dateTimeZone17.getShortName((long) 26);
        long long23 = dateTimeZone17.convertLocalToUTC(31608000000L, false, (-17272473L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31420800000L + "'", long23 == 31420800000L);
    }

    @Test
    public void test14302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14302");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.setFirstDayOfWeek((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(187200000, 3, 74766);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 74766");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=45,MILLISECOND=863,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14303");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTime dateTime9 = property5.addToCopy((long) 239);
        org.joda.time.DateTime dateTime10 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        boolean boolean12 = property5.isLeap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3" + "'", str6, "3");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14304");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        calendar1.set(6, 349260000, 11, 14399999, 5, 35);
        int int13 = calendar1.getMaximum(11);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        calendar15.roll(9, false);
        calendar15.setFirstDayOfWeek((int) (byte) 1);
        int int21 = calendar15.getWeekYear();
        int int22 = calendar15.getFirstDayOfWeek();
        int int23 = calendar15.getWeeksInWeekYear();
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        java.time.Instant instant25 = calendar15.toInstant();
        calendar15.clear();
        int int27 = calendar1.compareTo(calendar15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=6,MONTH=349260000,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=14399999,MINUTE=5,SECOND=35,MILLISECOND=898,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test14305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14305");
        java.util.Date date6 = new java.util.Date(49171151, 3659999, (int) ' ', 817, 49171151, 626);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 01 16:21:26 UTC 49478144");
    }

    @Test
    public void test14306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14306");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        int int13 = dateTime10.getWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property16 = dateTime10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate7.property(dateTimeFieldType15);
        java.lang.String str18 = localDate7.toString();
        org.joda.time.LocalDate localDate20 = localDate7.minusYears(4);
        org.joda.time.LocalDate localDate22 = localDate20.plusWeeks(229);
        org.joda.time.Interval interval23 = localDate20.toInterval();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = localDate20.getField(37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 37");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-08-13" + "'", str18, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test14307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14307");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withYear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate11.minus(readablePeriod14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        int int18 = localDate15.get(dateTimeFieldType16);
        org.joda.time.Chronology chronology19 = localDate15.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 44 + "'", int18 == 44);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test14308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14308");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 239);
        int int2 = monthDay1.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime dateTime10 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime17 = dateTime13.withFieldAdded(durationFieldType14, 49211518);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology30 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology26.seconds();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField36 = chronology26.secondOfMinute();
        boolean boolean37 = durationFieldType14.isSupported(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay39 = monthDay1.withFieldAdded(durationFieldType14, 225);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdays' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "halfdays" + "'", str15, "halfdays");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test14309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14309");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        int int8 = property2.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test14310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14310");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("--03-03");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14311");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        java.util.Date date10 = java.util.Date.from(instant8);
        java.util.Date date11 = java.util.Date.from(instant8);
        java.util.Date date12 = java.util.Date.from(instant8);
        date12.setMonth(32769);
        date12.setHours(0);
        java.lang.Object obj17 = date12.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572626125,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=46,MILLISECOND=125,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:43:46 UTC 2022");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:43:46 UTC 2022");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:43:46 UTC 2022");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sat Oct 11 00:43:46 UTC 4752");
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "Sat Oct 11 00:43:46 UTC 4752");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "Sat Oct 11 00:43:46 UTC 4752");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "Sat Oct 11 00:43:46 UTC 4752");
    }

    @Test
    public void test14312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14312");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        java.lang.String str11 = localDate4.toString("8");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8" + "'", str11, "8");
    }

    @Test
    public void test14313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14313");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay18.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay18.plus(readablePeriod24);
        int int26 = monthDay25.getDayOfMonth();
        org.joda.time.Chronology chronology27 = monthDay25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime32.yearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime32.plusWeeks(0);
        org.joda.time.DateTime.Property property39 = dateTime32.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTime dateTime47 = dateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime44.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime32.toMutableDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology27.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        java.lang.String str60 = property59.getAsShortText();
        org.joda.time.MonthDay monthDay61 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay63 = monthDay61.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField65 = monthDay63.getField((int) (byte) 0);
        java.util.Locale locale69 = new java.util.Locale("", "", "hi!");
        int int70 = dateTimeField65.getMaximumTextLength(locale69);
        long long73 = dateTimeField65.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay74 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay76 = monthDay74.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay74.minus(readablePeriod77);
        org.joda.time.MonthDay monthDay79 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay81 = monthDay79.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField83 = monthDay81.getField((int) (byte) 0);
        java.util.Locale locale87 = new java.util.Locale("", "", "hi!");
        int int88 = dateTimeField83.getMaximumTextLength(locale87);
        java.lang.String str89 = dateTimeField65.getAsShortText((org.joda.time.ReadablePartial) monthDay74, locale87);
        int int90 = property59.getMaximumTextLength(locale87);
        org.joda.time.DateTimeField dateTimeField91 = property59.getField();
        java.util.Locale locale92 = java.util.Locale.FRENCH;
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(locale92);
        int int94 = property59.getMaximumTextLength(locale92);
        boolean boolean95 = locale92.hasExtensions();
        java.lang.String str96 = locale92.getDisplayScript();
        java.lang.String str97 = dateTimeZone50.getName((long) (byte) 1, locale92);
        org.joda.time.DateTime dateTime98 = org.joda.time.DateTime.now(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 29 + "'", int26 == 29);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "3" + "'", str60, "3");
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 9L + "'", long73 == 9L);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Feb" + "'", str89, "Feb");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1644572626165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=46,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+52:00" + "'", str97, "+52:00");
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test14314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14314");
        java.util.Date date5 = new java.util.Date(7, 11, (int) (byte) -1, 0, 2022);
        java.util.Date date9 = new java.util.Date(0, 0, (int) '4');
        date9.setDate(12);
        date9.setHours(2922789);
        date9.setTime(9L);
        java.util.Date date19 = new java.util.Date(0, 0, (int) '4');
        int int20 = date19.getHours();
        boolean boolean21 = date9.before(date19);
        java.lang.String str22 = date9.toLocaleString();
        int int23 = date9.getDay();
        date9.setSeconds((int) 'x');
        java.lang.String str26 = date9.toGMTString();
        boolean boolean27 = date5.before(date9);
        date5.setSeconds(13);
        int int30 = date5.getTimezoneOffset();
        date5.setMonth((int) (short) 100);
        date5.setTime((long) 49159149);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 13:39:19 UTC 1970");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:02:00 UTC 1970");
        org.junit.Assert.assertEquals(date19.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan 1, 1970 12:00:00 AM" + "'", str22, "Jan 1, 1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1 Jan 1970 00:02:00 GMT" + "'", str26, "1 Jan 1970 00:02:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test14315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        int int14 = dateTime11.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readablePeriod20);
        boolean boolean22 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) dateTime11);
        int int24 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        java.lang.String str27 = dateTime11.toString("2022-02-13");
        org.joda.time.DateTime dateTime29 = dateTime11.plus((long) 14402021);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        long long37 = dateTimeZone32.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale40.getCountry();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale40.getDisplayVariant(locale43);
        java.lang.String str45 = dateTimeZone32.getShortName((long) 20, locale40);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusDays((int) '#');
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime48.toDateTime(dateTimeZone55);
        org.joda.time.DateTime.Property property59 = dateTime48.centuryOfEra();
        java.lang.String str60 = property59.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays((int) '#');
        int int66 = dateTime63.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime63.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime63.plus(readablePeriod69);
        int int71 = property59.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.minus(readableDuration72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusMinutes(4);
        int int76 = dateTime73.getEra();
        int int77 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean78 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime73);
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = locale79.getCountry();
        java.lang.String str82 = locale79.getDisplayScript();
        boolean boolean83 = locale79.hasExtensions();
        java.util.Calendar calendar84 = dateTime29.toCalendar(locale79);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = calendar84.getMinimum((-16812840));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -16812840");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-13" + "'", str27, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-187199996L) + "'", long37 == (-187199996L));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644572626241,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=46,MILLISECOND=241,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+52:00" + "'", str45, "+52:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "19" + "'", str60, "19");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 187200000 + "'", int77 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644572626241,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=46,MILLISECOND=241,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=14402020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=0,SECOND=2,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14316");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate4.minus(readablePeriod5);
        int int7 = localDate6.getEra();
        java.util.Date date11 = new java.util.Date(0, 0, (int) '4');
        date11.setDate(2730);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date11);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(100);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.days();
        java.lang.String str24 = durationFieldType23.getName();
        org.joda.time.LocalDate localDate26 = localDate21.withFieldAdded(durationFieldType23, 32770);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology39 = chronology35.withZone(dateTimeZone38);
        java.lang.String str40 = chronology35.toString();
        org.joda.time.DurationField durationField41 = chronology35.seconds();
        boolean boolean42 = durationFieldType23.isSupported(chronology35);
        org.joda.time.LocalDate localDate44 = localDate14.withFieldAdded(durationFieldType23, 22);
        boolean boolean45 = localDate6.isSupported(durationFieldType23);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime51.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology59 = chronology55.withZone(dateTimeZone58);
        java.lang.String str60 = chronology55.toString();
        org.joda.time.DurationField durationField61 = chronology55.seconds();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField63 = chronology55.weekyearOfCentury();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) '4', chronology55);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology55);
        boolean boolean66 = durationFieldType23.isSupported(chronology55);
        org.joda.time.DateTimeField dateTimeField67 = chronology55.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals(date11.toString(), "Wed Jul 24 00:00:00 UTC 1907");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "days" + "'", str24, "days");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[+52:00]" + "'", str40, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[+52:00]" + "'", str60, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test14317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.plusWeeks(5);
        org.joda.time.DateTime dateTime26 = dateTime12.minusMillis(13);
        int int27 = property9.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.plusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withSecondOfMinute((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14318");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate4.minus(readablePeriod5);
        int int7 = localDate6.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight9 = localDate6.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int11 = localDate6.get(dateTimeFieldType10);
        int int12 = localDate6.getYear();
        java.lang.Object obj13 = null;
        boolean boolean14 = localDate6.equals(obj13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 44 + "'", int11 == 44);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2035 + "'", int12 == 2035);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14319");
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra(52);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(100);
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        int int14 = localDate13.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology23.withZone(dateTimeZone26);
        long long30 = dateTimeZone26.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = localDate13.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.Chronology chronology33 = chronology6.withZone(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(1922, (int) (short) 100, 23, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-62180539199983L) + "'", long30 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test14320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14320");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '#');
        int int6 = dateTime3.getWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateTime3.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property9 = dateTime3.property(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime3.minusWeeks(17);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1250124840032L, dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
    }

    @Test
    public void test14321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14321");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) 2112, false, 849381587160L);
        long long19 = dateTimeZone11.convertLocalToUTC(3974400069L, true);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-349257888L) + "'", long16 == (-349257888L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3625140069L + "'", long19 == 3625140069L);
    }

    @Test
    public void test14322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14322");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate12.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate.Property property21 = localDate12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology35 = chronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.weekyearOfCentury();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(83968099800000L, chronology31);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) '#');
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(dateTimeZone48);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime44.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = dateTime44.plusWeeks(5);
        int int57 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime59 = localDate12.toDateTimeAtMidnight(dateTimeZone40);
        int int60 = dateTime59.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime59.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 187200000 + "'", int57 == 187200000);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test14323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime.Property property8 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfHour();
        org.joda.time.DateTime.Property property10 = dateTime6.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14324");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        boolean boolean16 = durationFieldType1.isSupported(chronology14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) localDate0, chronology14);
        org.joda.time.LocalDate.Property property18 = localDate0.yearOfCentury();
        java.lang.Object obj19 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long26 = dateTimeZone22.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj19, dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long30 = dateTimeZone22.previousTransition((long) 0);
        org.joda.time.DateTime dateTime31 = localDate0.toDateTimeAtCurrentTime(dateTimeZone22);
        long long34 = dateTimeZone22.convertLocalToUTC((long) 35008981, false);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-187199987L) + "'", long26 == (-187199987L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-152191019L) + "'", long34 == (-152191019L));
    }

    @Test
    public void test14325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14325");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ISOChronology[Etc/UTC]");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) '#');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property15 = dateTime4.centuryOfEra();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        int int22 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime19.plus(readablePeriod25);
        int int27 = property15.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = property15.addToCopy((long) 11);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str32 = property15.getAsShortText(locale31);
        java.lang.String str33 = locale1.getDisplayCountry(locale31);
        boolean boolean34 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19" + "'", str16, "19");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "19" + "'", str32, "19");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test14326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14326");
        java.util.Date date6 = new java.util.Date(0, 823, 117, 24, 487, 36000000);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 17 00:07:00 UTC 1970");
    }

    @Test
    public void test14327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        long long22 = dateTimeField20.roundHalfFloor((-58475019660001L));
        int int24 = dateTimeField20.getLeapAmount((-60526223998426L));
        long long27 = dateTimeField20.set((long) 34759438, "70");
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        calendar29.setLenient(true);
        calendar29.setMinimalDaysInFirstWeek(1970);
        int int35 = calendar29.getGreatestMinimum(10);
        java.time.Instant instant36 = calendar29.toInstant();
        java.util.Date date37 = java.util.Date.from(instant36);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.fromDateFields(date37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.minus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay43 = monthDay38.withPeriodAdded(readablePeriod41, 999);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology57 = chronology53.withZone(dateTimeZone56);
        org.joda.time.DurationField durationField58 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.clockhourOfDay();
        long long64 = chronology53.getDateTimeMillis((-1), 8, 2, 17);
        org.joda.time.MonthDay monthDay65 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay67 = monthDay65.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField69 = monthDay67.getField((int) (byte) 0);
        java.util.Locale locale73 = new java.util.Locale("", "", "hi!");
        int int74 = dateTimeField69.getMaximumTextLength(locale73);
        long long77 = dateTimeField69.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay78 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay80 = monthDay78.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay78.minus(readablePeriod81);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay85 = monthDay83.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField87 = monthDay85.getField((int) (byte) 0);
        java.util.Locale locale91 = new java.util.Locale("", "", "hi!");
        int int92 = dateTimeField87.getMaximumTextLength(locale91);
        java.lang.String str93 = dateTimeField69.getAsShortText((org.joda.time.ReadablePartial) monthDay78, locale91);
        int[] intArray94 = monthDay78.getValues();
        int[] intArray96 = chronology53.get((org.joda.time.ReadablePartial) monthDay78, (long) 4);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = dateTimeField20.add((org.joda.time.ReadablePartial) monthDay38, (-12432), intArray96, 758);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-58475019660001L) + "'", long22 == (-58475019660001L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 70L + "'", long27 == 70L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572626682,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=46,MILLISECOND=682,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Fri Feb 11 09:43:46 UTC 2022");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-62180539199983L) + "'", long64 == (-62180539199983L));
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 9L + "'", long77 == 9L);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Feb" + "'", str93, "Feb");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[2, 13]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1, 3]");
    }

    @Test
    public void test14328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14328");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate9.toDateTime(readableInstant11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate9.withDayOfMonth(51860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51860 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14329");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 10);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        org.joda.time.Chronology chronology9 = dateTimeFormatter6.getChronolgy();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        int int15 = localDate12.size();
        org.joda.time.LocalDate localDate17 = localDate12.plusMonths(6);
        int int19 = localDate17.getValue(0);
        java.lang.String str20 = localDate17.toString();
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) localDate17);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology35 = chronology31.withZone(dateTimeZone34);
        org.joda.time.Interval interval36 = localDate22.toInterval(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter6.withZone(dateTimeZone34);
        boolean boolean38 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter6.getParser();
        org.joda.time.Chronology chronology41 = dateTimeFormatter6.getChronology();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-08-13" + "'", str20, "2022-08-13");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(dateTimeParser40);
        org.junit.Assert.assertNull(chronology41);
    }

    @Test
    public void test14330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.Chronology chronology8 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.LocalDate.Property property14 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.withMinimumValue();
        org.joda.time.LocalDate localDate17 = localDate15.plusDays(36000000);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays((int) '#');
        int int23 = dateTime20.getWeekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateTime20.toDateMidnight();
        org.joda.time.DateTime.Property property25 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        int int30 = property25.getMaximumTextLength(locale27);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale27);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime36.minusDays((int) 'u');
        int int42 = dateTime36.getYearOfEra();
        org.joda.time.DateTime dateTime44 = dateTime36.plusMillis(4);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.withDayOfYear(100);
        org.joda.time.LocalDate.Property property50 = localDate47.dayOfMonth();
        org.joda.time.LocalDate localDate51 = property50.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime52 = dateTime44.withFields((org.joda.time.ReadablePartial) localDate51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.LocalDate localDate57 = localDate55.withDayOfYear(100);
        org.joda.time.Interval interval58 = localDate57.toInterval();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        java.lang.String str60 = durationFieldType59.getName();
        org.joda.time.LocalDate localDate62 = localDate57.withFieldAdded(durationFieldType59, 32770);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate64 = localDate57.plus(readablePeriod63);
        int int65 = localDate51.compareTo((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.LocalDate.Property property66 = localDate57.weekyear();
        org.joda.time.LocalDate localDate67 = property66.roundCeilingCopy();
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale69.getDisplayScript(locale70);
        java.lang.String str73 = locale68.getDisplayCountry(locale69);
        java.lang.String str74 = locale69.getDisplayLanguage();
        java.lang.String str75 = property66.getAsText(locale69);
        java.util.Set<java.lang.Character> charSet76 = locale69.getExtensionKeys();
        java.lang.String str77 = locale27.getDisplayName(locale69);
        java.lang.String str78 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate17, locale27);
        java.util.Locale locale79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = locale27.getDisplayLanguage(locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572626759,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=46,MILLISECOND=759,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "days" + "'", str60, "days");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Cina" + "'", str73, "Cina");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italian" + "'", str74, "Italian");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022" + "'", str75, "2022");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cinese (Cina)" + "'", str77, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "282" + "'", str78, "282");
    }

    @Test
    public void test14331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14331");
        java.util.Date date6 = new java.util.Date(2111, 29, 29, 100, (-17269665), (-17269665));
        java.time.Instant instant7 = date6.toInstant();
        java.util.Date date13 = new java.util.Date(2, 32770, 32772, 59, 240);
        int int14 = date13.getDay();
        boolean boolean15 = date6.after(date13);
        date6.setHours(1022);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Mar 27 14:07:15 UTC 3980");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Jul 26 15:00:00 UTC 4722");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test14332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14332");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.DurationField durationField13 = dateTimeField4.getLeapDurationField();
        boolean boolean14 = dateTimeField4.isLenient();
        boolean boolean15 = dateTimeField4.isSupported();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology29 = chronology25.withZone(dateTimeZone28);
        java.lang.String str30 = chronology25.toString();
        org.joda.time.DurationField durationField31 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology25.years();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.dayOfWeek();
        boolean boolean35 = dateTimeField34.isSupported();
        long long38 = dateTimeField34.add((long) 17, (long) (byte) 10);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay(0L);
        java.lang.String str41 = monthDay40.toString();
        org.joda.time.Chronology chronology42 = monthDay40.getChronology();
        org.joda.time.Chronology chronology43 = monthDay40.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.minuteOfDay();
        java.util.Locale locale46 = java.util.Locale.US;
        java.lang.String str47 = dateTimeField44.getAsShortText(365L, locale46);
        java.lang.String str48 = locale46.getVariant();
        java.util.Locale locale49 = locale46.stripExtensions();
        int int50 = dateTimeField34.getMaximumTextLength(locale46);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder53 = builder51.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime58.minusDays((int) 'u');
        int int64 = dateTime58.getYearOfEra();
        org.joda.time.DateTime dateTime66 = dateTime58.plusMillis(4);
        java.util.Date date67 = dateTime58.toDate();
        java.util.Calendar.Builder builder68 = builder53.setInstant(date67);
        java.util.Calendar calendar69 = builder53.build();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.util.Locale locale72 = java.util.Locale.ITALIAN;
        java.lang.String str73 = locale72.getLanguage();
        java.lang.String str74 = locale71.getDisplayScript(locale72);
        java.lang.String str75 = locale70.getDisplayCountry(locale71);
        java.lang.String str76 = locale71.getDisplayLanguage();
        java.util.Calendar.Builder builder77 = builder53.setLocale(locale71);
        java.lang.String str78 = locale71.getDisplayName();
        java.lang.String str79 = locale46.getDisplayScript(locale71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = dateTimeField4.getAsShortText(19036, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19036");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+52:00]" + "'", str30, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 864000017L + "'", long38 == 864000017L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "--01-03" + "'", str41, "--01-03");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "it" + "'", str73, "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Cina" + "'", str75, "Cina");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italian" + "'", str76, "Italian");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Italian (Italy)" + "'", str78, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test14333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14333");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        long long6 = dateTimeZone1.convertLocalToUTC((long) 4, false, (long) 5);
        int int8 = dateTimeZone1.getStandardOffset(83968099800000L);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) 365);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.lang.String str13 = dateTimeZone1.getName((-1278990105311L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-187199996L) + "'", long6 == (-187199996L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 187200000 + "'", int8 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+52:00" + "'", str13, "+52:00");
    }

    @Test
    public void test14334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14334");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        org.joda.time.Chronology chronology4 = localDate2.getChronology();
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths(8);
        int int7 = localDate6.getDayOfYear();
        java.lang.String str8 = localDate6.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 284 + "'", int7 == 284);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-10-11" + "'", str8, "2022-10-11");
    }

    @Test
    public void test14335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("eng");
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay(0L);
        java.lang.String str10 = monthDay9.toString();
        org.joda.time.Chronology chronology11 = monthDay9.getChronology();
        org.joda.time.Chronology chronology12 = monthDay9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfSecond();
        long long15 = dateTimeField13.remainder(0L);
        long long17 = dateTimeField13.remainder((-62135784000000L));
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale19.getDisplayScript(locale20);
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleKeys();
        java.lang.String str24 = dateTimeField13.getAsShortText((long) 32770, locale20);
        java.util.Locale.Builder builder25 = builder5.setLocale(locale20);
        java.util.Locale locale26 = builder5.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--01-03" + "'", str10, "--01-03");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "770" + "'", str24, "770");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
    }

    @Test
    public void test14336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14336");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property8 = dateTime2.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusWeeks(17);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfSecond();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        int int15 = dateTime14.getMillisOfDay();
        int int16 = dateTime14.getMillisOfSecond();
        int int17 = dateTime14.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14399999 + "'", int15 == 14399999);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
    }

    @Test
    public void test14337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14337");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.minus(readablePeriod12);
        int int14 = monthDay13.size();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay13.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test14338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14338");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMinimumValue();
        int int10 = localDate9.getYear();
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtStartOfDay();
        int int12 = dateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
    }

    @Test
    public void test14339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14339");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalTime localTime7 = null;
        org.joda.time.DateTime dateTime8 = localDate2.toDateTime(localTime7);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        int int10 = dateTime8.getMonthOfYear();
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        int int12 = dateTime8.getYear();
        org.joda.time.DateTime dateTime14 = dateTime8.plusMinutes(14432);
        org.joda.time.DateTime dateTime16 = dateTime8.plusHours(143999);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14340");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.weekyear();
        org.joda.time.LocalDate localDate11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime16.plusWeeks(0);
        org.joda.time.DateTime.Property property23 = dateTime16.dayOfWeek();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.withDayOfYear(100);
        org.joda.time.Interval interval29 = localDate28.toInterval();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        java.lang.String str31 = durationFieldType30.getName();
        org.joda.time.LocalDate localDate33 = localDate28.withFieldAdded(durationFieldType30, 32770);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusDays((int) '#');
        int int39 = dateTime36.getWeekyear();
        org.joda.time.DateMidnight dateMidnight40 = dateTime36.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property42 = dateTime36.property(dateTimeFieldType41);
        boolean boolean43 = localDate28.isSupported(dateTimeFieldType41);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.withDayOfYear(100);
        org.joda.time.LocalDate.Property property49 = localDate46.dayOfMonth();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.LocalDate localDate52 = property49.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate53 = property49.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        boolean boolean55 = localDate28.equals((java.lang.Object) property49);
        org.joda.time.LocalDate localDate57 = property49.addToCopy(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDate57.getFieldType(0);
        boolean boolean60 = dateTime16.isSupported(dateTimeFieldType59);
        int int61 = localDate11.indexOf(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "days" + "'", str31, "days");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test14341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14341");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusMillis(2022);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test14342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14342");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay13 = monthDay11.minusMonths((int) (byte) 0);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        java.util.Locale locale22 = new java.util.Locale("", "", "hi!");
        int int23 = dateTimeField18.getMaximumTextLength(locale22);
        long long26 = dateTimeField18.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay27.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) monthDay27, locale40);
        int[] intArray43 = monthDay27.getValues();
        int int44 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) monthDay11, intArray43);
        boolean boolean45 = dateTimeField4.isLenient();
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField51 = monthDay49.getField((int) (byte) 0);
        java.lang.String str52 = dateTimeField51.getName();
        org.joda.time.DurationField durationField53 = dateTimeField51.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property60 = dateTime59.hourOfDay();
        java.lang.String str61 = property60.getAsShortText();
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay64 = monthDay62.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField66 = monthDay64.getField((int) (byte) 0);
        java.util.Locale locale70 = new java.util.Locale("", "", "hi!");
        int int71 = dateTimeField66.getMaximumTextLength(locale70);
        long long74 = dateTimeField66.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay75 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay77 = monthDay75.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay75.minus(readablePeriod78);
        org.joda.time.MonthDay monthDay80 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay82 = monthDay80.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField84 = monthDay82.getField((int) (byte) 0);
        java.util.Locale locale88 = new java.util.Locale("", "", "hi!");
        int int89 = dateTimeField84.getMaximumTextLength(locale88);
        java.lang.String str90 = dateTimeField66.getAsShortText((org.joda.time.ReadablePartial) monthDay75, locale88);
        int int91 = property60.getMaximumTextLength(locale88);
        org.joda.time.DateTimeField dateTimeField92 = property60.getField();
        java.util.Locale locale93 = java.util.Locale.FRENCH;
        java.util.Calendar calendar94 = java.util.Calendar.getInstance(locale93);
        int int95 = property60.getMaximumTextLength(locale93);
        java.lang.String str96 = dateTimeField51.getAsText((long) 349260000, locale93);
        java.lang.String str97 = dateTimeField4.getAsShortText((long) 13, locale93);
        int int98 = dateTimeField4.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Feb" + "'", str42, "Feb");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2, 13]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "monthOfYear" + "'", str52, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "3" + "'", str61, "3");
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 9L + "'", long74 == 9L);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Feb" + "'", str90, "Feb");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar94);
// flaky:         org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=1644572627098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "janvier" + "'", str96, "janvier");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "janv." + "'", str97, "janv.");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test14343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14343");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.set((-1), 0, 32770, (int) 'u', (int) (byte) -1, 1439);
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property14 = monthDay13.monthOfYear();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale15.getDisplayScript(locale16);
        int int19 = property14.getMaximumTextLength(locale15);
        java.lang.String str20 = property14.getAsString();
        org.joda.time.MonthDay monthDay21 = property14.getMonthDay();
        boolean boolean22 = calendar1.before((java.lang.Object) monthDay21);
        long long23 = calendar1.getTimeInMillis();
        int int24 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-59367263820841,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=88,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=267,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=22,SECOND=59,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59367263820841L) + "'", long23 == (-59367263820841L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test14344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14344");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.LocalDate localDate11 = localDate6.withFieldAdded(durationFieldType9, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        java.util.Date date21 = dateTime20.toDate();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays((int) '#');
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime24.minusMinutes(52);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime43 = dateTime24.withZone(dateTimeZone38);
        int int44 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology45 = dateTime24.getChronology();
        org.joda.time.DurationField durationField46 = durationFieldType13.getField(chronology45);
        boolean boolean47 = localDate6.isSupported(durationFieldType13);
        java.lang.String str48 = localDate6.toString();
        org.joda.time.Chronology chronology49 = localDate6.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-187199990L) + "'", long42 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-13" + "'", str48, "2022-02-13");
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test14345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14345");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MonthDay monthDay4 = property2.getMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.year();
        java.lang.String str22 = dateTimeField21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology35 = chronology31.withZone(dateTimeZone34);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.now(chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.dayOfMonth();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        int int39 = dateTimeField37.getMaximumTextLength(locale38);
        int int40 = dateTimeField21.getMaximumShortTextLength(locale38);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        java.lang.String str44 = locale42.getCountry();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField56 = monthDay54.getField((int) (byte) 0);
        java.util.Locale locale60 = new java.util.Locale("", "", "hi!");
        int int61 = dateTimeField56.getMaximumTextLength(locale60);
        long long64 = dateTimeField56.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay65 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay67 = monthDay65.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay65.minus(readablePeriod68);
        org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay72 = monthDay70.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField74 = monthDay72.getField((int) (byte) 0);
        java.util.Locale locale78 = new java.util.Locale("", "", "hi!");
        int int79 = dateTimeField74.getMaximumTextLength(locale78);
        java.lang.String str80 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) monthDay65, locale78);
        int int81 = property50.getMaximumTextLength(locale78);
        java.lang.String str82 = locale42.getDisplayVariant(locale78);
        java.lang.String str83 = dateTimeField21.getAsShortText(1970, locale78);
        java.util.Set<java.lang.String> strSet84 = locale78.getUnicodeLocaleKeys();
        java.lang.String str85 = locale78.getDisplayVariant();
        java.lang.String str86 = locale78.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay87 = property2.setCopy("ISOChronology[Etc/UTC]", locale78);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ISOChronology[Etc/UTC]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[year]" + "'", str22, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644572627207,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=207,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3" + "'", str51, "3");
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 9L + "'", long64 == 9L);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Feb" + "'", str80, "Feb");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970" + "'", str83, "1970");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test14346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14346");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay18 = monthDay16.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField20 = monthDay18.getField((int) (byte) 0);
        java.util.Locale locale24 = new java.util.Locale("", "", "hi!");
        int int25 = dateTimeField20.getMaximumTextLength(locale24);
        long long28 = dateTimeField20.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay29.minus(readablePeriod32);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField38 = monthDay36.getField((int) (byte) 0);
        java.util.Locale locale42 = new java.util.Locale("", "", "hi!");
        int int43 = dateTimeField38.getMaximumTextLength(locale42);
        java.lang.String str44 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) monthDay29, locale42);
        int int45 = property14.getMaximumTextLength(locale42);
        org.joda.time.DateTimeField dateTimeField46 = property14.getField();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        int int49 = property14.getMaximumTextLength(locale47);
        java.lang.String str50 = locale47.getDisplayVariant();
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale51.toLanguageTag();
        java.lang.String str53 = locale47.getDisplayName(locale51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.weekyearOfCentury();
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay70 = monthDay68.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField72 = monthDay70.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.era();
        int int74 = monthDay70.indexOf(dateTimeFieldType73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MonthDay monthDay77 = monthDay70.withPeriodAdded(readablePeriod75, (-1));
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.lang.String str80 = dateTimeField67.getAsShortText((org.joda.time.ReadablePartial) monthDay70, (int) '#', locale79);
        java.lang.String str81 = locale47.getDisplayName(locale79);
        java.util.Locale locale85 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str86 = locale79.getDisplayLanguage(locale85);
        java.lang.String str87 = dateTime4.toString("2022", locale79);
        org.joda.time.DateTime.Property property88 = dateTime4.hourOfDay();
        int int89 = property88.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3" + "'", str15, "3");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 9L + "'", long28 == 9L);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Feb" + "'", str44, "Feb");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572627243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=243,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en-US" + "'", str52, "en-US");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "French" + "'", str53, "French");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "35" + "'", str80, "35");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "French" + "'", str81, "French");
        org.junit.Assert.assertEquals(locale85.toString(), "fra_--01-01_monthOfYear");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English" + "'", str86, "English");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022" + "'", str87, "2022");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test14347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime4.toMutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField18 = chronology15.weeks();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test14348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14348");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        int int33 = monthDay13.getDayOfMonth();
        org.joda.time.Chronology chronology34 = monthDay13.getChronology();
        org.joda.time.MonthDay monthDay36 = monthDay13.plusDays(5);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay39 = monthDay37.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField41 = monthDay39.getField((int) (byte) 0);
        java.util.Locale locale45 = new java.util.Locale("", "", "hi!");
        int int46 = dateTimeField41.getMaximumTextLength(locale45);
        long long49 = dateTimeField41.add((long) 9, (long) (short) 0);
        int int51 = dateTimeField41.get((-187199987L));
        java.lang.String str53 = dateTimeField41.getAsText((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = dateTimeField41.getType();
        org.joda.time.MonthDay.Property property55 = monthDay13.property(dateTimeFieldType54);
        org.joda.time.format.DateTimePrinter dateTimePrinter56 = null;
        org.joda.time.format.DateTimeParser dateTimeParser57 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter56, dateTimeParser57);
        org.joda.time.Chronology chronology59 = dateTimeFormatter58.getChronology();
        boolean boolean60 = dateTimeFormatter58.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter58.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = dateTimeFormatter62.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter62.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter62.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter65.withPivotYear(9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = monthDay13.toString(dateTimeFormatter67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 13 + "'", int33 == 13);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 9L + "'", long49 == 9L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "January" + "'", str53, "January");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNull(dateTimePrinter63);
        org.junit.Assert.assertNull(dateTimeParser64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
    }

    @Test
    public void test14349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14349");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.MonthDay.Property property21 = monthDay18.monthOfYear();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        int int23 = property21.getMaximumValue();
        java.lang.String str24 = property21.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int36 = dateTime29.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = dateTime29.minusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        boolean boolean40 = property21.equals((java.lang.Object) property39);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Nov" + "'", str24, "Nov");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test14350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfCentury(1);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (byte) 0);
        org.joda.time.LocalDate.Property property13 = localDate9.year();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 4, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        java.lang.Object obj20 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long27 = dateTimeZone23.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj20, dateTimeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime18.toMutableDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime4, dateTimeZone23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfYear(100);
        int int37 = localDate34.size();
        org.joda.time.LocalDate localDate39 = localDate34.plusMonths(6);
        java.util.Date date40 = localDate39.toDate();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate39.withPeriodAdded(readablePeriod41, 292278994);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("2022-02-11");
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean47 = dateTime45.isSupported(dateTimeFieldType46);
        java.lang.String str48 = dateTimeFieldType46.getName();
        boolean boolean49 = localDate39.isSupported(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType46.getDurationType();
        org.joda.time.DateTime dateTime53 = dateTime4.withFieldAdded(durationFieldType51, (-52));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-187199987L) + "'", long27 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "millisOfDay" + "'", str48, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test14351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14351");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter21.getChronolgy();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfHalfday();
        int int25 = dateTimeField23.get(1644572463319L);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test14352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14352");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("halfdays");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("59");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 59 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test14353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14353");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        int int5 = dateTimeField4.getMinimumValue();
        int int6 = dateTimeField4.getMinimumValue();
        long long8 = dateTimeField4.remainder((long) 2022);
        long long11 = dateTimeField4.add((long) 16, 1970);
        long long14 = dateTimeField4.addWrapField(86210683200274L, 675);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5180457600016L + "'", long11 == 5180457600016L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86187096000274L + "'", long14 == 86187096000274L);
    }

    @Test
    public void test14354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14354");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 16);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test14355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14355");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekyear(2022);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.MonthDay monthDay29 = monthDay19.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay(0L, chronology28);
        org.joda.time.DateTime dateTime32 = dateTime16.toDateTime(chronology28);
        int int33 = dateTime32.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 239 + "'", int33 == 239);
    }

    @Test
    public void test14356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14356");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("gregory");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14357");
        java.util.Date date5 = new java.util.Date(0, 32770, 5, 0, (int) (short) 10);
        int int6 = date5.getYear();
        java.lang.String str7 = date5.toLocaleString();
        date5.setSeconds(94);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 05 00:11:34 UTC 4630");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2730 + "'", int6 == 2730);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Nov 5, 4630 12:10:00 AM" + "'", str7, "Nov 5, 4630 12:10:00 AM");
    }

    @Test
    public void test14358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14358");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.Date date13 = dateTime4.toDate();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.minus(readablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime4.withTime(99, (int) ' ', (int) (byte) 10, 86399998);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay19 = monthDay17.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = monthDay19.getField((int) (byte) 0);
        java.util.Locale locale25 = new java.util.Locale("", "", "hi!");
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        long long29 = dateTimeField21.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField39 = monthDay37.getField((int) (byte) 0);
        java.util.Locale locale43 = new java.util.Locale("", "", "hi!");
        int int44 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str45 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) monthDay30, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField47 = property15.getField();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        int int50 = property15.getMaximumTextLength(locale48);
        java.lang.String str51 = locale48.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.US;
        java.lang.String str53 = locale52.toLanguageTag();
        java.lang.String str54 = locale48.getDisplayName(locale52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property60 = dateTime59.hourOfDay();
        org.joda.time.DateTime dateTime62 = dateTime59.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology67 = chronology63.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.weekyearOfCentury();
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay71 = monthDay69.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField73 = monthDay71.getField((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.era();
        int int75 = monthDay71.indexOf(dateTimeFieldType74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay78 = monthDay71.withPeriodAdded(readablePeriod76, (-1));
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.lang.String str81 = dateTimeField68.getAsShortText((org.joda.time.ReadablePartial) monthDay71, (int) '#', locale80);
        java.lang.String str82 = locale48.getDisplayName(locale80);
        java.util.Locale locale86 = new java.util.Locale("fra", "--01-01", "monthOfYear");
        java.lang.String str87 = locale80.getDisplayLanguage(locale86);
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone8, locale80);
        java.util.TimeZone timeZone89 = calendar88.getTimeZone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9L + "'", long29 == 9L);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb" + "'", str45, "Feb");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572627548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en-US" + "'", str53, "en-US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "French" + "'", str54, "French");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "35" + "'", str81, "35");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "French" + "'", str82, "French");
        org.junit.Assert.assertEquals(locale86.toString(), "fra_--01-01_monthOfYear");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "English" + "'", str87, "English");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1644572627548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test14360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14360");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("2022");
        int int2 = monthDay1.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.withPeriodAdded(readablePeriod4, 339);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test14361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14361");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.getLocalDate();
        java.lang.String str12 = property5.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property5.setCopy("nov (JA,2 Apr 2104 08:59:23 GMT)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"nov (JA,2 Apr 2104 08:59:23 GMT)\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "13" + "'", str12, "13");
    }

    @Test
    public void test14362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14362");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        int int6 = property5.getLeapAmount();
        java.lang.String str7 = property5.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property5.setCopy("\u4e00\u6708");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hourOfDay" + "'", str7, "hourOfDay");
    }

    @Test
    public void test14363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14363");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.LocalDate localDate10 = localDate5.withFieldAdded(durationFieldType7, 32770);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology26 = chronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(83968099800000L, chronology22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays((int) '#');
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone39);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime35.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = dateTime35.plusWeeks(5);
        int int48 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime35);
        int int49 = dateTime35.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime35.toMutableDateTimeISO();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfYear(100);
        org.joda.time.Interval interval56 = localDate55.toInterval();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDate55.toDateTimeAtCurrentTime(dateTimeZone58);
        int int62 = dateTimeZone58.getOffset(0L);
        java.lang.String str64 = dateTimeZone58.getName(97L);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime69.hourOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology73 = dateTime72.getChronology();
        org.joda.time.DateTime dateTime75 = dateTime72.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime77 = dateTime72.withCenturyOfEra(0);
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfWeek();
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = locale79.getDisplayScript(locale80);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(locale80);
        java.lang.String str84 = locale80.getISO3Language();
        int int85 = property78.getMaximumTextLength(locale80);
        boolean boolean86 = dateTimeZone58.equals((java.lang.Object) int85);
        java.lang.String str88 = dateTimeZone58.getShortName(26L);
        int int90 = dateTimeZone58.getStandardOffset((long) 48999197);
        org.joda.time.MutableDateTime mutableDateTime91 = dateTime35.toMutableDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime92 = localDate12.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.LocalDate localDate93 = new org.joda.time.LocalDate((long) 49021102, dateTimeZone58);
        org.joda.time.DateTime dateTime94 = localDate93.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime97 = dateTime94.withDurationAdded((long) 640, 1973);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 187200000 + "'", int48 == 187200000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 187200000 + "'", int62 == 187200000);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+52:00" + "'", str64, "+52:00");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "it" + "'", str81, "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1644572627715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=47,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ita" + "'", str84, "ita");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+52:00" + "'", str88, "+52:00");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 187200000 + "'", int90 == 187200000);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test14364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14364");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime2.minuteOfHour();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) '#');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime29.plusWeeks(5);
        org.joda.time.Chronology chronology42 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime2.withChronology(chronology42);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths(2022);
        org.joda.time.DateTime dateTime48 = dateTime44.plus((-2779199987L));
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean51 = dateTimeZone50.isFixed();
        java.lang.String str53 = dateTimeZone50.getNameKey((long) 41);
        org.joda.time.DateTime dateTime54 = dateTime48.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime48.withYear(1162);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test14365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14365");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property9 = monthDay8.monthOfYear();
        org.joda.time.MonthDay monthDay11 = property9.addToCopy((int) ' ');
        int int12 = property9.get();
        java.lang.String str13 = property9.toString();
        java.util.Locale locale14 = java.util.Locale.PRC;
        int int15 = property9.getMaximumShortTextLength(locale14);
        org.joda.time.MonthDay monthDay17 = property9.addToCopy((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property9.getFieldType();
        boolean boolean19 = dateTime6.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DurationField durationField30 = chronology28.hours();
        org.joda.time.DurationField durationField31 = chronology28.years();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType18.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[monthOfYear]" + "'", str13, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test14366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14366");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withYearOfEra((int) ' ');
        int int10 = dateTime9.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
    }

    @Test
    public void test14367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14367");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay(0L);
        java.lang.String str13 = monthDay12.toString();
        org.joda.time.Chronology chronology14 = monthDay12.getChronology();
        org.joda.time.Chronology chronology15 = monthDay12.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter10.withChronology(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter17.getPrinter();
        org.joda.time.Chronology chronology20 = dateTimeFormatter17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.parse("DateTimeField[dayOfYear]", dateTimeFormatter17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--01-03" + "'", str13, "--01-03");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimePrinter19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test14368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14368");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(49088531);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test14369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14369");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((long) (-1970));
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        org.joda.time.MonthDay.Property property21 = monthDay20.monthOfYear();
        org.joda.time.MonthDay monthDay23 = monthDay20.plusMonths(815);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) monthDay20, 576, locale25);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "576" + "'", str26, "576");
    }

    @Test
    public void test14370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14370");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        long long10 = dateTimeZone6.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime11 = dateTime2.withZoneRetainFields(dateTimeZone6);
        long long12 = dateTime11.getMillis();
        int int13 = dateTime11.getWeekyear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate23 = property19.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property19.getFieldType();
        org.joda.time.LocalDate localDate25 = property19.getLocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.withYear((int) ' ');
        org.joda.time.LocalDate localDate29 = localDate27.withYear((int) (byte) 100);
        org.joda.time.LocalDate localDate31 = localDate27.withYear(1970);
        org.joda.time.DateTime dateTime32 = dateTime11.withFields((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTime dateTime34 = dateTime32.withYear(49159149);
        int int35 = dateTime32.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-187199990L) + "'", long10 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 999 + "'", int35 == 999);
    }

    @Test
    public void test14371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14371");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale19.getDisplayVariant();
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = dateTimeField17.getAsText((long) 49344357, locale19);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "357" + "'", str23, "357");
    }

    @Test
    public void test14372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14372");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-46800000), 101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 101");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14373");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11 Feb 2022 09:37:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"11 Feb 2022 09:37:00 GMT\" is malformed at \" Feb 2022 09:37:00 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14374");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.roll(9, false);
        int int6 = calendar1.getActualMaximum(1);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long14 = dateTimeZone10.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj7, dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        calendar1.setTimeZone(timeZone18);
        calendar1.setLenient(false);
        calendar1.set(1439, 25, 365, 349260000, 2922789);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = calendar1.getActualMaximum(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1439,MONTH=25,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=365,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=349260000,MINUTE=2922789,SECOND=48,MILLISECOND=70,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278994 + "'", int6 == 292278994);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-187199987L) + "'", long14 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test14375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14375");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime14.withTime(2, 24, 0, 16);
        int int20 = dateTime19.getDayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime19.withCenturyOfEra(365);
        org.joda.time.DateTime.Property property23 = dateTime19.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14376");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        int int7 = localDate2.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate2.withWeekyear(10);
        int int10 = localDate2.getEra();
        org.joda.time.LocalDate localDate12 = localDate2.plusMonths(48998496);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronology();
        boolean boolean18 = dateTimeFormatter16.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter16.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter16.getPrinter();
        org.joda.time.Chronology chronology24 = dateTimeFormatter16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter16.withPivotYear(52);
        org.joda.time.Chronology chronology27 = dateTimeFormatter26.getChronology();
        int int28 = dateTimeFormatter26.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTime dateTime36 = dateTime33.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology41 = chronology37.withZone(dateTimeZone40);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.now(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.dayOfMonth();
        org.joda.time.DurationField durationField44 = chronology37.millis();
        org.joda.time.DateTimeField dateTimeField45 = chronology37.year();
        java.lang.String str46 = dateTimeField45.getName();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = locale48.getDisplayScript(locale49);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleKeys();
        java.lang.String str53 = dateTimeField45.getAsText(63421, locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter26.withLocale(locale49);
        java.lang.String str55 = locale49.getDisplayLanguage();
        java.lang.String str56 = locale49.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = localDate12.toString("", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "year" + "'", str46, "year");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "63421" + "'", str53, "63421");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "italien" + "'", str55, "italien");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "italien" + "'", str56, "italien");
    }

    @Test
    public void test14377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14377");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        org.joda.time.DurationField durationField8 = property2.getDurationField();
        int int9 = property2.getMinimumValue();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale10.getDisplayVariant();
        boolean boolean13 = property2.equals((java.lang.Object) str12);
        int int14 = property2.getMaximumValueOverall();
        java.lang.String str15 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test14378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology10.add(readablePeriod14, (long) 32769, 10);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay(chronology10);
        org.joda.time.DateTimeField dateTimeField19 = chronology10.hourOfDay();
        long long21 = dateTimeField19.roundHalfFloor(31186740000L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32769L + "'", long17 == 32769L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31186800000L + "'", long21 == 31186800000L);
    }

    @Test
    public void test14379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14379");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime13 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime7.withWeekOfWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readablePeriod19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        long long26 = dateTimeZone22.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime27 = dateTime18.withZoneRetainFields(dateTimeZone22);
        long long28 = dateTime27.getMillis();
        boolean boolean29 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis(168);
        org.joda.time.DateTime dateTime33 = dateTime31.minusHours(2000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-187199990L) + "'", long26 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14380");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        calendar1.set(187200000, 17, 0);
        calendar1.setTimeInMillis(5907399684280970662L);
        long long14 = calendar1.getTimeInMillis();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=5907399684280970662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=187200013,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=42,SECOND=50,MILLISECOND=662,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5907399684280970662L + "'", long14 == 5907399684280970662L);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test14381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14381");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withYearOfCentury(1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime8.withTime(21, 357, 46, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 357 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test14382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14382");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology17 = chronology13.withZone(dateTimeZone16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((java.lang.Object) dateTime4, chronology13);
        java.lang.String str20 = monthDay18.toString("35");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay18.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property26 = monthDay25.monthOfYear();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale27.getDisplayScript(locale28);
        int int31 = property26.getMaximumTextLength(locale27);
        java.lang.String str32 = property26.getAsString();
        java.lang.String str33 = property26.getAsShortText();
        int int34 = property26.getMaximumValueOverall();
        java.lang.String str35 = property26.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        int int38 = monthDay18.get(dateTimeFieldType36);
        org.joda.time.MonthDay monthDay40 = monthDay18.plusMonths(14402);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35" + "'", str20, "35");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "janv." + "'", str33, "janv.");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "janv." + "'", str35, "janv.");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test14383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14383");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) '#');
        int int19 = dateTime16.getWeekyear();
        org.joda.time.DateMidnight dateMidnight20 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate13.property(dateTimeFieldType21);
        boolean boolean24 = dateTime2.equals((java.lang.Object) property23);
        org.joda.time.LocalDate localDate25 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate26 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(30);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTime.Property property36 = dateTime35.weekyear();
        int int37 = dateTime35.getMinuteOfDay();
        org.joda.time.DateTime dateTime38 = localDate26.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test14384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14384");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime.Property property23 = dateTime10.secondOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy((-349259965L));
        boolean boolean26 = calendar1.before((java.lang.Object) (-349259965L));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572628340,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=48,MILLISECOND=340,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14385");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withPivotYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withPivotYear(0);
        int int14 = dateTimeFormatter13.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.parse("hourofday__2022-02-11", dateTimeFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
    }

    @Test
    public void test14386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14386");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.MonthDay.Property property6 = monthDay0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField((int) (byte) 0);
        java.util.Locale locale22 = new java.util.Locale("", "", "hi!");
        int int23 = dateTimeField18.getMaximumTextLength(locale22);
        long long26 = dateTimeField18.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay27.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField36 = monthDay34.getField((int) (byte) 0);
        java.util.Locale locale40 = new java.util.Locale("", "", "hi!");
        int int41 = dateTimeField36.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) monthDay27, locale40);
        int int43 = property12.getMaximumTextLength(locale40);
        org.joda.time.DateTimeField dateTimeField44 = property12.getField();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale45);
        int int47 = property12.getMaximumTextLength(locale45);
        boolean boolean48 = locale45.hasExtensions();
        java.lang.String str49 = locale45.getDisplayCountry();
        boolean boolean50 = locale45.hasExtensions();
        int int51 = property6.getMaximumShortTextLength(locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property6.getFieldType();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getRangeDurationType();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3" + "'", str13, "3");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Feb" + "'", str42, "Feb");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572628387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=48,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test14387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14387");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfCentury((int) '#');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.minus(readablePeriod7);
        int int9 = localDate8.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight11 = localDate8.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int13 = localDate8.get(dateTimeFieldType12);
        boolean boolean14 = dateTime1.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 44 + "'", int13 == 44);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test14388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14388");
        java.util.Date date5 = new java.util.Date(7, 11, (int) (byte) -1, 0, 2022);
        java.lang.String str6 = date5.toLocaleString();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.fromDateFields(date5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromDateFields(date5);
        java.lang.Object obj9 = date5.clone();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 30 09:42:00 UTC 1907");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "30 nov. 1907 09:42:00" + "'", str6, "30 nov. 1907 09:42:00");
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "Sat Nov 30 09:42:00 UTC 1907");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Sat Nov 30 09:42:00 UTC 1907");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Sat Nov 30 09:42:00 UTC 1907");
    }

    @Test
    public void test14389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14389");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfEra((int) '4');
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime9.toMutableDateTime(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str17 = dateTimeZone16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(3659999, 2007, 0, 14399995, (-5039), (int) (byte) 10, (int) (short) 1, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14399995 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
    }

    @Test
    public void test14390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14390");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean9 = dateTimeZone7.isStandardOffset(10L);
        java.lang.Object obj10 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long17 = dateTimeZone13.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj10, dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime18);
        long long24 = dateTimeZone7.convertLocalToUTC((long) 32772, false, (long) 292278994);
        long long26 = dateTimeZone7.nextTransition((-62135596800000L));
        int int28 = dateTimeZone7.getStandardOffset((long) 53);
        int int30 = dateTimeZone7.getOffset((long) 8);
        org.joda.time.DateTime dateTime31 = localDate2.toDateTimeAtStartOfDay(dateTimeZone7);
        java.util.Date date32 = localDate2.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-187199987L) + "'", long17 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32762L + "'", long24 == 32762L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62135596800000L) + "'", long26 == (-62135596800000L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 13 00:00:00 UTC 2022");
    }

    @Test
    public void test14391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14391");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        long long23 = dateTimeField20.add(52L, 0L);
        boolean boolean25 = dateTimeField20.isLeap(1451L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.withDayOfYear(100);
        int int31 = localDate28.size();
        org.joda.time.LocalDate localDate33 = localDate28.plusMonths(6);
        int int35 = localDate33.getValue(0);
        java.lang.String str36 = localDate33.toString();
        org.joda.time.LocalDate localDate38 = localDate33.withWeekyear(1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate41 = localDate38.withPeriodAdded(readablePeriod39, (int) 'u');
        int int42 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDate41);
        int int43 = dateTimeField20.getMinimumValue();
        java.lang.String str44 = dateTimeField20.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+52:00]" + "'", str13, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-08-13" + "'", str36, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str44, "DateTimeField[yearOfCentury]");
    }

    @Test
    public void test14392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14392");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        java.util.Date date11 = new java.util.Date(0, 0, (int) '4');
        date11.setDate(12);
        date11.setHours(2922789);
        date11.setTime(9L);
        java.util.Date date21 = new java.util.Date(0, 0, (int) '4');
        int int22 = date21.getHours();
        boolean boolean23 = date11.before(date21);
        int int24 = date11.getDay();
        calendar1.setTime(date11);
        java.util.Date date32 = new java.util.Date((int) (byte) 0, 2021, 0, (int) (short) 1, 11279, (int) (byte) 100);
        boolean boolean33 = date11.before(date32);
        int int34 = date11.getTimezoneOffset();
        date11.setDate(15600069);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=9,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=9,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jul 15 00:00:00 UTC 44681");
        org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jun 07 21:00:40 UTC 2068");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test14393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14393");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(29030400239L);
        int int2 = dateTime1.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
    }

    @Test
    public void test14394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14394");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        int int15 = property13.getMaximumValue();
        org.joda.time.DateTime dateTime17 = property13.addWrapFieldToCopy(10);
        boolean boolean19 = dateTime17.isAfter(83968099800000L);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime17.withMillis((-9193325335413479000L));
        long long23 = dateTime17.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31556995199999L + "'", long23 == 31556995199999L);
    }

    @Test
    public void test14395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readablePeriod3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths((int) (byte) 10);
        org.joda.time.DateTime.Property property7 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays((int) '#');
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime12.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime12.minusMinutes(52);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        long long30 = dateTimeZone26.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime31 = dateTime12.withZone(dateTimeZone26);
        org.joda.time.Instant instant32 = dateTime12.toInstant();
        int int33 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) instant32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(100);
        int int39 = localDate36.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDate36.getFieldTypes();
        java.lang.String str41 = localDate36.toString();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(100);
        org.joda.time.LocalDate.Property property47 = localDate44.dayOfMonth();
        org.joda.time.LocalDate localDate49 = localDate44.withDayOfMonth(21);
        boolean boolean50 = localDate36.isEqual((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime55.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime60.getZone();
        org.joda.time.DateTime dateTime62 = localDate36.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDate36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology65 = null;
        boolean boolean66 = dateTimeFieldType64.isSupported(chronology65);
        org.joda.time.LocalDate.Property property67 = localDate36.property(dateTimeFieldType64);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(dateTimeZone69);
        org.joda.time.LocalDate localDate72 = localDate70.withDayOfYear(100);
        int int73 = localDate70.size();
        org.joda.time.LocalDate localDate75 = localDate70.plusMonths(6);
        int int77 = localDate75.getValue(0);
        java.lang.String str78 = localDate75.toString();
        org.joda.time.LocalDate localDate80 = localDate75.withWeekyear(1);
        org.joda.time.LocalDate localDate82 = localDate75.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate86 = org.joda.time.LocalDate.now(dateTimeZone85);
        org.joda.time.DateTime dateTime87 = localDate82.toDateTimeAtStartOfDay(dateTimeZone85);
        int int88 = dateTime87.getWeekyear();
        org.joda.time.DateTime dateTime90 = dateTime87.minusYears(10);
        org.joda.time.YearMonthDay yearMonthDay91 = dateTime90.toYearMonthDay();
        org.joda.time.Chronology chronology92 = dateTime90.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = dateTimeFieldType64.getField(chronology92);
        int int94 = instant32.get(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-187199990L) + "'", long30 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-13" + "'", str41, "2022-02-13");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-08-13" + "'", str78, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2021 + "'", int88 == 2021);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test14396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14396");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.setWeekDate(3, (-1), 1);
        java.util.Date date19 = new java.util.Date(0, 0, (int) '4');
        date19.setDate(12);
        date19.setHours(2922789);
        int int24 = date19.getSeconds();
        calendar1.setTime(date19);
        calendar1.set(168, 39, 14400, 49047731, 8);
        java.util.Date date32 = calendar1.getTime();
        calendar1.setTimeInMillis((long) 30748);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=30748,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=30,MILLISECOND=748,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jul 18 21:00:00 UTC 2233");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 03 11:08:00 UTC 5806");
    }

    @Test
    public void test14397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14397");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2112");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2112");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14398");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays((int) 'u');
        int int10 = dateTime4.getYearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime4.plusMillis(4);
        java.util.Date date13 = dateTime4.toDate();
        boolean boolean14 = dateTime4.isBeforeNow();
        int int15 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime4.plusWeeks(1970);
        org.joda.time.DateTime dateTime19 = dateTime4.plusYears(211);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14399999 + "'", int15 == 14399999);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test14399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14399");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(366, 2045, 292278993, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2045 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14400");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readablePeriod4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(2022);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) '#');
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime11.plusWeeks(5);
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        org.joda.time.Chronology chronology25 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime8.withChronology(chronology25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(5907399684280970662L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 52);
        org.joda.time.LocalDate localDate32 = localDate27.plusWeeks(0);
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays((int) '#');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime37.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = dateTime37.plusWeeks(5);
        org.joda.time.Chronology chronology50 = dateTime37.getChronology();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime37.minus(readablePeriod51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean54 = dateTime37.isSupported(dateTimeFieldType53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(dateTimeZone56);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfYear(100);
        int int60 = localDate57.size();
        org.joda.time.LocalDate localDate62 = localDate57.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusDays((int) '#');
        int int68 = dateTime65.getWeekyear();
        org.joda.time.DateMidnight dateMidnight69 = dateTime65.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property71 = dateTime65.property(dateTimeFieldType70);
        org.joda.time.LocalDate.Property property72 = localDate62.property(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType70.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property79 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime81 = dateTime78.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology82 = dateTime81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology86 = chronology82.withZone(dateTimeZone85);
        java.lang.String str87 = chronology82.toString();
        org.joda.time.DurationField durationField88 = chronology82.seconds();
        org.joda.time.DateTimeField dateTimeField89 = chronology82.yearOfCentury();
        boolean boolean90 = dateTimeFieldType70.isSupported(chronology82);
        boolean boolean91 = dateTimeFieldType53.isSupported(chronology82);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType53.getDurationType();
        boolean boolean93 = localDate34.isSupported(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ISOChronology[+52:00]" + "'", str87, "ISOChronology[+52:00]");
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test14401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        boolean boolean13 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.DateTime dateTime16 = dateTime2.withSecondOfMinute(59);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        int int22 = dateTime19.getWeekyear();
        org.joda.time.DateMidnight dateMidnight23 = dateTime19.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime19.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime19.minusWeeks(17);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime16.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime.Property property31 = dateTime16.weekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test14402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14402");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(2022);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) '#');
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtStartOfDay(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime23.plusWeeks(5);
        org.joda.time.Chronology chronology36 = dateTime23.getChronology();
        org.joda.time.Chronology chronology37 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime20.withChronology(chronology37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(5907399684280970662L, chronology37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        int int41 = dateTime40.getYearOfCentury();
        long long42 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime40.plusMonths(11);
        org.joda.time.DateTime dateTime46 = dateTime45.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology47 = dateTime45.getChronology();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfYear(100);
        org.joda.time.LocalDate.Property property53 = localDate50.dayOfMonth();
        org.joda.time.LocalDate.Property property54 = localDate50.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.DateTime.Property property56 = dateTime45.property(dateTimeFieldType55);
        int int57 = dateTime45.getDayOfMonth();
        org.joda.time.DateTime dateTime59 = dateTime45.withMillisOfSecond(29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11" + "'", str11, "11");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 89L + "'", long42 == 89L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test14403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14403");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(0L);
        java.lang.String str12 = monthDay11.toString();
        org.joda.time.Chronology chronology13 = monthDay11.getChronology();
        org.joda.time.Chronology chronology14 = monthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        boolean boolean18 = dateTimeFormatter17.isParser();
        java.lang.Appendable appendable19 = null;
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(100);
        int int25 = localDate22.size();
        org.joda.time.LocalDate localDate27 = localDate22.plusMonths(6);
        int int29 = localDate27.getValue(0);
        java.lang.String str30 = localDate27.toString();
        org.joda.time.LocalDate localDate32 = localDate27.withWeekyear(1);
        org.joda.time.LocalTime localTime33 = null;
        org.joda.time.DateTime dateTime34 = localDate27.toDateTime(localTime33);
        org.joda.time.LocalDate.Property property35 = localDate27.yearOfCentury();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.withDayOfYear(100);
        int int41 = localDate38.size();
        org.joda.time.LocalDate localDate43 = localDate38.plusMonths(6);
        int int45 = localDate43.getValue(0);
        java.lang.String str46 = localDate43.toString();
        org.joda.time.LocalDate localDate48 = localDate43.plusDays(16);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = localDate51.withYearOfCentury((int) '#');
        org.joda.time.LocalDate localDate55 = localDate51.minusYears(32769);
        org.joda.time.LocalDate.Property property56 = localDate55.dayOfWeek();
        org.joda.time.LocalDate localDate57 = property56.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean61 = dateTimeZone59.isStandardOffset(10L);
        java.lang.Object obj62 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long69 = dateTimeZone65.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj62, dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTime();
        int int72 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime70);
        long long76 = dateTimeZone59.convertLocalToUTC((long) 32772, false, (long) 292278994);
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now(dateTimeZone59);
        org.joda.time.Interval interval78 = localDate57.toInterval(dateTimeZone59);
        boolean boolean79 = dateTimeZone59.isFixed();
        java.lang.String str81 = dateTimeZone59.getShortName((-187192908L));
        boolean boolean82 = dateTimeZone59.isFixed();
        org.joda.time.DateTime dateTime83 = localDate43.toDateTimeAtStartOfDay(dateTimeZone59);
        int int84 = property35.compareTo((org.joda.time.ReadablePartial) localDate43);
        int int85 = localDate43.getEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(appendable19, (org.joda.time.ReadablePartial) localDate43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--01-03" + "'", str12, "--01-03");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-08-13" + "'", str30, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-08-13" + "'", str46, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-187199987L) + "'", long69 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 32762L + "'", long76 == 32762L);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test14404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14404");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(83968099800000L, chronology9);
        org.joda.time.LocalDate localDate17 = localDate15.plusYears(0);
        int int18 = localDate15.getDayOfMonth();
        org.joda.time.Interval interval19 = localDate15.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDate15.get(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test14405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14405");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setLenient(false);
        boolean boolean11 = calendar1.isWeekDateSupported();
        java.util.Date date18 = new java.util.Date((int) '#', 4, 364, 1, 14399999, (int) 'x');
        calendar1.setTime(date18);
        java.time.Instant instant20 = calendar1.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-198802740000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1963,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=257,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Sep 14 01:01:00 UTC 1963");
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test14406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14406");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset(10L);
        java.lang.Object obj4 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj4, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        int int14 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str16 = dateTimeZone1.getShortName((long) (byte) 100);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.now(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay17.getFieldType(471);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 471");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-187199987L) + "'", long11 == (-187199987L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.010" + "'", str16, "+00:00:00.010");
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test14407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14407");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.DateMidnight dateMidnight5 = localDate2.toDateMidnight();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(100);
        int int11 = localDate8.size();
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(6);
        int int15 = localDate13.getValue(0);
        java.lang.String str16 = localDate13.toString();
        org.joda.time.LocalDate.Property property17 = localDate13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = dateTime19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate24 = localDate20.withFieldAdded(durationFieldType22, 11);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfYear(100);
        org.joda.time.LocalDate.Property property30 = localDate27.dayOfMonth();
        org.joda.time.LocalDate localDate31 = property30.getLocalDate();
        org.joda.time.LocalDate localDate33 = property30.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDate33.getFields();
        org.joda.time.LocalDate localDate36 = localDate33.minusYears(2730);
        int int37 = localDate33.getMonthOfYear();
        org.joda.time.LocalDate.Property property38 = localDate33.yearOfEra();
        org.joda.time.LocalDate localDate39 = localDate20.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate41 = localDate20.plusWeeks(122);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtMidnight();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate41.withPeriodAdded(readablePeriod43, 1439);
        org.joda.time.LocalDate localDate46 = localDate2.withFields((org.joda.time.ReadablePartial) localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-08-13" + "'", str16, "2022-08-13");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test14408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14408");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.plusWeeks(5);
        org.joda.time.Chronology chronology15 = dateTime2.getChronology();
        org.joda.time.Chronology chronology16 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime2.plusHours((int) (short) -1);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.DateTime dateTime21 = property19.getDateTime();
        org.joda.time.DateTime dateTime23 = property19.addToCopy(62135971200000L);
        int int24 = property19.getMinimumValueOverall();
        org.joda.time.DateTime dateTime25 = property19.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test14409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14409");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        calendar1.setTimeInMillis(1L);
        calendar1.set(1439, (int) ' ', 7);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime23.yearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(0);
        int int30 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology43 = chronology39.withZone(dateTimeZone42);
        java.lang.String str44 = chronology39.toString();
        boolean boolean45 = dateTime23.equals((java.lang.Object) str44);
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar47 = dateTime23.toCalendar(locale46);
        java.lang.String str48 = locale46.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = monthDay17.toString("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-16671311999999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=1441,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=250,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 239 + "'", int30 == 239);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+52:00]" + "'", str44, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ja" + "'", str48, "ja");
    }

    @Test
    public void test14410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14410");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.LocalDate localDate22 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDate22.getFields();
        org.joda.time.LocalDate localDate25 = localDate22.minusYears(2730);
        int int26 = localDate22.getMonthOfYear();
        java.util.Date date27 = localDate22.toDate();
        org.joda.time.LocalDate localDate28 = localDate13.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTime dateTime29 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (byte) 0);
        org.joda.time.LocalDate.Property property34 = localDate30.year();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 4, dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate30.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra(52);
        org.joda.time.LocalDate.Property property45 = localDate44.weekOfWeekyear();
        org.joda.time.LocalDate localDate46 = property45.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property45.getFieldType();
        org.joda.time.DateTime.Property property48 = dateTime40.property(dateTimeFieldType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = localDate13.withField(dateTimeFieldType47, 14399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14399 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test14411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14411");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded(readableDuration8, (-16812840));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(83968099800000L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.DateTime.Property property33 = dateTime31.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.plus(readablePeriod34);
        int int36 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight37 = dateTime35.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight37);
    }

    @Test
    public void test14412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14412");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        int int10 = calendar1.getGreatestMinimum(3);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        calendar1.setFirstDayOfWeek((-12432));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572629203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-12432,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=49,MILLISECOND=203,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(monthDay11);
    }

    @Test
    public void test14413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14413");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.plusWeeks(5);
        org.joda.time.Chronology chronology23 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.halfdayOfDay();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test14414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14414");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.PRC;
        int int8 = property2.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale11.getDisplayScript(locale12);
        java.lang.String str15 = locale10.getDisplayCountry(locale11);
        java.lang.String str16 = locale11.getDisplayLanguage();
        java.lang.String str17 = locale11.getScript();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.lang.String str20 = locale18.getCountry();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.hourOfDay();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay30 = monthDay28.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField32 = monthDay30.getField((int) (byte) 0);
        java.util.Locale locale36 = new java.util.Locale("", "", "hi!");
        int int37 = dateTimeField32.getMaximumTextLength(locale36);
        long long40 = dateTimeField32.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay43 = monthDay41.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay41.minus(readablePeriod44);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField50 = monthDay48.getField((int) (byte) 0);
        java.util.Locale locale54 = new java.util.Locale("", "", "hi!");
        int int55 = dateTimeField50.getMaximumTextLength(locale54);
        java.lang.String str56 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) monthDay41, locale54);
        int int57 = property26.getMaximumTextLength(locale54);
        java.lang.String str58 = locale18.getDisplayVariant(locale54);
        java.util.Locale locale60 = new java.util.Locale("en-US");
        java.lang.String str61 = locale54.getDisplayLanguage(locale60);
        java.lang.String str62 = locale54.getISO3Country();
        java.lang.String str63 = locale11.getDisplayLanguage(locale54);
        java.lang.String str64 = locale54.getLanguage();
        java.lang.String str65 = locale54.getDisplayScript();
        java.lang.String str66 = property2.getAsText(locale54);
        java.lang.String str67 = locale54.getDisplayScript();
        java.lang.String str68 = locale54.getISO3Language();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Cina" + "'", str15, "Cina");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italien" + "'", str16, "italien");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572629250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=49,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9L + "'", long40 == 9L);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Feb" + "'", str56, "Feb");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals(locale60.toString(), "en-us");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Italian" + "'", str63, "Italian");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "January" + "'", str66, "January");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test14415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14415");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.millisOfDay();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property10 = monthDay9.monthOfYear();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale11.getDisplayScript(locale12);
        int int15 = property10.getMaximumTextLength(locale11);
        java.lang.String str16 = property10.getAsString();
        java.lang.String str17 = property10.getAsShortText();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        int int19 = property10.getMaximumTextLength(locale18);
        java.lang.String str20 = dateTimeField6.getAsShortText(2, locale18);
        boolean boolean22 = dateTimeField6.isLeap(86174413260000L);
        int int24 = dateTimeField6.get((long) 817);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-01" + "'", str2, "--01-01");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "janv." + "'", str17, "janv.");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 817 + "'", int24 == 817);
    }

    @Test
    public void test14416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14416");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getExtension('u');
        java.lang.String str4 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test14417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14417");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 48999197, false, (long) 292278994);
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 48999162L + "'", long5 == 48999162L);
    }

    @Test
    public void test14418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14418");
        java.util.Date date1 = new java.util.Date(31928L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:31 UTC 1970");
    }

    @Test
    public void test14419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14419");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set((int) (byte) 0, (int) (byte) 1);
        java.util.Calendar.Builder builder7 = builder0.setDate(59, (int) (byte) 1, 2022);
        java.util.Calendar.Builder builder11 = builder0.setDate(14399, 52, 4);
        java.util.Calendar calendar12 = builder11.build();
        java.util.Calendar.Builder builder16 = builder11.setWeekDate(0, 35, 16804056);
        java.util.Calendar.Builder builder20 = builder11.setWeekDate((-1848), 187200000, 23786);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder11.setInstant((-184277211L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=392358211200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14403,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test14420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        java.lang.String str13 = chronology8.toString();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfWeek();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        org.joda.time.LocalDate localDate28 = localDate23.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusDays((int) '#');
        int int34 = dateTime31.getWeekyear();
        org.joda.time.DateMidnight dateMidnight35 = dateTime31.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property37 = dateTime31.property(dateTimeFieldType36);
        org.joda.time.LocalDate.Property property38 = localDate28.property(dateTimeFieldType36);
        java.lang.String str39 = localDate28.toString();
        org.joda.time.LocalDate localDate41 = localDate28.minusYears(4);
        org.joda.time.LocalDate localDate43 = localDate41.plusWeeks(229);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays((int) '#');
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtStartOfDay(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime46.toDateTime(dateTimeZone53);
        java.lang.Object obj57 = null;
        boolean boolean58 = dateTimeZone53.equals(obj57);
        int int60 = dateTimeZone53.getStandardOffset((long) 0);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDate localDate64 = localDate61.withPeriodAdded(readablePeriod62, (int) (byte) 0);
        org.joda.time.LocalDate.Property property65 = localDate61.year();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 4, dateTimeZone69);
        org.joda.time.DateTime dateTime71 = localDate61.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        java.lang.Object obj72 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long79 = dateTimeZone75.convertLocalToUTC((long) 13, true, (long) ' ');
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(obj72, dateTimeZone75);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime70.toMutableDateTime(dateTimeZone75);
        int int83 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateMidnight dateMidnight84 = localDate43.toDateMidnight(dateTimeZone53);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate((long) 1970, dateTimeZone53);
        java.util.Locale locale87 = null;
        java.lang.String str88 = dateTimeZone53.getShortName((-62180539200000L), locale87);
        org.joda.time.Chronology chronology89 = chronology17.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField90 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField91 = chronology17.clockhourOfDay();
        org.joda.time.DurationField durationField92 = chronology17.millis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.638]" + "'", str13, "ISOChronology[+00:00:00.638]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-08-11" + "'", str39, "2022-08-11");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 638 + "'", int60 == 638);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-187199987L) + "'", long79 == (-187199987L));
        org.junit.Assert.assertNotNull(mutableDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 638 + "'", int83 == 638);
        org.junit.Assert.assertNotNull(dateMidnight84);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.638" + "'", str88, "+00:00:00.638");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
    }

    @Test
    public void test14421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14421");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withPivotYear(52);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronology();
        int int14 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology27 = chronology23.withZone(dateTimeZone26);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.now(chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology23.millis();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.year();
        java.lang.String str32 = dateTimeField31.getName();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale34.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleKeys();
        java.lang.String str39 = dateTimeField31.getAsText(63421, locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter12.withLocale(locale35);
        java.lang.String str41 = locale35.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime46.hourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property50 = dateTime46.yearOfCentury();
        org.joda.time.DateTime dateTime52 = dateTime46.plusWeeks(0);
        int int53 = dateTime46.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology66 = chronology62.withZone(dateTimeZone65);
        java.lang.String str67 = chronology62.toString();
        boolean boolean68 = dateTime46.equals((java.lang.Object) str67);
        java.util.Locale locale69 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar70 = dateTime46.toCalendar(locale69);
        java.lang.String str71 = locale69.getLanguage();
        java.lang.String str72 = locale69.getDisplayScript();
        java.lang.String str73 = locale35.getDisplayLanguage(locale69);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "year" + "'", str32, "year");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "63421" + "'", str39, "63421");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "italien" + "'", str41, "italien");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 239 + "'", int53 == 239);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[+52:00]" + "'", str67, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ja" + "'", str71, "ja");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str73, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
    }

    @Test
    public void test14422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14422");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology12 = chronology8.withZone(dateTimeZone11);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, (int) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate17.minusWeeks((int) 'x');
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(1644572109112L);
        java.lang.String str26 = monthDay25.toString();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property30 = monthDay29.monthOfYear();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale31.getDisplayScript(locale32);
        int int35 = property30.getMaximumTextLength(locale31);
        java.lang.String str36 = property30.getAsString();
        java.lang.String str37 = property30.getAsShortText();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        int int39 = property30.getMaximumTextLength(locale38);
        java.lang.String str40 = monthDay25.toString("--01-01", locale38);
        java.lang.String str41 = monthDay25.toString();
        int[] intArray42 = monthDay25.getValues();
        org.joda.time.Chronology chronology43 = monthDay25.getChronology();
        int[] intArray44 = monthDay25.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = dateTimeField15.addWrapField((org.joda.time.ReadablePartial) localDate22, 32, intArray44, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--02-13" + "'", str26, "--02-13");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "janv." + "'", str37, "janv.");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "--01-01" + "'", str40, "--01-01");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "--02-13" + "'", str41, "--02-13");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2, 13]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2, 13]");
    }

    @Test
    public void test14423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14423");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int int9 = dateTimeField7.getMaximumValue(readablePartial8);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    }

    @Test
    public void test14424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14424");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 292269054);
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter7.getParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeParser10);
    }

    @Test
    public void test14425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14425");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        java.util.Date date7 = dateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays((int) '#');
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes(52);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        long long28 = dateTimeZone24.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone24);
        int int30 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime32 = dateTime10.withMillisOfSecond(12);
        long long33 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime10.withMillisOfSecond(17);
        java.util.Date date36 = dateTime10.toDate();
        java.lang.Object obj37 = date36.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-187199990L) + "'", long28 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "Wed Dec 31 23:59:59 UTC 1969");
    }

    @Test
    public void test14426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 0);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay13.withChronologyRetainFields(chronology22);
        org.joda.time.DateTime dateTime24 = dateTime10.toDateTime(chronology22);
        org.joda.time.DateTime dateTime26 = dateTime24.plusWeeks(160);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(49344357);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test14427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14427");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0L);
        java.lang.String str3 = monthDay2.toString();
        org.joda.time.Chronology chronology4 = monthDay2.getChronology();
        org.joda.time.Chronology chronology5 = monthDay2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.weeks();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--01-03" + "'", str3, "--01-03");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test14428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14428");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        int int15 = localDate7.getYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        int int21 = localDate18.size();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        int int25 = localDate23.getValue(0);
        boolean boolean26 = localDate7.equals((java.lang.Object) int25);
        org.joda.time.LocalDate localDate28 = localDate7.withDayOfYear((int) (short) 100);
        int int29 = localDate28.getYearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfWeek();
        org.joda.time.LocalDate localDate31 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate32 = property30.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test14429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14429");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.roll((int) (short) 100, 0);
        int int8 = calendar1.getGreatestMinimum(0);
        calendar1.clear();
        calendar1.clear(0);
        calendar1.set(8, 0, (int) 'a', 2021, 3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(97L);
        java.lang.String str26 = property23.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury(1);
        int int36 = property23.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.withWeekyear((int) 'u');
        boolean boolean39 = calendar1.before((java.lang.Object) dateTime38);
        long long40 = dateTime38.getMillis();
        org.joda.time.Chronology chronology41 = dateTime38.getChronology();
        org.joda.time.DateTime.Property property42 = dateTime38.secondOfMinute();
        org.joda.time.DurationField durationField43 = property42.getLeapDurationField();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=97,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2021,MINUTE=3,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[hourOfDay]" + "'", str26, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-58474483200001L) + "'", long40 == (-58474483200001L));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNull(durationField43);
    }

    @Test
    public void test14430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14430");
        java.util.Date date5 = new java.util.Date(816, 10, (-1), (-46800000), 32);
        date5.setTime(364L);
        date5.setSeconds((-26569155));
        date5.setHours(0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtStartOfDay(dateTimeZone16);
        java.util.Date date19 = dateTime18.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusDays((int) '#');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime22.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime22.minusMinutes(52);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        long long40 = dateTimeZone36.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime41 = dateTime22.withZone(dateTimeZone36);
        int int42 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime22);
        java.util.Date date43 = dateTime18.toDate();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime48.hourOfDay();
        org.joda.time.DateTime dateTime51 = dateTime48.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime48.minusDays((int) 'u');
        int int54 = dateTime48.getYearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime48.plusMillis(4);
        java.util.Date date57 = dateTime48.toDate();
        java.lang.String str58 = date57.toGMTString();
        int int59 = date57.getMinutes();
        boolean boolean60 = date43.before(date57);
        date57.setTime(32762L);
        int int63 = date57.getMonth();
        int int64 = date57.getDay();
        boolean boolean65 = date5.before(date57);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Feb 27 11:40:45 UTC 1969");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-187199990L) + "'", long40 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2 Jan 52 23:59:59 GMT" + "'", str58, "2 Jan 52 23:59:59 GMT");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test14431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14431");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        int int5 = localDate4.getDayOfMonth();
        int[] intArray6 = localDate4.getValues();
        int[] intArray7 = localDate4.getValues();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate4.minus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDate9.getFieldType((-17269665));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -17269665");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2035, 2, 13]");
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test14432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14432");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate3 = localDate0.withPeriodAdded(readablePeriod1, (int) (byte) 0);
        org.joda.time.LocalDate localDate5 = localDate0.withWeekyear(0);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 13 00:00:00 UTC 1");
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14433");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguage("gregory");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setLanguageTag("allemand");
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology21 = chronology17.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.adjustOffset((-62180539199983L), true);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withYearOfEra((int) '4');
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime29.toMutableDateTime(dateTimeZone33);
        int int36 = dateTimeZone33.getStandardOffset((long) (short) 0);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 10, dateTimeZone33);
        boolean boolean38 = localDate25.isBefore((org.joda.time.ReadablePartial) localDate37);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str44 = locale41.getExtension('a');
        java.util.Locale.setDefault(category40, locale41);
        java.lang.String str46 = localDate25.toString("--02-13", locale41);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        java.lang.String str53 = durationFieldType52.getName();
        org.joda.time.DateTime dateTime55 = dateTime51.withFieldAdded(durationFieldType52, (int) 'u');
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfDay();
        int int57 = dateTime55.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime55.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.plus(readablePeriod59);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate63 = localDate61.withYearOfEra(52);
        org.joda.time.LocalDate.Property property64 = localDate63.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str69 = locale66.getExtension('a');
        org.joda.time.LocalDate localDate70 = property64.setCopy("3", locale66);
        java.util.Calendar calendar71 = dateTime55.toCalendar(locale66);
        java.lang.String str72 = locale41.getDisplayScript(locale66);
        java.util.Set<java.lang.String> strSet73 = locale41.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder74 = builder5.setLocale(locale41);
        java.util.Locale locale75 = builder5.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62180539199983L) + "'", long24 == (-62180539199983L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187200000 + "'", int36 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "--02-13" + "'", str46, "--02-13");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "days" + "'", str53, "days");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
    }

    @Test
    public void test14434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14434");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate7.toDateTime(localTime13);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime14.minusMonths(61);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronology();
        boolean boolean22 = dateTimeFormatter20.isParser();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        java.lang.String str29 = property28.getAsShortText();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        long long42 = dateTimeField34.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay45 = monthDay43.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay43.minus(readablePeriod46);
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay50 = monthDay48.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField52 = monthDay50.getField((int) (byte) 0);
        java.util.Locale locale56 = new java.util.Locale("", "", "hi!");
        int int57 = dateTimeField52.getMaximumTextLength(locale56);
        java.lang.String str58 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) monthDay43, locale56);
        int int59 = property28.getMaximumTextLength(locale56);
        org.joda.time.DateTimeField dateTimeField60 = property28.getField();
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        int int63 = property28.getMaximumTextLength(locale61);
        boolean boolean64 = locale61.hasExtensions();
        java.lang.String str65 = locale61.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter20.withLocale(locale61);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder67.setExtension('u', "en-US");
        java.util.Locale.Builder builder71 = builder67.clear();
        java.util.Locale locale72 = builder71.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter20.withLocale(locale72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter20.withDefaultYear(820);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = dateTime17.toString(dateTimeFormatter20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3" + "'", str29, "3");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 9L + "'", long42 == 9L);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Feb" + "'", str58, "Feb");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644572629821,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=49,MILLISECOND=821,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test14435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14435");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(100);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.days();
        java.lang.String str11 = durationFieldType10.getName();
        org.joda.time.LocalDate localDate13 = localDate8.withFieldAdded(durationFieldType10, 32770);
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate13.dayOfYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfYear(100);
        org.joda.time.Interval interval21 = localDate20.toInterval();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        java.lang.String str23 = durationFieldType22.getName();
        org.joda.time.LocalDate localDate25 = localDate20.withFieldAdded(durationFieldType22, 32770);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        java.lang.String str27 = property26.getAsText();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.plus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusMillis(2022);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((int) '#');
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = dateTime39.plusWeeks(5);
        org.joda.time.Chronology chronology52 = dateTime39.getChronology();
        org.joda.time.Chronology chronology53 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime54 = dateTime36.withChronology(chronology53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(5907399684280970662L, chronology53);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology53);
        int int57 = dateTime56.getYearOfCentury();
        long long58 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime56);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate61.withDayOfYear(100);
        int int64 = localDate61.size();
        org.joda.time.LocalDate localDate66 = localDate61.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusDays((int) '#');
        int int72 = dateTime69.getWeekyear();
        org.joda.time.DateMidnight dateMidnight73 = dateTime69.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property75 = dateTime69.property(dateTimeFieldType74);
        org.joda.time.LocalDate.Property property76 = localDate66.property(dateTimeFieldType74);
        org.joda.time.DateTime.Property property77 = dateTime56.property(dateTimeFieldType74);
        boolean boolean78 = localDate13.isSupported(dateTimeFieldType74);
        boolean boolean79 = localDate3.isSupported(dateTimeFieldType74);
        org.joda.time.DateTime dateTime80 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate82 = localDate3.withDayOfYear(314);
        int int83 = localDate82.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "days" + "'", str23, "days");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11" + "'", str27, "11");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 89L + "'", long58 == 89L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 314 + "'", int83 == 314);
    }

    @Test
    public void test14436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14436");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        int int7 = property2.getMaximumTextLength(locale3);
        java.lang.String str8 = property2.getAsString();
        java.lang.String str9 = property2.getAsShortText();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        int int11 = property2.getMaximumTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay21 = monthDay19.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = monthDay21.getField((int) (byte) 0);
        java.util.Locale locale27 = new java.util.Locale("", "", "hi!");
        int int28 = dateTimeField23.getMaximumTextLength(locale27);
        long long31 = dateTimeField23.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay32.minus(readablePeriod35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay39 = monthDay37.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField41 = monthDay39.getField((int) (byte) 0);
        java.util.Locale locale45 = new java.util.Locale("", "", "hi!");
        int int46 = dateTimeField41.getMaximumTextLength(locale45);
        java.lang.String str47 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) monthDay32, locale45);
        int int48 = property17.getMaximumTextLength(locale45);
        org.joda.time.DateTimeField dateTimeField49 = property17.getField();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        int int52 = property17.getMaximumTextLength(locale50);
        java.lang.String str53 = locale50.getDisplayVariant();
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayName(locale54);
        java.lang.String str57 = locale50.getDisplayName();
        int int58 = property2.getMaximumTextLength(locale50);
        java.lang.String str59 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9L + "'", long31 == 9L);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Feb" + "'", str47, "Feb");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644572629909,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=49,MILLISECOND=909,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-US" + "'", str55, "en-US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "French" + "'", str56, "French");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fran\347ais" + "'", str57, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
    }

    @Test
    public void test14437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14437");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withWeekyear(14399999);
        org.joda.time.LocalDate localDate19 = localDate14.minusDays(5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test14438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14438");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDate9.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(83968099800000L, chronology20);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays((int) '#');
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime33.plusWeeks(5);
        int int46 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime47 = localDate9.toDateTimeAtMidnight(dateTimeZone29);
        int int48 = localDate9.getDayOfMonth();
        org.joda.time.LocalDate localDate50 = localDate9.withWeekyear(580);
        org.joda.time.LocalDate localDate52 = localDate50.withYearOfCentury((int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 187200000 + "'", int46 == 187200000);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 13 + "'", int48 == 13);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test14439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14439");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(100);
        int int6 = localDate3.size();
        org.joda.time.LocalDate localDate8 = localDate3.plusMonths(6);
        int int10 = localDate8.getValue(0);
        java.lang.String str11 = localDate8.toString();
        org.joda.time.LocalDate localDate13 = localDate8.withWeekyear(1);
        org.joda.time.LocalDate localDate15 = localDate8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(100);
        org.joda.time.DateTime dateTime24 = dateTime22.plusWeeks(3);
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime26 = localDate0.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate28 = localDate0.withYear(0);
        org.joda.time.LocalDate.Property property29 = localDate0.yearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-08-13" + "'", str11, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test14440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14440");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra(52);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        org.joda.time.LocalDate localDate9 = property3.setCopy("3", locale5);
        org.joda.time.DateTimeField dateTimeField10 = property3.getField();
        org.joda.time.LocalDate localDate12 = property3.addWrapFieldToCopy(55);
        org.joda.time.LocalDate localDate13 = property3.withMinimumValue();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        int int19 = localDate16.size();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        int int23 = localDate21.getValue(0);
        java.lang.String str24 = localDate21.toString();
        org.joda.time.LocalDate localDate26 = localDate21.withWeekyear(1);
        org.joda.time.LocalDate localDate28 = localDate21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate28.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime33.withTime(21, 0, 4, 0);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        java.lang.String str40 = property39.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property39.getFieldType();
        boolean boolean42 = localDate13.isSupported(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-08-13" + "'", str24, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test14441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14441");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay0.withPeriodAdded(readablePeriod3, 239);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.plus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L);
        java.lang.String str11 = monthDay10.toString();
        org.joda.time.Chronology chronology12 = monthDay10.getChronology();
        org.joda.time.Chronology chronology13 = monthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType8.getField(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay7.withChronologyRetainFields(chronology13);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--01-03" + "'", str11, "--01-03");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test14442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14442");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 239);
        int int2 = monthDay1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = monthDay1.toLocalDate(40);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test14443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14443");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 0);
        java.util.Locale locale8 = new java.util.Locale("", "", "hi!");
        int int9 = dateTimeField4.getMaximumTextLength(locale8);
        long long12 = dateTimeField4.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay15 = monthDay13.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay13.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField((int) (byte) 0);
        java.util.Locale locale26 = new java.util.Locale("", "", "hi!");
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        java.lang.String str28 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) monthDay13, locale26);
        int[] intArray29 = monthDay13.getValues();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay13.withPeriodAdded(readablePeriod30, 59);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology45 = chronology41.withZone(dateTimeZone44);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.now(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfDay();
        org.joda.time.MonthDay monthDay50 = monthDay32.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeField dateTimeField51 = chronology41.era();
        boolean boolean53 = dateTimeField51.isLeap((long) 17);
        long long55 = dateTimeField51.roundHalfEven((long) 24);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField51.getType();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime69 = dateTime66.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology74 = chronology70.withZone(dateTimeZone73);
        org.joda.time.MonthDay monthDay75 = new org.joda.time.MonthDay((java.lang.Object) dateTime61, chronology70);
        java.lang.String str77 = monthDay75.toString("35");
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay80 = monthDay75.withPeriodAdded(readablePeriod78, 0);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay75.plus(readablePeriod81);
        int int83 = monthDay82.getDayOfMonth();
        org.joda.time.Chronology chronology84 = monthDay82.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType56.getField(chronology84);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 13]");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-62135784000000L) + "'", long55 == (-62135784000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "35" + "'", str77, "35");
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 29 + "'", int83 == 29);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test14444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14444");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 364);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 92);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime26 = dateTime21.withCenturyOfEra(0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfYear(100);
        int int32 = localDate29.size();
        org.joda.time.LocalDate localDate34 = localDate29.plusMonths(6);
        int int36 = localDate34.getValue(0);
        java.lang.String str37 = localDate34.toString();
        org.joda.time.LocalDate localDate39 = localDate34.withWeekyear(1);
        org.joda.time.LocalDate localDate41 = localDate34.withDayOfYear((int) (byte) 1);
        int int42 = localDate34.getYear();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        long long49 = dateTimeZone44.convertLocalToUTC((long) 4, false, (long) 5);
        org.joda.time.DateTime dateTime50 = localDate34.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime51 = dateTime21.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter13.withZone(dateTimeZone44);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone44);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-08-13" + "'", str37, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-187199996L) + "'", long49 == (-187199996L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(localDate54);
    }

    @Test
    public void test14445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14445");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (byte) 0);
        java.util.Locale locale20 = new java.util.Locale("", "", "hi!");
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        long long24 = dateTimeField16.add((long) 9, (long) (short) 0);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay25.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay32 = monthDay30.minusDays((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField34 = monthDay32.getField((int) (byte) 0);
        java.util.Locale locale38 = new java.util.Locale("", "", "hi!");
        int int39 = dateTimeField34.getMaximumTextLength(locale38);
        java.lang.String str40 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) monthDay25, locale38);
        int int41 = property10.getMaximumTextLength(locale38);
        org.joda.time.DateTimeField dateTimeField42 = property10.getField();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        int int45 = property10.getMaximumTextLength(locale43);
        boolean boolean46 = locale43.hasExtensions();
        java.lang.String str47 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter2.getZone();
        boolean boolean50 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withZone(dateTimeZone53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology57 = dateTimeFormatter56.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter56.withDefaultYear(8640000);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9L + "'", long24 == 9L);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Feb" + "'", str40, "Feb");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572630186,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=50,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test14446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14446");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate.Property property11 = localDate7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = dateTime13.toLocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate18 = localDate14.withFieldAdded(durationFieldType16, 11);
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate14.withDayOfWeek(640);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 640 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14447");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 719571);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = monthDay1.getFieldType(582);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 582");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14448");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(0);
        int int11 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology24 = chronology20.withZone(dateTimeZone23);
        java.lang.String str25 = chronology20.toString();
        boolean boolean26 = dateTime4.equals((java.lang.Object) str25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar28 = dateTime4.toCalendar(locale27);
        org.joda.time.DateTime dateTime30 = dateTime4.plusSeconds(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter33.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays((int) '#');
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime37.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = dateTime37.plusWeeks(5);
        org.joda.time.Chronology chronology50 = dateTime37.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime30.toDateTime(chronology50);
        int int53 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime.Property property54 = dateTime30.era();
        java.lang.String str55 = property54.getAsText();
        org.joda.time.DateTime dateTime56 = property54.withMinimumValue();
        org.joda.time.DateTime dateTime58 = dateTime56.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime60 = dateTime56.withDayOfYear(311);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtStartOfDay(dateTimeZone65);
        java.util.Date date68 = dateTime67.toDate();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusDays((int) '#');
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(dateTimeZone75);
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = localDate76.toDateTimeAtStartOfDay(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime71.toDateTime(dateTimeZone78);
        org.joda.time.DateTime dateTime83 = dateTime71.minusMinutes(52);
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(dateTimeZone85);
        long long89 = dateTimeZone85.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime90 = dateTime71.withZone(dateTimeZone85);
        int int91 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.DateTime dateTime93 = dateTime71.plus(readableDuration92);
        org.joda.time.DateTime dateTime95 = dateTime71.withWeekyear((int) (short) 0);
        org.joda.time.DateTime dateTime97 = dateTime95.withYear(1051);
        boolean boolean98 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 239 + "'", int11 == 239);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+52:00]" + "'", str25, "ISOChronology[+52:00]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-60526224000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ap. J.-C." + "'", str55, "ap. J.-C.");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Feb 10 20:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-187199990L) + "'", long89 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test14449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14449");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.MonthDay monthDay4 = monthDay1.plusMonths((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.MonthDay monthDay7 = monthDay1.withFieldAdded(durationFieldType5, (-1));
        org.joda.time.MonthDay monthDay9 = monthDay1.withDayOfMonth(7);
        java.lang.String str10 = monthDay1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--01-03" + "'", str10, "--01-03");
    }

    @Test
    public void test14450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14450");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.now(chronology4);
        org.joda.time.Chronology chronology7 = monthDay6.getChronology();
        org.joda.time.Chronology chronology8 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test14451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14451");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(11);
        long long10 = dateTimeZone6.convertLocalToUTC((-187167231L), true, (long) 70);
        org.joda.time.DateTime dateTime11 = dateTime2.toDateTime(dateTimeZone6);
        int int12 = dateTime2.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-187167242L) + "'", long10 == (-187167242L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
    }

    @Test
    public void test14452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14452");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime13 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime23 = dateTime18.withDurationAdded(1L, 52);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear(52);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, (int) 'a');
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        int int30 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property31 = dateTime7.dayOfMonth();
        int int32 = dateTime7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime37.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime40.withMinuteOfHour(8);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfDay();
        org.joda.time.DateTime dateTime46 = property44.addWrapFieldToCopy(48949);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTimeISO();
        int int48 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = dateTime7.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test14453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime8.year();
        boolean boolean11 = property10.isLeap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test14454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14454");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone4);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(100);
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfMonth();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = property8.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int13 = localDate11.get(dateTimeFieldType12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.LocalDate.Property property20 = localDate16.era();
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(60, 7200000, (-26569155), chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7200000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test14455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14455");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        int int9 = localDate7.getValue(0);
        java.lang.String str10 = localDate7.toString();
        org.joda.time.LocalDate localDate12 = localDate7.withWeekyear(1);
        org.joda.time.LocalDate localDate14 = localDate7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime19.withTime(21, 0, 4, 0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime19.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.toMutableDateTime();
        int int27 = mutableDateTime25.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-08-13" + "'", str10, "2022-08-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
    }

    @Test
    public void test14456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14456");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime4.withFieldAdded(durationFieldType5, (int) 'u');
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime8.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.plus(readablePeriod12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra(52);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str22 = locale19.getExtension('a');
        org.joda.time.LocalDate localDate23 = property17.setCopy("3", locale19);
        java.util.Calendar calendar24 = dateTime8.toCalendar(locale19);
        org.joda.time.DateTime dateTime26 = dateTime8.minusMillis(70);
        boolean boolean27 = dateTime8.isEqualNow();
        org.joda.time.DateTime.Property property28 = dateTime8.weekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "days" + "'", str6, "days");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 13 + "'", int10 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=7084799999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=82,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test14457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14457");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(8);
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(13);
        org.joda.time.DateTime dateTime13 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime7.withMillis(26L);
        org.joda.time.DateTime.Property property16 = dateTime7.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) '#');
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime19.plusWeeks(5);
        int int32 = dateTime19.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology46 = chronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology42.weekyearOfCentury();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(83968099800000L, chronology42);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusDays((int) '#');
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(dateTimeZone59);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtStartOfDay(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime55.toDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = dateTime55.plusWeeks(5);
        int int68 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime19.toMutableDateTime(dateTimeZone51);
        long long70 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.DateTime dateTime72 = property16.addToCopy(44);
        org.joda.time.DateTimeField dateTimeField73 = property16.getField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 187200000 + "'", int68 == 187200000);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1918L) + "'", long70 == (-1918L));
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test14458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14458");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14459");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        int int14 = localDate4.getWeekOfWeekyear();
        java.lang.String str15 = localDate4.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 14 + "'", int14 == 14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-04-10" + "'", str15, "2022-04-10");
    }

    @Test
    public void test14460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14460");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.plus(readablePeriod7);
        int int9 = dateTime8.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
    }

    @Test
    public void test14461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14461");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = monthDay0.minusDays((int) (short) 10);
        java.lang.String str4 = monthDay0.toString("23");
        java.lang.String str5 = monthDay0.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology18 = chronology14.withZone(dateTimeZone17);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology14.millis();
        org.joda.time.MonthDay monthDay22 = monthDay0.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay.Property property23 = monthDay0.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23" + "'", str4, "23");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--02-13" + "'", str5, "--02-13");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14462");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfCentury((int) '#');
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears((int) '4');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = dateTime16.toString("--02-01", locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.lang.String str21 = property5.getAsShortText(locale18);
        org.joda.time.Interval interval22 = property5.toInterval();
        org.joda.time.LocalDate localDate24 = property5.setCopy(21);
        java.lang.String str25 = property5.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--02-01" + "'", str19, "--02-01");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7" + "'", str21, "7");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7" + "'", str25, "7");
    }

    @Test
    public void test14463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14463");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay4 = property2.addToCopy((int) ' ');
        int int5 = property2.get();
        java.lang.String str6 = property2.toString();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.setLenient(true);
        calendar8.setMinimalDaysInFirstWeek(1970);
        int int14 = calendar8.getGreatestMinimum(10);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.fromCalendarFields(calendar8);
        int int17 = calendar8.getGreatestMinimum(3);
        calendar8.set(187200000, (int) 'u', 1439, 1439, 70, 1970);
        long long25 = calendar8.getTimeInMillis();
        int int26 = calendar8.getWeeksInWeekYear();
        boolean boolean27 = property2.equals((java.lang.Object) calendar8);
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale28.getISO3Language();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay((long) ' ');
        org.joda.time.MonthDay.Property property33 = monthDay32.monthOfYear();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        int int35 = property33.getMaximumShortTextLength(locale34);
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = property33.getAsShortText(locale36);
        java.lang.String str38 = locale28.getDisplayCountry(locale36);
        java.util.Locale.setDefault(locale28);
        java.lang.String str40 = property2.getAsText(locale28);
        java.util.Locale.setDefault(locale28);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=5907399684280970723,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=187200013,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=42,SECOND=50,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5907399684280970723L + "'", long25 == 5907399684280970723L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "en" + "'", str29, "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Jan" + "'", str37, "Jan");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "United States" + "'", str38, "United States");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "January" + "'", str40, "January");
    }

    @Test
    public void test14464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14464");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int9 = calendar1.getWeekYear();
        calendar1.setMinimalDaysInFirstWeek(8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        int int14 = monthDay13.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572630754,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=8,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=50,MILLISECOND=754,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test14465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14465");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        int int4 = date3.getHours();
        int int5 = date3.getMinutes();
        java.util.Date date9 = new java.util.Date(0, 0, (int) '4');
        date9.setDate(12);
        date9.setTime(1L);
        boolean boolean14 = date3.after(date9);
        int int15 = date9.getMinutes();
        java.util.Date date19 = new java.util.Date(0, 0, (int) '4');
        date19.setDate(12);
        date19.setHours(2922789);
        date19.setTime(9L);
        int int26 = date19.getTimezoneOffset();
        boolean boolean27 = date9.after(date19);
        date9.setMonth(1969);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 01 00:00:00 UTC 2134");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14466");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.lang.String str3 = locale1.getDisplayVariant();
        java.lang.String str4 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CAN" + "'", str4, "CAN");
    }

    @Test
    public void test14467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14467");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        boolean boolean15 = date3.before(date13);
        int int16 = date3.getDay();
        date3.setMinutes(364);
        java.time.Instant instant19 = date3.toInstant();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 06:04:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:00:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test14468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14468");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) '#');
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime6.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime18 = dateTime6.plusWeeks(5);
        org.joda.time.Chronology chronology19 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter20.getZone();
        java.lang.Integer int23 = dateTimeFormatter20.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withZoneUTC();
        java.lang.Appendable appendable25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays((int) '#');
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime28.minusMinutes(52);
        org.joda.time.DateTime.Property property41 = dateTime28.secondOfDay();
        org.joda.time.DateTime dateTime43 = property41.addToCopy((-349259965L));
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(appendable25, (org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test14469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14469");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(14);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra(52);
        org.joda.time.LocalDate.Property property12 = localDate11.weekOfWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate11.centuryOfEra();
        int int14 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate11.withDayOfWeek((-1970));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test14470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14470");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(100);
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfMonth();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = property15.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = property15.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.LocalDate localDate21 = property15.roundHalfFloorCopy();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.withDayOfYear(100);
        org.joda.time.Interval interval27 = localDate26.toInterval();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        int int33 = localDate26.get(dateTimeFieldType32);
        boolean boolean34 = localDate21.isSupported(dateTimeFieldType32);
        boolean boolean35 = dateTime4.isSupported(dateTimeFieldType32);
        int int36 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime39.plusMillis(2022);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime44.plusMonths((int) ' ');
        boolean boolean48 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property49 = dateTime47.centuryOfEra();
        org.joda.time.DateTime dateTime50 = property49.getDateTime();
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test14471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14471");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime2.centuryOfEra();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays((int) '#');
        int int20 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.plus(readablePeriod23);
        int int25 = property13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        int int28 = dateTime24.getMinuteOfDay();
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale29.getDisplayScript(locale30);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale30);
        java.util.Calendar calendar34 = dateTime24.toCalendar(locale30);
        boolean boolean35 = calendar34.isWeekDateSupported();
        java.lang.Object obj36 = calendar34.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 239 + "'", int28 == 239);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572630940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=50,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14472");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        org.joda.time.LocalDate.Property property10 = localDate2.weekyear();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        int[] intArray12 = localDate11.getValues();
        int int13 = localDate11.getDayOfWeek();
        int int14 = localDate11.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2023, 1, 2]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2023 + "'", int14 == 2023);
    }

    @Test
    public void test14473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14473");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 4, dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(14432);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test14474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14474");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        java.time.Instant instant8 = calendar1.toInstant();
        int int10 = calendar1.getActualMaximum(7);
        int int12 = calendar1.getGreatestMinimum(15);
        java.time.Instant instant13 = calendar1.toInstant();
        java.lang.String str14 = calendar1.getCalendarType();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        calendar16.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar16.set(0, (int) (byte) 10, (int) (short) 10);
        int int27 = calendar16.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfYear(100);
        int int33 = localDate30.size();
        org.joda.time.LocalDate localDate35 = localDate30.plusMonths(6);
        java.util.Date date36 = localDate35.toDate();
        calendar16.setTime(date36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays((int) '#');
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtStartOfDay(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime40.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = dateTime40.plusWeeks(5);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime52);
        int int54 = dateTime53.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusDays((int) '#');
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(dateTimeZone61);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate62.toDateTimeAtStartOfDay(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime57.toDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = dateTime57.plusWeeks(5);
        org.joda.time.Chronology chronology70 = dateTime57.getChronology();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime72 = dateTime57.minus(readablePeriod71);
        int int73 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = calendar16.after((java.lang.Object) int73);
        java.util.Date date75 = calendar16.getTime();
        java.util.TimeZone timeZone76 = calendar16.getTimeZone();
        calendar1.setTimeZone(timeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572631010,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=51,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-46800000) + "'", int12 == (-46800000));
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1660348800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 70 + "'", int54 == 70);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 13 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test14475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14475");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate8.minusDays(51);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusDays((int) '#');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime13.toDateTime(dateTimeZone20);
        java.lang.Object obj24 = null;
        boolean boolean25 = dateTimeZone20.equals(obj24);
        long long28 = dateTimeZone20.convertLocalToUTC((long) (-26569157), false);
        boolean boolean29 = localDate8.equals((java.lang.Object) dateTimeZone20);
        boolean boolean31 = dateTimeZone20.isStandardOffset(1280L);
        boolean boolean33 = dateTimeZone20.isStandardOffset(1644572273091L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-213769157L) + "'", long28 == (-213769157L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test14476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14476");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(4);
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(364L, 2922789);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(14400004);
        org.joda.time.DateTime dateTime23 = dateTime19.minusMonths((-187198043));
        java.lang.String str24 = dateTime23.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "15601802-12-15T10:39:35.195+52:00" + "'", str24, "15601802-12-15T10:39:35.195+52:00");
    }

    @Test
    public void test14477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14477");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(6);
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime(localTime8);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime12 = dateTime9.withYear(364);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime9.plusYears(14);
        org.joda.time.DateTime dateTime17 = dateTime9.withMillisOfDay(364);
        org.joda.time.DateTime.Property property18 = dateTime9.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14478");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.LocalDate localDate7 = localDate2.plusMonths(3);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getName();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withDayOfYear(100);
        org.joda.time.LocalDate.Property property16 = localDate13.dayOfMonth();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.LocalDate localDate19 = property16.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        boolean boolean22 = property8.equals((java.lang.Object) property21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yearOfEra" + "'", str9, "yearOfEra");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test14479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14479");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = localDate4.get(dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = localDate4.minusDays(0);
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfCentury();
        org.joda.time.LocalDate localDate15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        org.joda.time.LocalDate localDate17 = property16.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14480");
        java.util.Date date3 = new java.util.Date(0, 0, (int) '4');
        date3.setDate(12);
        date3.setHours(2922789);
        date3.setTime(9L);
        java.util.Date date13 = new java.util.Date(0, 0, (int) '4');
        int int14 = date13.getHours();
        int int15 = date13.getDate();
        boolean boolean16 = date3.after(date13);
        int int17 = date13.getDay();
        java.time.Instant instant18 = date13.toInstant();
        java.time.Instant instant19 = date13.toInstant();
        int int20 = date13.getSeconds();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        int int26 = localDate23.size();
        org.joda.time.LocalDate localDate28 = localDate23.plusMonths(6);
        int int30 = localDate28.getValue(0);
        java.lang.String str31 = localDate28.toString();
        org.joda.time.LocalDate.Property property32 = localDate28.weekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate28.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate35 = dateTime34.toLocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate39 = localDate35.withFieldAdded(durationFieldType37, 11);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        java.lang.String str46 = property45.getAsShortText();
        org.joda.time.DurationField durationField47 = property45.getDurationField();
        org.joda.time.DateTime dateTime49 = property45.addToCopy((long) 239);
        org.joda.time.DateTime dateTime50 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime52 = property45.addToCopy((long) 2730);
        long long53 = property45.remainder();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime58.withMillisOfDay(8);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = localDate66.withDayOfYear(100);
        org.joda.time.LocalDate.Property property69 = localDate66.dayOfMonth();
        org.joda.time.LocalDate localDate70 = property69.getLocalDate();
        org.joda.time.LocalDate localDate72 = property69.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate73 = property69.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property69.getFieldType();
        org.joda.time.LocalDate localDate75 = property69.roundHalfFloorCopy();
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(dateTimeZone77);
        org.joda.time.LocalDate localDate80 = localDate78.withDayOfYear(100);
        org.joda.time.Interval interval81 = localDate80.toInterval();
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = localDate80.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.era();
        int int87 = localDate80.get(dateTimeFieldType86);
        boolean boolean88 = localDate75.isSupported(dateTimeFieldType86);
        boolean boolean89 = dateTime58.isSupported(dateTimeFieldType86);
        int int90 = property45.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime91 = localDate35.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        java.util.Date date92 = dateTime58.toDate();
        boolean boolean93 = date13.before(date92);
        java.lang.String str94 = date13.toLocaleString();
        date13.setMinutes((int) (short) 1);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 21 00:01:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-08-13" + "'", str31, "2022-08-13");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "3" + "'", str46, "3");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3599999L + "'", long53 == 3599999L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Jan 02 23:59:59 UTC 52");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Feb 21, 1900 12:00:00 AM" + "'", str94, "Feb 21, 1900 12:00:00 AM");
    }

    @Test
    public void test14481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14481");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setTimeInMillis((long) 32769);
        calendar1.setMinimalDaysInFirstWeek(2022);
        int int9 = calendar1.getActualMaximum(1);
        calendar1.roll((int) (short) 1, 2730);
        int int14 = calendar1.getActualMaximum(4);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add(19005, 2045);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2022,ERA=1,YEAR=4700,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=32,MILLISECOND=769,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278994 + "'", int9 == 292278994);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test14482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14482");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDate localDate11 = property5.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.year();
        org.joda.time.LocalDate.Property property13 = localDate11.weekyear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.withDayOfYear(100);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.LocalDate.Property property20 = localDate16.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.LocalDate localDate23 = localDate11.withField(dateTimeFieldType21, 0);
        int int24 = localDate23.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test14483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14483");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime2.getZone();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime2.minus(readablePeriod23);
        long long25 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime2.withWeekyear(141);
        org.joda.time.DateTime dateTime29 = dateTime27.minus((long) (-3600000));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14484");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.MonthDay monthDay11 = monthDay1.withChronologyRetainFields(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((long) (byte) 100);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = locale17.getCountry();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale17.getDisplayVariant(locale20);
        java.lang.String str22 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) monthDay15, 11, locale20);
        org.joda.time.Chronology chronology23 = monthDay15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572631316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=51,MILLISECOND=316,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14485");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay1.minus(readablePeriod4);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.lang.String str7 = property6.toString();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumShortTextLength(locale8);
        org.joda.time.MonthDay monthDay10 = property6.getMonthDay();
        java.lang.String str11 = property6.toString();
        int int12 = property6.getMaximumValueOverall();
        int int13 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[dayOfMonth]" + "'", str11, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test14486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14486");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime2.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime2.minusMinutes(52);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) (byte) 10, true);
        org.joda.time.DateTime dateTime21 = dateTime2.withZone(dateTimeZone16);
        long long24 = dateTimeZone16.adjustOffset((long) 364, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.minus(readableDuration29);
        int int31 = dateTime26.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-187199990L) + "'", long20 == (-187199990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 364L + "'", long24 == 364L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 49431358 + "'", int28 == 49431358);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
    }

    @Test
    public void test14487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14487");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.weekOfWeekyear();
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(5907399684280970744L, chronology9);
        org.joda.time.MonthDay.Property property20 = monthDay19.dayOfMonth();
        java.lang.String str21 = property20.getAsString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
    }

    @Test
    public void test14488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14488");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate8 = property5.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property5.addWrapFieldToCopy(3);
        org.joda.time.DurationField durationField12 = property5.getDurationField();
        org.joda.time.LocalDate localDate13 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property5.getFieldType();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra(52);
        org.joda.time.LocalDate.Property property18 = localDate17.weekOfWeekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int31 = dateTime24.get(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate17.property(dateTimeFieldType30);
        org.joda.time.LocalDate localDate34 = localDate17.withWeekyear(365);
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths(43199999);
        int int37 = property5.compareTo((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.LocalDate localDate39 = localDate36.minusWeeks(101);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test14489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14489");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(true);
        java.util.Date date9 = new java.util.Date(24, 54, 365, 14399, 187200013, 45);
        java.time.Instant instant10 = date9.toInstant();
        int int11 = date9.getDay();
        java.util.Calendar.Builder builder12 = builder0.setInstant(date9);
        int int13 = date9.getMonth();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Jan 23 23:13:45 UTC 2287");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14490");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        java.lang.String str7 = durationFieldType6.getName();
        org.joda.time.LocalDate localDate9 = localDate4.withFieldAdded(durationFieldType6, 32770);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate4.withYearOfEra(32769);
        org.joda.time.LocalDate localDate15 = localDate4.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate17 = localDate4.plusWeeks(358);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14491");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set((int) (short) 10, 12, (int) (short) 0, (int) '#', 13);
        calendar1.clear();
        java.lang.String str9 = calendar1.getCalendarType();
        int int10 = calendar1.getWeekYear();
        calendar1.setMinimalDaysInFirstWeek(3659017);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=3659017,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test14492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14492");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar1.setMinimalDaysInFirstWeek(2730);
        calendar1.clear();
        calendar1.set(15, 0, (int) (byte) 1, 5, 2021, (int) ' ');
        long long16 = calendar1.getTimeInMillis();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        java.lang.String str18 = calendar1.getCalendarType();
        java.time.Instant instant19 = calendar1.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-61693867108000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=2730,ERA=1,YEAR=15,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=41,SECOND=32,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61693867108000L) + "'", long16 == (-61693867108000L));
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gregory" + "'", str18, "gregory");
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test14493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14493");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Nov", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap9);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(languageRangeList10);
    }

    @Test
    public void test14494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14494");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setLenient(true);
        calendar1.setMinimalDaysInFirstWeek(1970);
        int int7 = calendar1.getGreatestMinimum(10);
        calendar1.set(187200000, 17, 0);
        int int13 = calendar1.getLeastMaximum(0);
        int int14 = calendar1.getWeeksInWeekYear();
        java.time.Instant instant15 = calendar1.toInstant();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=5907399291798231576,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=187200001,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=151,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=51,MILLISECOND=576,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test14495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14495");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear(100);
        int int5 = localDate2.size();
        org.joda.time.Chronology chronology6 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.halfdayOfDay();
        boolean boolean8 = dateTimeField7.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test14496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14496");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusDays((int) '#');
        int int5 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withYearOfEra((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int21 = dateTime14.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = dateTime14.minusYears(24);
        int int24 = dateTime14.getMillisOfDay();
        boolean boolean25 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property26 = dateTime14.dayOfMonth();
        java.util.Date date27 = dateTime14.toDate();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14399999 + "'", int24 == 14399999);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Jan 02 23:59:59 UTC 52");
    }

    @Test
    public void test14497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14497");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology14 = chronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(83968099800000L, chronology10);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology10.eras();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((-60526224000001L), chronology10);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.halfdayOfDay();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.withDayOfYear(100);
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfMonth();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.LocalDate localDate29 = property26.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDate localDate30 = property26.withMaximumValue();
        int int31 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.LocalDate localDate33 = localDate30.plusWeeks(4630);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = localDate33.toString("f\351vr.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test14498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14498");
        java.util.Locale locale2 = new java.util.Locale("minuteOfDay", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=117,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale2.toString(), "minuteofday_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=117,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=3,MONTH=16,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=117,MINUTE=-1,SECOND=1439,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14499");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) (-1L), dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.withSecondOfMinute((int) (byte) 0);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 1);
        org.joda.time.Chronology chronology13 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField21 = chronology9.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField21.add((long) (short) 1, (-60526224000001L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -60526224000001 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14500");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(0L);
        java.lang.String str2 = monthDay1.toString();
        org.joda.time.Chronology chronology3 = monthDay1.getChronology();
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.year();
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.millisOfDay();
        java.util.Locale locale17 = new java.util.Locale("years", "italien", "Cina");
        java.lang.String str18 = dateTimeField12.getAsShortText(80400000, locale17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--01-03" + "'", str2, "--01-03");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale17.toString(), "years_ITALIEN_Cina");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "80400000" + "'", str18, "80400000");
    }
}
